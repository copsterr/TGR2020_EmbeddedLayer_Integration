
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000004  0800919c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000028  080091c0  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  200000c4  08009259  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000010c  0800929e  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a2  20000120  080092af  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000208  200001c4  08009351  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200003cc  08009351  000203cc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c2  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00032897  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00005cfd  00000000  00000000  00052a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002310  00000000  00000000  00058788  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002068  00000000  00000000  0005aa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002b807  00000000  00000000  0005cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000205aa  00000000  00000000  00088307  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f1a5b  00000000  00000000  000a88b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  0019a30c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008fa8  00000000  00000000  0019a388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001c4 	.word	0x200001c4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009020 	.word	0x08009020

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c8 	.word	0x200001c8
 800017c:	08009020 	.word	0x08009020

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200003a0 	.word	0x200003a0

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f008 fb2a 	bl	8008b38 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f007 fa4d 	bl	800798c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f008 fc3a 	bl	8008d70 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f007 f909 	bl	8007720 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f007 fb3f 	bl	8007ba8 <TL_MM_Init>

  TL_Enable();
 800052a:	f007 fa29 	bl	8007980 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	08007759 	.word	0x08007759
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f007 fb89 	bl	8007c88 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f007 fcbd 	bl	8007ef4 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f008 faed 	bl	8008b5c <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f008 fb07 	bl	8008bb8 <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f008 fbf7 	bl	8008db0 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f008 fc52 	bl	8008e7c <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f008 fc65 	bl	8008eb8 <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000028 	.word	0x20000028

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200000b8 	.word	0x200000b8
 80007cc:	20000028 	.word	0x20000028

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000b8 	.word	0x200000b8
 8000918:	200000b9 	.word	0x200000b9
 800091c:	20000028 	.word	0x20000028
 8000920:	200000bc 	.word	0x200000bc

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200000b8 	.word	0x200000b8
 8000a20:	200000b9 	.word	0x200000b9
 8000a24:	20000028 	.word	0x20000028
 8000a28:	200000bc 	.word	0x200000bc

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000bc 	.word	0x200000bc
 8000aa0:	200001e6 	.word	0x200001e6
 8000aa4:	200001e5 	.word	0x200001e5
 8000aa8:	200001e4 	.word	0x200001e4

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f001 fa39 	bl	8001f3e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f001 fa21 	bl	8001f5a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000bc 	.word	0x200000bc
 8000b58:	200001e4 	.word	0x200001e4
 8000b5c:	200001e0 	.word	0x200001e0
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	200001e0 	.word	0x200001e0
 8000c94:	200000b8 	.word	0x200000b8
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	200000c0 	.word	0x200000c0
 8000ca0:	200001e8 	.word	0x200001e8

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001e0 	.word	0x200001e0
 8000e34:	200000b8 	.word	0x200000b8
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	200000c0 	.word	0x200000c0
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 ffe9 	bl	8001f5a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 ffc5 	bl	8001f3e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 ff79 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 ff90 	bl	8001eee <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001e0 	.word	0x200001e0
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	200001e4 	.word	0x200001e4
 8000fe4:	200001e5 	.word	0x200001e5
 8000fe8:	200001e6 	.word	0x200001e6
 8000fec:	200001e8 	.word	0x200001e8
 8000ff0:	200000c0 	.word	0x200000c0
 8000ff4:	200000bc 	.word	0x200000bc
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	200000b8 	.word	0x200000b8
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000028 	.word	0x20000028

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f000 feff 	bl	8001f0a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 fed1 	bl	8001f5a <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 fe8a 	bl	8001eee <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001e0 	.word	0x200001e0
 80011f0:	20000028 	.word	0x20000028
 80011f4:	200000b8 	.word	0x200000b8
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	200000b9 	.word	0x200000b9

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f000 fe64 	bl	8001f0a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 fe00 	bl	8001eee <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000028 	.word	0x20000028
 8001304:	200001e0 	.word	0x200001e0
 8001308:	200000b8 	.word	0x200000b8
 800130c:	200000b9 	.word	0x200000b9

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	20000310 	.word	0x20000310

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f000 fbbb 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f813 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f000 f90d 	bl	80015ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013d2:	f000 f8bf 	bl	8001554 <MX_USART1_UART_Init>
  MX_RF_Init();
 80013d6:	f000 f88d 	bl	80014f4 <MX_RF_Init>
  MX_RTC_Init();
 80013da:	f000 f893 	bl	8001504 <MX_RTC_Init>
  MX_MEMS_Init();
 80013de:	f004 fcf3 	bl	8005dc8 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e2:	f7ff f869 	bl	80004b8 <APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f007 fbe5 	bl	8008bb8 <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80013ee:	f004 fcf2 	bl	8005dd6 <MX_MEMS_Process>
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013f2:	e7f8      	b.n	80013e6 <main+0x24>

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ae      	sub	sp, #184	; 0xb8
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013fe:	2248      	movs	r2, #72	; 0x48
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f007 fe03 	bl	800900e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2250      	movs	r2, #80	; 0x50
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fdf3 	bl	800900e <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff9b 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <SystemClock_Config+0xfc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <SystemClock_Config+0xfc>)
 8001438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <SystemClock_Config+0xfc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800144a:	2307      	movs	r3, #7
 800144c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001452:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fb58 	bl	8002b24 <HAL_RCC_OscConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800147a:	f000 f91b 	bl	80016b4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800147e:	236f      	movs	r3, #111	; 0x6f
 8001480:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001482:	2302      	movs	r3, #2
 8001484:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800149a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fe9d 	bl	80031e0 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80014ac:	f000 f902 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80014b0:	f643 0305 	movw	r3, #14341	; 0x3805
 80014b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80014c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fabd 	bl	8003a56 <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80014e2:	f000 f8e7 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014e6:	bf00      	nop
 80014e8:	37b8      	adds	r7, #184	; 0xb8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	58000400 	.word	0x58000400

080014f4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_RTC_Init+0x48>)
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <MX_RTC_Init+0x4c>)
 800150c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_RTC_Init+0x48>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_RTC_Init+0x48>)
 8001516:	220f      	movs	r2, #15
 8001518:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_RTC_Init+0x48>)
 800151c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001520:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001522:	480a      	ldr	r0, [pc, #40]	; (800154c <MX_RTC_Init+0x48>)
 8001524:	f002 fd1d 	bl	8003f62 <HAL_RTC_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800152e:	f000 f8c1 	bl	80016b4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_RTC_Init+0x48>)
 8001538:	f002 fe02 	bl	8004140 <HAL_RTCEx_SetWakeUpTimer_IT>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001542:	f000 f8b7 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003a0 	.word	0x200003a0
 8001550:	40002800 	.word	0x40002800

08001554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <MX_USART1_UART_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 800159e:	f002 fedb 	bl	8004358 <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015a8:	f000 f884 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 80015b0:	f004 fb26 	bl	8005c00 <HAL_UARTEx_SetTxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f87b 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 80015c2:	f004 fb5b 	bl	8005c7c <HAL_UARTEx_SetRxFifoThreshold>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f000 f872 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_USART1_UART_Init+0x90>)
 80015d2:	f004 fadc 	bl	8005b8e <HAL_UARTEx_DisableFifoMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f86a 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000314 	.word	0x20000314
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	2004      	movs	r0, #4
 8001602:	f7ff fec5 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2002      	movs	r0, #2
 8001608:	f7ff fec2 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff febf 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2008      	movs	r0, #8
 8001614:	f7ff febc 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2123      	movs	r1, #35	; 0x23
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_GPIO_Init+0xb8>)
 800161e:	f000 fe79 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 8001622:	2310      	movs	r3, #16
 8001624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_GPIO_Init+0xbc>)
 8001628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	481e      	ldr	r0, [pc, #120]	; (80016ac <MX_GPIO_Init+0xc0>)
 8001634:	f000 fcfe 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001638:	2323      	movs	r3, #35	; 0x23
 800163a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_GPIO_Init+0xb8>)
 800164e:	f000 fcf1 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001652:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001656:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001664:	230a      	movs	r3, #10
 8001666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f000 fce0 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001674:	2303      	movs	r3, #3
 8001676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_GPIO_Init+0xc4>)
 8001686:	f000 fcd5 	bl	8002034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	200a      	movs	r0, #10
 8001690:	f000 fc13 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001694:	200a      	movs	r0, #10
 8001696:	f000 fc2a 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	48000400 	.word	0x48000400
 80016a8:	10210000 	.word	0x10210000
 80016ac:	48000800 	.word	0x48000800
 80016b0:	48000c00 	.word	0x48000c00

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_AHB2_GRP1_EnableClock>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4313      	orrs	r3, r2
 800172c:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800177e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001782:	f7ff ffc8 	bl	8001716 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_RTC_MspInit+0x30>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d109      	bne.n	80017b2 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800179e:	f7ff ff90 	bl	80016c2 <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2003      	movs	r0, #3
 80017a8:	f000 fb87 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 fb9e 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40002800 	.word	0x40002800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_UART_MspInit+0x68>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11e      	bne.n	8001820 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017e6:	f7ff ffaf 	bl	8001748 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2002      	movs	r0, #2
 80017ec:	f7ff ff7a 	bl	80016e4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017f0:	23c0      	movs	r3, #192	; 0xc0
 80017f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001800:	2307      	movs	r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <HAL_UART_MspInit+0x6c>)
 800180c:	f000 fc12 	bl	8002034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2024      	movs	r0, #36	; 0x24
 8001816:	f000 fb50 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800181a:	2024      	movs	r0, #36	; 0x24
 800181c:	f000 fb67 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40013800 	.word	0x40013800
 800182c:	48000400 	.word	0x48000400

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f9b6 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <RTC_WKUP_IRQHandler+0x14>)
 8001892:	f002 fd11 	bl	80042b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001896:	f7ff fa05 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003a0 	.word	0x200003a0

080018a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80018a8:	2010      	movs	r0, #16
 80018aa:	f000 fd65 	bl	8002378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART1_IRQHandler+0x10>)
 80018ba:	f002 fd9d 	bl	80043f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000314 	.word	0x20000314

080018c8 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80018cc:	f007 f824 	bl	8008918 <HW_IPCC_Tx_Handler>
  return;
 80018d0:	bf00      	nop
}
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80018d8:	f006 ffe6 	bl	80088a8 <HW_IPCC_Rx_Handler>
  return;
 80018dc:	bf00      	nop
}
 80018de:	bd80      	pop	{r7, pc}

080018e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <SystemInit+0xa0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <SystemInit+0xa0>)
 80018ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <SystemInit+0xa0>)
 80018f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001912:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <SystemInit+0xa4>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001930:	f023 0305 	bic.w	r3, r3, #5
 8001934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <SystemInit+0xa8>)
 8001952:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <SystemInit+0xa8>)
 800195a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	faf6fefb 	.word	0xfaf6fefb
 8001988:	22041000 	.word	0x22041000

0800198c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <SystemCoreClockUpdate+0x130>)
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d867      	bhi.n	8001a84 <SystemCoreClockUpdate+0xf8>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <SystemCoreClockUpdate+0x30>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019f1 	.word	0x080019f1
 80019c0:	08001a85 	.word	0x08001a85
 80019c4:	08001a85 	.word	0x08001a85
 80019c8:	08001a85 	.word	0x08001a85
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	08001a85 	.word	0x08001a85
 80019d4:	08001a85 	.word	0x08001a85
 80019d8:	08001a85 	.word	0x08001a85
 80019dc:	08001a01 	.word	0x08001a01
 80019e0:	08001a85 	.word	0x08001a85
 80019e4:	08001a85 	.word	0x08001a85
 80019e8:	08001a85 	.word	0x08001a85
 80019ec:	08001a09 	.word	0x08001a09
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80019f0:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6013      	str	r3, [r2, #0]
      break;
 80019f6:	e049      	b.n	8001a8c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <SystemCoreClockUpdate+0x138>)
 80019fc:	601a      	str	r2, [r3, #0]
      break;
 80019fe:	e045      	b.n	8001a8c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 8001a02:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <SystemCoreClockUpdate+0x13c>)
 8001a04:	601a      	str	r2, [r3, #0]
      break;
 8001a06:	e041      	b.n	8001a8c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d105      	bne.n	8001a36 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <SystemCoreClockUpdate+0x138>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00d      	b.n	8001a52 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d105      	bne.n	8001a48 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <SystemCoreClockUpdate+0x13c>)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e004      	b.n	8001a52 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0f5b      	lsrs	r3, r3, #29
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 8001a80:	6013      	str	r3, [r2, #0]
      break;
 8001a82:	e003      	b.n	8001a8c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]
      break;
 8001a8a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <SystemCoreClockUpdate+0x140>)
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemCoreClockUpdate+0x134>)
 8001aac:	6013      	str	r3, [r2, #0]

}
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	0800910c 	.word	0x0800910c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	01e84800 	.word	0x01e84800
 8001acc:	080090ac 	.word	0x080090ac

08001ad0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ad0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad4:	3304      	adds	r3, #4

08001ad6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ada:	d3f9      	bcc.n	8001ad0 <CopyDataInit>
  bx lr
 8001adc:	4770      	bx	lr

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ade:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ae0:	3004      	adds	r0, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ae2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>
  bx lr
 8001ae6:	4770      	bx	lr

08001ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <LoopForever+0x8>)
 8001aee:	490d      	ldr	r1, [pc, #52]	; (8001b24 <LoopForever+0xc>)
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <LoopForever+0x10>)
 8001af2:	2300      	movs	r3, #0
 8001af4:	f7ff ffef 	bl	8001ad6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <LoopForever+0x14>)
 8001afa:	490d      	ldr	r1, [pc, #52]	; (8001b30 <LoopForever+0x18>)
 8001afc:	2300      	movs	r3, #0
 8001afe:	f7ff fff0 	bl	8001ae2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopForever+0x1c>)
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <LoopForever+0x20>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	f7ff ffeb 	bl	8001ae2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b0c:	f7ff fee8 	bl	80018e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b10:	f007 fa4e 	bl	8008fb0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b14:	f7ff fc55 	bl	80013c2 <main>

08001b18 <LoopForever>:

LoopForever:
  b LoopForever
 8001b18:	e7fe      	b.n	8001b18 <LoopForever>
 8001b1a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b1c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b20:	20000004 	.word	0x20000004
 8001b24:	20000028 	.word	0x20000028
 8001b28:	0800919c 	.word	0x0800919c
  INIT_BSS _sbss, _ebss
 8001b2c:	200001c4 	.word	0x200001c4
 8001b30:	200003cc 	.word	0x200003cc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b34:	200301c4 	.word	0x200301c4
 8001b38:	20030a44 	.word	0x20030a44

08001b3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_Init+0x3c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_Init+0x3c>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 f9a4 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f80f 	bl	8001b80 <HAL_InitTick>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	e001      	b.n	8001b72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b6e:	f7ff fe04 	bl	800177a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	58004000 	.word	0x58004000

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_InitTick+0x6c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001b94:	f001 fcca 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8001b98:	4601      	mov	r1, r0
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_InitTick+0x6c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f9bb 	bl	8001f26 <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d809      	bhi.n	8001bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f979 	bl	8001eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_InitTick+0x70>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e004      	b.n	8001be0 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e001      	b.n	8001be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <HAL_IncTick+0x1c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	200003c4 	.word	0x200003c4
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200003c4 	.word	0x200003c4

08001c30 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTickPrio+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db10      	blt.n	8001d1c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4909      	ldr	r1, [pc, #36]	; (8001d28 <__NVIC_DisableIRQ+0x40>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	3320      	adds	r3, #32
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d18:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0c      	blt.n	8001d58 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	; (8001d64 <__NVIC_SetPendingIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0c      	blt.n	8001d94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_ClearPendingIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	3360      	adds	r3, #96	; 0x60
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fecb 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff fee2 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fed5 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fee5 	bl	8001ce8 <__NVIC_DisableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff96 	bl	8001e60 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff feed 	bl	8001d2c <__NVIC_SetPendingIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fefd 	bl	8001d68 <__NVIC_ClearPendingIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d005      	beq.n	8001f9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2204      	movs	r2, #4
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e047      	b.n	800202a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 020e 	bic.w	r2, r2, #14
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 021c 	and.w	r2, r3, #28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fe6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002008:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
    }
  }
  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002042:	e14c      	b.n	80022de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 813e 	beq.w	80022d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x38>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d00b      	beq.n	8002108 <HAL_GPIO_Init+0xd4>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fc:	2b11      	cmp	r3, #17
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b12      	cmp	r3, #18
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8098 	beq.w	80022d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x2c8>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x1d4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x2cc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1d0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1cc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2d4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1c8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2d8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1c4>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e008      	b.n	800220a <HAL_GPIO_Init+0x1d6>
 80021f8:	2307      	movs	r3, #7
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1d6>
 80021fc:	2303      	movs	r3, #3
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1d6>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1d6>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1d6>
 8002208:	2300      	movs	r3, #0
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221a:	4938      	ldr	r1, [pc, #224]	; (80022fc <HAL_GPIO_Init+0x2c8>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224e:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 8002258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d2:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_GPIO_Init+0x2dc>)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f aeab 	bne.w	8002044 <HAL_GPIO_Init+0x10>
  }
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000800 	.word	0x48000800
 8002308:	48000c00 	.word	0x48000c00
 800230c:	48001000 	.word	0x48001000
 8002310:	58000800 	.word	0x58000800

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002330:	e002      	b.n	8002338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002362:	e002      	b.n	800236a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002364:	887a      	ldrh	r2, [r7, #2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f806 	bl	80023a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58000800 	.word	0x58000800

080023a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	58000400 	.word	0x58000400

080023e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	58000400 	.word	0x58000400

080023fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800240e:	d101      	bne.n	8002414 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_HSE_EnableBypass>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_HSE_DisableBypass>:
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_RCC_HSE_Enable>:
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_RCC_HSE_Disable>:
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_RCC_HSE_IsReady>:
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024aa:	d101      	bne.n	80024b0 <LL_RCC_HSE_IsReady+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_RCC_HSE_IsReady+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_HSI_Enable>:
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RCC_HSI_Disable>:
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_HSI_IsReady>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d101      	bne.n	8002510 <LL_RCC_HSI_IsReady+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_RCC_HSI_IsReady+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_RCC_HSI_SetCalibTrimming>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_HSI48_Enable>:
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_HSI48_Disable>:
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_RCC_HSI48_IsReady>:
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d101      	bne.n	80025a2 <LL_RCC_HSI48_IsReady+0x18>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_RCC_HSI48_IsReady+0x1a>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_LSE_Enable>:
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_LSE_Disable>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_LSE_EnableBypass>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_LSE_DisableBypass>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_RCC_LSE_IsReady>:
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d101      	bne.n	800264e <LL_RCC_LSE_IsReady+0x18>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_RCC_LSE_IsReady+0x1a>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_LSI1_Enable>:
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_RCC_LSI1_Disable>:
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_RCC_LSI1_IsReady>:
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d101      	bne.n	80026b6 <LL_RCC_LSI1_IsReady+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_RCC_LSI1_IsReady+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_LSI2_Enable>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_LSI2_Disable>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_RCC_LSI2_IsReady>:
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b08      	cmp	r3, #8
 8002718:	d101      	bne.n	800271e <LL_RCC_LSI2_IsReady+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_RCC_LSI2_IsReady+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_RCC_LSI2_SetTrimming>:
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_RCC_MSI_Enable>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_RCC_MSI_Disable>:
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_MSI_IsReady>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d101      	bne.n	80027aa <LL_RCC_MSI_IsReady+0x16>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_RCC_MSI_IsReady+0x18>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_MSI_SetRange>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_RCC_MSI_GetRange>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2bb0      	cmp	r3, #176	; 0xb0
 80027f4:	d901      	bls.n	80027fa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80027f6:	23b0      	movs	r3, #176	; 0xb0
 80027f8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_RCC_SetSysClkSource>:
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_RCC_GetSysClkSource>:
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_RCC_SetAHBPrescaler>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_C2_RCC_SetAHBPrescaler>:
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_SetAHB4Prescaler>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028d6:	f023 020f 	bic.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_SetAPB1Prescaler>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_RCC_SetAPB2Prescaler>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_RCC_GetAHBPrescaler>:
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_GetAHB4Prescaler>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_RCC_GetAPB1Prescaler>:
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_RCC_GetAPB2Prescaler>:
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029f6:	d101      	bne.n	80029fc <LL_RCC_PLL_IsReady+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_RCC_PLL_IsReady+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d101      	bne.n	8002a82 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa2:	d101      	bne.n	8002aa8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d101      	bne.n	8002ace <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aec:	d101      	bne.n	8002af2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b10:	d101      	bne.n	8002b16 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e34b      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 808f 	beq.w	8002c62 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b44:	f7ff fe89 	bl	800285a <LL_RCC_GetSysClkSource>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b4a:	f7ff ff82 	bl	8002a52 <LL_RCC_PLL_GetMainSource>
 8002b4e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3e>
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d149      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d146      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b62:	f7ff fe17 	bl	8002794 <LL_RCC_MSI_IsReady>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e32a      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b7c:	f7ff fe2f 	bl	80027de <LL_RCC_MSI_GetRange>
 8002b80:	4603      	mov	r3, r0
 8002b82:	429c      	cmp	r4, r3
 8002b84:	d914      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fd0e 	bl	80035ac <RCC_SetFlashLatencyFromMSIRange>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e319      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe09 	bl	80027b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fe2d 	bl	8002808 <LL_RCC_MSI_SetCalibTrimming>
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fdfe 	bl	80027b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fe22 	bl	8002808 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fcef 	bl	80035ac <RCC_SetFlashLatencyFromMSIRange>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e2fa      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002bd8:	f7fe fed8 	bl	800198c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bdc:	4bb4      	ldr	r3, [pc, #720]	; (8002eb0 <HAL_RCC_OscConfig+0x38c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe ffcd 	bl	8001b80 <HAL_InitTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d039      	beq.n	8002c60 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e2ee      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01e      	beq.n	8002c36 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf8:	f7ff fdae 	bl	8002758 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f80c 	bl	8001c18 <HAL_GetTick>
 8002c00:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c04:	f7ff f808 	bl	8001c18 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e2db      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c16:	f7ff fdbd 	bl	8002794 <LL_RCC_MSI_IsReady>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f1      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fdc6 	bl	80027b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fdea 	bl	8002808 <LL_RCC_MSI_SetCalibTrimming>
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c36:	f7ff fd9e 	bl	8002776 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe ffed 	bl	8001c18 <HAL_GetTick>
 8002c3e:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c42:	f7fe ffe9 	bl	8001c18 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e2bc      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c54:	f7ff fd9e 	bl	8002794 <LL_RCC_MSI_IsReady>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f1      	bne.n	8002c42 <HAL_RCC_OscConfig+0x11e>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d05a      	beq.n	8002d24 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6e:	f7ff fdf4 	bl	800285a <LL_RCC_GetSysClkSource>
 8002c72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	f7ff feed 	bl	8002a52 <LL_RCC_PLL_GetMainSource>
 8002c78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x168>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d10d      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	f7ff fc04 	bl	8002498 <LL_RCC_HSE_IsReady>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d045      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1fe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d141      	bne.n	8002d22 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e295      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x18e>
 8002cac:	f7ff fbd6 	bl	800245c <LL_RCC_HSE_Enable>
 8002cb0:	e00d      	b.n	8002cce <HAL_RCC_OscConfig+0x1aa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cba:	d104      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1a2>
 8002cbc:	f7ff fbb0 	bl	8002420 <LL_RCC_HSE_EnableBypass>
 8002cc0:	f7ff fbcc 	bl	800245c <LL_RCC_HSE_Enable>
 8002cc4:	e003      	b.n	8002cce <HAL_RCC_OscConfig+0x1aa>
 8002cc6:	f7ff fbd8 	bl	800247a <LL_RCC_HSE_Disable>
 8002cca:	f7ff fbb8 	bl	800243e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe ff9f 	bl	8001c18 <HAL_GetTick>
 8002cda:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cde:	f7fe ff9b 	bl	8001c18 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e26e      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cf0:	f7ff fbd2 	bl	8002498 <LL_RCC_HSE_IsReady>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f1      	beq.n	8002cde <HAL_RCC_OscConfig+0x1ba>
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ff8c 	bl	8001c18 <HAL_GetTick>
 8002d00:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe ff88 	bl	8001c18 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e25b      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d16:	f7ff fbbf 	bl	8002498 <LL_RCC_HSE_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1e0>
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d051      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d30:	f7ff fd93 	bl	800285a <LL_RCC_GetSysClkSource>
 8002d34:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d36:	f7ff fe8c 	bl	8002a52 <LL_RCC_PLL_GetMainSource>
 8002d3a:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x22a>
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d113      	bne.n	8002d70 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d110      	bne.n	8002d70 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4e:	f7ff fbd3 	bl	80024f8 <LL_RCC_HSI_IsReady>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x240>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e234      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fbd7 	bl	800251c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6e:	e031      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d019      	beq.n	8002dac <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	f7ff fba0 	bl	80024bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe ff4c 	bl	8001c18 <HAL_GetTick>
 8002d80:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe ff48 	bl	8001c18 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e21b      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d96:	f7ff fbaf 	bl	80024f8 <LL_RCC_HSI_IsReady>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f1      	beq.n	8002d84 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fbb9 	bl	800251c <LL_RCC_HSI_SetCalibTrimming>
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	f7ff fb95 	bl	80024da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe ff32 	bl	8001c18 <HAL_GetTick>
 8002db4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fe ff2e 	bl	8001c18 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e201      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dca:	f7ff fb95 	bl	80024f8 <LL_RCC_HSI_IsReady>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f1      	bne.n	8002db8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a2 	beq.w	8002f32 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d046      	beq.n	8002e90 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002e02:	f7ff fc4c 	bl	800269e <LL_RCC_LSI1_IsReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002e0c:	f7ff fc25 	bl	800265a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e10:	f7fe ff02 	bl	8001c18 <HAL_GetTick>
 8002e14:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e18:	f7fe fefe 	bl	8001c18 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1d1      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002e2a:	f7ff fc38 	bl	800269e <LL_RCC_LSI1_IsReady>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f1      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002e34:	f7ff fc45 	bl	80026c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe feee 	bl	8001c18 <HAL_GetTick>
 8002e3c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002e40:	f7fe feea 	bl	8001c18 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1bd      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002e52:	f7ff fc58 	bl	8002706 <LL_RCC_LSI2_IsReady>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f1      	beq.n	8002e40 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fc62 	bl	800272a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002e66:	f7ff fc09 	bl	800267c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fed5 	bl	8001c18 <HAL_GetTick>
 8002e6e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e72:	f7fe fed1 	bl	8001c18 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1a4      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002e84:	f7ff fc0b 	bl	800269e <LL_RCC_LSI1_IsReady>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f1      	bne.n	8002e72 <HAL_RCC_OscConfig+0x34e>
 8002e8e:	e050      	b.n	8002f32 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002e90:	f7ff fbe3 	bl	800265a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe fec0 	bl	8001c18 <HAL_GetTick>
 8002e98:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e9c:	f7fe febc 	bl	8001c18 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d904      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e18f      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
 8002eae:	bf00      	nop
 8002eb0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002eb4:	f7ff fbf3 	bl	800269e <LL_RCC_LSI1_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002ebe:	f7ff fc11 	bl	80026e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ec4:	f7fe fea8 	bl	8001c18 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e17b      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ed6:	f7ff fc16 	bl	8002706 <LL_RCC_LSI2_IsReady>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f1      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3a0>
 8002ee0:	e027      	b.n	8002f32 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002ee2:	f7ff fbff 	bl	80026e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fe97 	bl	8001c18 <HAL_GetTick>
 8002eea:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002eee:	f7fe fe93 	bl	8001c18 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e166      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002f00:	f7ff fc01 	bl	8002706 <LL_RCC_LSI2_IsReady>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f1      	bne.n	8002eee <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002f0a:	f7ff fbb7 	bl	800267c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fe83 	bl	8001c18 <HAL_GetTick>
 8002f12:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f16:	f7fe fe7f 	bl	8001c18 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e152      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002f28:	f7ff fbb9 	bl	800269e <LL_RCC_LSI1_IsReady>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f1      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d05b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4ba6      	ldr	r3, [pc, #664]	; (80031d8 <HAL_RCC_OscConfig+0x6b4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d114      	bne.n	8002f74 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f4a:	f7ff fa39 	bl	80023c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fe63 	bl	8001c18 <HAL_GetTick>
 8002f52:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe fe5f 	bl	8001c18 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e132      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f68:	4b9b      	ldr	r3, [pc, #620]	; (80031d8 <HAL_RCC_OscConfig+0x6b4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x45e>
 8002f7c:	f7ff fb17 	bl	80025ae <LL_RCC_LSE_Enable>
 8002f80:	e00c      	b.n	8002f9c <HAL_RCC_OscConfig+0x478>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d104      	bne.n	8002f94 <HAL_RCC_OscConfig+0x470>
 8002f8a:	f7ff fb32 	bl	80025f2 <LL_RCC_LSE_EnableBypass>
 8002f8e:	f7ff fb0e 	bl	80025ae <LL_RCC_LSE_Enable>
 8002f92:	e003      	b.n	8002f9c <HAL_RCC_OscConfig+0x478>
 8002f94:	f7ff fb1c 	bl	80025d0 <LL_RCC_LSE_Disable>
 8002f98:	f7ff fb3c 	bl	8002614 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d014      	beq.n	8002fce <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fe38 	bl	8001c18 <HAL_GetTick>
 8002fa8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe fe34 	bl	8001c18 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e105      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002fc2:	f7ff fb38 	bl	8002636 <LL_RCC_LSE_IsReady>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <HAL_RCC_OscConfig+0x488>
 8002fcc:	e013      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7fe fe23 	bl	8001c18 <HAL_GetTick>
 8002fd2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe fe1f 	bl	8001c18 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0f0      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fec:	f7ff fb23 	bl	8002636 <LL_RCC_LSE_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02c      	beq.n	800305c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800300a:	f7ff fa9c 	bl	8002546 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fe03 	bl	8001c18 <HAL_GetTick>
 8003012:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003016:	f7fe fdff 	bl	8001c18 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0d2      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003028:	f7ff faaf 	bl	800258a <LL_RCC_HSI48_IsReady>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f1      	beq.n	8003016 <HAL_RCC_OscConfig+0x4f2>
 8003032:	e013      	b.n	800305c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003034:	f7ff fa98 	bl	8002568 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe fdee 	bl	8001c18 <HAL_GetTick>
 800303c:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003040:	f7fe fdea 	bl	8001c18 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0bd      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003052:	f7ff fa9a 	bl	800258a <LL_RCC_HSI48_IsReady>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f1      	bne.n	8003040 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80b3 	beq.w	80031cc <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003066:	f7ff fbf8 	bl	800285a <LL_RCC_GetSysClkSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b0c      	cmp	r3, #12
 800306e:	d076      	beq.n	800315e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	f7ff fca5 	bl	80029c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fdcc 	bl	8001c18 <HAL_GetTick>
 8003080:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fdc8 	bl	8001c18 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e09b      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003096:	f7ff fca5 	bl	80029e4 <LL_RCC_PLL_IsReady>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f1      	bne.n	8003084 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <HAL_RCC_OscConfig+0x6b8>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b8:	0212      	lsls	r2, r2, #8
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030cc:	430a      	orrs	r2, r1
 80030ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d6:	f7ff fc67 	bl	80029a8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fd95 	bl	8001c18 <HAL_GetTick>
 80030ee:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fd91 	bl	8001c18 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e064      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003104:	f7ff fc6e 	bl	80029e4 <LL_RCC_PLL_IsReady>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f1      	beq.n	80030f2 <HAL_RCC_OscConfig+0x5ce>
 800310e:	e05d      	b.n	80031cc <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	f7ff fc59 	bl	80029c6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fd6e 	bl	8001c18 <HAL_GetTick>
 800313c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe fd6a 	bl	8001c18 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e03d      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003152:	f7ff fc47 	bl	80029e4 <LL_RCC_PLL_IsReady>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f1      	bne.n	8003140 <HAL_RCC_OscConfig+0x61c>
 800315c:	e036      	b.n	80031cc <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e031      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	429a      	cmp	r2, r3
 800317e:	d123      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d114      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d10d      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	372c      	adds	r7, #44	; 0x2c
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	58000400 	.word	0x58000400
 80031dc:	11c1808c 	.word	0x11c1808c

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e12a      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b97      	ldr	r3, [pc, #604]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d91b      	bls.n	800323a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b94      	ldr	r3, [pc, #592]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4992      	ldr	r1, [pc, #584]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fe fd01 	bl	8001c18 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003218:	e008      	b.n	800322c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800321a:	f7fe fcfd 	bl	8001c18 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e10e      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322c:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d1ef      	bne.n	800321a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fb11 	bl	8002872 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003250:	f7fe fce2 	bl	8001c18 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003258:	f7fe fcde 	bl	8001c18 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0ef      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800326a:	f7ff fbfe 	bl	8002a6a <LL_RCC_IsActiveFlag_HPRE>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f1      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fb08 	bl	800289a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800328a:	f7fe fcc5 	bl	8001c18 <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003292:	f7fe fcc1 	bl	8001c18 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0d2      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80032a4:	f7ff fbf3 	bl	8002a8e <LL_RCC_IsActiveFlag_C2HPRE>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f1      	beq.n	8003292 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fb01 	bl	80028c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032c4:	f7fe fca8 	bl	8001c18 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032cc:	f7fe fca4 	bl	8001c18 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0b5      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032de:	f7ff fbe9 	bl	8002ab4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f1      	beq.n	80032cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d016      	beq.n	8003322 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fafb 	bl	80028f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032fe:	f7fe fc8b 	bl	8001c18 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003306:	f7fe fc87 	bl	8001c18 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e098      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003318:	f7ff fbdf 	bl	8002ada <LL_RCC_IsActiveFlag_PPRE1>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f1      	beq.n	8003306 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff faf1 	bl	800291c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800333a:	f7fe fc6d 	bl	8001c18 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003342:	f7fe fc69 	bl	8001c18 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e07a      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003354:	f7ff fbd3 	bl	8002afe <LL_RCC_IsActiveFlag_PPRE2>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f1      	beq.n	8003342 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d043      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d106      	bne.n	8003380 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003372:	f7ff f891 	bl	8002498 <LL_RCC_HSE_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11e      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e064      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d106      	bne.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003388:	f7ff fb2c 	bl	80029e4 <LL_RCC_PLL_IsReady>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d113      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e059      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800339e:	f7ff f9f9 	bl	8002794 <LL_RCC_MSI_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d108      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e04e      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033ac:	f7ff f8a4 	bl	80024f8 <LL_RCC_HSI_IsReady>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e047      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa37 	bl	8002832 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fe fc28 	bl	8001c18 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fe fc24 	bl	8001c18 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e033      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	f7ff fa3a 	bl	800285a <LL_RCC_GetSysClkSource>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d1ec      	bne.n	80033cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d21b      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 0207 	bic.w	r2, r3, #7
 8003408:	4912      	ldr	r1, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fe fc02 	bl	8001c18 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	e008      	b.n	800342a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003418:	f7fe fbfe 	bl	8001c18 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e00f      	b.n	800344a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x274>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d1ef      	bne.n	8003418 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003438:	f7fe faa8 	bl	800198c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800343c:	f7fe fbf8 	bl	8001c30 <HAL_GetTickPrio>
 8003440:	4603      	mov	r3, r0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fb9c 	bl	8001b80 <HAL_InitTick>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	58004000 	.word	0x58004000

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	f7ff f9fc 	bl	800285a <LL_RCC_GetSysClkSource>
 8003462:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800346a:	f7ff f9b8 	bl	80027de <LL_RCC_MSI_GetRange>
 800346e:	4603      	mov	r3, r0
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e04a      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d102      	bne.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e044      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d10a      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003492:	f7fe ffb3 	bl	80023fc <LL_RCC_HSE_IsEnabledDiv2>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e039      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e036      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80034a8:	f7ff fad3 	bl	8002a52 <LL_RCC_PLL_GetMainSource>
 80034ac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d002      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x62>
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d003      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x68>
 80034b8:	e00d      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034bc:	60bb      	str	r3, [r7, #8]
        break;
 80034be:	e015      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034c0:	f7fe ff9c 	bl	80023fc <LL_RCC_HSE_IsEnabledDiv2>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034cc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034ce:	e00d      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034d2:	60bb      	str	r3, [r7, #8]
        break;
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80034d6:	f7ff f982 	bl	80027de <LL_RCC_MSI_GetRange>
 80034da:	4603      	mov	r3, r0
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	60bb      	str	r3, [r7, #8]
        break;
 80034ea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80034ec:	f7ff fa8c 	bl	8002a08 <LL_RCC_PLL_GetN>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	fb03 f402 	mul.w	r4, r3, r2
 80034f8:	f7ff fa9f 	bl	8002a3a <LL_RCC_PLL_GetDivider>
 80034fc:	4603      	mov	r3, r0
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	3301      	adds	r3, #1
 8003502:	fbb4 f4f3 	udiv	r4, r4, r3
 8003506:	f7ff fa8c 	bl	8002a22 <LL_RCC_PLL_GetR>
 800350a:	4603      	mov	r3, r0
 800350c:	0f5b      	lsrs	r3, r3, #29
 800350e:	3301      	adds	r3, #1
 8003510:	fbb4 f3f3 	udiv	r3, r4, r3
 8003514:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	0800910c 	.word	0x0800910c
 8003524:	00f42400 	.word	0x00f42400
 8003528:	01e84800 	.word	0x01e84800

0800352c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b598      	push	{r3, r4, r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003530:	f7ff ff92 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003534:	4604      	mov	r4, r0
 8003536:	f7ff fa05 	bl	8002944 <LL_RCC_GetAHBPrescaler>
 800353a:	4603      	mov	r3, r0
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	4a03      	ldr	r2, [pc, #12]	; (8003550 <HAL_RCC_GetHCLKFreq+0x24>)
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd98      	pop	{r3, r4, r7, pc}
 8003550:	080090ac 	.word	0x080090ac

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b598      	push	{r3, r4, r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003558:	f7ff ffe8 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800355c:	4604      	mov	r4, r0
 800355e:	f7ff fa0b 	bl	8002978 <LL_RCC_GetAPB1Prescaler>
 8003562:	4603      	mov	r3, r0
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_RCC_GetPCLK1Freq+0x28>)
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd98      	pop	{r3, r4, r7, pc}
 800357c:	080090ec 	.word	0x080090ec

08003580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003580:	b598      	push	{r3, r4, r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003584:	f7ff ffd2 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003588:	4604      	mov	r4, r0
 800358a:	f7ff fa01 	bl	8002990 <LL_RCC_GetAPB2Prescaler>
 800358e:	4603      	mov	r3, r0
 8003590:	0adb      	lsrs	r3, r3, #11
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd98      	pop	{r3, r4, r7, pc}
 80035a8:	080090ec 	.word	0x080090ec

080035ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2bb0      	cmp	r3, #176	; 0xb0
 80035b8:	d903      	bls.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e007      	b.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80035d2:	f7ff f9c3 	bl	800295c <LL_RCC_GetAHB4Prescaler>
 80035d6:	4603      	mov	r3, r0
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	0c9c      	lsrs	r4, r3, #18
 80035f6:	f7fe fef3 	bl	80023e0 <HAL_PWREx_GetVoltageRange>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f80c 	bl	800361c <RCC_SetFlashLatency>
 8003604:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	0800910c 	.word	0x0800910c
 8003614:	080090ac 	.word	0x080090ac
 8003618:	431bde83 	.word	0x431bde83

0800361c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b093      	sub	sp, #76	; 0x4c
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <RCC_SetFlashLatency+0xf0>)
 8003628:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800362c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800362e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003632:	4a37      	ldr	r2, [pc, #220]	; (8003710 <RCC_SetFlashLatency+0xf4>)
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	ca07      	ldmia	r2, {r0, r1, r2}
 800363a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800363e:	4b35      	ldr	r3, [pc, #212]	; (8003714 <RCC_SetFlashLatency+0xf8>)
 8003640:	f107 040c 	add.w	r4, r7, #12
 8003644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800364a:	2300      	movs	r3, #0
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d11c      	bne.n	8003690 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003656:	2300      	movs	r3, #0
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
 800365a:	e015      	b.n	8003688 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003664:	4413      	add	r3, r2
 8003666:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d808      	bhi.n	8003682 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003678:	4413      	add	r3, r2
 800367a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003680:	e022      	b.n	80036c8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003684:	3301      	adds	r3, #1
 8003686:	643b      	str	r3, [r7, #64]	; 0x40
 8003688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368a:	2b03      	cmp	r3, #3
 800368c:	d9e6      	bls.n	800365c <RCC_SetFlashLatency+0x40>
 800368e:	e01b      	b.n	80036c8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	e015      	b.n	80036c2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800369e:	4413      	add	r3, r2
 80036a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d808      	bhi.n	80036bc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036b2:	4413      	add	r3, r2
 80036b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80036ba:	e005      	b.n	80036c8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	3301      	adds	r3, #1
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d9e6      	bls.n	8003696 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <RCC_SetFlashLatency+0xfc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 0207 	bic.w	r2, r3, #7
 80036d0:	4911      	ldr	r1, [pc, #68]	; (8003718 <RCC_SetFlashLatency+0xfc>)
 80036d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036d8:	f7fe fa9e 	bl	8001c18 <HAL_GetTick>
 80036dc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036de:	e008      	b.n	80036f2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036e0:	f7fe fa9a 	bl	8001c18 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e007      	b.n	8003702 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <RCC_SetFlashLatency+0xfc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1ef      	bne.n	80036e0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	374c      	adds	r7, #76	; 0x4c
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	08009038 	.word	0x08009038
 8003710:	08009048 	.word	0x08009048
 8003714:	08009054 	.word	0x08009054
 8003718:	58004000 	.word	0x58004000

0800371c <LL_RCC_LSE_IsEnabled>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <LL_RCC_LSE_IsEnabled+0x18>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <LL_RCC_LSE_IsEnabled+0x1a>
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_LSE_IsReady>:
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d101      	bne.n	8003758 <LL_RCC_LSE_IsReady+0x18>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <LL_RCC_LSE_IsReady+0x1a>
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_SetRFWKPClockSource>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_RCC_SetSMPSClockSource>:
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_RCC_SetSMPSPrescaler>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_RCC_SetUSARTClockSource>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f0:	f023 0203 	bic.w	r2, r3, #3
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_RCC_SetLPUARTClockSource>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_RCC_SetI2CClockSource>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800385c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_RCC_SetLPTIMClockSource>:
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	43db      	mvns	r3, r3
 800388a:	401a      	ands	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_SetSAIClockSource>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_RCC_SetRNGClockSource>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80038e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_SetCLK48ClockSource>:
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <LL_RCC_SetUSBClockSource>:
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffe3 	bl	80038fe <LL_RCC_SetCLK48ClockSource>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <LL_RCC_SetADCClockSource>:
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_RCC_SetRTCClockSource>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_GetRTCClockSource>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_ForceBackupDomainReset>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_RCC_PLLSAI1_Enable>:
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a08:	6013      	str	r3, [r2, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_RCC_PLLSAI1_Disable>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_PLLSAI1_IsReady>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a44:	d101      	bne.n	8003a4a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a62:	2300      	movs	r3, #0
 8003a64:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d033      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a80:	d802      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a86:	e017      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a8c:	d017      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003a8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a92:	d016      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003a94:	e010      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003aa6:	e00d      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f947 	bl	8003d40 <RCCEx_PLLSAI1_ConfigNP>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ab6:	e005      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	77fb      	strb	r3, [r7, #31]
        break;
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	7ffb      	ldrb	r3, [r7, #31]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fee9 	bl	80038a6 <LL_RCC_SetSAIClockSource>
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7ffb      	ldrb	r3, [r7, #31]
 8003ad8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d046      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003ae6:	f7ff ff57 	bl	8003998 <LL_RCC_GetRTCClockSource>
 8003aea:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d03c      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003af6:	f7fe fc63 	bl	80023c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <LL_RCC_SetRTCClockSource>
 8003b0a:	e02e      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003b16:	f7ff ff4c 	bl	80039b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003b1a:	f7ff ff5b 	bl	80039d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003b36:	f7ff fdf1 	bl	800371c <LL_RCC_LSE_IsEnabled>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d114      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b40:	f7fe f86a 	bl	8001c18 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b46:	e00b      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fe f866 	bl	8001c18 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d902      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	77fb      	strb	r3, [r7, #31]
              break;
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003b60:	f7ff fdee 	bl	8003740 <LL_RCC_LSE_IsReady>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d1ee      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	77bb      	strb	r3, [r7, #30]
 8003b6e:	e001      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	7ffb      	ldrb	r3, [r7, #31]
 8003b72:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fe2b 	bl	80037e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fe36 	bl	800380c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe5e 	bl	8003872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fe53 	bl	8003872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fe2b 	bl	8003838 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fe20 	bl	8003838 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d022      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fe8e 	bl	800392a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c16:	d107      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f8dd 	bl	8003df6 <RCCEx_PLLSAI1_ConfigNQ>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c40:	7ffb      	ldrb	r3, [r7, #31]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c68:	d003      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fe2b 	bl	80038d2 <LL_RCC_SetRNGClockSource>
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7ff fe22 	bl	80038d2 <LL_RCC_SetRNGClockSource>
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fe35 	bl	80038fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003c9c:	d107      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d022      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fe3e 	bl	8003940 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ccc:	d107      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f8dd 	bl	8003eac <RCCEx_PLLSAI1_ConfigNR>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003cfc:	7ffb      	ldrb	r3, [r7, #31]
 8003cfe:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fd27 	bl	8003764 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fd46 	bl	80037b8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fd2d 	bl	8003790 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8003d36:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d4c:	f7ff fe62 	bl	8003a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d50:	f7fd ff62 	bl	8001c18 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d56:	e009      	b.n	8003d6c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d58:	f7fd ff5e 	bl	8001c18 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d902      	bls.n	8003d6c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6a:	e004      	b.n	8003d76 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d6c:	f7ff fe61 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d137      	bne.n	8003dec <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003daa:	f7ff fe24 	bl	80039f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dae:	f7fd ff33 	bl	8001c18 <HAL_GetTick>
 8003db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003db4:	e009      	b.n	8003dca <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db6:	f7fd ff2f 	bl	8001c18 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d902      	bls.n	8003dca <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	73fb      	strb	r3, [r7, #15]
        break;
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003dca:	f7ff fe32 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d1f0      	bne.n	8003db6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e02:	f7ff fe07 	bl	8003a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e06:	f7fd ff07 	bl	8001c18 <HAL_GetTick>
 8003e0a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e0c:	e009      	b.n	8003e22 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e0e:	f7fd ff03 	bl	8001c18 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d902      	bls.n	8003e22 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e004      	b.n	8003e2c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e22:	f7ff fe06 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d137      	bne.n	8003ea2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e60:	f7ff fdc9 	bl	80039f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd fed8 	bl	8001c18 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e6a:	e009      	b.n	8003e80 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e6c:	f7fd fed4 	bl	8001c18 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d902      	bls.n	8003e80 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7e:	e004      	b.n	8003e8a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e80:	f7ff fdd7 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d1f0      	bne.n	8003e6c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003eb8:	f7ff fdac 	bl	8003a14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ebc:	f7fd feac 	bl	8001c18 <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ec2:	e009      	b.n	8003ed8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec4:	f7fd fea8 	bl	8001c18 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d902      	bls.n	8003ed8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed6:	e004      	b.n	8003ee2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ed8:	f7ff fdab 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d137      	bne.n	8003f58 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efc:	4313      	orrs	r3, r2
 8003efe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	4313      	orrs	r3, r2
 8003f14:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f16:	f7ff fd6e 	bl	80039f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1a:	f7fd fe7d 	bl	8001c18 <HAL_GetTick>
 8003f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f20:	e009      	b.n	8003f36 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f22:	f7fd fe79 	bl	8001c18 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d902      	bls.n	8003f36 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	73fb      	strb	r3, [r7, #15]
        break;
 8003f34:	e004      	b.n	8003f40 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f36:	f7ff fd7c 	bl	8003a32 <LL_RCC_PLLSAI1_IsReady>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d1f0      	bne.n	8003f22 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e090      	b.n	8004096 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fd fbff 	bl	800178c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	22ca      	movs	r2, #202	; 0xca
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2253      	movs	r2, #83	; 0x53
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f89f 	bl	80040ea <RTC_EnterInitMode>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e067      	b.n	8004096 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68d2      	ldr	r2, [r2, #12]
 8004000:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6919      	ldr	r1, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0203 	bic.w	r2, r2, #3
 8004034:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d113      	bne.n	8004084 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f81e 	bl	800409e <HAL_RTC_WaitForSynchro>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	22ff      	movs	r2, #255	; 0xff
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2204      	movs	r2, #4
 8004074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e008      	b.n	8004096 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	22ff      	movs	r2, #255	; 0xff
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80040b6:	f7fd fdaf 	bl	8001c18 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040bc:	e009      	b.n	80040d2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80040be:	f7fd fdab 	bl	8001c18 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040cc:	d901      	bls.n	80040d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e007      	b.n	80040e2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ee      	beq.n	80040be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d119      	bne.n	8004134 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f04f 32ff 	mov.w	r2, #4294967295
 8004108:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800410a:	f7fd fd85 	bl	8001c18 <HAL_GetTick>
 800410e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004110:	e009      	b.n	8004126 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004112:	f7fd fd81 	bl	8001c18 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004120:	d901      	bls.n	8004126 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e007      	b.n	8004136 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ee      	beq.n	8004112 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004156:	2302      	movs	r3, #2
 8004158:	e0a8      	b.n	80042ac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	22ca      	movs	r2, #202	; 0xca
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2253      	movs	r2, #83	; 0x53
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 8004188:	f7fd fd46 	bl	8001c18 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800418e:	e015      	b.n	80041bc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004190:	f7fd fd42 	bl	8001c18 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800419e:	d90d      	bls.n	80041bc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e077      	b.n	80042ac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e2      	bne.n	8004190 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80041ea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80041ec:	f7fd fd14 	bl	8001c18 <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80041f2:	e015      	b.n	8004220 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80041f4:	f7fd fd10 	bl	8001c18 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004202:	d90d      	bls.n	8004220 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	22ff      	movs	r2, #255	; 0xff
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2203      	movs	r2, #3
 8004210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e045      	b.n	80042ac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0e2      	beq.n	80041f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0207 	bic.w	r2, r2, #7
 8004244:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800425e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004262:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800426c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004280:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004290:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	22ff      	movs	r2, #255	; 0xff
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	58000800 	.word	0x58000800

080042b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f818 	bl	8004304 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80042e4:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80042e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042ec:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	58000800 	.word	0x58000800

08004304 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_RCC_GetUSARTClockSource>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4013      	ands	r3, r2
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_GetLPUARTClockSource>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e042      	b.n	80043f0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fd fa1f 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2224      	movs	r2, #36	; 0x24
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9b8 	bl	8004710 <UART_SetConfig>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e022      	b.n	80043f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 fa10 	bl	80057d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f001 fa97 	bl	800591c <UART_CheckIdleState>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f640 030f 	movw	r3, #2063	; 0x80f
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d118      	bne.n	800445a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d013      	beq.n	800445a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8145 	beq.w	80046da <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
      }
      return;
 8004458:	e13f      	b.n	80046da <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80e8 	beq.w	8004632 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4ba1      	ldr	r3, [pc, #644]	; (80046ec <HAL_UART_IRQHandler+0x2f4>)
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4ba0      	ldr	r3, [pc, #640]	; (80046f0 <HAL_UART_IRQHandler+0x2f8>)
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80dd 	beq.w	8004632 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_UART_IRQHandler+0xac>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2201      	movs	r2, #1
 8004492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_UART_IRQHandler+0xd8>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2202      	movs	r2, #2
 80044be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d010      	beq.n	80044fc <HAL_UART_IRQHandler+0x104>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2204      	movs	r2, #4
 80044ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f043 0202 	orr.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_UART_IRQHandler+0x2f4>)
 8004514:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2208      	movs	r2, #8
 8004520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f043 0208 	orr.w	r2, r3, #8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004538:	2b00      	cmp	r3, #0
 800453a:	d011      	beq.n	8004560 <HAL_UART_IRQHandler+0x168>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800454e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80b9 	beq.w	80046de <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d004      	beq.n	80045ba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d031      	beq.n	800461e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f001 fa76 	bl	8005aac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d123      	bne.n	8004616 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d013      	beq.n	800460e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ea:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_UART_IRQHandler+0x2fc>)
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fcbf 	bl	8001f76 <HAL_DMA_Abort_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004608:	4610      	mov	r0, r2
 800460a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e00f      	b.n	800462e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f872 	bl	80046f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e00b      	b.n	800462e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f86e 	bl	80046f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e007      	b.n	800462e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f86a 	bl	80046f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800462c:	e057      	b.n	80046de <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	bf00      	nop
    return;
 8004630:	e055      	b.n	80046de <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_UART_IRQHandler+0x260>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800464e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 fa7e 	bl	8005b52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004656:	e045      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	2b00      	cmp	r3, #0
 800467c:	d031      	beq.n	80046e2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
    }
    return;
 8004686:	e02c      	b.n	80046e2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_UART_IRQHandler+0x2ac>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f001 fa3e 	bl	8005b1e <UART_EndTransmit_IT>
    return;
 80046a2:	e01f      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_UART_IRQHandler+0x2c8>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fa5e 	bl	8005b7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046be:	e011      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da09      	bge.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fa48 	bl	8005b66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046d6:	bf00      	nop
 80046d8:	e004      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80046da:	bf00      	nop
 80046dc:	e002      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80046e2:	bf00      	nop
  }
}
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	10000001 	.word	0x10000001
 80046f0:	04000120 	.word	0x04000120
 80046f4:	08005af3 	.word	0x08005af3

080046f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	0000      	movs	r0, r0
	...

08004710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004714:	b08a      	sub	sp, #40	; 0x28
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4313      	orrs	r3, r2
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	4313      	orrs	r3, r2
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4ba4      	ldr	r3, [pc, #656]	; (80049e0 <UART_SetConfig+0x2d0>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004758:	430b      	orrs	r3, r1
 800475a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a99      	ldr	r2, [pc, #612]	; (80049e4 <UART_SetConfig+0x2d4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	4313      	orrs	r3, r2
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004796:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	f023 010f 	bic.w	r1, r3, #15
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a8a      	ldr	r2, [pc, #552]	; (80049e8 <UART_SetConfig+0x2d8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d126      	bne.n	8004812 <UART_SetConfig+0x102>
 80047c4:	2003      	movs	r0, #3
 80047c6:	f7ff fda7 	bl	8004318 <LL_RCC_GetUSARTClockSource>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0xf8>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0xc8>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004801 	.word	0x08004801
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e042      	b.n	8004876 <UART_SetConfig+0x166>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e03e      	b.n	8004876 <UART_SetConfig+0x166>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e03a      	b.n	8004876 <UART_SetConfig+0x166>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e036      	b.n	8004876 <UART_SetConfig+0x166>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	bf00      	nop
 8004810:	e031      	b.n	8004876 <UART_SetConfig+0x166>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <UART_SetConfig+0x2d4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d129      	bne.n	8004870 <UART_SetConfig+0x160>
 800481c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004820:	f7ff fd8a 	bl	8004338 <LL_RCC_GetLPUARTClockSource>
 8004824:	4603      	mov	r3, r0
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d014      	beq.n	8004856 <UART_SetConfig+0x146>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d802      	bhi.n	8004838 <UART_SetConfig+0x128>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <UART_SetConfig+0x136>
 8004836:	e016      	b.n	8004866 <UART_SetConfig+0x156>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d007      	beq.n	800484e <UART_SetConfig+0x13e>
 800483e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004842:	d00c      	beq.n	800485e <UART_SetConfig+0x14e>
 8004844:	e00f      	b.n	8004866 <UART_SetConfig+0x156>
 8004846:	2300      	movs	r3, #0
 8004848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484c:	e013      	b.n	8004876 <UART_SetConfig+0x166>
 800484e:	2302      	movs	r3, #2
 8004850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004854:	e00f      	b.n	8004876 <UART_SetConfig+0x166>
 8004856:	2304      	movs	r3, #4
 8004858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485c:	e00b      	b.n	8004876 <UART_SetConfig+0x166>
 800485e:	2308      	movs	r3, #8
 8004860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004864:	e007      	b.n	8004876 <UART_SetConfig+0x166>
 8004866:	2310      	movs	r3, #16
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <UART_SetConfig+0x166>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5a      	ldr	r2, [pc, #360]	; (80049e4 <UART_SetConfig+0x2d4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	f040 8428 	bne.w	80050d2 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004886:	2b08      	cmp	r3, #8
 8004888:	f200 8171 	bhi.w	8004b6e <UART_SetConfig+0x45e>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0x184>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048b9 	.word	0x080048b9
 8004898:	08004b6f 	.word	0x08004b6f
 800489c:	0800495b 	.word	0x0800495b
 80048a0:	08004b6f 	.word	0x08004b6f
 80048a4:	08004a1f 	.word	0x08004a1f
 80048a8:	08004b6f 	.word	0x08004b6f
 80048ac:	08004b6f 	.word	0x08004b6f
 80048b0:	08004b6f 	.word	0x08004b6f
 80048b4:	08004ac1 	.word	0x08004ac1
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80048b8:	f7fe fe4c 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80048bc:	4602      	mov	r2, r0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d044      	beq.n	8004950 <UART_SetConfig+0x240>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d03e      	beq.n	800494c <UART_SetConfig+0x23c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d038      	beq.n	8004948 <UART_SetConfig+0x238>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d032      	beq.n	8004944 <UART_SetConfig+0x234>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d02c      	beq.n	8004940 <UART_SetConfig+0x230>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d026      	beq.n	800493c <UART_SetConfig+0x22c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d020      	beq.n	8004938 <UART_SetConfig+0x228>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	d01a      	beq.n	8004934 <UART_SetConfig+0x224>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b08      	cmp	r3, #8
 8004904:	d014      	beq.n	8004930 <UART_SetConfig+0x220>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b09      	cmp	r3, #9
 800490c:	d00e      	beq.n	800492c <UART_SetConfig+0x21c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b0a      	cmp	r3, #10
 8004914:	d008      	beq.n	8004928 <UART_SetConfig+0x218>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b0b      	cmp	r3, #11
 800491c:	d102      	bne.n	8004924 <UART_SetConfig+0x214>
 800491e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004922:	e016      	b.n	8004952 <UART_SetConfig+0x242>
 8004924:	2301      	movs	r3, #1
 8004926:	e014      	b.n	8004952 <UART_SetConfig+0x242>
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	e012      	b.n	8004952 <UART_SetConfig+0x242>
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	e010      	b.n	8004952 <UART_SetConfig+0x242>
 8004930:	2320      	movs	r3, #32
 8004932:	e00e      	b.n	8004952 <UART_SetConfig+0x242>
 8004934:	2310      	movs	r3, #16
 8004936:	e00c      	b.n	8004952 <UART_SetConfig+0x242>
 8004938:	230c      	movs	r3, #12
 800493a:	e00a      	b.n	8004952 <UART_SetConfig+0x242>
 800493c:	230a      	movs	r3, #10
 800493e:	e008      	b.n	8004952 <UART_SetConfig+0x242>
 8004940:	2308      	movs	r3, #8
 8004942:	e006      	b.n	8004952 <UART_SetConfig+0x242>
 8004944:	2306      	movs	r3, #6
 8004946:	e004      	b.n	8004952 <UART_SetConfig+0x242>
 8004948:	2304      	movs	r3, #4
 800494a:	e002      	b.n	8004952 <UART_SetConfig+0x242>
 800494c:	2302      	movs	r3, #2
 800494e:	e000      	b.n	8004952 <UART_SetConfig+0x242>
 8004950:	2301      	movs	r3, #1
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	617b      	str	r3, [r7, #20]
        break;
 8004958:	e10c      	b.n	8004b74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05a      	beq.n	8004a18 <UART_SetConfig+0x308>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b01      	cmp	r3, #1
 8004968:	d054      	beq.n	8004a14 <UART_SetConfig+0x304>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b02      	cmp	r3, #2
 8004970:	d04e      	beq.n	8004a10 <UART_SetConfig+0x300>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b03      	cmp	r3, #3
 8004978:	d048      	beq.n	8004a0c <UART_SetConfig+0x2fc>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b04      	cmp	r3, #4
 8004980:	d02c      	beq.n	80049dc <UART_SetConfig+0x2cc>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b05      	cmp	r3, #5
 8004988:	d026      	beq.n	80049d8 <UART_SetConfig+0x2c8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b06      	cmp	r3, #6
 8004990:	d020      	beq.n	80049d4 <UART_SetConfig+0x2c4>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b07      	cmp	r3, #7
 8004998:	d01a      	beq.n	80049d0 <UART_SetConfig+0x2c0>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d014      	beq.n	80049cc <UART_SetConfig+0x2bc>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b09      	cmp	r3, #9
 80049a8:	d00e      	beq.n	80049c8 <UART_SetConfig+0x2b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b0a      	cmp	r3, #10
 80049b0:	d008      	beq.n	80049c4 <UART_SetConfig+0x2b4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b0b      	cmp	r3, #11
 80049b8:	d102      	bne.n	80049c0 <UART_SetConfig+0x2b0>
 80049ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049be:	e02c      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <UART_SetConfig+0x2dc>)
 80049c2:	e02a      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <UART_SetConfig+0x2e0>)
 80049c6:	e028      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <UART_SetConfig+0x2e4>)
 80049ca:	e026      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <UART_SetConfig+0x2e8>)
 80049ce:	e024      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <UART_SetConfig+0x2ec>)
 80049d2:	e022      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <UART_SetConfig+0x2f0>)
 80049d6:	e020      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <UART_SetConfig+0x2f4>)
 80049da:	e01e      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <UART_SetConfig+0x2f8>)
 80049de:	e01c      	b.n	8004a1a <UART_SetConfig+0x30a>
 80049e0:	cfff69f3 	.word	0xcfff69f3
 80049e4:	40008000 	.word	0x40008000
 80049e8:	40013800 	.word	0x40013800
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	0001e848 	.word	0x0001e848
 80049f4:	0003d090 	.word	0x0003d090
 80049f8:	0007a120 	.word	0x0007a120
 80049fc:	000f4240 	.word	0x000f4240
 8004a00:	00145855 	.word	0x00145855
 8004a04:	00186a00 	.word	0x00186a00
 8004a08:	001e8480 	.word	0x001e8480
 8004a0c:	4ba6      	ldr	r3, [pc, #664]	; (8004ca8 <UART_SetConfig+0x598>)
 8004a0e:	e004      	b.n	8004a1a <UART_SetConfig+0x30a>
 8004a10:	4ba6      	ldr	r3, [pc, #664]	; (8004cac <UART_SetConfig+0x59c>)
 8004a12:	e002      	b.n	8004a1a <UART_SetConfig+0x30a>
 8004a14:	4ba6      	ldr	r3, [pc, #664]	; (8004cb0 <UART_SetConfig+0x5a0>)
 8004a16:	e000      	b.n	8004a1a <UART_SetConfig+0x30a>
 8004a18:	4ba6      	ldr	r3, [pc, #664]	; (8004cb4 <UART_SetConfig+0x5a4>)
 8004a1a:	617b      	str	r3, [r7, #20]
        break;
 8004a1c:	e0aa      	b.n	8004b74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a1e:	f7fe fd1b 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d044      	beq.n	8004ab6 <UART_SetConfig+0x3a6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d03e      	beq.n	8004ab2 <UART_SetConfig+0x3a2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d038      	beq.n	8004aae <UART_SetConfig+0x39e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d032      	beq.n	8004aaa <UART_SetConfig+0x39a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d02c      	beq.n	8004aa6 <UART_SetConfig+0x396>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d026      	beq.n	8004aa2 <UART_SetConfig+0x392>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d020      	beq.n	8004a9e <UART_SetConfig+0x38e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	d01a      	beq.n	8004a9a <UART_SetConfig+0x38a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d014      	beq.n	8004a96 <UART_SetConfig+0x386>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d00e      	beq.n	8004a92 <UART_SetConfig+0x382>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b0a      	cmp	r3, #10
 8004a7a:	d008      	beq.n	8004a8e <UART_SetConfig+0x37e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2b0b      	cmp	r3, #11
 8004a82:	d102      	bne.n	8004a8a <UART_SetConfig+0x37a>
 8004a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a88:	e016      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e014      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	e012      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	e010      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a96:	2320      	movs	r3, #32
 8004a98:	e00e      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	e00c      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	e00a      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	e008      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	e006      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e004      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004aae:	2304      	movs	r3, #4
 8004ab0:	e002      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e000      	b.n	8004ab8 <UART_SetConfig+0x3a8>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
        break;
 8004abe:	e059      	b.n	8004b74 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d04e      	beq.n	8004b66 <UART_SetConfig+0x456>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d047      	beq.n	8004b60 <UART_SetConfig+0x450>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d040      	beq.n	8004b5a <UART_SetConfig+0x44a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d039      	beq.n	8004b54 <UART_SetConfig+0x444>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d032      	beq.n	8004b4e <UART_SetConfig+0x43e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d02b      	beq.n	8004b48 <UART_SetConfig+0x438>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d024      	beq.n	8004b42 <UART_SetConfig+0x432>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d01d      	beq.n	8004b3c <UART_SetConfig+0x42c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d016      	beq.n	8004b36 <UART_SetConfig+0x426>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d00f      	beq.n	8004b30 <UART_SetConfig+0x420>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b0a      	cmp	r3, #10
 8004b16:	d008      	beq.n	8004b2a <UART_SetConfig+0x41a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b0b      	cmp	r3, #11
 8004b1e:	d101      	bne.n	8004b24 <UART_SetConfig+0x414>
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	e022      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b28:	e01f      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b2e:	e01c      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b34:	e019      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3a:	e016      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b40:	e013      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b42:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004b46:	e010      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b48:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b52:	e00a      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b54:	f241 5355 	movw	r3, #5461	; 0x1555
 8004b58:	e007      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b5e:	e004      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b64:	e001      	b.n	8004b6a <UART_SetConfig+0x45a>
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	617b      	str	r3, [r7, #20]
        break;
 8004b6c:	e002      	b.n	8004b74 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	76fb      	strb	r3, [r7, #27]
        break;
 8004b72:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8604 	beq.w	8005784 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d305      	bcc.n	8004b98 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d903      	bls.n	8004ba0 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	f000 bdf2 	b.w	8005784 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8004ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f200 8281 	bhi.w	80050ac <UART_SetConfig+0x99c>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x4a0>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	080050ad 	.word	0x080050ad
 8004bb8:	08004d25 	.word	0x08004d25
 8004bbc:	080050ad 	.word	0x080050ad
 8004bc0:	08004e1b 	.word	0x08004e1b
 8004bc4:	080050ad 	.word	0x080050ad
 8004bc8:	080050ad 	.word	0x080050ad
 8004bcc:	080050ad 	.word	0x080050ad
 8004bd0:	08004f59 	.word	0x08004f59
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe fcbe 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d070      	beq.n	8004ccc <UART_SetConfig+0x5bc>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d067      	beq.n	8004cc2 <UART_SetConfig+0x5b2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d05e      	beq.n	8004cb8 <UART_SetConfig+0x5a8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d04c      	beq.n	8004c9c <UART_SetConfig+0x58c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d043      	beq.n	8004c92 <UART_SetConfig+0x582>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d03a      	beq.n	8004c88 <UART_SetConfig+0x578>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d031      	beq.n	8004c7e <UART_SetConfig+0x56e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b07      	cmp	r3, #7
 8004c20:	d028      	beq.n	8004c74 <UART_SetConfig+0x564>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d01f      	beq.n	8004c6a <UART_SetConfig+0x55a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d016      	beq.n	8004c60 <UART_SetConfig+0x550>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b0a      	cmp	r3, #10
 8004c38:	d00d      	beq.n	8004c56 <UART_SetConfig+0x546>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b0b      	cmp	r3, #11
 8004c40:	d104      	bne.n	8004c4c <UART_SetConfig+0x53c>
 8004c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e043      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c4c:	f04f 0301 	mov.w	r3, #1
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	e03e      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c56:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	e039      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	e034      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c6a:	f04f 0320 	mov.w	r3, #32
 8004c6e:	f04f 0400 	mov.w	r4, #0
 8004c72:	e02f      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c74:	f04f 0310 	mov.w	r3, #16
 8004c78:	f04f 0400 	mov.w	r4, #0
 8004c7c:	e02a      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c7e:	f04f 030c 	mov.w	r3, #12
 8004c82:	f04f 0400 	mov.w	r4, #0
 8004c86:	e025      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c88:	f04f 030a 	mov.w	r3, #10
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	e020      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c92:	f04f 0308 	mov.w	r3, #8
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	e01b      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004c9c:	f04f 0306 	mov.w	r3, #6
 8004ca0:	f04f 0400 	mov.w	r4, #0
 8004ca4:	e016      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004ca6:	bf00      	nop
 8004ca8:	0028b0aa 	.word	0x0028b0aa
 8004cac:	003d0900 	.word	0x003d0900
 8004cb0:	007a1200 	.word	0x007a1200
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	f04f 0304 	mov.w	r3, #4
 8004cbc:	f04f 0400 	mov.w	r4, #0
 8004cc0:	e008      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004cc2:	f04f 0302 	mov.w	r3, #2
 8004cc6:	f04f 0400 	mov.w	r4, #0
 8004cca:	e003      	b.n	8004cd4 <UART_SetConfig+0x5c4>
 8004ccc:	f04f 0301 	mov.w	r3, #1
 8004cd0:	f04f 0400 	mov.w	r4, #0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	f7fb fa5a 	bl	8000190 <__aeabi_uldivmod>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	f04f 0400 	mov.w	r4, #0
 8004cec:	0214      	lsls	r4, r2, #8
 8004cee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004cf2:	020b      	lsls	r3, r1, #8
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6852      	ldr	r2, [r2, #4]
 8004cf8:	0852      	lsrs	r2, r2, #1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	eb13 0b01 	adds.w	fp, r3, r1
 8004d04:	eb44 0c02 	adc.w	ip, r4, r2
 8004d08:	4658      	mov	r0, fp
 8004d0a:	4661      	mov	r1, ip
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f04f 0400 	mov.w	r4, #0
 8004d14:	461a      	mov	r2, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	f7fb fa3a 	bl	8000190 <__aeabi_uldivmod>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	61fb      	str	r3, [r7, #28]
            break;
 8004d22:	e1c6      	b.n	80050b2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05b      	beq.n	8004de4 <UART_SetConfig+0x6d4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d053      	beq.n	8004ddc <UART_SetConfig+0x6cc>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d04b      	beq.n	8004dd4 <UART_SetConfig+0x6c4>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d043      	beq.n	8004dcc <UART_SetConfig+0x6bc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d03b      	beq.n	8004dc4 <UART_SetConfig+0x6b4>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d033      	beq.n	8004dbc <UART_SetConfig+0x6ac>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d02b      	beq.n	8004db4 <UART_SetConfig+0x6a4>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b07      	cmp	r3, #7
 8004d62:	d023      	beq.n	8004dac <UART_SetConfig+0x69c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d01b      	beq.n	8004da4 <UART_SetConfig+0x694>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d013      	beq.n	8004d9c <UART_SetConfig+0x68c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b0a      	cmp	r3, #10
 8004d7a:	d00b      	beq.n	8004d94 <UART_SetConfig+0x684>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b0b      	cmp	r3, #11
 8004d82:	d103      	bne.n	8004d8c <UART_SetConfig+0x67c>
 8004d84:	4bae      	ldr	r3, [pc, #696]	; (8005040 <UART_SetConfig+0x930>)
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	e02e      	b.n	8004dea <UART_SetConfig+0x6da>
 8004d8c:	4bad      	ldr	r3, [pc, #692]	; (8005044 <UART_SetConfig+0x934>)
 8004d8e:	f04f 0400 	mov.w	r4, #0
 8004d92:	e02a      	b.n	8004dea <UART_SetConfig+0x6da>
 8004d94:	4bac      	ldr	r3, [pc, #688]	; (8005048 <UART_SetConfig+0x938>)
 8004d96:	f04f 0400 	mov.w	r4, #0
 8004d9a:	e026      	b.n	8004dea <UART_SetConfig+0x6da>
 8004d9c:	4bab      	ldr	r3, [pc, #684]	; (800504c <UART_SetConfig+0x93c>)
 8004d9e:	f04f 0400 	mov.w	r4, #0
 8004da2:	e022      	b.n	8004dea <UART_SetConfig+0x6da>
 8004da4:	4baa      	ldr	r3, [pc, #680]	; (8005050 <UART_SetConfig+0x940>)
 8004da6:	f04f 0400 	mov.w	r4, #0
 8004daa:	e01e      	b.n	8004dea <UART_SetConfig+0x6da>
 8004dac:	4ba9      	ldr	r3, [pc, #676]	; (8005054 <UART_SetConfig+0x944>)
 8004dae:	f04f 0400 	mov.w	r4, #0
 8004db2:	e01a      	b.n	8004dea <UART_SetConfig+0x6da>
 8004db4:	a49e      	add	r4, pc, #632	; (adr r4, 8005030 <UART_SetConfig+0x920>)
 8004db6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dba:	e016      	b.n	8004dea <UART_SetConfig+0x6da>
 8004dbc:	4ba6      	ldr	r3, [pc, #664]	; (8005058 <UART_SetConfig+0x948>)
 8004dbe:	f04f 0400 	mov.w	r4, #0
 8004dc2:	e012      	b.n	8004dea <UART_SetConfig+0x6da>
 8004dc4:	4ba5      	ldr	r3, [pc, #660]	; (800505c <UART_SetConfig+0x94c>)
 8004dc6:	f04f 0400 	mov.w	r4, #0
 8004dca:	e00e      	b.n	8004dea <UART_SetConfig+0x6da>
 8004dcc:	a49a      	add	r4, pc, #616	; (adr r4, 8005038 <UART_SetConfig+0x928>)
 8004dce:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dd2:	e00a      	b.n	8004dea <UART_SetConfig+0x6da>
 8004dd4:	4ba2      	ldr	r3, [pc, #648]	; (8005060 <UART_SetConfig+0x950>)
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	e006      	b.n	8004dea <UART_SetConfig+0x6da>
 8004ddc:	4ba1      	ldr	r3, [pc, #644]	; (8005064 <UART_SetConfig+0x954>)
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	e002      	b.n	8004dea <UART_SetConfig+0x6da>
 8004de4:	4b97      	ldr	r3, [pc, #604]	; (8005044 <UART_SetConfig+0x934>)
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6852      	ldr	r2, [r2, #4]
 8004dee:	0852      	lsrs	r2, r2, #1
 8004df0:	4611      	mov	r1, r2
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	eb13 0b01 	adds.w	fp, r3, r1
 8004dfa:	eb44 0c02 	adc.w	ip, r4, r2
 8004dfe:	4658      	mov	r0, fp
 8004e00:	4661      	mov	r1, ip
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	f7fb f9bf 	bl	8000190 <__aeabi_uldivmod>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	61fb      	str	r3, [r7, #28]
            break;
 8004e18:	e14b      	b.n	80050b2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe fb1d 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8004e1e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d067      	beq.n	8004f00 <UART_SetConfig+0x7f0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d05e      	beq.n	8004ef6 <UART_SetConfig+0x7e6>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d055      	beq.n	8004eec <UART_SetConfig+0x7dc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d04c      	beq.n	8004ee2 <UART_SetConfig+0x7d2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d043      	beq.n	8004ed8 <UART_SetConfig+0x7c8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d03a      	beq.n	8004ece <UART_SetConfig+0x7be>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d031      	beq.n	8004ec4 <UART_SetConfig+0x7b4>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	d028      	beq.n	8004eba <UART_SetConfig+0x7aa>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d01f      	beq.n	8004eb0 <UART_SetConfig+0x7a0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d016      	beq.n	8004ea6 <UART_SetConfig+0x796>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b0a      	cmp	r3, #10
 8004e7e:	d00d      	beq.n	8004e9c <UART_SetConfig+0x78c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b0b      	cmp	r3, #11
 8004e86:	d104      	bne.n	8004e92 <UART_SetConfig+0x782>
 8004e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	e03a      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004e92:	f04f 0301 	mov.w	r3, #1
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	e035      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	e030      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	e02b      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004eb0:	f04f 0320 	mov.w	r3, #32
 8004eb4:	f04f 0400 	mov.w	r4, #0
 8004eb8:	e026      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004eba:	f04f 0310 	mov.w	r3, #16
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	e021      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ec4:	f04f 030c 	mov.w	r3, #12
 8004ec8:	f04f 0400 	mov.w	r4, #0
 8004ecc:	e01c      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ece:	f04f 030a 	mov.w	r3, #10
 8004ed2:	f04f 0400 	mov.w	r4, #0
 8004ed6:	e017      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ed8:	f04f 0308 	mov.w	r3, #8
 8004edc:	f04f 0400 	mov.w	r4, #0
 8004ee0:	e012      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ee2:	f04f 0306 	mov.w	r3, #6
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	e00d      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004eec:	f04f 0304 	mov.w	r3, #4
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	e008      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004ef6:	f04f 0302 	mov.w	r3, #2
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	e003      	b.n	8004f08 <UART_SetConfig+0x7f8>
 8004f00:	f04f 0301 	mov.w	r3, #1
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	f7fb f940 	bl	8000190 <__aeabi_uldivmod>
 8004f10:	4603      	mov	r3, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4619      	mov	r1, r3
 8004f16:	4622      	mov	r2, r4
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	f04f 0400 	mov.w	r4, #0
 8004f20:	0214      	lsls	r4, r2, #8
 8004f22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f26:	020b      	lsls	r3, r1, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6852      	ldr	r2, [r2, #4]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	eb13 0b01 	adds.w	fp, r3, r1
 8004f38:	eb44 0c02 	adc.w	ip, r4, r2
 8004f3c:	4658      	mov	r0, fp
 8004f3e:	4661      	mov	r1, ip
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	f7fb f920 	bl	8000190 <__aeabi_uldivmod>
 8004f50:	4603      	mov	r3, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	61fb      	str	r3, [r7, #28]
            break;
 8004f56:	e0ac      	b.n	80050b2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8089 	beq.w	8005074 <UART_SetConfig+0x964>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d05b      	beq.n	8005022 <UART_SetConfig+0x912>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d052      	beq.n	8005018 <UART_SetConfig+0x908>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d04a      	beq.n	8005010 <UART_SetConfig+0x900>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d041      	beq.n	8005006 <UART_SetConfig+0x8f6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d039      	beq.n	8004ffe <UART_SetConfig+0x8ee>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d031      	beq.n	8004ff6 <UART_SetConfig+0x8e6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d028      	beq.n	8004fec <UART_SetConfig+0x8dc>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d01f      	beq.n	8004fe2 <UART_SetConfig+0x8d2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d016      	beq.n	8004fd8 <UART_SetConfig+0x8c8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b0a      	cmp	r3, #10
 8004fb0:	d00d      	beq.n	8004fce <UART_SetConfig+0x8be>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b0b      	cmp	r3, #11
 8004fb8:	d104      	bne.n	8004fc4 <UART_SetConfig+0x8b4>
 8004fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	e05b      	b.n	800507c <UART_SetConfig+0x96c>
 8004fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	e056      	b.n	800507c <UART_SetConfig+0x96c>
 8004fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fd2:	f04f 0400 	mov.w	r4, #0
 8004fd6:	e051      	b.n	800507c <UART_SetConfig+0x96c>
 8004fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	e04c      	b.n	800507c <UART_SetConfig+0x96c>
 8004fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	e047      	b.n	800507c <UART_SetConfig+0x96c>
 8004fec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ff0:	f04f 0400 	mov.w	r4, #0
 8004ff4:	e042      	b.n	800507c <UART_SetConfig+0x96c>
 8004ff6:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <UART_SetConfig+0x958>)
 8004ff8:	f04f 0400 	mov.w	r4, #0
 8004ffc:	e03e      	b.n	800507c <UART_SetConfig+0x96c>
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <UART_SetConfig+0x95c>)
 8005000:	f04f 0400 	mov.w	r4, #0
 8005004:	e03a      	b.n	800507c <UART_SetConfig+0x96c>
 8005006:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800500a:	f04f 0400 	mov.w	r4, #0
 800500e:	e035      	b.n	800507c <UART_SetConfig+0x96c>
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <UART_SetConfig+0x960>)
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	e031      	b.n	800507c <UART_SetConfig+0x96c>
 8005018:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800501c:	f04f 0400 	mov.w	r4, #0
 8005020:	e02c      	b.n	800507c <UART_SetConfig+0x96c>
 8005022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005026:	f04f 0400 	mov.w	r4, #0
 800502a:	e027      	b.n	800507c <UART_SetConfig+0x96c>
 800502c:	f3af 8000 	nop.w
 8005030:	14585500 	.word	0x14585500
 8005034:	00000000 	.word	0x00000000
 8005038:	28b0aa00 	.word	0x28b0aa00
 800503c:	00000000 	.word	0x00000000
 8005040:	00f42400 	.word	0x00f42400
 8005044:	f4240000 	.word	0xf4240000
 8005048:	01e84800 	.word	0x01e84800
 800504c:	03d09000 	.word	0x03d09000
 8005050:	07a12000 	.word	0x07a12000
 8005054:	0f424000 	.word	0x0f424000
 8005058:	186a0000 	.word	0x186a0000
 800505c:	1e848000 	.word	0x1e848000
 8005060:	3d090000 	.word	0x3d090000
 8005064:	7a120000 	.word	0x7a120000
 8005068:	000aaa00 	.word	0x000aaa00
 800506c:	000ccc00 	.word	0x000ccc00
 8005070:	00155500 	.word	0x00155500
 8005074:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	0852      	lsrs	r2, r2, #1
 8005082:	4611      	mov	r1, r2
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	eb13 0b01 	adds.w	fp, r3, r1
 800508c:	eb44 0c02 	adc.w	ip, r4, r2
 8005090:	4658      	mov	r0, fp
 8005092:	4661      	mov	r1, ip
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	f7fb f876 	bl	8000190 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	61fb      	str	r3, [r7, #28]
            break;
 80050aa:	e002      	b.n	80050b2 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	76fb      	strb	r3, [r7, #27]
            break;
 80050b0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b8:	d308      	bcc.n	80050cc <UART_SetConfig+0x9bc>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c0:	d204      	bcs.n	80050cc <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	e35b      	b.n	8005784 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e358      	b.n	8005784 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050da:	f040 81a6 	bne.w	800542a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80050de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050e2:	3b01      	subs	r3, #1
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	f200 8180 	bhi.w	80053ea <UART_SetConfig+0xcda>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x9e0>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005111 	.word	0x08005111
 80050f4:	080051c9 	.word	0x080051c9
 80050f8:	080053eb 	.word	0x080053eb
 80050fc:	08005271 	.word	0x08005271
 8005100:	080053eb 	.word	0x080053eb
 8005104:	080053eb 	.word	0x080053eb
 8005108:	080053eb 	.word	0x080053eb
 800510c:	08005329 	.word	0x08005329
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe fa36 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8005114:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d044      	beq.n	80051a8 <UART_SetConfig+0xa98>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b01      	cmp	r3, #1
 8005124:	d03e      	beq.n	80051a4 <UART_SetConfig+0xa94>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b02      	cmp	r3, #2
 800512c:	d038      	beq.n	80051a0 <UART_SetConfig+0xa90>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b03      	cmp	r3, #3
 8005134:	d032      	beq.n	800519c <UART_SetConfig+0xa8c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b04      	cmp	r3, #4
 800513c:	d02c      	beq.n	8005198 <UART_SetConfig+0xa88>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b05      	cmp	r3, #5
 8005144:	d026      	beq.n	8005194 <UART_SetConfig+0xa84>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b06      	cmp	r3, #6
 800514c:	d020      	beq.n	8005190 <UART_SetConfig+0xa80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b07      	cmp	r3, #7
 8005154:	d01a      	beq.n	800518c <UART_SetConfig+0xa7c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b08      	cmp	r3, #8
 800515c:	d014      	beq.n	8005188 <UART_SetConfig+0xa78>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b09      	cmp	r3, #9
 8005164:	d00e      	beq.n	8005184 <UART_SetConfig+0xa74>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b0a      	cmp	r3, #10
 800516c:	d008      	beq.n	8005180 <UART_SetConfig+0xa70>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b0b      	cmp	r3, #11
 8005174:	d102      	bne.n	800517c <UART_SetConfig+0xa6c>
 8005176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800517a:	e016      	b.n	80051aa <UART_SetConfig+0xa9a>
 800517c:	2301      	movs	r3, #1
 800517e:	e014      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	e012      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005188:	2320      	movs	r3, #32
 800518a:	e00e      	b.n	80051aa <UART_SetConfig+0xa9a>
 800518c:	2310      	movs	r3, #16
 800518e:	e00c      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005190:	230c      	movs	r3, #12
 8005192:	e00a      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005194:	230a      	movs	r3, #10
 8005196:	e008      	b.n	80051aa <UART_SetConfig+0xa9a>
 8005198:	2308      	movs	r3, #8
 800519a:	e006      	b.n	80051aa <UART_SetConfig+0xa9a>
 800519c:	2306      	movs	r3, #6
 800519e:	e004      	b.n	80051aa <UART_SetConfig+0xa9a>
 80051a0:	2304      	movs	r3, #4
 80051a2:	e002      	b.n	80051aa <UART_SetConfig+0xa9a>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e000      	b.n	80051aa <UART_SetConfig+0xa9a>
 80051a8:	2301      	movs	r3, #1
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b0:	005a      	lsls	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	61fb      	str	r3, [r7, #28]
        break;
 80051c6:	e113      	b.n	80053f0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d043      	beq.n	8005258 <UART_SetConfig+0xb48>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d03d      	beq.n	8005254 <UART_SetConfig+0xb44>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d037      	beq.n	8005250 <UART_SetConfig+0xb40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d031      	beq.n	800524c <UART_SetConfig+0xb3c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d02b      	beq.n	8005248 <UART_SetConfig+0xb38>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d025      	beq.n	8005244 <UART_SetConfig+0xb34>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d01f      	beq.n	8005240 <UART_SetConfig+0xb30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b07      	cmp	r3, #7
 8005206:	d019      	beq.n	800523c <UART_SetConfig+0xb2c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b08      	cmp	r3, #8
 800520e:	d013      	beq.n	8005238 <UART_SetConfig+0xb28>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b09      	cmp	r3, #9
 8005216:	d00d      	beq.n	8005234 <UART_SetConfig+0xb24>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b0a      	cmp	r3, #10
 800521e:	d007      	beq.n	8005230 <UART_SetConfig+0xb20>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b0b      	cmp	r3, #11
 8005226:	d101      	bne.n	800522c <UART_SetConfig+0xb1c>
 8005228:	4b8c      	ldr	r3, [pc, #560]	; (800545c <UART_SetConfig+0xd4c>)
 800522a:	e016      	b.n	800525a <UART_SetConfig+0xb4a>
 800522c:	4b8c      	ldr	r3, [pc, #560]	; (8005460 <UART_SetConfig+0xd50>)
 800522e:	e014      	b.n	800525a <UART_SetConfig+0xb4a>
 8005230:	4b8c      	ldr	r3, [pc, #560]	; (8005464 <UART_SetConfig+0xd54>)
 8005232:	e012      	b.n	800525a <UART_SetConfig+0xb4a>
 8005234:	4b8c      	ldr	r3, [pc, #560]	; (8005468 <UART_SetConfig+0xd58>)
 8005236:	e010      	b.n	800525a <UART_SetConfig+0xb4a>
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <UART_SetConfig+0xd5c>)
 800523a:	e00e      	b.n	800525a <UART_SetConfig+0xb4a>
 800523c:	4b8c      	ldr	r3, [pc, #560]	; (8005470 <UART_SetConfig+0xd60>)
 800523e:	e00c      	b.n	800525a <UART_SetConfig+0xb4a>
 8005240:	4b8c      	ldr	r3, [pc, #560]	; (8005474 <UART_SetConfig+0xd64>)
 8005242:	e00a      	b.n	800525a <UART_SetConfig+0xb4a>
 8005244:	4b8c      	ldr	r3, [pc, #560]	; (8005478 <UART_SetConfig+0xd68>)
 8005246:	e008      	b.n	800525a <UART_SetConfig+0xb4a>
 8005248:	4b8c      	ldr	r3, [pc, #560]	; (800547c <UART_SetConfig+0xd6c>)
 800524a:	e006      	b.n	800525a <UART_SetConfig+0xb4a>
 800524c:	4b8c      	ldr	r3, [pc, #560]	; (8005480 <UART_SetConfig+0xd70>)
 800524e:	e004      	b.n	800525a <UART_SetConfig+0xb4a>
 8005250:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <UART_SetConfig+0xd74>)
 8005252:	e002      	b.n	800525a <UART_SetConfig+0xb4a>
 8005254:	4b8c      	ldr	r3, [pc, #560]	; (8005488 <UART_SetConfig+0xd78>)
 8005256:	e000      	b.n	800525a <UART_SetConfig+0xb4a>
 8005258:	4b81      	ldr	r3, [pc, #516]	; (8005460 <UART_SetConfig+0xd50>)
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	0852      	lsrs	r2, r2, #1
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	b29b      	uxth	r3, r3
 800526c:	61fb      	str	r3, [r7, #28]
        break;
 800526e:	e0bf      	b.n	80053f0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005270:	f7fe f8f2 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8005274:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d044      	beq.n	8005308 <UART_SetConfig+0xbf8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b01      	cmp	r3, #1
 8005284:	d03e      	beq.n	8005304 <UART_SetConfig+0xbf4>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b02      	cmp	r3, #2
 800528c:	d038      	beq.n	8005300 <UART_SetConfig+0xbf0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b03      	cmp	r3, #3
 8005294:	d032      	beq.n	80052fc <UART_SetConfig+0xbec>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b04      	cmp	r3, #4
 800529c:	d02c      	beq.n	80052f8 <UART_SetConfig+0xbe8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d026      	beq.n	80052f4 <UART_SetConfig+0xbe4>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d020      	beq.n	80052f0 <UART_SetConfig+0xbe0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b07      	cmp	r3, #7
 80052b4:	d01a      	beq.n	80052ec <UART_SetConfig+0xbdc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d014      	beq.n	80052e8 <UART_SetConfig+0xbd8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	d00e      	beq.n	80052e4 <UART_SetConfig+0xbd4>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b0a      	cmp	r3, #10
 80052cc:	d008      	beq.n	80052e0 <UART_SetConfig+0xbd0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b0b      	cmp	r3, #11
 80052d4:	d102      	bne.n	80052dc <UART_SetConfig+0xbcc>
 80052d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052da:	e016      	b.n	800530a <UART_SetConfig+0xbfa>
 80052dc:	2301      	movs	r3, #1
 80052de:	e014      	b.n	800530a <UART_SetConfig+0xbfa>
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	e012      	b.n	800530a <UART_SetConfig+0xbfa>
 80052e4:	2340      	movs	r3, #64	; 0x40
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0xbfa>
 80052e8:	2320      	movs	r3, #32
 80052ea:	e00e      	b.n	800530a <UART_SetConfig+0xbfa>
 80052ec:	2310      	movs	r3, #16
 80052ee:	e00c      	b.n	800530a <UART_SetConfig+0xbfa>
 80052f0:	230c      	movs	r3, #12
 80052f2:	e00a      	b.n	800530a <UART_SetConfig+0xbfa>
 80052f4:	230a      	movs	r3, #10
 80052f6:	e008      	b.n	800530a <UART_SetConfig+0xbfa>
 80052f8:	2308      	movs	r3, #8
 80052fa:	e006      	b.n	800530a <UART_SetConfig+0xbfa>
 80052fc:	2306      	movs	r3, #6
 80052fe:	e004      	b.n	800530a <UART_SetConfig+0xbfa>
 8005300:	2304      	movs	r3, #4
 8005302:	e002      	b.n	800530a <UART_SetConfig+0xbfa>
 8005304:	2302      	movs	r3, #2
 8005306:	e000      	b.n	800530a <UART_SetConfig+0xbfa>
 8005308:	2301      	movs	r3, #1
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	005a      	lsls	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	b29b      	uxth	r3, r3
 8005324:	61fb      	str	r3, [r7, #28]
        break;
 8005326:	e063      	b.n	80053f0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d04f      	beq.n	80053d0 <UART_SetConfig+0xcc0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b01      	cmp	r3, #1
 8005336:	d048      	beq.n	80053ca <UART_SetConfig+0xcba>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b02      	cmp	r3, #2
 800533e:	d041      	beq.n	80053c4 <UART_SetConfig+0xcb4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b03      	cmp	r3, #3
 8005346:	d03a      	beq.n	80053be <UART_SetConfig+0xcae>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b04      	cmp	r3, #4
 800534e:	d033      	beq.n	80053b8 <UART_SetConfig+0xca8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b05      	cmp	r3, #5
 8005356:	d02c      	beq.n	80053b2 <UART_SetConfig+0xca2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2b06      	cmp	r3, #6
 800535e:	d025      	beq.n	80053ac <UART_SetConfig+0xc9c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2b07      	cmp	r3, #7
 8005366:	d01e      	beq.n	80053a6 <UART_SetConfig+0xc96>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b08      	cmp	r3, #8
 800536e:	d017      	beq.n	80053a0 <UART_SetConfig+0xc90>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b09      	cmp	r3, #9
 8005376:	d010      	beq.n	800539a <UART_SetConfig+0xc8a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b0a      	cmp	r3, #10
 800537e:	d009      	beq.n	8005394 <UART_SetConfig+0xc84>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	2b0b      	cmp	r3, #11
 8005386:	d102      	bne.n	800538e <UART_SetConfig+0xc7e>
 8005388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800538c:	e022      	b.n	80053d4 <UART_SetConfig+0xcc4>
 800538e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005392:	e01f      	b.n	80053d4 <UART_SetConfig+0xcc4>
 8005394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005398:	e01c      	b.n	80053d4 <UART_SetConfig+0xcc4>
 800539a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539e:	e019      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a4:	e016      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053aa:	e013      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053ac:	f241 5354 	movw	r3, #5460	; 0x1554
 80053b0:	e010      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053b2:	f641 1398 	movw	r3, #6552	; 0x1998
 80053b6:	e00d      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053bc:	e00a      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053be:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80053c2:	e007      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053c8:	e004      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	e001      	b.n	80053d4 <UART_SetConfig+0xcc4>
 80053d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6852      	ldr	r2, [r2, #4]
 80053d8:	0852      	lsrs	r2, r2, #1
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	61fb      	str	r3, [r7, #28]
        break;
 80053e8:	e002      	b.n	80053f0 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	76fb      	strb	r3, [r7, #27]
        break;
 80053ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d916      	bls.n	8005424 <UART_SetConfig+0xd14>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d212      	bcs.n	8005424 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f023 030f 	bic.w	r3, r3, #15
 8005406:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	b29a      	uxth	r2, r3
 8005414:	89fb      	ldrh	r3, [r7, #14]
 8005416:	4313      	orrs	r3, r2
 8005418:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	89fa      	ldrh	r2, [r7, #14]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e1af      	b.n	8005784 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	76fb      	strb	r3, [r7, #27]
 8005428:	e1ac      	b.n	8005784 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800542a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800542e:	3b01      	subs	r3, #1
 8005430:	2b07      	cmp	r3, #7
 8005432:	f200 8196 	bhi.w	8005762 <UART_SetConfig+0x1052>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0xd2c>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	0800548d 	.word	0x0800548d
 8005440:	08005543 	.word	0x08005543
 8005444:	08005763 	.word	0x08005763
 8005448:	080055ed 	.word	0x080055ed
 800544c:	08005763 	.word	0x08005763
 8005450:	08005763 	.word	0x08005763
 8005454:	08005763 	.word	0x08005763
 8005458:	080056a3 	.word	0x080056a3
 800545c:	0001e848 	.word	0x0001e848
 8005460:	01e84800 	.word	0x01e84800
 8005464:	0003d090 	.word	0x0003d090
 8005468:	0007a120 	.word	0x0007a120
 800546c:	000f4240 	.word	0x000f4240
 8005470:	001e8480 	.word	0x001e8480
 8005474:	0028b0aa 	.word	0x0028b0aa
 8005478:	0030d400 	.word	0x0030d400
 800547c:	003d0900 	.word	0x003d0900
 8005480:	00516154 	.word	0x00516154
 8005484:	007a1200 	.word	0x007a1200
 8005488:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800548c:	f7fe f878 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8005490:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d044      	beq.n	8005524 <UART_SetConfig+0xe14>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d03e      	beq.n	8005520 <UART_SetConfig+0xe10>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d038      	beq.n	800551c <UART_SetConfig+0xe0c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d032      	beq.n	8005518 <UART_SetConfig+0xe08>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d02c      	beq.n	8005514 <UART_SetConfig+0xe04>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d026      	beq.n	8005510 <UART_SetConfig+0xe00>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d020      	beq.n	800550c <UART_SetConfig+0xdfc>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	d01a      	beq.n	8005508 <UART_SetConfig+0xdf8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d014      	beq.n	8005504 <UART_SetConfig+0xdf4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b09      	cmp	r3, #9
 80054e0:	d00e      	beq.n	8005500 <UART_SetConfig+0xdf0>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b0a      	cmp	r3, #10
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0xdec>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b0b      	cmp	r3, #11
 80054f0:	d102      	bne.n	80054f8 <UART_SetConfig+0xde8>
 80054f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054f6:	e016      	b.n	8005526 <UART_SetConfig+0xe16>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e014      	b.n	8005526 <UART_SetConfig+0xe16>
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	e012      	b.n	8005526 <UART_SetConfig+0xe16>
 8005500:	2340      	movs	r3, #64	; 0x40
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0xe16>
 8005504:	2320      	movs	r3, #32
 8005506:	e00e      	b.n	8005526 <UART_SetConfig+0xe16>
 8005508:	2310      	movs	r3, #16
 800550a:	e00c      	b.n	8005526 <UART_SetConfig+0xe16>
 800550c:	230c      	movs	r3, #12
 800550e:	e00a      	b.n	8005526 <UART_SetConfig+0xe16>
 8005510:	230a      	movs	r3, #10
 8005512:	e008      	b.n	8005526 <UART_SetConfig+0xe16>
 8005514:	2308      	movs	r3, #8
 8005516:	e006      	b.n	8005526 <UART_SetConfig+0xe16>
 8005518:	2306      	movs	r3, #6
 800551a:	e004      	b.n	8005526 <UART_SetConfig+0xe16>
 800551c:	2304      	movs	r3, #4
 800551e:	e002      	b.n	8005526 <UART_SetConfig+0xe16>
 8005520:	2302      	movs	r3, #2
 8005522:	e000      	b.n	8005526 <UART_SetConfig+0xe16>
 8005524:	2301      	movs	r3, #1
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fbb2 f2f3 	udiv	r2, r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	441a      	add	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	b29b      	uxth	r3, r3
 800553e:	61fb      	str	r3, [r7, #28]
        break;
 8005540:	e112      	b.n	8005768 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d044      	beq.n	80055d4 <UART_SetConfig+0xec4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b01      	cmp	r3, #1
 8005550:	d03e      	beq.n	80055d0 <UART_SetConfig+0xec0>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b02      	cmp	r3, #2
 8005558:	d038      	beq.n	80055cc <UART_SetConfig+0xebc>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b03      	cmp	r3, #3
 8005560:	d032      	beq.n	80055c8 <UART_SetConfig+0xeb8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b04      	cmp	r3, #4
 8005568:	d02c      	beq.n	80055c4 <UART_SetConfig+0xeb4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b05      	cmp	r3, #5
 8005570:	d026      	beq.n	80055c0 <UART_SetConfig+0xeb0>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b06      	cmp	r3, #6
 8005578:	d020      	beq.n	80055bc <UART_SetConfig+0xeac>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b07      	cmp	r3, #7
 8005580:	d01a      	beq.n	80055b8 <UART_SetConfig+0xea8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b08      	cmp	r3, #8
 8005588:	d014      	beq.n	80055b4 <UART_SetConfig+0xea4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b09      	cmp	r3, #9
 8005590:	d00e      	beq.n	80055b0 <UART_SetConfig+0xea0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d008      	beq.n	80055ac <UART_SetConfig+0xe9c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b0b      	cmp	r3, #11
 80055a0:	d102      	bne.n	80055a8 <UART_SetConfig+0xe98>
 80055a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80055a6:	e016      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055a8:	4b80      	ldr	r3, [pc, #512]	; (80057ac <UART_SetConfig+0x109c>)
 80055aa:	e014      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055ac:	4b80      	ldr	r3, [pc, #512]	; (80057b0 <UART_SetConfig+0x10a0>)
 80055ae:	e012      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055b0:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <UART_SetConfig+0x10a4>)
 80055b2:	e010      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055b4:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <UART_SetConfig+0x10a8>)
 80055b6:	e00e      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055b8:	4b80      	ldr	r3, [pc, #512]	; (80057bc <UART_SetConfig+0x10ac>)
 80055ba:	e00c      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055bc:	4b80      	ldr	r3, [pc, #512]	; (80057c0 <UART_SetConfig+0x10b0>)
 80055be:	e00a      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055c0:	4b80      	ldr	r3, [pc, #512]	; (80057c4 <UART_SetConfig+0x10b4>)
 80055c2:	e008      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055c4:	4b80      	ldr	r3, [pc, #512]	; (80057c8 <UART_SetConfig+0x10b8>)
 80055c6:	e006      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055c8:	4b80      	ldr	r3, [pc, #512]	; (80057cc <UART_SetConfig+0x10bc>)
 80055ca:	e004      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055cc:	4b80      	ldr	r3, [pc, #512]	; (80057d0 <UART_SetConfig+0x10c0>)
 80055ce:	e002      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055d0:	4b80      	ldr	r3, [pc, #512]	; (80057d4 <UART_SetConfig+0x10c4>)
 80055d2:	e000      	b.n	80055d6 <UART_SetConfig+0xec6>
 80055d4:	4b75      	ldr	r3, [pc, #468]	; (80057ac <UART_SetConfig+0x109c>)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	0852      	lsrs	r2, r2, #1
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	61fb      	str	r3, [r7, #28]
        break;
 80055ea:	e0bd      	b.n	8005768 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ec:	f7fd ff34 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80055f0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d044      	beq.n	8005684 <UART_SetConfig+0xf74>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d03e      	beq.n	8005680 <UART_SetConfig+0xf70>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b02      	cmp	r3, #2
 8005608:	d038      	beq.n	800567c <UART_SetConfig+0xf6c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b03      	cmp	r3, #3
 8005610:	d032      	beq.n	8005678 <UART_SetConfig+0xf68>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b04      	cmp	r3, #4
 8005618:	d02c      	beq.n	8005674 <UART_SetConfig+0xf64>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b05      	cmp	r3, #5
 8005620:	d026      	beq.n	8005670 <UART_SetConfig+0xf60>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b06      	cmp	r3, #6
 8005628:	d020      	beq.n	800566c <UART_SetConfig+0xf5c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b07      	cmp	r3, #7
 8005630:	d01a      	beq.n	8005668 <UART_SetConfig+0xf58>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b08      	cmp	r3, #8
 8005638:	d014      	beq.n	8005664 <UART_SetConfig+0xf54>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b09      	cmp	r3, #9
 8005640:	d00e      	beq.n	8005660 <UART_SetConfig+0xf50>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b0a      	cmp	r3, #10
 8005648:	d008      	beq.n	800565c <UART_SetConfig+0xf4c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b0b      	cmp	r3, #11
 8005650:	d102      	bne.n	8005658 <UART_SetConfig+0xf48>
 8005652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005656:	e016      	b.n	8005686 <UART_SetConfig+0xf76>
 8005658:	2301      	movs	r3, #1
 800565a:	e014      	b.n	8005686 <UART_SetConfig+0xf76>
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	e012      	b.n	8005686 <UART_SetConfig+0xf76>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	e010      	b.n	8005686 <UART_SetConfig+0xf76>
 8005664:	2320      	movs	r3, #32
 8005666:	e00e      	b.n	8005686 <UART_SetConfig+0xf76>
 8005668:	2310      	movs	r3, #16
 800566a:	e00c      	b.n	8005686 <UART_SetConfig+0xf76>
 800566c:	230c      	movs	r3, #12
 800566e:	e00a      	b.n	8005686 <UART_SetConfig+0xf76>
 8005670:	230a      	movs	r3, #10
 8005672:	e008      	b.n	8005686 <UART_SetConfig+0xf76>
 8005674:	2308      	movs	r3, #8
 8005676:	e006      	b.n	8005686 <UART_SetConfig+0xf76>
 8005678:	2306      	movs	r3, #6
 800567a:	e004      	b.n	8005686 <UART_SetConfig+0xf76>
 800567c:	2304      	movs	r3, #4
 800567e:	e002      	b.n	8005686 <UART_SetConfig+0xf76>
 8005680:	2302      	movs	r3, #2
 8005682:	e000      	b.n	8005686 <UART_SetConfig+0xf76>
 8005684:	2301      	movs	r3, #1
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	fbb2 f2f3 	udiv	r2, r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	b29b      	uxth	r3, r3
 800569e:	61fb      	str	r3, [r7, #28]
        break;
 80056a0:	e062      	b.n	8005768 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04e      	beq.n	8005748 <UART_SetConfig+0x1038>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d047      	beq.n	8005742 <UART_SetConfig+0x1032>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d040      	beq.n	800573c <UART_SetConfig+0x102c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d039      	beq.n	8005736 <UART_SetConfig+0x1026>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d032      	beq.n	8005730 <UART_SetConfig+0x1020>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d02b      	beq.n	800572a <UART_SetConfig+0x101a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d024      	beq.n	8005724 <UART_SetConfig+0x1014>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b07      	cmp	r3, #7
 80056e0:	d01d      	beq.n	800571e <UART_SetConfig+0x100e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d016      	beq.n	8005718 <UART_SetConfig+0x1008>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b09      	cmp	r3, #9
 80056f0:	d00f      	beq.n	8005712 <UART_SetConfig+0x1002>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b0a      	cmp	r3, #10
 80056f8:	d008      	beq.n	800570c <UART_SetConfig+0xffc>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2b0b      	cmp	r3, #11
 8005700:	d101      	bne.n	8005706 <UART_SetConfig+0xff6>
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	e022      	b.n	800574c <UART_SetConfig+0x103c>
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	e01f      	b.n	800574c <UART_SetConfig+0x103c>
 800570c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005710:	e01c      	b.n	800574c <UART_SetConfig+0x103c>
 8005712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005716:	e019      	b.n	800574c <UART_SetConfig+0x103c>
 8005718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800571c:	e016      	b.n	800574c <UART_SetConfig+0x103c>
 800571e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005722:	e013      	b.n	800574c <UART_SetConfig+0x103c>
 8005724:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005728:	e010      	b.n	800574c <UART_SetConfig+0x103c>
 800572a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800572e:	e00d      	b.n	800574c <UART_SetConfig+0x103c>
 8005730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005734:	e00a      	b.n	800574c <UART_SetConfig+0x103c>
 8005736:	f241 5355 	movw	r3, #5461	; 0x1555
 800573a:	e007      	b.n	800574c <UART_SetConfig+0x103c>
 800573c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005740:	e004      	b.n	800574c <UART_SetConfig+0x103c>
 8005742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005746:	e001      	b.n	800574c <UART_SetConfig+0x103c>
 8005748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6852      	ldr	r2, [r2, #4]
 8005750:	0852      	lsrs	r2, r2, #1
 8005752:	441a      	add	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	b29b      	uxth	r3, r3
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e002      	b.n	8005768 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	76fb      	strb	r3, [r7, #27]
        break;
 8005766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d908      	bls.n	8005780 <UART_SetConfig+0x1070>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d204      	bcs.n	8005780 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	e001      	b.n	8005784 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80057a0:	7efb      	ldrb	r3, [r7, #27]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3728      	adds	r7, #40	; 0x28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	0001e848 	.word	0x0001e848
 80057b4:	0003d090 	.word	0x0003d090
 80057b8:	0007a120 	.word	0x0007a120
 80057bc:	000f4240 	.word	0x000f4240
 80057c0:	00145855 	.word	0x00145855
 80057c4:	00186a00 	.word	0x00186a00
 80057c8:	001e8480 	.word	0x001e8480
 80057cc:	0028b0aa 	.word	0x0028b0aa
 80057d0:	003d0900 	.word	0x003d0900
 80057d4:	007a1200 	.word	0x007a1200

080057d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d6:	d10a      	bne.n	80058ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	605a      	str	r2, [r3, #4]
  }
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800592c:	f7fc f974 	bl	8001c18 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d10e      	bne.n	800595e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f82c 	bl	80059ac <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e022      	b.n	80059a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b04      	cmp	r3, #4
 800596a:	d10e      	bne.n	800598a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f816 	bl	80059ac <UART_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e00c      	b.n	80059a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059bc:	e062      	b.n	8005a84 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d05e      	beq.n	8005a84 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fc f927 	bl	8001c18 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <UART_WaitOnFlagUntilTimeout+0x30>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d11d      	bne.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059ea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e045      	b.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02e      	beq.n	8005a84 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a34:	d126      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e00f      	b.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d08d      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ac2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7fe fdf1 	bl	80046f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fb fbf1 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e027      	b.n	8005bf4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e02d      	b.n	8005c74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2224      	movs	r2, #36	; 0x24
 8005c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f84f 	bl	8005cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e02d      	b.n	8005cf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2224      	movs	r2, #36	; 0x24
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f811 	bl	8005cf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005d00:	4a2f      	ldr	r2, [pc, #188]	; (8005dc0 <UARTEx_SetNbDataToProcess+0xc8>)
 8005d02:	f107 0314 	add.w	r3, r7, #20
 8005d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d0a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <UARTEx_SetNbDataToProcess+0xcc>)
 8005d10:	f107 030c 	add.w	r3, r7, #12
 8005d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d18:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d34:	e03d      	b.n	8005db2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d36:	2308      	movs	r3, #8
 8005d38:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	0e5b      	lsrs	r3, r3, #25
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	0f5b      	lsrs	r3, r3, #29
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005d5e:	7fbb      	ldrb	r3, [r7, #30]
 8005d60:	7f3a      	ldrb	r2, [r7, #28]
 8005d62:	f107 0120 	add.w	r1, r7, #32
 8005d66:	440a      	add	r2, r1
 8005d68:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	7f3a      	ldrb	r2, [r7, #28]
 8005d72:	f107 0120 	add.w	r1, r7, #32
 8005d76:	440a      	add	r2, r1
 8005d78:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d88:	7ffb      	ldrb	r3, [r7, #31]
 8005d8a:	7f7a      	ldrb	r2, [r7, #29]
 8005d8c:	f107 0120 	add.w	r1, r7, #32
 8005d90:	440a      	add	r2, r1
 8005d92:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	7f7a      	ldrb	r2, [r7, #29]
 8005d9c:	f107 0120 	add.w	r1, r7, #32
 8005da0:	440a      	add	r2, r1
 8005da2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005da6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005db2:	bf00      	nop
 8005db4:	3724      	adds	r7, #36	; 0x24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	08009064 	.word	0x08009064
 8005dc4:	0800906c 	.word	0x0800906c

08005dc8 <MX_MEMS_Init>:
#include "app_x-cube-mems1.h"
#include "main.h"
#include <stdio.h>

void MX_MEMS_Init(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005dee:	f107 0308 	add.w	r3, r7, #8
 8005df2:	2218      	movs	r2, #24
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff98 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005dfc:	233f      	movs	r3, #63	; 0x3f
 8005dfe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005e00:	2381      	movs	r3, #129	; 0x81
 8005e02:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fb58 	bl	80074c8 <hci_send_req>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da01      	bge.n	8005e22 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005e1e:	23ff      	movs	r3, #255	; 0xff
 8005e20:	e005      	b.n	8005e2e <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	e000      	b.n	8005e2e <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8005e36:	b5b0      	push	{r4, r5, r7, lr}
 8005e38:	b0ce      	sub	sp, #312	; 0x138
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	462a      	mov	r2, r5
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	1cbb      	adds	r3, r7, #2
 8005e52:	4602      	mov	r2, r0
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	1dbb      	adds	r3, r7, #6
 8005e58:	460a      	mov	r2, r1
 8005e5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005e64:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005e68:	3308      	adds	r3, #8
 8005e6a:	f107 0210 	add.w	r2, r7, #16
 8005e6e:	4413      	add	r3, r2
 8005e70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005e74:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005e78:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3309      	adds	r3, #9
 8005e80:	f107 0210 	add.w	r2, r7, #16
 8005e84:	4413      	add	r3, r2
 8005e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005e8a:	f107 030f 	add.w	r3, r7, #15
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8005e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e9c:	1dfa      	adds	r2, r7, #7
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8005eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb0:	1d3a      	adds	r2, r7, #4
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8005ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ec6:	1cba      	adds	r2, r7, #2
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005edc:	1dba      	adds	r2, r7, #6
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8005eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ef0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005ef4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8005f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f04:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005f08:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8005f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f18:	3308      	adds	r3, #8
 8005f1a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005f1e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fef2 	bl	8006d0c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005f28:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005f2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005f30:	4413      	add	r3, r2
 8005f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f3a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005f3e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f44:	3301      	adds	r3, #1
 8005f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8005f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005f54:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fed7 	bl	8006d0c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005f5e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005f62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005f66:	4413      	add	r3, r2
 8005f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8005f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f70:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005f74:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8005f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f84:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005f88:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f8e:	3302      	adds	r3, #2
 8005f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005f94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f98:	2218      	movs	r2, #24
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fec5 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fa2:	233f      	movs	r3, #63	; 0x3f
 8005fa4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005fa8:	2383      	movs	r3, #131	; 0x83
 8005faa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fae:	f107 0310 	add.w	r3, r7, #16
 8005fb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005fbe:	f107 030f 	add.w	r3, r7, #15
 8005fc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8005fcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fa78 	bl	80074c8 <hci_send_req>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da01      	bge.n	8005fe2 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005fde:	23ff      	movs	r3, #255	; 0xff
 8005fe0:	e009      	b.n	8005ff6 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8005fe2:	f107 030f 	add.w	r3, r7, #15
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8005fec:	f107 030f 	add.w	r3, r7, #15
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	e000      	b.n	8005ff6 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdb0      	pop	{r4, r5, r7, pc}

08006000 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b0cc      	sub	sp, #304	; 0x130
 8006004:	af00      	add	r7, sp, #0
 8006006:	4602      	mov	r2, r0
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800600c:	f107 0310 	add.w	r3, r7, #16
 8006010:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006014:	f107 030f 	add.w	r3, r7, #15
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	1dfa      	adds	r2, r7, #7
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800602c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006030:	3301      	adds	r3, #1
 8006032:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006036:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800603a:	2218      	movs	r2, #24
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fe74 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006044:	233f      	movs	r3, #63	; 0x3f
 8006046:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800604a:	2385      	movs	r3, #133	; 0x85
 800604c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006050:	f107 0310 	add.w	r3, r7, #16
 8006054:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800605c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006060:	f107 030f 	add.w	r3, r7, #15
 8006064:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006068:	2301      	movs	r3, #1
 800606a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800606e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fa27 	bl	80074c8 <hci_send_req>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	da01      	bge.n	8006084 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8006080:	23ff      	movs	r3, #255	; 0xff
 8006082:	e009      	b.n	8006098 <aci_gap_set_io_capability+0x98>
  if (status) 
 8006084:	f107 030f 	add.w	r3, r7, #15
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800608e:	f107 030f 	add.w	r3, r7, #15
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	e000      	b.n	8006098 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 80060a2:	b5b0      	push	{r4, r5, r7, lr}
 80060a4:	b0cc      	sub	sp, #304	; 0x130
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	4605      	mov	r5, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	1dfb      	adds	r3, r7, #7
 80060b2:	462a      	mov	r2, r5
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	1dbb      	adds	r3, r7, #6
 80060b8:	4622      	mov	r2, r4
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	1d7b      	adds	r3, r7, #5
 80060be:	4602      	mov	r2, r0
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	460a      	mov	r2, r1
 80060c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060d0:	f107 030f 	add.w	r3, r7, #15
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80060de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e2:	1dfa      	adds	r2, r7, #7
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80060e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80060f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f6:	1dba      	adds	r2, r7, #6
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80060fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006100:	3301      	adds	r3, #1
 8006102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8006106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610a:	1d7a      	adds	r2, r7, #5
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006114:	3301      	adds	r3, #1
 8006116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800611a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611e:	1d3a      	adds	r2, r7, #4
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006124:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006128:	3301      	adds	r3, #1
 800612a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006136:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613c:	3301      	adds	r3, #1
 800613e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800614a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800614c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8006156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800615e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006164:	3301      	adds	r3, #1
 8006166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800616a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006172:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800617a:	3304      	adds	r3, #4
 800617c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006188:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800618a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800618e:	3301      	adds	r3, #1
 8006190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006194:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006198:	2218      	movs	r2, #24
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fdc5 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80061a2:	233f      	movs	r3, #63	; 0x3f
 80061a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80061a8:	2386      	movs	r3, #134	; 0x86
 80061aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061ae:	f107 0310 	add.w	r3, r7, #16
 80061b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80061be:	f107 030f 	add.w	r3, r7, #15
 80061c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80061cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 f978 	bl	80074c8 <hci_send_req>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da01      	bge.n	80061e2 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 80061de:	23ff      	movs	r3, #255	; 0xff
 80061e0:	e009      	b.n	80061f6 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 80061e2:	f107 030f 	add.w	r3, r7, #15
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 80061ec:	f107 030f 	add.w	r3, r7, #15
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	e000      	b.n	80061f6 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bdb0      	pop	{r4, r5, r7, pc}

08006200 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b0cd      	sub	sp, #308	; 0x134
 8006204:	af00      	add	r7, sp, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	463a      	mov	r2, r7
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	4622      	mov	r2, r4
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	1dbb      	adds	r3, r7, #6
 8006218:	4602      	mov	r2, r0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	1d7b      	adds	r3, r7, #5
 800621e:	460a      	mov	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006222:	f107 0310 	add.w	r3, r7, #16
 8006226:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	2207      	movs	r2, #7
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fd7a 	bl	8006d2c <Osal_MemSet>
  int index_input = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	1dfa      	adds	r2, r7, #7
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800624c:	3301      	adds	r3, #1
 800624e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8006252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006256:	1dba      	adds	r2, r7, #6
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800625c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	1d7a      	adds	r2, r7, #5
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006274:	3301      	adds	r3, #1
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800627a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800627e:	2218      	movs	r2, #24
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fd52 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006288:	233f      	movs	r3, #63	; 0x3f
 800628a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800628e:	238a      	movs	r3, #138	; 0x8a
 8006290:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800629c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80062a4:	f107 0308 	add.w	r3, r7, #8
 80062a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80062ac:	2307      	movs	r3, #7
 80062ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80062b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f905 	bl	80074c8 <hci_send_req>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da01      	bge.n	80062c8 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80062c4:	23ff      	movs	r3, #255	; 0xff
 80062c6:	e021      	b.n	800630c <aci_gap_init+0x10c>
  if (resp.Status) 
 80062c8:	f107 0308 	add.w	r3, r7, #8
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <aci_gap_init+0xda>
  {
    return resp.Status;
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	e018      	b.n	800630c <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80062da:	f107 0308 	add.w	r3, r7, #8
 80062de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80062f8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006308:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}

08006316 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b0cc      	sub	sp, #304	; 0x130
 800631a:	af00      	add	r7, sp, #0
 800631c:	4602      	mov	r2, r0
 800631e:	463b      	mov	r3, r7
 8006320:	6019      	str	r1, [r3, #0]
 8006322:	1dfb      	adds	r3, r7, #7
 8006324:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006326:	f107 0310 	add.w	r3, r7, #16
 800632a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800632e:	f107 030f 	add.w	r3, r7, #15
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800633c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006340:	1dfa      	adds	r2, r7, #7
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800634a:	3301      	adds	r3, #1
 800634c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	1c58      	adds	r0, r3, #1
 8006356:	1dfb      	adds	r3, r7, #7
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	463b      	mov	r3, r7
 800635c:	6819      	ldr	r1, [r3, #0]
 800635e:	f000 fcd5 	bl	8006d0c <Osal_MemCpy>
  index_input += AdvDataLen;
 8006362:	1dfb      	adds	r3, r7, #7
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800636a:	4413      	add	r3, r2
 800636c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006370:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006374:	2218      	movs	r2, #24
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fcd7 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800637e:	233f      	movs	r3, #63	; 0x3f
 8006380:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006384:	238e      	movs	r3, #142	; 0x8e
 8006386:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800638a:	f107 0310 	add.w	r3, r7, #16
 800638e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006392:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006396:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800639a:	f107 030f 	add.w	r3, r7, #15
 800639e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80063a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f88a 	bl	80074c8 <hci_send_req>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da01      	bge.n	80063be <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80063ba:	23ff      	movs	r3, #255	; 0xff
 80063bc:	e009      	b.n	80063d2 <aci_gap_update_adv_data+0xbc>
  if (status) 
 80063be:	f107 030f 	add.w	r3, r7, #15
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <aci_gap_update_adv_data+0xba>
  {
    return status;
 80063c8:	f107 030f 	add.w	r3, r7, #15
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	e000      	b.n	80063d2 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80063e6:	f107 0308 	add.w	r3, r7, #8
 80063ea:	2218      	movs	r2, #24
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fc9c 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80063f4:	233f      	movs	r3, #63	; 0x3f
 80063f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80063f8:	2392      	movs	r3, #146	; 0x92
 80063fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80063fc:	1dfb      	adds	r3, r7, #7
 80063fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006404:	f107 0308 	add.w	r3, r7, #8
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f85c 	bl	80074c8 <hci_send_req>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	da01      	bge.n	800641a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006416:	23ff      	movs	r3, #255	; 0xff
 8006418:	e005      	b.n	8006426 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	e000      	b.n	8006426 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b088      	sub	sp, #32
 8006432:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006438:	f107 0308 	add.w	r3, r7, #8
 800643c:	2218      	movs	r2, #24
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fc73 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006446:	233f      	movs	r3, #63	; 0x3f
 8006448:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800644a:	f240 1301 	movw	r3, #257	; 0x101
 800644e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006454:	2301      	movs	r3, #1
 8006456:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006458:	f107 0308 	add.w	r3, r7, #8
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f832 	bl	80074c8 <hci_send_req>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	da01      	bge.n	800646e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800646a:	23ff      	movs	r3, #255	; 0xff
 800646c:	e005      	b.n	800647a <aci_gatt_init+0x4c>
  if (status) 
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <aci_gatt_init+0x4a>
  {
    return status;
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	e000      	b.n	800647a <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8006482:	b590      	push	{r4, r7, lr}
 8006484:	b0cf      	sub	sp, #316	; 0x13c
 8006486:	af00      	add	r7, sp, #0
 8006488:	4604      	mov	r4, r0
 800648a:	4638      	mov	r0, r7
 800648c:	6001      	str	r1, [r0, #0]
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	1dfb      	adds	r3, r7, #7
 8006494:	4622      	mov	r2, r4
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	1dbb      	adds	r3, r7, #6
 800649a:	4602      	mov	r2, r0
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	1d7b      	adds	r3, r7, #5
 80064a0:	460a      	mov	r2, r1
 80064a2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80064a4:	f107 0310 	add.w	r3, r7, #16
 80064a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80064ac:	1dfb      	adds	r3, r7, #7
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d007      	beq.n	80064c4 <aci_gatt_add_service+0x42>
 80064b4:	1dfb      	adds	r3, r7, #7
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d101      	bne.n	80064c0 <aci_gatt_add_service+0x3e>
 80064bc:	2311      	movs	r3, #17
 80064be:	e002      	b.n	80064c6 <aci_gatt_add_service+0x44>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <aci_gatt_add_service+0x44>
 80064c4:	2303      	movs	r3, #3
 80064c6:	f107 0210 	add.w	r2, r7, #16
 80064ca:	4413      	add	r3, r2
 80064cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80064d0:	f107 030c 	add.w	r3, r7, #12
 80064d4:	2203      	movs	r2, #3
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fc27 	bl	8006d2c <Osal_MemSet>
  int index_input = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80064e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064e8:	1dfa      	adds	r2, r7, #7
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80064f8:	1dfb      	adds	r3, r7, #7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d002      	beq.n	8006506 <aci_gatt_add_service+0x84>
 8006500:	2b02      	cmp	r3, #2
 8006502:	d004      	beq.n	800650e <aci_gatt_add_service+0x8c>
 8006504:	e007      	b.n	8006516 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8006506:	2302      	movs	r3, #2
 8006508:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800650c:	e005      	b.n	800651a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800650e:	2310      	movs	r3, #16
 8006510:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006514:	e001      	b.n	800651a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8006516:	2347      	movs	r3, #71	; 0x47
 8006518:	e05d      	b.n	80065d6 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800651a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800651e:	1c58      	adds	r0, r3, #1
 8006520:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006524:	463b      	mov	r3, r7
 8006526:	6819      	ldr	r1, [r3, #0]
 8006528:	f000 fbf0 	bl	8006d0c <Osal_MemCpy>
    index_input += size;
 800652c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006530:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006534:	4413      	add	r3, r2
 8006536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800653a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653e:	1dba      	adds	r2, r7, #6
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006544:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	1d7a      	adds	r2, r7, #5
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800655c:	3301      	adds	r3, #1
 800655e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006566:	2218      	movs	r2, #24
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fbde 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006570:	233f      	movs	r3, #63	; 0x3f
 8006572:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006576:	f44f 7381 	mov.w	r3, #258	; 0x102
 800657a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800657e:	f107 0310 	add.w	r3, r7, #16
 8006582:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800658a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800658e:	f107 030c 	add.w	r3, r7, #12
 8006592:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006596:	2303      	movs	r3, #3
 8006598:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800659c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 ff90 	bl	80074c8 <hci_send_req>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da01      	bge.n	80065b2 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80065ae:	23ff      	movs	r3, #255	; 0xff
 80065b0:	e011      	b.n	80065d6 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 80065bc:	f107 030c 	add.w	r3, r7, #12
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	e008      	b.n	80065d6 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80065d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd90      	pop	{r4, r7, pc}

080065e0 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b0d1      	sub	sp, #324	; 0x144
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	f107 0108 	add.w	r1, r7, #8
 80065ee:	600a      	str	r2, [r1, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	f107 030e 	add.w	r3, r7, #14
 80065f6:	4622      	mov	r2, r4
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	f107 030d 	add.w	r3, r7, #13
 80065fe:	4602      	mov	r2, r0
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	1dbb      	adds	r3, r7, #6
 8006604:	460a      	mov	r2, r1
 8006606:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006608:	f107 0318 	add.w	r3, r7, #24
 800660c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006610:	f107 030d 	add.w	r3, r7, #13
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d008      	beq.n	800662c <aci_gatt_add_char+0x4c>
 800661a:	f107 030d 	add.w	r3, r7, #13
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d101      	bne.n	8006628 <aci_gatt_add_char+0x48>
 8006624:	2313      	movs	r3, #19
 8006626:	e002      	b.n	800662e <aci_gatt_add_char+0x4e>
 8006628:	2303      	movs	r3, #3
 800662a:	e000      	b.n	800662e <aci_gatt_add_char+0x4e>
 800662c:	2305      	movs	r3, #5
 800662e:	f107 0218 	add.w	r2, r7, #24
 8006632:	4413      	add	r3, r2
 8006634:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	2203      	movs	r2, #3
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fb73 	bl	8006d2c <Osal_MemSet>
  int index_input = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800664c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006650:	f107 020e 	add.w	r2, r7, #14
 8006654:	8812      	ldrh	r2, [r2, #0]
 8006656:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006658:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800665c:	3302      	adds	r3, #2
 800665e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006662:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006666:	f107 020d 	add.w	r2, r7, #13
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800666e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006672:	3301      	adds	r3, #1
 8006674:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8006678:	f107 030d 	add.w	r3, r7, #13
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d002      	beq.n	8006688 <aci_gatt_add_char+0xa8>
 8006682:	2b02      	cmp	r3, #2
 8006684:	d004      	beq.n	8006690 <aci_gatt_add_char+0xb0>
 8006686:	e007      	b.n	8006698 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 8006688:	2302      	movs	r3, #2
 800668a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800668e:	e005      	b.n	800669c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8006690:	2310      	movs	r3, #16
 8006692:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006696:	e001      	b.n	800669c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8006698:	2347      	movs	r3, #71	; 0x47
 800669a:	e086      	b.n	80067aa <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800669c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066a0:	1cd8      	adds	r0, r3, #3
 80066a2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80066a6:	f107 0308 	add.w	r3, r7, #8
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	f000 fb2e 	bl	8006d0c <Osal_MemCpy>
    index_input += size;
 80066b0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80066b4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80066be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066c2:	1dba      	adds	r2, r7, #6
 80066c4:	8812      	ldrh	r2, [r2, #0]
 80066c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80066c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066cc:	3302      	adds	r3, #2
 80066ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 80066d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066d6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80066da:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80066dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80066e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066ea:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066ee:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80066f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80066fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066fe:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006702:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006704:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006708:	3301      	adds	r3, #1
 800670a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800670e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006712:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006716:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8006722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006726:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800672a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800672c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006736:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800673a:	2218      	movs	r2, #24
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 faf4 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006744:	233f      	movs	r3, #63	; 0x3f
 8006746:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800674a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800674e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006752:	f107 0318 	add.w	r3, r7, #24
 8006756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800675a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800675e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800676a:	2303      	movs	r3, #3
 800676c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006770:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fea6 	bl	80074c8 <hci_send_req>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	da01      	bge.n	8006786 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006782:	23ff      	movs	r3, #255	; 0xff
 8006784:	e011      	b.n	80067aa <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 8006786:	f107 0314 	add.w	r3, r7, #20
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	e008      	b.n	80067aa <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80067a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd90      	pop	{r4, r7, pc}

080067b4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80067b4:	b5b0      	push	{r4, r5, r7, lr}
 80067b6:	b0cc      	sub	sp, #304	; 0x130
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4605      	mov	r5, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	1dbb      	adds	r3, r7, #6
 80067c4:	462a      	mov	r2, r5
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	4622      	mov	r2, r4
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	1cfb      	adds	r3, r7, #3
 80067d0:	4602      	mov	r2, r0
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	1cbb      	adds	r3, r7, #2
 80067d6:	460a      	mov	r2, r1
 80067d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80067da:	f107 0310 	add.w	r3, r7, #16
 80067de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80067e2:	f107 030f 	add.w	r3, r7, #15
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	1dba      	adds	r2, r7, #6
 80067f6:	8812      	ldrh	r2, [r2, #0]
 80067f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80067fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067fe:	3302      	adds	r3, #2
 8006800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006808:	1d3a      	adds	r2, r7, #4
 800680a:	8812      	ldrh	r2, [r2, #0]
 800680c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800680e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006812:	3302      	adds	r3, #2
 8006814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 8006818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681c:	1cfa      	adds	r2, r7, #3
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006826:	3301      	adds	r3, #1
 8006828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800682c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006830:	1cba      	adds	r2, r7, #2
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800683a:	3301      	adds	r3, #1
 800683c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	1d98      	adds	r0, r3, #6
 8006846:	1cbb      	adds	r3, r7, #2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006850:	f000 fa5c 	bl	8006d0c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006854:	1cbb      	adds	r3, r7, #2
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800685c:	4413      	add	r3, r2
 800685e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006866:	2218      	movs	r2, #24
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fa5e 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006870:	233f      	movs	r3, #63	; 0x3f
 8006872:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006876:	f44f 7383 	mov.w	r3, #262	; 0x106
 800687a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800688a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800688e:	f107 030f 	add.w	r3, r7, #15
 8006892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800689c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fe10 	bl	80074c8 <hci_send_req>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da01      	bge.n	80068b2 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80068ae:	23ff      	movs	r3, #255	; 0xff
 80068b0:	e009      	b.n	80068c6 <aci_gatt_update_char_value+0x112>
  if (status) 
 80068b2:	f107 030f 	add.w	r3, r7, #15
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <aci_gatt_update_char_value+0x110>
  {
    return status;
 80068bc:	f107 030f 	add.w	r3, r7, #15
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	e000      	b.n	80068c6 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bdb0      	pop	{r4, r5, r7, pc}

080068d0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0cc      	sub	sp, #304	; 0x130
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	463b      	mov	r3, r7
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	1dfb      	adds	r3, r7, #7
 80068dc:	4602      	mov	r2, r0
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	1dbb      	adds	r3, r7, #6
 80068e2:	460a      	mov	r2, r1
 80068e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80068e6:	f107 0310 	add.w	r3, r7, #16
 80068ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80068ee:	f107 030f 	add.w	r3, r7, #15
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	1dfa      	adds	r2, r7, #7
 8006902:	7812      	ldrb	r2, [r2, #0]
 8006904:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800690a:	3301      	adds	r3, #1
 800690c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	1dba      	adds	r2, r7, #6
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800691a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	1c98      	adds	r0, r3, #2
 800692a:	1dbb      	adds	r3, r7, #6
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	463b      	mov	r3, r7
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	f000 f9eb 	bl	8006d0c <Osal_MemCpy>
  index_input += Length;
 8006936:	1dbb      	adds	r3, r7, #6
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800693e:	4413      	add	r3, r2
 8006940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006948:	2218      	movs	r2, #24
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f9ed 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006952:	233f      	movs	r3, #63	; 0x3f
 8006954:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006958:	230c      	movs	r3, #12
 800695a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800695e:	f107 0310 	add.w	r3, r7, #16
 8006962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006966:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800696a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800696e:	f107 030f 	add.w	r3, r7, #15
 8006972:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006976:	2301      	movs	r3, #1
 8006978:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800697c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fda0 	bl	80074c8 <hci_send_req>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	da01      	bge.n	8006992 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800698e:	23ff      	movs	r3, #255	; 0xff
 8006990:	e009      	b.n	80069a6 <aci_hal_write_config_data+0xd6>
  if (status) 
 8006992:	f107 030f 	add.w	r3, r7, #15
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800699c:	f107 030f 	add.w	r3, r7, #15
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	e000      	b.n	80069a6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0cc      	sub	sp, #304	; 0x130
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4602      	mov	r2, r0
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	1dbb      	adds	r3, r7, #6
 80069be:	460a      	mov	r2, r1
 80069c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80069c2:	f107 0310 	add.w	r3, r7, #16
 80069c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80069ca:	f107 030f 	add.w	r3, r7, #15
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 80069d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069dc:	1dfa      	adds	r2, r7, #7
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80069e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069e6:	3301      	adds	r3, #1
 80069e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 80069ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f0:	1dba      	adds	r2, r7, #6
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80069f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069fa:	3301      	adds	r3, #1
 80069fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a04:	2218      	movs	r2, #24
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f98f 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a0e:	233f      	movs	r3, #63	; 0x3f
 8006a10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006a14:	230f      	movs	r3, #15
 8006a16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a1a:	f107 0310 	add.w	r3, r7, #16
 8006a1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a2a:	f107 030f 	add.w	r3, r7, #15
 8006a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006a38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fd42 	bl	80074c8 <hci_send_req>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da01      	bge.n	8006a4e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006a4a:	23ff      	movs	r3, #255	; 0xff
 8006a4c:	e009      	b.n	8006a62 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 8006a4e:	f107 030f 	add.w	r3, r7, #15
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 8006a58:	f107 030f 	add.w	r3, r7, #15
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b0cc      	sub	sp, #304	; 0x130
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4602      	mov	r2, r0
 8006a74:	1dbb      	adds	r3, r7, #6
 8006a76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006a78:	f107 0310 	add.w	r3, r7, #16
 8006a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a80:	f107 030f 	add.w	r3, r7, #15
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8006a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a92:	1dba      	adds	r2, r7, #6
 8006a94:	8812      	ldrh	r2, [r2, #0]
 8006a96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006aa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aa6:	2218      	movs	r2, #24
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f93e 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ab0:	233f      	movs	r3, #63	; 0x3f
 8006ab2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006ab6:	2318      	movs	r3, #24
 8006ab8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006abc:	f107 0310 	add.w	r3, r7, #16
 8006ac0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006acc:	f107 030f 	add.w	r3, r7, #15
 8006ad0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fcf1 	bl	80074c8 <hci_send_req>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da01      	bge.n	8006af0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006aec:	23ff      	movs	r3, #255	; 0xff
 8006aee:	e009      	b.n	8006b04 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 8006af0:	f107 030f 	add.w	r3, r7, #15
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 8006afa:	f107 030f 	add.w	r3, r7, #15
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	e000      	b.n	8006b04 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b088      	sub	sp, #32
 8006b12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006b18:	f107 0308 	add.w	r3, r7, #8
 8006b1c:	2218      	movs	r2, #24
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f903 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x03;
 8006b26:	2303      	movs	r3, #3
 8006b28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b2e:	1dfb      	adds	r3, r7, #7
 8006b30:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fcc3 	bl	80074c8 <hci_send_req>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da01      	bge.n	8006b4c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b48:	23ff      	movs	r3, #255	; 0xff
 8006b4a:	e005      	b.n	8006b58 <hci_reset+0x4a>
  if (status) 
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <hci_reset+0x48>
  {
    return status;
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	e000      	b.n	8006b58 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b0ce      	sub	sp, #312	; 0x138
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	6019      	str	r1, [r3, #0]
 8006b6c:	1d3b      	adds	r3, r7, #4
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f107 030e 	add.w	r3, r7, #14
 8006b74:	4602      	mov	r2, r0
 8006b76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8006b78:	f107 0318 	add.w	r3, r7, #24
 8006b7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8006b80:	f107 0310 	add.w	r3, r7, #16
 8006b84:	2205      	movs	r2, #5
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f8cf 	bl	8006d2c <Osal_MemSet>
  int index_input = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b98:	f107 020e 	add.w	r2, r7, #14
 8006b9c:	8812      	ldrh	r2, [r2, #0]
 8006b9e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006baa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bae:	2218      	movs	r2, #24
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f8ba 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x08;
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8006bbe:	2330      	movs	r3, #48	; 0x30
 8006bc0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006bc4:	f107 0318 	add.w	r3, r7, #24
 8006bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006bcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006bd4:	f107 0310 	add.w	r3, r7, #16
 8006bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006bdc:	2305      	movs	r3, #5
 8006bde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006be2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fc6d 	bl	80074c8 <hci_send_req>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da01      	bge.n	8006bf8 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8006bf4:	23ff      	movs	r3, #255	; 0xff
 8006bf6:	e016      	b.n	8006c26 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	e00d      	b.n	8006c26 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	78da      	ldrb	r2, [r3, #3]
 8006c10:	f107 0308 	add.w	r3, r7, #8
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	791a      	ldrb	r2, [r3, #4]
 8006c1e:	1d3b      	adds	r3, r7, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b0cd      	sub	sp, #308	; 0x134
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	1dfb      	adds	r3, r7, #7
 8006c3e:	4622      	mov	r2, r4
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	1dbb      	adds	r3, r7, #6
 8006c44:	4602      	mov	r2, r0
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	1d7b      	adds	r3, r7, #5
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c56:	f107 030f 	add.w	r3, r7, #15
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8006c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c68:	1dfa      	adds	r2, r7, #7
 8006c6a:	7812      	ldrb	r2, [r2, #0]
 8006c6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c72:	3301      	adds	r3, #1
 8006c74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 8006c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7c:	1dba      	adds	r2, r7, #6
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c86:	3301      	adds	r3, #1
 8006c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 8006c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c90:	1d7a      	adds	r2, r7, #5
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006ca0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ca4:	2218      	movs	r2, #24
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 f83f 	bl	8006d2c <Osal_MemSet>
  rq.ogf = 0x08;
 8006cae:	2308      	movs	r3, #8
 8006cb0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006cb4:	2331      	movs	r3, #49	; 0x31
 8006cb6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006cba:	f107 0310 	add.w	r3, r7, #16
 8006cbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006cca:	f107 030f 	add.w	r3, r7, #15
 8006cce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fbf2 	bl	80074c8 <hci_send_req>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da01      	bge.n	8006cee <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006cea:	23ff      	movs	r3, #255	; 0xff
 8006cec:	e009      	b.n	8006d02 <hci_le_set_default_phy+0xd2>
  if (status) 
 8006cee:	f107 030f 	add.w	r3, r7, #15
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <hci_le_set_default_phy+0xd0>
  {
    return status;
 8006cf8:	f107 030f 	add.w	r3, r7, #15
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	e000      	b.n	8006d02 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd90      	pop	{r4, r7, pc}

08006d0c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f002 f96b 	bl	8008ff8 <memcpy>
 8006d22:	4603      	mov	r3, r0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f002 f966 	bl	800900e <memset>
 8006d42:	4603      	mov	r3, r0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2bff      	cmp	r3, #255	; 0xff
 8006d66:	d000      	beq.n	8006d6a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8006d68:	e04a      	b.n	8006e00 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	f640 4301 	movw	r3, #3073	; 0xc01
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d000      	beq.n	8006d82 <PeerToPeer_Event_Handler+0x36>
          break;
 8006d80:	e03d      	b.n	8006dfe <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3302      	adds	r3, #2
 8006d86:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b1e      	ldr	r3, [pc, #120]	; (8006e0c <PeerToPeer_Event_Handler+0xc0>)
 8006d92:	889b      	ldrh	r3, [r3, #4]
 8006d94:	3302      	adds	r3, #2
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d118      	bne.n	8006dcc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	7a1b      	ldrb	r3, [r3, #8]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006dac:	2300      	movs	r3, #0
 8006dae:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fbd5 	bl	8008564 <P2PS_STM_App_Notification>
        break;
 8006dba:	e01f      	b.n	8006dfc <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006dc0:	f107 0308 	add.w	r3, r7, #8
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fbcd 	bl	8008564 <P2PS_STM_App_Notification>
        break;
 8006dca:	e017      	b.n	8006dfc <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	885b      	ldrh	r3, [r3, #2]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <PeerToPeer_Event_Handler+0xc0>)
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d10e      	bne.n	8006dfc <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	88db      	ldrh	r3, [r3, #6]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3308      	adds	r3, #8
 8006df0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fbb4 	bl	8008564 <P2PS_STM_App_Notification>
        break;
 8006dfc:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8006dfe:	bf00      	nop
  }

  return(return_value);
 8006e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	; 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	200000c4 	.word	0x200000c4

08006e10 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006e16:	484a      	ldr	r0, [pc, #296]	; (8006f40 <P2PS_STM_Init+0x130>)
 8006e18:	f000 f930 	bl	800707c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006e1c:	238f      	movs	r3, #143	; 0x8f
 8006e1e:	703b      	strb	r3, [r7, #0]
 8006e20:	23e5      	movs	r3, #229	; 0xe5
 8006e22:	707b      	strb	r3, [r7, #1]
 8006e24:	23b3      	movs	r3, #179	; 0xb3
 8006e26:	70bb      	strb	r3, [r7, #2]
 8006e28:	23d5      	movs	r3, #213	; 0xd5
 8006e2a:	70fb      	strb	r3, [r7, #3]
 8006e2c:	232e      	movs	r3, #46	; 0x2e
 8006e2e:	713b      	strb	r3, [r7, #4]
 8006e30:	237f      	movs	r3, #127	; 0x7f
 8006e32:	717b      	strb	r3, [r7, #5]
 8006e34:	234a      	movs	r3, #74	; 0x4a
 8006e36:	71bb      	strb	r3, [r7, #6]
 8006e38:	2398      	movs	r3, #152	; 0x98
 8006e3a:	71fb      	strb	r3, [r7, #7]
 8006e3c:	232a      	movs	r3, #42	; 0x2a
 8006e3e:	723b      	strb	r3, [r7, #8]
 8006e40:	2348      	movs	r3, #72	; 0x48
 8006e42:	727b      	strb	r3, [r7, #9]
 8006e44:	237a      	movs	r3, #122	; 0x7a
 8006e46:	72bb      	strb	r3, [r7, #10]
 8006e48:	23cc      	movs	r3, #204	; 0xcc
 8006e4a:	72fb      	strb	r3, [r7, #11]
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	733b      	strb	r3, [r7, #12]
 8006e50:	23fe      	movs	r3, #254	; 0xfe
 8006e52:	737b      	strb	r3, [r7, #13]
 8006e54:	2300      	movs	r3, #0
 8006e56:	73bb      	strb	r3, [r7, #14]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <P2PS_STM_Init+0x134>)
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	2308      	movs	r3, #8
 8006e64:	2201      	movs	r2, #1
 8006e66:	2002      	movs	r0, #2
 8006e68:	f7ff fb0b 	bl	8006482 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006e6c:	2319      	movs	r3, #25
 8006e6e:	703b      	strb	r3, [r7, #0]
 8006e70:	23ed      	movs	r3, #237	; 0xed
 8006e72:	707b      	strb	r3, [r7, #1]
 8006e74:	2382      	movs	r3, #130	; 0x82
 8006e76:	70bb      	strb	r3, [r7, #2]
 8006e78:	23ae      	movs	r3, #174	; 0xae
 8006e7a:	70fb      	strb	r3, [r7, #3]
 8006e7c:	23ed      	movs	r3, #237	; 0xed
 8006e7e:	713b      	strb	r3, [r7, #4]
 8006e80:	2321      	movs	r3, #33	; 0x21
 8006e82:	717b      	strb	r3, [r7, #5]
 8006e84:	234c      	movs	r3, #76	; 0x4c
 8006e86:	71bb      	strb	r3, [r7, #6]
 8006e88:	239d      	movs	r3, #157	; 0x9d
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	2341      	movs	r3, #65	; 0x41
 8006e8e:	723b      	strb	r3, [r7, #8]
 8006e90:	2345      	movs	r3, #69	; 0x45
 8006e92:	727b      	strb	r3, [r7, #9]
 8006e94:	2322      	movs	r3, #34	; 0x22
 8006e96:	72bb      	strb	r3, [r7, #10]
 8006e98:	238e      	movs	r3, #142	; 0x8e
 8006e9a:	72fb      	strb	r3, [r7, #11]
 8006e9c:	2341      	movs	r3, #65	; 0x41
 8006e9e:	733b      	strb	r3, [r7, #12]
 8006ea0:	23fe      	movs	r3, #254	; 0xfe
 8006ea2:	737b      	strb	r3, [r7, #13]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73bb      	strb	r3, [r7, #14]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006eac:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <P2PS_STM_Init+0x134>)
 8006eae:	8818      	ldrh	r0, [r3, #0]
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <P2PS_STM_Init+0x138>)
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	230a      	movs	r3, #10
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	2306      	movs	r3, #6
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2302      	movs	r3, #2
 8006ecc:	2102      	movs	r1, #2
 8006ece:	f7ff fb87 	bl	80065e0 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8006ed2:	2319      	movs	r3, #25
 8006ed4:	703b      	strb	r3, [r7, #0]
 8006ed6:	23ed      	movs	r3, #237	; 0xed
 8006ed8:	707b      	strb	r3, [r7, #1]
 8006eda:	2382      	movs	r3, #130	; 0x82
 8006edc:	70bb      	strb	r3, [r7, #2]
 8006ede:	23ae      	movs	r3, #174	; 0xae
 8006ee0:	70fb      	strb	r3, [r7, #3]
 8006ee2:	23ed      	movs	r3, #237	; 0xed
 8006ee4:	713b      	strb	r3, [r7, #4]
 8006ee6:	2321      	movs	r3, #33	; 0x21
 8006ee8:	717b      	strb	r3, [r7, #5]
 8006eea:	234c      	movs	r3, #76	; 0x4c
 8006eec:	71bb      	strb	r3, [r7, #6]
 8006eee:	239d      	movs	r3, #157	; 0x9d
 8006ef0:	71fb      	strb	r3, [r7, #7]
 8006ef2:	2341      	movs	r3, #65	; 0x41
 8006ef4:	723b      	strb	r3, [r7, #8]
 8006ef6:	2345      	movs	r3, #69	; 0x45
 8006ef8:	727b      	strb	r3, [r7, #9]
 8006efa:	2322      	movs	r3, #34	; 0x22
 8006efc:	72bb      	strb	r3, [r7, #10]
 8006efe:	238e      	movs	r3, #142	; 0x8e
 8006f00:	72fb      	strb	r3, [r7, #11]
 8006f02:	2342      	movs	r3, #66	; 0x42
 8006f04:	733b      	strb	r3, [r7, #12]
 8006f06:	23fe      	movs	r3, #254	; 0xfe
 8006f08:	737b      	strb	r3, [r7, #13]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73bb      	strb	r3, [r7, #14]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006f12:	4b0c      	ldr	r3, [pc, #48]	; (8006f44 <P2PS_STM_Init+0x134>)
 8006f14:	8818      	ldrh	r0, [r3, #0]
 8006f16:	463a      	mov	r2, r7
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <P2PS_STM_Init+0x13c>)
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	230a      	movs	r3, #10
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	2301      	movs	r3, #1
 8006f26:	9302      	str	r3, [sp, #8]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	2302      	movs	r3, #2
 8006f32:	2102      	movs	r1, #2
 8006f34:	f7ff fb54 	bl	80065e0 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8006f38:	bf00      	nop
}
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	08006d4d 	.word	0x08006d4d
 8006f44:	200000c4 	.word	0x200000c4
 8006f48:	200000c6 	.word	0x200000c6
 8006f4c:	200000c8 	.word	0x200000c8

08006f50 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return;
 8006f54:	bf00      	nop
}
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006f5e:	b480      	push	{r7}
 8006f60:	af00      	add	r7, sp, #0
  return;
 8006f62:	bf00      	nop
}
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <DIS_Init>:
__weak void DIS_Init( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return;
 8006f70:	bf00      	nop
}
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	af00      	add	r7, sp, #0
  return;
 8006f7e:	bf00      	nop
}
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  return;
 8006f8c:	bf00      	nop
}
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HRS_Init>:
__weak void HRS_Init( void )
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0
  return;
 8006f9a:	bf00      	nop
}
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HTS_Init>:
__weak void HTS_Init( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  return;
 8006fa8:	bf00      	nop
}
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <IAS_Init>:
__weak void IAS_Init( void )
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	af00      	add	r7, sp, #0
  return;
 8006fb6:	bf00      	nop
}
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <LLS_Init>:
__weak void LLS_Init( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  return;
 8006fc4:	bf00      	nop
}
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <TPS_Init>:
__weak void TPS_Init( void )
{
 8006fce:	b480      	push	{r7}
 8006fd0:	af00      	add	r7, sp, #0
  return;
 8006fd2:	bf00      	nop
}
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  return;
 8006fe0:	bf00      	nop
}
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8006fea:	b480      	push	{r7}
 8006fec:	af00      	add	r7, sp, #0
  return;
 8006fee:	bf00      	nop
}
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <MESH_Init>:
__weak void MESH_Init( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return;
 8006ffc:	bf00      	nop
}
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  return;
 800700a:	bf00      	nop
}
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <SVCCTL_Init+0x18>)
 800701a:	2200      	movs	r2, #0
 800701c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800701e:	4b04      	ldr	r3, [pc, #16]	; (8007030 <SVCCTL_Init+0x1c>)
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007024:	f000 f806 	bl	8007034 <SVCCTL_SvcInit>

  return;
 8007028:	bf00      	nop
}
 800702a:	bd80      	pop	{r7, pc}
 800702c:	200000cc 	.word	0x200000cc
 8007030:	200000ec 	.word	0x200000ec

08007034 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  BLS_Init();
 8007038:	f7ff ff8a 	bl	8006f50 <BLS_Init>

  CRS_STM_Init();
 800703c:	f7ff ff8f 	bl	8006f5e <CRS_STM_Init>

  DIS_Init();
 8007040:	f7ff ff94 	bl	8006f6c <DIS_Init>

  EDS_STM_Init();
 8007044:	f7ff ff99 	bl	8006f7a <EDS_STM_Init>

  HIDS_Init();
 8007048:	f7ff ff9e 	bl	8006f88 <HIDS_Init>

  HRS_Init();
 800704c:	f7ff ffa3 	bl	8006f96 <HRS_Init>

  HTS_Init();
 8007050:	f7ff ffa8 	bl	8006fa4 <HTS_Init>

  IAS_Init();
 8007054:	f7ff ffad 	bl	8006fb2 <IAS_Init>

  LLS_Init();
 8007058:	f7ff ffb2 	bl	8006fc0 <LLS_Init>

  TPS_Init();
 800705c:	f7ff ffb7 	bl	8006fce <TPS_Init>

  MOTENV_STM_Init();
 8007060:	f7ff ffbc 	bl	8006fdc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007064:	f7ff fed4 	bl	8006e10 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007068:	f7ff ffbf 	bl	8006fea <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800706c:	f7ff ffcb 	bl	8007006 <BVOPUS_STM_Init>

  MESH_Init();
 8007070:	f7ff ffc2 	bl	8006ff8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007074:	f000 f8ea 	bl	800724c <SVCCTL_InitCustomSvc>
  
  return;
 8007078:	bf00      	nop
}
 800707a:	bd80      	pop	{r7, pc}

0800707c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <SVCCTL_RegisterSvcHandler+0x30>)
 8007086:	7f1b      	ldrb	r3, [r3, #28]
 8007088:	4619      	mov	r1, r3
 800708a:	4a08      	ldr	r2, [pc, #32]	; (80070ac <SVCCTL_RegisterSvcHandler+0x30>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <SVCCTL_RegisterSvcHandler+0x30>)
 8007094:	7f1b      	ldrb	r3, [r3, #28]
 8007096:	3301      	adds	r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <SVCCTL_RegisterSvcHandler+0x30>)
 800709c:	771a      	strb	r2, [r3, #28]

  return;
 800709e:	bf00      	nop
}
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	200000cc 	.word	0x200000cc

080070b0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3301      	adds	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2bff      	cmp	r3, #255	; 0xff
 80070c8:	d000      	beq.n	80070cc <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80070ca:	e025      	b.n	8007118 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3302      	adds	r3, #2
 80070d0:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e0:	d000      	beq.n	80070e4 <SVCCTL_UserEvtRx+0x34>
          break;
 80070e2:	e018      	b.n	8007116 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80070e4:	2300      	movs	r3, #0
 80070e6:	757b      	strb	r3, [r7, #21]
 80070e8:	e00d      	b.n	8007106 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80070ea:	7d7b      	ldrb	r3, [r7, #21]
 80070ec:	4a18      	ldr	r2, [pc, #96]	; (8007150 <SVCCTL_UserEvtRx+0xa0>)
 80070ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007100:	7d7b      	ldrb	r3, [r7, #21]
 8007102:	3301      	adds	r3, #1
 8007104:	757b      	strb	r3, [r7, #21]
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <SVCCTL_UserEvtRx+0xa0>)
 8007108:	7f1b      	ldrb	r3, [r3, #28]
 800710a:	7d7a      	ldrb	r2, [r7, #21]
 800710c:	429a      	cmp	r2, r3
 800710e:	d3ec      	bcc.n	80070ea <SVCCTL_UserEvtRx+0x3a>
          break;
 8007110:	e000      	b.n	8007114 <SVCCTL_UserEvtRx+0x64>
              break;
 8007112:	bf00      	nop
          break;
 8007114:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007116:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d009      	beq.n	8007132 <SVCCTL_UserEvtRx+0x82>
 800711e:	2b02      	cmp	r3, #2
 8007120:	d00a      	beq.n	8007138 <SVCCTL_UserEvtRx+0x88>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 ff4e 	bl	8007fc8 <SVCCTL_App_Notification>
 800712c:	4603      	mov	r3, r0
 800712e:	75bb      	strb	r3, [r7, #22]
      break;
 8007130:	e008      	b.n	8007144 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007132:	2301      	movs	r3, #1
 8007134:	75bb      	strb	r3, [r7, #22]
      break;
 8007136:	e005      	b.n	8007144 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007138:	2300      	movs	r3, #0
 800713a:	75bb      	strb	r3, [r7, #22]
      break;
 800713c:	e002      	b.n	8007144 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800713e:	2301      	movs	r3, #1
 8007140:	75bb      	strb	r3, [r7, #22]
      break;
 8007142:	bf00      	nop
  }

  return (return_status);
 8007144:	7dbb      	ldrb	r3, [r7, #22]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200000cc 	.word	0x200000cc

08007154 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800715c:	2300      	movs	r3, #0
 800715e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3301      	adds	r3, #1
 8007166:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2bff      	cmp	r3, #255	; 0xff
 800716e:	d000      	beq.n	8007172 <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8007170:	e063      	b.n	800723a <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	3302      	adds	r3, #2
 8007176:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	f640 4301 	movw	r3, #3073	; 0xc01
 8007184:	429a      	cmp	r2, r3
 8007186:	d000      	beq.n	800718a <Template_Event_Handler+0x36>
          break;
 8007188:	e056      	b.n	8007238 <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	3302      	adds	r3, #2
 800718e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	885b      	ldrh	r3, [r3, #2]
 8007194:	b29b      	uxth	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	4b2b      	ldr	r3, [pc, #172]	; (8007248 <Template_Event_Handler+0xf4>)
 800719a:	889b      	ldrh	r3, [r3, #4]
 800719c:	3302      	adds	r3, #2
 800719e:	429a      	cmp	r2, r3
 80071a0:	d118      	bne.n	80071d4 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	7a1b      	ldrb	r3, [r3, #8]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 80071b4:	2300      	movs	r3, #0
 80071b6:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 80071b8:	f107 0308 	add.w	r3, r7, #8
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 fa0d 	bl	80085dc <TEMPLATE_STM_App_Notification>
        break;
 80071c2:	e038      	b.n	8007236 <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 80071c4:	2301      	movs	r3, #1
 80071c6:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fa05 	bl	80085dc <TEMPLATE_STM_App_Notification>
        break;
 80071d2:	e030      	b.n	8007236 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <Template_Event_Handler+0xf4>)
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d10f      	bne.n	8007206 <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	3308      	adds	r3, #8
 80071f8:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f9ec 	bl	80085dc <TEMPLATE_STM_App_Notification>
        break;
 8007204:	e017      	b.n	8007236 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	885b      	ldrh	r3, [r3, #2]
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <Template_Event_Handler+0xf4>)
 8007210:	88db      	ldrh	r3, [r3, #6]
 8007212:	3301      	adds	r3, #1
 8007214:	429a      	cmp	r2, r3
 8007216:	d10e      	bne.n	8007236 <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 8007218:	2304      	movs	r3, #4
 800721a:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	b29b      	uxth	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3308      	adds	r3, #8
 800722a:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f9d3 	bl	80085dc <TEMPLATE_STM_App_Notification>
        break;
 8007236:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007238:	bf00      	nop
  }

  return(return_value);
 800723a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800723e:	4618      	mov	r0, r3
 8007240:	3728      	adds	r7, #40	; 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200000f0 	.word	0x200000f0

0800724c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 8007252:	484a      	ldr	r0, [pc, #296]	; (800737c <SVCCTL_InitCustomSvc+0x130>)
 8007254:	f7ff ff12 	bl	800707c <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 8007258:	231b      	movs	r3, #27
 800725a:	703b      	strb	r3, [r7, #0]
 800725c:	23c5      	movs	r3, #197	; 0xc5
 800725e:	707b      	strb	r3, [r7, #1]
 8007260:	23d5      	movs	r3, #213	; 0xd5
 8007262:	70bb      	strb	r3, [r7, #2]
 8007264:	23a5      	movs	r3, #165	; 0xa5
 8007266:	70fb      	strb	r3, [r7, #3]
 8007268:	2302      	movs	r3, #2
 800726a:	713b      	strb	r3, [r7, #4]
 800726c:	2300      	movs	r3, #0
 800726e:	717b      	strb	r3, [r7, #5]
 8007270:	23b4      	movs	r3, #180	; 0xb4
 8007272:	71bb      	strb	r3, [r7, #6]
 8007274:	239a      	movs	r3, #154	; 0x9a
 8007276:	71fb      	strb	r3, [r7, #7]
 8007278:	23e1      	movs	r3, #225	; 0xe1
 800727a:	723b      	strb	r3, [r7, #8]
 800727c:	2311      	movs	r3, #17
 800727e:	727b      	strb	r3, [r7, #9]
 8007280:	2301      	movs	r3, #1
 8007282:	72bb      	strb	r3, [r7, #10]
 8007284:	2300      	movs	r3, #0
 8007286:	72fb      	strb	r3, [r7, #11]
 8007288:	2300      	movs	r3, #0
 800728a:	733b      	strb	r3, [r7, #12]
 800728c:	2300      	movs	r3, #0
 800728e:	737b      	strb	r3, [r7, #13]
 8007290:	2300      	movs	r3, #0
 8007292:	73bb      	strb	r3, [r7, #14]
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007298:	4639      	mov	r1, r7
 800729a:	4b39      	ldr	r3, [pc, #228]	; (8007380 <SVCCTL_InitCustomSvc+0x134>)
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2308      	movs	r3, #8
 80072a0:	2201      	movs	r2, #1
 80072a2:	2002      	movs	r0, #2
 80072a4:	f7ff f8ed 	bl	8006482 <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80072a8:	2319      	movs	r3, #25
 80072aa:	703b      	strb	r3, [r7, #0]
 80072ac:	23ed      	movs	r3, #237	; 0xed
 80072ae:	707b      	strb	r3, [r7, #1]
 80072b0:	2382      	movs	r3, #130	; 0x82
 80072b2:	70bb      	strb	r3, [r7, #2]
 80072b4:	23ae      	movs	r3, #174	; 0xae
 80072b6:	70fb      	strb	r3, [r7, #3]
 80072b8:	23ed      	movs	r3, #237	; 0xed
 80072ba:	713b      	strb	r3, [r7, #4]
 80072bc:	2321      	movs	r3, #33	; 0x21
 80072be:	717b      	strb	r3, [r7, #5]
 80072c0:	234c      	movs	r3, #76	; 0x4c
 80072c2:	71bb      	strb	r3, [r7, #6]
 80072c4:	239d      	movs	r3, #157	; 0x9d
 80072c6:	71fb      	strb	r3, [r7, #7]
 80072c8:	2341      	movs	r3, #65	; 0x41
 80072ca:	723b      	strb	r3, [r7, #8]
 80072cc:	2345      	movs	r3, #69	; 0x45
 80072ce:	727b      	strb	r3, [r7, #9]
 80072d0:	2322      	movs	r3, #34	; 0x22
 80072d2:	72bb      	strb	r3, [r7, #10]
 80072d4:	238e      	movs	r3, #142	; 0x8e
 80072d6:	72fb      	strb	r3, [r7, #11]
 80072d8:	23cc      	movs	r3, #204	; 0xcc
 80072da:	733b      	strb	r3, [r7, #12]
 80072dc:	23aa      	movs	r3, #170	; 0xaa
 80072de:	737b      	strb	r3, [r7, #13]
 80072e0:	2300      	movs	r3, #0
 80072e2:	73bb      	strb	r3, [r7, #14]
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 80072e8:	4b25      	ldr	r3, [pc, #148]	; (8007380 <SVCCTL_InitCustomSvc+0x134>)
 80072ea:	8818      	ldrh	r0, [r3, #0]
 80072ec:	463a      	mov	r2, r7
 80072ee:	4b25      	ldr	r3, [pc, #148]	; (8007384 <SVCCTL_InitCustomSvc+0x138>)
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	2301      	movs	r3, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	230a      	movs	r3, #10
 80072f8:	9303      	str	r3, [sp, #12]
 80072fa:	2301      	movs	r3, #1
 80072fc:	9302      	str	r3, [sp, #8]
 80072fe:	2300      	movs	r3, #0
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	2306      	movs	r3, #6
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2302      	movs	r3, #2
 8007308:	2102      	movs	r1, #2
 800730a:	f7ff f969 	bl	80065e0 <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800730e:	231b      	movs	r3, #27
 8007310:	703b      	strb	r3, [r7, #0]
 8007312:	23c5      	movs	r3, #197	; 0xc5
 8007314:	707b      	strb	r3, [r7, #1]
 8007316:	23d5      	movs	r3, #213	; 0xd5
 8007318:	70bb      	strb	r3, [r7, #2]
 800731a:	23a5      	movs	r3, #165	; 0xa5
 800731c:	70fb      	strb	r3, [r7, #3]
 800731e:	2302      	movs	r3, #2
 8007320:	713b      	strb	r3, [r7, #4]
 8007322:	2300      	movs	r3, #0
 8007324:	717b      	strb	r3, [r7, #5]
 8007326:	2336      	movs	r3, #54	; 0x36
 8007328:	71bb      	strb	r3, [r7, #6]
 800732a:	23ac      	movs	r3, #172	; 0xac
 800732c:	71fb      	strb	r3, [r7, #7]
 800732e:	23e1      	movs	r3, #225	; 0xe1
 8007330:	723b      	strb	r3, [r7, #8]
 8007332:	2311      	movs	r3, #17
 8007334:	727b      	strb	r3, [r7, #9]
 8007336:	2301      	movs	r3, #1
 8007338:	72bb      	strb	r3, [r7, #10]
 800733a:	2300      	movs	r3, #0
 800733c:	72fb      	strb	r3, [r7, #11]
 800733e:	2300      	movs	r3, #0
 8007340:	733b      	strb	r3, [r7, #12]
 8007342:	2300      	movs	r3, #0
 8007344:	737b      	strb	r3, [r7, #13]
 8007346:	2304      	movs	r3, #4
 8007348:	73bb      	strb	r3, [r7, #14]
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <SVCCTL_InitCustomSvc+0x134>)
 8007350:	8818      	ldrh	r0, [r3, #0]
 8007352:	463a      	mov	r2, r7
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <SVCCTL_InitCustomSvc+0x13c>)
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	2301      	movs	r3, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	230a      	movs	r3, #10
 800735e:	9303      	str	r3, [sp, #12]
 8007360:	2301      	movs	r3, #1
 8007362:	9302      	str	r3, [sp, #8]
 8007364:	2300      	movs	r3, #0
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	2310      	movs	r3, #16
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	2304      	movs	r3, #4
 800736e:	2102      	movs	r1, #2
 8007370:	f7ff f936 	bl	80065e0 <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 8007374:	bf00      	nop
}
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08007155 	.word	0x08007155
 8007380:	200000f0 	.word	0x200000f0
 8007384:	200000f2 	.word	0x200000f2
 8007388:	200000f4 	.word	0x200000f4

0800738c <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af02      	add	r7, sp, #8
 8007392:	4603      	mov	r3, r0
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007398:	2342      	movs	r3, #66	; 0x42
 800739a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d000      	beq.n	80073a4 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 80073a2:	e00c      	b.n	80073be <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <TEMPLATE_STM_App_Update_Char+0x3c>)
 80073a6:	8818      	ldrh	r0, [r3, #0]
 80073a8:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <TEMPLATE_STM_App_Update_Char+0x3c>)
 80073aa:	8899      	ldrh	r1, [r3, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2304      	movs	r3, #4
 80073b2:	2200      	movs	r2, #0
 80073b4:	f7ff f9fe 	bl	80067b4 <aci_gatt_update_char_value>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	bf00      	nop
  }

  return result;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	200000f0 	.word	0x200000f0

080073cc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2121      	movs	r1, #33	; 0x21
 80073e4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80073e8:	f000 fa00 	bl	80077ec <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	330b      	adds	r3, #11
 80073f0:	78db      	ldrb	r3, [r3, #3]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	4a08      	ldr	r2, [pc, #32]	; (800742c <hci_init+0x30>)
 800740c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800740e:	4a08      	ldr	r2, [pc, #32]	; (8007430 <hci_init+0x34>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007414:	4806      	ldr	r0, [pc, #24]	; (8007430 <hci_init+0x34>)
 8007416:	f000 f96f 	bl	80076f8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f8d0 	bl	80075c4 <TlInit>

  return;
 8007424:	bf00      	nop
}
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000214 	.word	0x20000214
 8007430:	200001ec 	.word	0x200001ec

08007434 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800743a:	4820      	ldr	r0, [pc, #128]	; (80074bc <hci_user_evt_proc+0x88>)
 800743c:	f000 fc92 	bl	8007d64 <LST_is_empty>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d128      	bne.n	8007498 <hci_user_evt_proc+0x64>
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <hci_user_evt_proc+0x8c>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d024      	beq.n	8007498 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800744e:	f107 030c 	add.w	r3, r7, #12
 8007452:	4619      	mov	r1, r3
 8007454:	4819      	ldr	r0, [pc, #100]	; (80074bc <hci_user_evt_proc+0x88>)
 8007456:	f000 fd0c 	bl	8007e72 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800745a:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <hci_user_evt_proc+0x8c>)
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8007460:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <hci_user_evt_proc+0x90>)
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800746c:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <hci_user_evt_proc+0x90>)
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	1d3a      	adds	r2, r7, #4
 8007472:	4610      	mov	r0, r2
 8007474:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007476:	793a      	ldrb	r2, [r7, #4]
 8007478:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <hci_user_evt_proc+0x8c>)
 800747a:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <hci_user_evt_proc+0x8c>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fbca 	bl	8007c20 <TL_MM_EvtDone>
 800748c:	e004      	b.n	8007498 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4619      	mov	r1, r3
 8007492:	480a      	ldr	r0, [pc, #40]	; (80074bc <hci_user_evt_proc+0x88>)
 8007494:	f000 fc86 	bl	8007da4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <hci_user_evt_proc+0x88>)
 800749a:	f000 fc63 	bl	8007d64 <LST_is_empty>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <hci_user_evt_proc+0x80>
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <hci_user_evt_proc+0x8c>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80074ac:	4803      	ldr	r0, [pc, #12]	; (80074bc <hci_user_evt_proc+0x88>)
 80074ae:	f001 f800 	bl	80084b2 <hci_notify_asynch_evt>
  }


  return;
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
}
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200000fc 	.word	0x200000fc
 80074c0:	20000108 	.word	0x20000108
 80074c4:	200001ec 	.word	0x200001ec

080074c8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80074d4:	2000      	movs	r0, #0
 80074d6:	f000 f8cb 	bl	8007670 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80074da:	2300      	movs	r3, #0
 80074dc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	b21b      	sxth	r3, r3
 80074e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e8:	b21a      	sxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	029b      	lsls	r3, r3, #10
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b21b      	sxth	r3, r3
 80074f6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	b2d9      	uxtb	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	8bbb      	ldrh	r3, [r7, #28]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 f88d 	bl	8007624 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800750a:	e04e      	b.n	80075aa <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800750c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007510:	f000 ffe6 	bl	80084e0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007514:	e043      	b.n	800759e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	4619      	mov	r1, r3
 800751c:	4828      	ldr	r0, [pc, #160]	; (80075c0 <hci_send_req+0xf8>)
 800751e:	f000 fca8 	bl	8007e72 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	7a5b      	ldrb	r3, [r3, #9]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d114      	bne.n	8007554 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	330b      	adds	r3, #11
 800752e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	b29b      	uxth	r3, r3
 8007536:	8bba      	ldrh	r2, [r7, #28]
 8007538:	429a      	cmp	r2, r3
 800753a:	d104      	bne.n	8007546 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d027      	beq.n	800759e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800754e:	2301      	movs	r3, #1
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e024      	b.n	800759e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	330b      	adds	r3, #11
 8007558:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007560:	b29b      	uxth	r3, r3
 8007562:	8bba      	ldrh	r2, [r7, #28]
 8007564:	429a      	cmp	r2, r3
 8007566:	d114      	bne.n	8007592 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7a9b      	ldrb	r3, [r3, #10]
 800756c:	3b03      	subs	r3, #3
 800756e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695a      	ldr	r2, [r3, #20]
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	429a      	cmp	r2, r3
 8007578:	bfa8      	it	ge
 800757a:	461a      	movge	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6918      	ldr	r0, [r3, #16]
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	1cd9      	adds	r1, r3, #3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	461a      	mov	r2, r3
 800758e:	f001 fd33 	bl	8008ff8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800759a:	2301      	movs	r3, #1
 800759c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800759e:	4808      	ldr	r0, [pc, #32]	; (80075c0 <hci_send_req+0xf8>)
 80075a0:	f000 fbe0 	bl	8007d64 <LST_is_empty>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0b5      	beq.n	8007516 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80075aa:	7ffb      	ldrb	r3, [r7, #31]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0ad      	beq.n	800750c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80075b0:	2001      	movs	r0, #1
 80075b2:	f000 f85d 	bl	8007670 <NotifyCmdStatus>

  return 0;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000020c 	.word	0x2000020c

080075c4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80075cc:	480f      	ldr	r0, [pc, #60]	; (800760c <TlInit+0x48>)
 80075ce:	f000 fbb9 	bl	8007d44 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80075d2:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <TlInit+0x4c>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80075d8:	480e      	ldr	r0, [pc, #56]	; (8007614 <TlInit+0x50>)
 80075da:	f000 fbb3 	bl	8007d44 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80075de:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <TlInit+0x54>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <TlInit+0x58>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <TlInit+0x5c>)
 80075f2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <TlInit+0x58>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f107 0208 	add.w	r2, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
  }

  return;
 8007600:	bf00      	nop
 8007602:	bf00      	nop
}
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	2000020c 	.word	0x2000020c
 8007610:	20000104 	.word	0x20000104
 8007614:	200000fc 	.word	0x200000fc
 8007618:	20000108 	.word	0x20000108
 800761c:	200001ec 	.word	0x200001ec
 8007620:	080076b1 	.word	0x080076b1

08007624 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	603a      	str	r2, [r7, #0]
 800762e:	80fb      	strh	r3, [r7, #6]
 8007630:	460b      	mov	r3, r1
 8007632:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <SendCmd+0x44>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	88fa      	ldrh	r2, [r7, #6]
 800763a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <SendCmd+0x44>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	797a      	ldrb	r2, [r7, #5]
 8007644:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007646:	4b08      	ldr	r3, [pc, #32]	; (8007668 <SendCmd+0x44>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	797a      	ldrb	r2, [r7, #5]
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f001 fcd1 	bl	8008ff8 <memcpy>

  hciContext.io.Send(0,0);
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <SendCmd+0x48>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2100      	movs	r1, #0
 800765c:	2000      	movs	r0, #0
 800765e:	4798      	blx	r3

  return;
 8007660:	bf00      	nop
}
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000104 	.word	0x20000104
 800766c:	200001ec 	.word	0x200001ec

08007670 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d108      	bne.n	8007692 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <NotifyCmdStatus+0x3c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00d      	beq.n	80076a4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <NotifyCmdStatus+0x3c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2000      	movs	r0, #0
 800768e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007690:	e008      	b.n	80076a4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <NotifyCmdStatus+0x3c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800769a:	4b04      	ldr	r3, [pc, #16]	; (80076ac <NotifyCmdStatus+0x3c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2001      	movs	r0, #1
 80076a0:	4798      	blx	r3
  return;
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
}
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000214 	.word	0x20000214

080076b0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7a5b      	ldrb	r3, [r3, #9]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d003      	beq.n	80076c8 <TlEvtReceived+0x18>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7a5b      	ldrb	r3, [r3, #9]
 80076c4:	2b0e      	cmp	r3, #14
 80076c6:	d107      	bne.n	80076d8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4809      	ldr	r0, [pc, #36]	; (80076f0 <TlEvtReceived+0x40>)
 80076cc:	f000 fb8e 	bl	8007dec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80076d0:	2000      	movs	r0, #0
 80076d2:	f000 fefa 	bl	80084ca <hci_cmd_resp_release>
 80076d6:	e006      	b.n	80076e6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4806      	ldr	r0, [pc, #24]	; (80076f4 <TlEvtReceived+0x44>)
 80076dc:	f000 fb86 	bl	8007dec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <TlEvtReceived+0x44>)
 80076e2:	f000 fee6 	bl	80084b2 <hci_notify_asynch_evt>
  }

  return;
 80076e6:	bf00      	nop
}
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000020c 	.word	0x2000020c
 80076f4:	200000fc 	.word	0x200000fc

080076f8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a05      	ldr	r2, [pc, #20]	; (8007718 <hci_register_io_bus+0x20>)
 8007704:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a04      	ldr	r2, [pc, #16]	; (800771c <hci_register_io_bus+0x24>)
 800770a:	611a      	str	r2, [r3, #16]

  return;
 800770c:	bf00      	nop
}
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	080079f9 	.word	0x080079f9
 800771c:	08007a61 	.word	0x08007a61

08007720 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4a08      	ldr	r2, [pc, #32]	; (8007750 <shci_init+0x30>)
 8007730:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007732:	4a08      	ldr	r2, [pc, #32]	; (8007754 <shci_init+0x34>)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <shci_init+0x34>)
 800773a:	f000 f90d 	bl	8007958 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f890 	bl	8007868 <TlInit>

  return;
 8007748:	bf00      	nop
}
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000238 	.word	0x20000238
 8007754:	20000218 	.word	0x20000218

08007758 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800775e:	4820      	ldr	r0, [pc, #128]	; (80077e0 <shci_user_evt_proc+0x88>)
 8007760:	f000 fb00 	bl	8007d64 <LST_is_empty>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d128      	bne.n	80077bc <shci_user_evt_proc+0x64>
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <shci_user_evt_proc+0x8c>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d024      	beq.n	80077bc <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	4619      	mov	r1, r3
 8007778:	4819      	ldr	r0, [pc, #100]	; (80077e0 <shci_user_evt_proc+0x88>)
 800777a:	f000 fb7a 	bl	8007e72 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800777e:	4b19      	ldr	r3, [pc, #100]	; (80077e4 <shci_user_evt_proc+0x8c>)
 8007780:	2201      	movs	r2, #1
 8007782:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 8007784:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <shci_user_evt_proc+0x90>)
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d009      	beq.n	80077a0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <shci_user_evt_proc+0x90>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	1d3a      	adds	r2, r7, #4
 8007796:	4610      	mov	r0, r2
 8007798:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800779a:	793a      	ldrb	r2, [r7, #4]
 800779c:	4b11      	ldr	r3, [pc, #68]	; (80077e4 <shci_user_evt_proc+0x8c>)
 800779e:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80077a0:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <shci_user_evt_proc+0x8c>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fa38 	bl	8007c20 <TL_MM_EvtDone>
 80077b0:	e004      	b.n	80077bc <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4619      	mov	r1, r3
 80077b6:	480a      	ldr	r0, [pc, #40]	; (80077e0 <shci_user_evt_proc+0x88>)
 80077b8:	f000 faf4 	bl	8007da4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80077bc:	4808      	ldr	r0, [pc, #32]	; (80077e0 <shci_user_evt_proc+0x88>)
 80077be:	f000 fad1 	bl	8007d64 <LST_is_empty>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d107      	bne.n	80077d8 <shci_user_evt_proc+0x80>
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <shci_user_evt_proc+0x8c>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80077d0:	4803      	ldr	r0, [pc, #12]	; (80077e0 <shci_user_evt_proc+0x88>)
 80077d2:	f7f8 feee 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
}
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	2000010c 	.word	0x2000010c
 80077e4:	2000011c 	.word	0x2000011c
 80077e8:	20000218 	.word	0x20000218

080077ec <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60ba      	str	r2, [r7, #8]
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	4603      	mov	r3, r0
 80077f8:	81fb      	strh	r3, [r7, #14]
 80077fa:	460b      	mov	r3, r1
 80077fc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80077fe:	2000      	movs	r0, #0
 8007800:	f000 f864 	bl	80078cc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <shci_send+0x74>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	89fa      	ldrh	r2, [r7, #14]
 800780a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <shci_send+0x74>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	7b7a      	ldrb	r2, [r7, #13]
 8007814:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <shci_send+0x74>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	7b7a      	ldrb	r2, [r7, #13]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fbe9 	bl	8008ff8 <memcpy>

  shciContext.io.Send(0,0);
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <shci_send+0x78>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2100      	movs	r1, #0
 800782c:	2000      	movs	r0, #0
 800782e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007830:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007834:	f7f8 fed4 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f103 0008 	add.w	r0, r3, #8
 800783e:	4b08      	ldr	r3, [pc, #32]	; (8007860 <shci_send+0x74>)
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <shci_send+0x74>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	789b      	ldrb	r3, [r3, #2]
 8007848:	3303      	adds	r3, #3
 800784a:	461a      	mov	r2, r3
 800784c:	f001 fbd4 	bl	8008ff8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007850:	2001      	movs	r0, #1
 8007852:	f000 f83b 	bl	80078cc <Cmd_SetStatus>

  return;
 8007856:	bf00      	nop
}
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000118 	.word	0x20000118
 8007864:	20000218 	.word	0x20000218

08007868 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007870:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <TlInit+0x4c>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007876:	4810      	ldr	r0, [pc, #64]	; (80078b8 <TlInit+0x50>)
 8007878:	f000 fa64 	bl	8007d44 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800787c:	2001      	movs	r0, #1
 800787e:	f000 f825 	bl	80078cc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <TlInit+0x54>)
 8007884:	2201      	movs	r2, #1
 8007886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <TlInit+0x58>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00c      	beq.n	80078aa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007894:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <TlInit+0x5c>)
 8007896:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007898:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <TlInit+0x60>)
 800789a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <TlInit+0x58>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f107 020c 	add.w	r2, r7, #12
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
  }

  return;
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
}
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000118 	.word	0x20000118
 80078b8:	2000010c 	.word	0x2000010c
 80078bc:	2000011c 	.word	0x2000011c
 80078c0:	20000218 	.word	0x20000218
 80078c4:	0800791d 	.word	0x0800791d
 80078c8:	08007935 	.word	0x08007935

080078cc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <Cmd_SetStatus+0x48>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <Cmd_SetStatus+0x48>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2000      	movs	r0, #0
 80078ea:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <Cmd_SetStatus+0x4c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80078f2:	e00b      	b.n	800790c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <Cmd_SetStatus+0x4c>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80078fa:	4b06      	ldr	r3, [pc, #24]	; (8007914 <Cmd_SetStatus+0x48>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007902:	4b04      	ldr	r3, [pc, #16]	; (8007914 <Cmd_SetStatus+0x48>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2001      	movs	r0, #1
 8007908:	4798      	blx	r3
  return;
 800790a:	bf00      	nop
 800790c:	bf00      	nop
}
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000238 	.word	0x20000238
 8007918:	20000114 	.word	0x20000114

0800791c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007924:	2000      	movs	r0, #0
 8007926:	f7f8 fe50 	bl	80005ca <shci_cmd_resp_release>

  return;
 800792a:	bf00      	nop
}
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4805      	ldr	r0, [pc, #20]	; (8007954 <TlUserEvtReceived+0x20>)
 8007940:	f000 fa54 	bl	8007dec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007944:	4803      	ldr	r0, [pc, #12]	; (8007954 <TlUserEvtReceived+0x20>)
 8007946:	f7f8 fe34 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800794a:	bf00      	nop
}
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	2000010c 	.word	0x2000010c

08007958 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a05      	ldr	r2, [pc, #20]	; (8007978 <shci_register_io_bus+0x20>)
 8007964:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a04      	ldr	r2, [pc, #16]	; (800797c <shci_register_io_bus+0x24>)
 800796a:	611a      	str	r2, [r3, #16]

  return;
 800796c:	bf00      	nop
}
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	08007ad5 	.word	0x08007ad5
 800797c:	08007b29 	.word	0x08007b29

08007980 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007984:	f001 f812 	bl	80089ac <HW_IPCC_Enable>

  return;
 8007988:	bf00      	nop
}
 800798a:	bd80      	pop	{r7, pc}

0800798c <TL_Init>:


void TL_Init( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <TL_Init+0x44>)
 8007992:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <TL_Init+0x48>)
 8007994:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007996:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <TL_Init+0x44>)
 8007998:	4a0f      	ldr	r2, [pc, #60]	; (80079d8 <TL_Init+0x4c>)
 800799a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800799c:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <TL_Init+0x44>)
 800799e:	4a0f      	ldr	r2, [pc, #60]	; (80079dc <TL_Init+0x50>)
 80079a0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <TL_Init+0x44>)
 80079a4:	4a0e      	ldr	r2, [pc, #56]	; (80079e0 <TL_Init+0x54>)
 80079a6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <TL_Init+0x44>)
 80079aa:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <TL_Init+0x58>)
 80079ac:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <TL_Init+0x44>)
 80079b0:	4a0d      	ldr	r2, [pc, #52]	; (80079e8 <TL_Init+0x5c>)
 80079b2:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <TL_Init+0x44>)
 80079b6:	4a0d      	ldr	r2, [pc, #52]	; (80079ec <TL_Init+0x60>)
 80079b8:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <TL_Init+0x44>)
 80079bc:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <TL_Init+0x64>)
 80079be:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80079c0:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <TL_Init+0x44>)
 80079c2:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <TL_Init+0x68>)
 80079c4:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80079c6:	f000 fff9 	bl	80089bc <HW_IPCC_Init>

  return;
 80079ca:	bf00      	nop
}
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20030000 	.word	0x20030000
 80079d4:	20030024 	.word	0x20030024
 80079d8:	20030044 	.word	0x20030044
 80079dc:	20030054 	.word	0x20030054
 80079e0:	20030060 	.word	0x20030060
 80079e4:	20030068 	.word	0x20030068
 80079e8:	20030070 	.word	0x20030070
 80079ec:	2003008c 	.word	0x2003008c
 80079f0:	20030090 	.word	0x20030090
 80079f4:	2003009c 	.word	0x2003009c

080079f8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007a04:	4811      	ldr	r0, [pc, #68]	; (8007a4c <TL_BLE_Init+0x54>)
 8007a06:	f000 f99d 	bl	8007d44 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <TL_BLE_Init+0x58>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <TL_BLE_Init+0x5c>)
 8007a24:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <TL_BLE_Init+0x54>)
 8007a2a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007a2c:	f000 ffdc 	bl	80089e8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a08      	ldr	r2, [pc, #32]	; (8007a58 <TL_BLE_Init+0x60>)
 8007a36:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4a07      	ldr	r2, [pc, #28]	; (8007a5c <TL_BLE_Init+0x64>)
 8007a3e:	6013      	str	r3, [r2, #0]

  return 0;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20030a34 	.word	0x20030a34
 8007a50:	20030000 	.word	0x20030000
 8007a54:	20030a24 	.word	0x20030a24
 8007a58:	20000244 	.word	0x20000244
 8007a5c:	20000248 	.word	0x20000248

08007a60 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <TL_BLE_SendCmd+0x24>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2201      	movs	r2, #1
 8007a74:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 8007a76:	f000 ffc1 	bl	80089fc <HW_IPCC_BLE_SendCmd>

  return 0;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20030000 	.word	0x20030000

08007a88 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007a8e:	e009      	b.n	8007aa4 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007a90:	1d3b      	adds	r3, r7, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4808      	ldr	r0, [pc, #32]	; (8007ab8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8007a96:	f000 f9ec 	bl	8007e72 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007a9a:	4b08      	ldr	r3, [pc, #32]	; (8007abc <HW_IPCC_BLE_RxEvtNot+0x34>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007aa4:	4804      	ldr	r0, [pc, #16]	; (8007ab8 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8007aa6:	f000 f95d 	bl	8007d64 <LST_is_empty>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0ef      	beq.n	8007a90 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007ab0:	bf00      	nop
}
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20030a34 	.word	0x20030a34
 8007abc:	20000244 	.word	0x20000244

08007ac0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4798      	blx	r3

  return;
 8007aca:	bf00      	nop
}
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000248 	.word	0x20000248

08007ad4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007ae0:	480d      	ldr	r0, [pc, #52]	; (8007b18 <TL_SYS_Init+0x44>)
 8007ae2:	f000 f92f 	bl	8007d44 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <TL_SYS_Init+0x48>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <TL_SYS_Init+0x44>)
 8007af8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007afa:	f000 ffa1 	bl	8008a40 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a07      	ldr	r2, [pc, #28]	; (8007b20 <TL_SYS_Init+0x4c>)
 8007b04:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	4a06      	ldr	r2, [pc, #24]	; (8007b24 <TL_SYS_Init+0x50>)
 8007b0c:	6013      	str	r3, [r2, #0]

  return 0;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20030a3c 	.word	0x20030a3c
 8007b1c:	20030000 	.word	0x20030000
 8007b20:	2000024c 	.word	0x2000024c
 8007b24:	20000250 	.word	0x20000250

08007b28 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <TL_SYS_SendCmd+0x24>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8007b3e:	f000 ff89 	bl	8008a54 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20030000 	.word	0x20030000

08007b50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007b54:	4b04      	ldr	r3, [pc, #16]	; (8007b68 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8007b5a:	68d2      	ldr	r2, [r2, #12]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4798      	blx	r3

  return;
 8007b62:	bf00      	nop
}
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	2000024c 	.word	0x2000024c
 8007b6c:	20030000 	.word	0x20030000

08007b70 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007b76:	e009      	b.n	8007b8c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <HW_IPCC_SYS_EvtNot+0x30>)
 8007b7e:	f000 f978 	bl	8007e72 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <HW_IPCC_SYS_EvtNot+0x34>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007b8c:	4804      	ldr	r0, [pc, #16]	; (8007ba0 <HW_IPCC_SYS_EvtNot+0x30>)
 8007b8e:	f000 f8e9 	bl	8007d64 <LST_is_empty>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ef      	beq.n	8007b78 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007b98:	bf00      	nop
}
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20030a3c 	.word	0x20030a3c
 8007ba4:	20000250 	.word	0x20000250

08007ba8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007bb0:	4817      	ldr	r0, [pc, #92]	; (8007c10 <TL_MM_Init+0x68>)
 8007bb2:	f000 f8c7 	bl	8007d44 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007bb6:	4817      	ldr	r0, [pc, #92]	; (8007c14 <TL_MM_Init+0x6c>)
 8007bb8:	f000 f8c4 	bl	8007d44 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007bbc:	4b16      	ldr	r3, [pc, #88]	; (8007c18 <TL_MM_Init+0x70>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <TL_MM_Init+0x74>)
 8007bc2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <TL_MM_Init+0x74>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6892      	ldr	r2, [r2, #8]
 8007bcc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <TL_MM_Init+0x74>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	68d2      	ldr	r2, [r2, #12]
 8007bd6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <TL_MM_Init+0x74>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <TL_MM_Init+0x68>)
 8007bde:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007be0:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <TL_MM_Init+0x74>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <TL_MM_Init+0x74>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6852      	ldr	r2, [r2, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <TL_MM_Init+0x74>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6912      	ldr	r2, [r2, #16]
 8007bfc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <TL_MM_Init+0x74>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6952      	ldr	r2, [r2, #20]
 8007c06:	619a      	str	r2, [r3, #24]

  return;
 8007c08:	bf00      	nop
}
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	200300a8 	.word	0x200300a8
 8007c14:	2000023c 	.word	0x2000023c
 8007c18:	20030000 	.word	0x20030000
 8007c1c:	20000254 	.word	0x20000254

08007c20 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <TL_MM_EvtDone+0x20>)
 8007c2c:	f000 f8de 	bl	8007dec <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007c30:	4804      	ldr	r0, [pc, #16]	; (8007c44 <TL_MM_EvtDone+0x24>)
 8007c32:	f000 ff35 	bl	8008aa0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007c36:	bf00      	nop
}
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000023c 	.word	0x2000023c
 8007c44:	08007c49 	.word	0x08007c49

08007c48 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007c4e:	e00c      	b.n	8007c6a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	480a      	ldr	r0, [pc, #40]	; (8007c80 <SendFreeBuf+0x38>)
 8007c56:	f000 f90c 	bl	8007e72 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <SendFreeBuf+0x3c>)
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f8c1 	bl	8007dec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007c6a:	4805      	ldr	r0, [pc, #20]	; (8007c80 <SendFreeBuf+0x38>)
 8007c6c:	f000 f87a 	bl	8007d64 <LST_is_empty>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0ec      	beq.n	8007c50 <SendFreeBuf+0x8>
  }

  return;
 8007c76:	bf00      	nop
}
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	2000023c 	.word	0x2000023c
 8007c84:	20030000 	.word	0x20030000

08007c88 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007c8c:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <TL_TRACES_Init+0x1c>)
 8007c8e:	f000 f859 	bl	8007d44 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <TL_TRACES_Init+0x20>)
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	4a03      	ldr	r2, [pc, #12]	; (8007ca4 <TL_TRACES_Init+0x1c>)
 8007c98:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007c9a:	f000 ff37 	bl	8008b0c <HW_IPCC_TRACES_Init>

  return;
 8007c9e:	bf00      	nop
}
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200300b0 	.word	0x200300b0
 8007ca8:	20030000 	.word	0x20030000

08007cac <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007cb2:	e008      	b.n	8007cc6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007cb4:	1d3b      	adds	r3, r7, #4
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <HW_IPCC_TRACES_EvtNot+0x30>)
 8007cba:	f000 f8da 	bl	8007e72 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f80d 	bl	8007ce0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007cc6:	4805      	ldr	r0, [pc, #20]	; (8007cdc <HW_IPCC_TRACES_EvtNot+0x30>)
 8007cc8:	f000 f84c 	bl	8007d64 <LST_is_empty>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0f0      	beq.n	8007cb4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200300b0 	.word	0x200300b0

08007ce0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <OTP_Read+0x48>)
 8007d00:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007d02:	e002      	b.n	8007d0a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b08      	subs	r3, #8
 8007d08:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3307      	adds	r3, #7
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	79fa      	ldrb	r2, [r7, #7]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d003      	beq.n	8007d1e <OTP_Read+0x2a>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <OTP_Read+0x4c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d1f2      	bne.n	8007d04 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3307      	adds	r3, #7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	79fa      	ldrb	r2, [r7, #7]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d001      	beq.n	8007d2e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	1fff73f8 	.word	0x1fff73f8
 8007d40:	1fff7000 	.word	0x1fff7000

08007d44 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d70:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d76:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d102      	bne.n	8007d88 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
 8007d86:	e001      	b.n	8007d8c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dae:	f3ef 8310 	mrs	r3, PRIMASK
 8007db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007db4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007db8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007de0:	bf00      	nop
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007df6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007dfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e46:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6852      	ldr	r2, [r2, #4]
 8007e5a:	605a      	str	r2, [r3, #4]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e86:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ffcd 	bl	8007e34 <LST_remove_node>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007eb0:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <LL_FLASH_GetUDN+0x14>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	1fff7580 	.word	0x1fff7580

08007ec4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <LL_FLASH_GetDeviceID+0x14>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	b2db      	uxtb	r3, r3
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	1fff7584 	.word	0x1fff7584

08007edc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <LL_FLASH_GetSTCompanyID+0x14>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	0a1b      	lsrs	r3, r3, #8
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	1fff7584 	.word	0x1fff7584

08007ef4 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007ef4:	b5b0      	push	{r4, r5, r7, lr}
 8007ef6:	b08c      	sub	sp, #48	; 0x30
 8007ef8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007efa:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <APP_BLE_Init+0xac>)
 8007efc:	463c      	mov	r4, r7
 8007efe:	461d      	mov	r5, r3
 8007f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f0c:	c407      	stmia	r4!, {r0, r1, r2}
 8007f0e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007f10:	f000 f900 	bl	8008114 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007f14:	2101      	movs	r1, #1
 8007f16:	2002      	movs	r0, #2
 8007f18:	f000 fe20 	bl	8008b5c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007f1c:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <APP_BLE_Init+0xb0>)
 8007f1e:	2100      	movs	r1, #0
 8007f20:	2004      	movs	r0, #4
 8007f22:	f000 ff25 	bl	8008d70 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8007f26:	463b      	mov	r3, r7
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fa4f 	bl	80073cc <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007f2e:	f000 f907 	bl	8008140 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007f32:	f7ff f86f 	bl	8007014 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007f36:	4b1c      	ldr	r3, [pc, #112]	; (8007fa8 <APP_BLE_Init+0xb4>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8007f3e:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <APP_BLE_Init+0xb4>)
 8007f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f44:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007f46:	4a19      	ldr	r2, [pc, #100]	; (8007fac <APP_BLE_Init+0xb8>)
 8007f48:	2100      	movs	r1, #0
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	f000 ff10 	bl	8008d70 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 8007f50:	2006      	movs	r0, #6
 8007f52:	f7fe fd8b 	bl	8006a6c <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8007f56:	f000 fb31 	bl	80085bc <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 8007f5a:	f000 fb67 	bl	800862c <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8007f5e:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <APP_BLE_Init+0xbc>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	4914      	ldr	r1, [pc, #80]	; (8007fb4 <APP_BLE_Init+0xc0>)
 8007f64:	2000      	movs	r0, #0
 8007f66:	f7f9 f84d 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <APP_BLE_Init+0xc4>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4913      	ldr	r1, [pc, #76]	; (8007fbc <APP_BLE_Init+0xc8>)
 8007f70:	2000      	movs	r0, #0
 8007f72:	f7f9 f847 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <APP_BLE_Init+0xb4>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <APP_BLE_Init+0xb4>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007f86:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <APP_BLE_Init+0xcc>)
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <APP_BLE_Init+0xd0>)
 8007f8e:	22a0      	movs	r2, #160	; 0xa0
 8007f90:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007f92:	2001      	movs	r0, #1
 8007f94:	f000 f9ae 	bl	80082f4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007f98:	bf00      	nop
}
 8007f9a:	3730      	adds	r7, #48	; 0x30
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa0:	08009074 	.word	0x08009074
 8007fa4:	08007435 	.word	0x08007435
 8007fa8:	20000120 	.word	0x20000120
 8007fac:	08008461 	.word	0x08008461
 8007fb0:	08008495 	.word	0x08008495
 8007fb4:	200001b1 	.word	0x200001b1
 8007fb8:	080084a5 	.word	0x080084a5
 8007fbc:	200001b2 	.word	0x200001b2
 8007fc0:	200001b4 	.word	0x200001b4
 8007fc4:	200001b6 	.word	0x200001b6

08007fc8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007fd0:	2342      	movs	r3, #66	; 0x42
 8007fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe2:	d024      	beq.n	800802e <SVCCTL_App_Notification+0x66>
 8007fe4:	2bff      	cmp	r3, #255	; 0xff
 8007fe6:	d070      	beq.n	80080ca <SVCCTL_App_Notification+0x102>
 8007fe8:	2b05      	cmp	r3, #5
 8007fea:	d000      	beq.n	8007fee <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 8007fec:	e086      	b.n	80080fc <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	4b42      	ldr	r3, [pc, #264]	; (8008108 <SVCCTL_App_Notification+0x140>)
 8007ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008000:	429a      	cmp	r2, r3
 8008002:	d106      	bne.n	8008012 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008004:	4b40      	ldr	r3, [pc, #256]	; (8008108 <SVCCTL_App_Notification+0x140>)
 8008006:	2200      	movs	r2, #0
 8008008:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800800a:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <SVCCTL_App_Notification+0x140>)
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8008012:	2001      	movs	r0, #1
 8008014:	f000 f96e 	bl	80082f4 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8008018:	4b3c      	ldr	r3, [pc, #240]	; (800810c <SVCCTL_App_Notification+0x144>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800801e:	4b3a      	ldr	r3, [pc, #232]	; (8008108 <SVCCTL_App_Notification+0x140>)
 8008020:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008022:	4b3a      	ldr	r3, [pc, #232]	; (800810c <SVCCTL_App_Notification+0x144>)
 8008024:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 8008026:	4839      	ldr	r0, [pc, #228]	; (800810c <SVCCTL_App_Notification+0x144>)
 8008028:	f000 fab4 	bl	8008594 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800802c:	e066      	b.n	80080fc <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	3302      	adds	r3, #2
 8008032:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d042      	beq.n	80080c2 <SVCCTL_App_Notification+0xfa>
 800803c:	2b0c      	cmp	r3, #12
 800803e:	d002      	beq.n	8008046 <SVCCTL_App_Notification+0x7e>
 8008040:	2b01      	cmp	r3, #1
 8008042:	d016      	beq.n	8008072 <SVCCTL_App_Notification+0xaa>
          break;
 8008044:	e040      	b.n	80080c8 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	3301      	adds	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800804c:	4b2e      	ldr	r3, [pc, #184]	; (8008108 <SVCCTL_App_Notification+0x140>)
 800804e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008050:	f107 020a 	add.w	r2, r7, #10
 8008054:	f107 010b 	add.w	r1, r7, #11
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fd81 	bl	8006b60 <hci_le_read_phy>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8008064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008068:	2b00      	cmp	r3, #0
 800806a:	d12c      	bne.n	80080c6 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	2b02      	cmp	r3, #2
          break;
 8008070:	e029      	b.n	80080c6 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	3301      	adds	r3, #1
 8008076:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008078:	4b23      	ldr	r3, [pc, #140]	; (8008108 <SVCCTL_App_Notification+0x140>)
 800807a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800807e:	4618      	mov	r0, r3
 8008080:	f7f9 f836 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008084:	4b20      	ldr	r3, [pc, #128]	; (8008108 <SVCCTL_App_Notification+0x140>)
 8008086:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800808a:	2b04      	cmp	r3, #4
 800808c:	d104      	bne.n	8008098 <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800808e:	4b1e      	ldr	r3, [pc, #120]	; (8008108 <SVCCTL_App_Notification+0x140>)
 8008090:	2206      	movs	r2, #6
 8008092:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8008096:	e003      	b.n	80080a0 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008098:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <SVCCTL_App_Notification+0x140>)
 800809a:	2205      	movs	r2, #5
 800809c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080a6:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 80080a8:	4b17      	ldr	r3, [pc, #92]	; (8008108 <SVCCTL_App_Notification+0x140>)
 80080aa:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80080ac:	4b17      	ldr	r3, [pc, #92]	; (800810c <SVCCTL_App_Notification+0x144>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <SVCCTL_App_Notification+0x140>)
 80080b4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80080b6:	4b15      	ldr	r3, [pc, #84]	; (800810c <SVCCTL_App_Notification+0x144>)
 80080b8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80080ba:	4814      	ldr	r0, [pc, #80]	; (800810c <SVCCTL_App_Notification+0x144>)
 80080bc:	f000 fa6a 	bl	8008594 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 80080c0:	e002      	b.n	80080c8 <SVCCTL_App_Notification+0x100>
          break;
 80080c2:	bf00      	nop
 80080c4:	e01a      	b.n	80080fc <SVCCTL_App_Notification+0x134>
          break;
 80080c6:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 80080c8:	e018      	b.n	80080fc <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	3302      	adds	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f240 4207 	movw	r2, #1031	; 0x407
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00a      	beq.n	80080f4 <SVCCTL_App_Notification+0x12c>
 80080de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e2:	d009      	beq.n	80080f8 <SVCCTL_App_Notification+0x130>
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d000      	beq.n	80080ea <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 80080e8:	e007      	b.n	80080fa <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80080ea:	2101      	movs	r1, #1
 80080ec:	4808      	ldr	r0, [pc, #32]	; (8008110 <SVCCTL_App_Notification+0x148>)
 80080ee:	f7fa f929 	bl	8002344 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 80080f2:	e002      	b.n	80080fa <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <SVCCTL_App_Notification+0x132>
      break;
 80080f8:	bf00      	nop
      break; /* EVT_VENDOR */
 80080fa:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80080fc:	2301      	movs	r3, #1
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000120 	.word	0x20000120
 800810c:	200003c8 	.word	0x200003c8
 8008110:	48000400 	.word	0x48000400

08008114 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <Ble_Tl_Init+0x20>)
 800811c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800811e:	4b06      	ldr	r3, [pc, #24]	; (8008138 <Ble_Tl_Init+0x24>)
 8008120:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008122:	463b      	mov	r3, r7
 8008124:	4619      	mov	r1, r3
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <Ble_Tl_Init+0x28>)
 8008128:	f7ff f968 	bl	80073fc <hci_init>

  return;
 800812c:	bf00      	nop
}
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200300b8 	.word	0x200300b8
 8008138:	0800852f 	.word	0x0800852f
 800813c:	080084f7 	.word	0x080084f7

08008140 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	b091      	sub	sp, #68	; 0x44
 8008144:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8008146:	2300      	movs	r3, #0
 8008148:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800814a:	f7fe fce0 	bl	8006b0e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800814e:	f000 f943 	bl	80083d8 <BleGetBdAddress>
 8008152:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	2106      	movs	r1, #6
 8008158:	2000      	movs	r0, #0
 800815a:	f7fe fbb9 	bl	80068d0 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	795a      	ldrb	r2, [r3, #5]
 8008162:	4b5e      	ldr	r3, [pc, #376]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008164:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	791a      	ldrb	r2, [r3, #4]
 800816a:	4b5c      	ldr	r3, [pc, #368]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800816c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	78da      	ldrb	r2, [r3, #3]
 8008172:	4b5a      	ldr	r3, [pc, #360]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008174:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	789a      	ldrb	r2, [r3, #2]
 800817a:	4b58      	ldr	r3, [pc, #352]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800817c:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	785a      	ldrb	r2, [r3, #1]
 8008182:	4b56      	ldr	r3, [pc, #344]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008184:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	4b54      	ldr	r3, [pc, #336]	; (80082dc <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800818c:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800818e:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8008192:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8008194:	f7ff fe8a 	bl	8007eac <LL_FLASH_GetUDN>
 8008198:	4603      	mov	r3, r0
 800819a:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	461a      	mov	r2, r3
 80081a2:	2106      	movs	r1, #6
 80081a4:	202e      	movs	r0, #46	; 0x2e
 80081a6:	f7fe fb93 	bl	80068d0 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80081aa:	4a4d      	ldr	r2, [pc, #308]	; (80082e0 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80081ac:	2110      	movs	r1, #16
 80081ae:	2018      	movs	r0, #24
 80081b0:	f7fe fb8e 	bl	80068d0 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80081b4:	4a4b      	ldr	r2, [pc, #300]	; (80082e4 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80081b6:	2110      	movs	r1, #16
 80081b8:	2008      	movs	r0, #8
 80081ba:	f7fe fb89 	bl	80068d0 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80081be:	2118      	movs	r1, #24
 80081c0:	2001      	movs	r0, #1
 80081c2:	f7fe fbf5 	bl	80069b0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80081c6:	f7fe f932 	bl	800642e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80081ce:	7ffb      	ldrb	r3, [r7, #31]
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80081d6:	7ffb      	ldrb	r3, [r7, #31]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01e      	beq.n	800821a <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 80081dc:	4b42      	ldr	r3, [pc, #264]	; (80082e8 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80081de:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 80081e0:	f107 0216 	add.w	r2, r7, #22
 80081e4:	7ff8      	ldrb	r0, [r7, #31]
 80081e6:	f107 0312 	add.w	r3, r7, #18
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	f107 0314 	add.w	r3, r7, #20
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	4613      	mov	r3, r2
 80081f4:	2207      	movs	r2, #7
 80081f6:	2100      	movs	r1, #0
 80081f8:	f7fe f802 	bl	8006200 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80081fc:	8afc      	ldrh	r4, [r7, #22]
 80081fe:	8abd      	ldrh	r5, [r7, #20]
 8008200:	69b8      	ldr	r0, [r7, #24]
 8008202:	f7f7 ffbd 	bl	8000180 <strlen>
 8008206:	4603      	mov	r3, r0
 8008208:	b2da      	uxtb	r2, r3
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	4613      	mov	r3, r2
 8008210:	2200      	movs	r2, #0
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	f7fe facd 	bl	80067b4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800821a:	8af8      	ldrh	r0, [r7, #22]
 800821c:	8a79      	ldrh	r1, [r7, #18]
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2302      	movs	r3, #2
 8008224:	2200      	movs	r2, #0
 8008226:	f7fe fac5 	bl	80067b4 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800822a:	2202      	movs	r2, #2
 800822c:	2102      	movs	r1, #2
 800822e:	2000      	movs	r0, #0
 8008230:	f7fe fcfe 	bl	8006c30 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008236:	2201      	movs	r2, #1
 8008238:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800823a:	4b2c      	ldr	r3, [pc, #176]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f7fd fede 	bl	8006000 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008244:	4b29      	ldr	r3, [pc, #164]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008246:	2201      	movs	r2, #1
 8008248:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800824a:	4b28      	ldr	r3, [pc, #160]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800824c:	2200      	movs	r2, #0
 800824e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8008250:	4b26      	ldr	r3, [pc, #152]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008252:	2208      	movs	r2, #8
 8008254:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8008256:	4b25      	ldr	r3, [pc, #148]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008258:	2210      	movs	r2, #16
 800825a:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800825c:	4b23      	ldr	r3, [pc, #140]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800825e:	2201      	movs	r2, #1
 8008260:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8008266:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8008268:	4b20      	ldr	r3, [pc, #128]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800826a:	2201      	movs	r2, #1
 800826c:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800826e:	2300      	movs	r3, #0
 8008270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008274:	e00b      	b.n	800828e <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8008276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800827a:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800827c:	4413      	add	r3, r2
 800827e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008282:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008288:	3301      	adds	r3, #1
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800828e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008292:	2b0f      	cmp	r3, #15
 8008294:	d9ef      	bls.n	8008276 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008296:	4b15      	ldr	r3, [pc, #84]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008298:	789d      	ldrb	r5, [r3, #2]
 800829a:	4b14      	ldr	r3, [pc, #80]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800829c:	785e      	ldrb	r6, [r3, #1]
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80082a0:	7d5b      	ldrb	r3, [r3, #21]
 80082a2:	4a12      	ldr	r2, [pc, #72]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80082a4:	7d92      	ldrb	r2, [r2, #22]
 80082a6:	4911      	ldr	r1, [pc, #68]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80082a8:	7d09      	ldrb	r1, [r1, #20]
 80082aa:	4810      	ldr	r0, [pc, #64]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80082ac:	6980      	ldr	r0, [r0, #24]
 80082ae:	2400      	movs	r4, #0
 80082b0:	9404      	str	r4, [sp, #16]
 80082b2:	9003      	str	r0, [sp, #12]
 80082b4:	9102      	str	r1, [sp, #8]
 80082b6:	9201      	str	r2, [sp, #4]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	2300      	movs	r3, #0
 80082bc:	2201      	movs	r2, #1
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7fd feee 	bl	80060a2 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 80082ce:	f7fe f885 	bl	80063dc <aci_gap_configure_whitelist>
   }
}
 80082d2:	bf00      	nop
 80082d4:	372c      	adds	r7, #44	; 0x2c
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000010 	.word	0x20000010
 80082e0:	08009154 	.word	0x08009154
 80082e4:	08009164 	.word	0x08009164
 80082e8:	080090a4 	.word	0x080090a4
 80082ec:	20000120 	.word	0x20000120
 80082f0:	0001b207 	.word	0x0001b207

080082f4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08c      	sub	sp, #48	; 0x30
 80082f8:	af08      	add	r7, sp, #32
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80082fe:	2342      	movs	r3, #66	; 0x42
 8008300:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d106      	bne.n	8008316 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8008308:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <Adv_Request+0xc8>)
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <Adv_Request+0xcc>)
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	81bb      	strh	r3, [r7, #12]
 8008314:	e005      	b.n	8008322 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8008316:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800831a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800831c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008320:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008322:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <Adv_Request+0xd0>)
 8008324:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 fee1 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d10d      	bne.n	8008350 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8008334:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <Adv_Request+0xd0>)
 8008336:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800833a:	2b01      	cmp	r3, #1
 800833c:	d004      	beq.n	8008348 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800833e:	4b21      	ldr	r3, [pc, #132]	; (80083c4 <Adv_Request+0xd0>)
 8008340:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008344:	2b02      	cmp	r3, #2
 8008346:	d103      	bne.n	8008350 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8008348:	f7fd fd4c 	bl	8005de4 <aci_gap_set_non_discoverable>
 800834c:	4603      	mov	r3, r0
 800834e:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008350:	4a1c      	ldr	r2, [pc, #112]	; (80083c4 <Adv_Request+0xd0>)
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <Adv_Request+0xd0>)
 800835a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800835e:	89b8      	ldrh	r0, [r7, #12]
 8008360:	89f9      	ldrh	r1, [r7, #14]
 8008362:	2200      	movs	r2, #0
 8008364:	9206      	str	r2, [sp, #24]
 8008366:	2200      	movs	r2, #0
 8008368:	9205      	str	r2, [sp, #20]
 800836a:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <Adv_Request+0xd4>)
 800836c:	9204      	str	r2, [sp, #16]
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	4b16      	ldr	r3, [pc, #88]	; (80083cc <Adv_Request+0xd8>)
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	2306      	movs	r3, #6
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2300      	movs	r3, #0
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	4602      	mov	r2, r0
 8008380:	2000      	movs	r0, #0
 8008382:	f7fd fd58 	bl	8005e36 <aci_gap_set_discoverable>
 8008386:	4603      	mov	r3, r0
 8008388:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800838a:	4911      	ldr	r1, [pc, #68]	; (80083d0 <Adv_Request+0xdc>)
 800838c:	200e      	movs	r0, #14
 800838e:	f7fd ffc2 	bl	8006316 <aci_gap_update_adv_data>
 8008392:	4603      	mov	r3, r0
 8008394:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d107      	bne.n	80083b2 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <Adv_Request+0xd0>)
 80083a4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80083a8:	490a      	ldr	r1, [pc, #40]	; (80083d4 <Adv_Request+0xe0>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7f8 ff2a 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
}
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200001b4 	.word	0x200001b4
 80083c0:	200001b6 	.word	0x200001b6
 80083c4:	20000120 	.word	0x20000120
 80083c8:	20000149 	.word	0x20000149
 80083cc:	08009174 	.word	0x08009174
 80083d0:	20000010 	.word	0x20000010
 80083d4:	0001e046 	.word	0x0001e046

080083d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80083de:	f7ff fd65 	bl	8007eac <LL_FLASH_GetUDN>
 80083e2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d023      	beq.n	8008434 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80083ec:	f7ff fd76 	bl	8007edc <LL_FLASH_GetSTCompanyID>
 80083f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80083f2:	f7ff fd67 	bl	8007ec4 <LL_FLASH_GetDeviceID>
 80083f6:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <BleGetBdAddress+0x80>)
 80083fe:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b2da      	uxtb	r2, r3
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <BleGetBdAddress+0x80>)
 8008408:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	b2da      	uxtb	r2, r3
 8008410:	4b11      	ldr	r3, [pc, #68]	; (8008458 <BleGetBdAddress+0x80>)
 8008412:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	b2da      	uxtb	r2, r3
 8008418:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <BleGetBdAddress+0x80>)
 800841a:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	b2da      	uxtb	r2, r3
 8008420:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <BleGetBdAddress+0x80>)
 8008422:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	b2da      	uxtb	r2, r3
 800842a:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <BleGetBdAddress+0x80>)
 800842c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <BleGetBdAddress+0x80>)
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e00b      	b.n	800844c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008434:	2000      	movs	r0, #0
 8008436:	f7ff fc5d 	bl	8007cf4 <OTP_Read>
 800843a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e001      	b.n	800844c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <BleGetBdAddress+0x84>)
 800844a:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800844c:	697b      	ldr	r3, [r7, #20]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000258 	.word	0x20000258
 800845c:	0800914c 	.word	0x0800914c

08008460 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <Adv_Cancel+0x30>)
 8008468:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800846c:	2b05      	cmp	r3, #5
 800846e:	d00a      	beq.n	8008486 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008470:	2300      	movs	r3, #0
 8008472:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008474:	f7fd fcb6 	bl	8005de4 <aci_gap_set_non_discoverable>
 8008478:	4603      	mov	r3, r0
 800847a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <Adv_Cancel+0x30>)
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008484:	bf00      	nop
 8008486:	bf00      	nop
}
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000120 	.word	0x20000120

08008494 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8008498:	2100      	movs	r1, #0
 800849a:	2001      	movs	r0, #1
 800849c:	f000 fc88 	bl	8008db0 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80084a0:	bf00      	nop
}
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80084ba:	2100      	movs	r1, #0
 80084bc:	2004      	movs	r0, #4
 80084be:	f000 fc77 	bl	8008db0 <UTIL_SEQ_SetTask>
  return;
 80084c2:	bf00      	nop
}
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80084d2:	2001      	movs	r0, #1
 80084d4:	f000 fcd2 	bl	8008e7c <UTIL_SEQ_SetEvt>
  return;
 80084d8:	bf00      	nop
}
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80084e8:	2001      	movs	r0, #1
 80084ea:	f000 fce5 	bl	8008eb8 <UTIL_SEQ_WaitEvt>
  return;
 80084ee:	bf00      	nop
}
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	3308      	adds	r3, #8
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe fdd1 	bl	80070b0 <SVCCTL_UserEvtRx>
 800850e:	4603      	mov	r3, r0
 8008510:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800851e:	e002      	b.n	8008526 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	4603      	mov	r3, r0
 8008536:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <BLE_StatusNot+0x16>
 800853e:	2b01      	cmp	r3, #1
 8008540:	d006      	beq.n	8008550 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008542:	e00b      	b.n	800855c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008544:	231f      	movs	r3, #31
 8008546:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fc5b 	bl	8008e04 <UTIL_SEQ_PauseTask>
      break;
 800854e:	e005      	b.n	800855c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008550:	231f      	movs	r3, #31
 8008552:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fc73 	bl	8008e40 <UTIL_SEQ_ResumeTask>
      break;
 800855a:	bf00      	nop
  }
  return;
 800855c:	bf00      	nop
}
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d004      	beq.n	800857e <P2PS_STM_App_Notification+0x1a>
 8008574:	2b03      	cmp	r3, #3
 8008576:	d004      	beq.n	8008582 <P2PS_STM_App_Notification+0x1e>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800857c:	e004      	b.n	8008588 <P2PS_STM_App_Notification+0x24>
      break;
 800857e:	bf00      	nop
 8008580:	e002      	b.n	8008588 <P2PS_STM_App_Notification+0x24>
      break;
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <P2PS_STM_App_Notification+0x24>
      break;
 8008586:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8008588:	bf00      	nop
}
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <P2PS_APP_Notification+0x16>
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d002      	beq.n	80085ae <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80085a8:	e002      	b.n	80085b0 <P2PS_APP_Notification+0x1c>
    break;
 80085aa:	bf00      	nop
 80085ac:	e000      	b.n	80085b0 <P2PS_APP_Notification+0x1c>
    break;
 80085ae:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80085b0:	bf00      	nop
}
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80085c0:	bf00      	nop
}
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	af00      	add	r7, sp, #0
UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 80085ce:	2100      	movs	r1, #0
 80085d0:	2010      	movs	r0, #16
 80085d2:	f000 fbed 	bl	8008db0 <UTIL_SEQ_SetTask>
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d00e      	beq.n	800860a <TEMPLATE_STM_App_Notification+0x2e>
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d015      	beq.n	800861c <TEMPLATE_STM_App_Notification+0x40>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d000      	beq.n	80085f6 <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 80085f4:	e013      	b.n	800861e <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <TEMPLATE_STM_App_Notification+0x4c>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <TEMPLATE_STM_App_Notification+0x4c>)
 80085fe:	7a1b      	ldrb	r3, [r3, #8]
 8008600:	21cc      	movs	r1, #204	; 0xcc
 8008602:	4618      	mov	r0, r3
 8008604:	f7f8 fdfe 	bl	8001204 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 8008608:	e009      	b.n	800861e <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <TEMPLATE_STM_App_Notification+0x4c>)
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <TEMPLATE_STM_App_Notification+0x4c>)
 8008612:	7a1b      	ldrb	r3, [r3, #8]
 8008614:	4618      	mov	r0, r3
 8008616:	f7f8 fd6b 	bl	80010f0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800861a:	e000      	b.n	800861e <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800861c:	bf00      	nop
  }

  return;
 800861e:	bf00      	nop
}
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200001b8 	.word	0x200001b8

0800862c <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <TEMPLATE_APP_Init+0x28>)
 8008632:	2100      	movs	r1, #0
 8008634:	2010      	movs	r0, #16
 8008636:	f000 fb9b 	bl	8008d70 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <TEMPLATE_APP_Init+0x2c>)
 800863c:	2201      	movs	r2, #1
 800863e:	4907      	ldr	r1, [pc, #28]	; (800865c <TEMPLATE_APP_Init+0x30>)
 8008640:	2000      	movs	r0, #0
 8008642:	f7f8 fcdf 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <TEMPLATE_APP_Init+0x34>)
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800864c:	f000 f80a 	bl	8008664 <TEMPLATE_APP_context_Init>
  return;
 8008650:	bf00      	nop
}
 8008652:	bd80      	pop	{r7, pc}
 8008654:	08008689 	.word	0x08008689
 8008658:	080085cb 	.word	0x080085cb
 800865c:	200001c0 	.word	0x200001c0
 8008660:	200001b8 	.word	0x200001b8

08008664 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <TEMPLATE_APP_context_Init+0x20>)
 800866a:	2200      	movs	r2, #0
 800866c:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <TEMPLATE_APP_context_Init+0x20>)
 8008670:	2200      	movs	r2, #0
 8008672:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 8008674:	4b03      	ldr	r3, [pc, #12]	; (8008684 <TEMPLATE_APP_context_Init+0x20>)
 8008676:	220a      	movs	r2, #10
 8008678:	80da      	strh	r2, [r3, #6]
}
 800867a:	bf00      	nop
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	200001b8 	.word	0x200001b8

08008688 <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
  uint8_t value[4];
  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
 8008696:	4b1f      	ldr	r3, [pc, #124]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	0a1b      	lsrs	r3, r3, #8
 800869c:	b29b      	uxth	r3, r3
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	717b      	strb	r3, [r7, #5]
  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
 80086a2:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086a4:	889b      	ldrh	r3, [r3, #4]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	71bb      	strb	r3, [r7, #6]
  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086ac:	889b      	ldrh	r3, [r3, #4]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	71fb      	strb	r3, [r7, #7]
  TEMPLATE_Server_App_Context.Parameter.Temperature += TEMPLATE_Server_App_Context.UpdateParameterStep;
 80086b6:	4b17      	ldr	r3, [pc, #92]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086b8:	889a      	ldrh	r2, [r3, #4]
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	4b13      	ldr	r3, [pc, #76]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086c8:	809a      	strh	r2, [r3, #4]
  TEMPLATE_Server_App_Context.Parameter.TimeStamp += PARAMETER_CHANGE_STEP;
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	330a      	adds	r3, #10
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086d4:	805a      	strh	r2, [r3, #2]
  if (TEMPLATE_Server_App_Context.Parameter.Temperature > PARAMETER_VALUE_MAX_THRESHOLD) {
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086d8:	889b      	ldrh	r3, [r3, #4]
 80086da:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80086de:	d904      	bls.n	80086ea <TEMPLATE_Send_Notification_Task+0x62>
    TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086e2:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80086e6:	80da      	strh	r2, [r3, #6]
 80086e8:	e006      	b.n	80086f8 <TEMPLATE_Send_Notification_Task+0x70>
  }
  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	2b63      	cmp	r3, #99	; 0x63
 80086f0:	d802      	bhi.n	80086f8 <TEMPLATE_Send_Notification_Task+0x70>
  {
    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086f4:	220a      	movs	r2, #10
 80086f6:	80da      	strh	r2, [r3, #6]
  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <TEMPLATE_Send_Notification_Task+0x8c>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <TEMPLATE_Send_Notification_Task+0x84>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 8008700:	1d3b      	adds	r3, r7, #4
 8008702:	4619      	mov	r1, r3
 8008704:	2000      	movs	r0, #0
 8008706:	f7fe fe41 	bl	800738c <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800870a:	bf00      	nop
 800870c:	bf00      	nop
}
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200001b8 	.word	0x200001b8

08008718 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800871c:	4b05      	ldr	r3, [pc, #20]	; (8008734 <LL_PWR_EnableBootC2+0x1c>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	4a04      	ldr	r2, [pc, #16]	; (8008734 <LL_PWR_EnableBootC2+0x1c>)
 8008722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008726:	60d3      	str	r3, [r2, #12]
}
 8008728:	bf00      	nop
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	58000400 	.word	0x58000400

08008738 <LL_AHB3_GRP1_EnableClock>:
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4313      	orrs	r3, r2
 800874e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f043 0201 	orr.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	041b      	lsls	r3, r3, #16
 80087bc:	43db      	mvns	r3, r3
 80087be:	401a      	ands	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	605a      	str	r2, [r3, #4]
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	43db      	mvns	r3, r3
 8008806:	401a      	ands	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	605a      	str	r2, [r3, #4]
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	609a      	str	r2, [r3, #8]
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	041a      	lsls	r2, r3, #16
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	609a      	str	r2, [r3, #8]
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	4013      	ands	r3, r2
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d101      	bne.n	800886e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	4013      	ands	r3, r2
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d101      	bne.n	8008898 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80088ac:	2102      	movs	r1, #2
 80088ae:	4819      	ldr	r0, [pc, #100]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088b0:	f7ff ffe4 	bl	800887c <LL_C2_IPCC_IsActiveFlag_CHx>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HW_IPCC_Rx_Handler+0x26>
 80088ba:	4b16      	ldr	r3, [pc, #88]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	43db      	mvns	r3, r3
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80088c8:	f000 f8de 	bl	8008a88 <HW_IPCC_SYS_EvtHandler>
 80088cc:	e01f      	b.n	800890e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80088ce:	2101      	movs	r1, #1
 80088d0:	4810      	ldr	r0, [pc, #64]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088d2:	f7ff ffd3 	bl	800887c <LL_C2_IPCC_IsActiveFlag_CHx>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d008      	beq.n	80088ee <HW_IPCC_Rx_Handler+0x46>
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80088e8:	f000 f892 	bl	8008a10 <HW_IPCC_BLE_EvtHandler>
 80088ec:	e00f      	b.n	800890e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80088ee:	2108      	movs	r1, #8
 80088f0:	4808      	ldr	r0, [pc, #32]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088f2:	f7ff ffc3 	bl	800887c <LL_C2_IPCC_IsActiveFlag_CHx>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HW_IPCC_Rx_Handler+0x68>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <HW_IPCC_Rx_Handler+0x6c>)
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	43db      	mvns	r3, r3
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800890a:	f000 f909 	bl	8008b20 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800890e:	bf00      	nop
 8008910:	bf00      	nop
}
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58000c00 	.word	0x58000c00

08008918 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800891c:	2102      	movs	r1, #2
 800891e:	4822      	ldr	r0, [pc, #136]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008920:	f7ff ff97 	bl	8008852 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <HW_IPCC_Tx_Handler+0x26>
 800892a:	4b1f      	ldr	r3, [pc, #124]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	43db      	mvns	r3, r3
 8008930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008938:	f000 f89a 	bl	8008a70 <HW_IPCC_SYS_CmdEvtHandler>
 800893c:	e031      	b.n	80089a2 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800893e:	2102      	movs	r1, #2
 8008940:	4819      	ldr	r0, [pc, #100]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008942:	f7ff ff86 	bl	8008852 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <HW_IPCC_Tx_Handler+0x48>
 800894c:	4b16      	ldr	r3, [pc, #88]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	43db      	mvns	r3, r3
 8008952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800895a:	f000 f889 	bl	8008a70 <HW_IPCC_SYS_CmdEvtHandler>
 800895e:	e020      	b.n	80089a2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008960:	2108      	movs	r1, #8
 8008962:	4811      	ldr	r0, [pc, #68]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008964:	f7ff ff75 	bl	8008852 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <HW_IPCC_Tx_Handler+0x6a>
 800896e:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	43db      	mvns	r3, r3
 8008974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800897c:	f000 f8b2 	bl	8008ae4 <HW_IPCC_MM_FreeBufHandler>
 8008980:	e00f      	b.n	80089a2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008982:	2120      	movs	r1, #32
 8008984:	4808      	ldr	r0, [pc, #32]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008986:	f7ff ff64 	bl	8008852 <LL_C1_IPCC_IsActiveFlag_CHx>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <HW_IPCC_Tx_Handler+0x8c>
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <HW_IPCC_Tx_Handler+0x90>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	43db      	mvns	r3, r3
 8008996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800899e:	f000 f843 	bl	8008a28 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
}
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	58000c00 	.word	0x58000c00

080089ac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80089b0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80089b2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80089b4:	f7ff feb0 	bl	8008718 <LL_PWR_EnableBootC2>

  return;
 80089b8:	bf00      	nop
}
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80089c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089c4:	f7ff feb8 	bl	8008738 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80089c8:	4806      	ldr	r0, [pc, #24]	; (80089e4 <HW_IPCC_Init+0x28>)
 80089ca:	f7ff fede 	bl	800878a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <HW_IPCC_Init+0x28>)
 80089d0:	f7ff fecb 	bl	800876a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80089d4:	202c      	movs	r0, #44	; 0x2c
 80089d6:	f7f9 fa8a 	bl	8001eee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80089da:	202d      	movs	r0, #45	; 0x2d
 80089dc:	f7f9 fa87 	bl	8001eee <HAL_NVIC_EnableIRQ>

  return;
 80089e0:	bf00      	nop
}
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	58000c00 	.word	0x58000c00

080089e8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80089ec:	2101      	movs	r1, #1
 80089ee:	4802      	ldr	r0, [pc, #8]	; (80089f8 <HW_IPCC_BLE_Init+0x10>)
 80089f0:	f7ff ff00 	bl	80087f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80089f4:	bf00      	nop
}
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	58000c00 	.word	0x58000c00

080089fc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008a00:	2101      	movs	r1, #1
 8008a02:	4802      	ldr	r0, [pc, #8]	; (8008a0c <HW_IPCC_BLE_SendCmd+0x10>)
 8008a04:	f7ff ff16 	bl	8008834 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008a08:	bf00      	nop
}
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	58000c00 	.word	0x58000c00

08008a10 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008a14:	f7ff f838 	bl	8007a88 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4802      	ldr	r0, [pc, #8]	; (8008a24 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008a1c:	f7ff fefc 	bl	8008818 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008a20:	bf00      	nop
}
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	58000c00 	.word	0x58000c00

08008a28 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008a2c:	2120      	movs	r1, #32
 8008a2e:	4803      	ldr	r0, [pc, #12]	; (8008a3c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008a30:	f7ff fece 	bl	80087d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008a34:	f7ff f844 	bl	8007ac0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008a38:	bf00      	nop
}
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	58000c00 	.word	0x58000c00

08008a40 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008a44:	2102      	movs	r1, #2
 8008a46:	4802      	ldr	r0, [pc, #8]	; (8008a50 <HW_IPCC_SYS_Init+0x10>)
 8008a48:	f7ff fed4 	bl	80087f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008a4c:	bf00      	nop
}
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	58000c00 	.word	0x58000c00

08008a54 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a58:	2102      	movs	r1, #2
 8008a5a:	4804      	ldr	r0, [pc, #16]	; (8008a6c <HW_IPCC_SYS_SendCmd+0x18>)
 8008a5c:	f7ff feea 	bl	8008834 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a60:	2102      	movs	r1, #2
 8008a62:	4802      	ldr	r0, [pc, #8]	; (8008a6c <HW_IPCC_SYS_SendCmd+0x18>)
 8008a64:	f7ff fea1 	bl	80087aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008a68:	bf00      	nop
}
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	58000c00 	.word	0x58000c00

08008a70 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a74:	2102      	movs	r1, #2
 8008a76:	4803      	ldr	r0, [pc, #12]	; (8008a84 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008a78:	f7ff feaa 	bl	80087d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008a7c:	f7ff f868 	bl	8007b50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008a80:	bf00      	nop
}
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	58000c00 	.word	0x58000c00

08008a88 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008a8c:	f7ff f870 	bl	8007b70 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008a90:	2102      	movs	r1, #2
 8008a92:	4802      	ldr	r0, [pc, #8]	; (8008a9c <HW_IPCC_SYS_EvtHandler+0x14>)
 8008a94:	f7ff fec0 	bl	8008818 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008a98:	bf00      	nop
}
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	58000c00 	.word	0x58000c00

08008aa0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008aa8:	2108      	movs	r1, #8
 8008aaa:	480c      	ldr	r0, [pc, #48]	; (8008adc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008aac:	f7ff fed1 	bl	8008852 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008abc:	2108      	movs	r1, #8
 8008abe:	4807      	ldr	r0, [pc, #28]	; (8008adc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ac0:	f7ff fe73 	bl	80087aa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008ac4:	e006      	b.n	8008ad4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008aca:	2108      	movs	r1, #8
 8008acc:	4803      	ldr	r0, [pc, #12]	; (8008adc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ace:	f7ff feb1 	bl	8008834 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008ad2:	bf00      	nop
}
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	58000c00 	.word	0x58000c00
 8008ae0:	20000260 	.word	0x20000260

08008ae4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008ae8:	2108      	movs	r1, #8
 8008aea:	4806      	ldr	r0, [pc, #24]	; (8008b04 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008aec:	f7ff fe70 	bl	80087d0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008af0:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008af6:	2108      	movs	r1, #8
 8008af8:	4802      	ldr	r0, [pc, #8]	; (8008b04 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008afa:	f7ff fe9b 	bl	8008834 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008afe:	bf00      	nop
}
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	58000c00 	.word	0x58000c00
 8008b08:	20000260 	.word	0x20000260

08008b0c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008b10:	2108      	movs	r1, #8
 8008b12:	4802      	ldr	r0, [pc, #8]	; (8008b1c <HW_IPCC_TRACES_Init+0x10>)
 8008b14:	f7ff fe6e 	bl	80087f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008b18:	bf00      	nop
}
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	58000c00 	.word	0x58000c00

08008b20 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008b24:	f7ff f8c2 	bl	8007cac <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008b28:	2108      	movs	r1, #8
 8008b2a:	4802      	ldr	r0, [pc, #8]	; (8008b34 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008b2c:	f7ff fe74 	bl	8008818 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008b30:	bf00      	nop
}
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	58000c00 	.word	0x58000c00

08008b38 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <UTIL_LPM_Init+0x1c>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <UTIL_LPM_Init+0x20>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000264 	.word	0x20000264
 8008b58:	20000268 	.word	0x20000268

08008b5c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b72:	b672      	cpsid	i
  
  switch(state)
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <UTIL_LPM_SetOffMode+0x32>
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d000      	beq.n	8008b80 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8008b7e:	e00e      	b.n	8008b9e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <UTIL_LPM_SetOffMode+0x58>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <UTIL_LPM_SetOffMode+0x58>)
 8008b8a:	6013      	str	r3, [r2, #0]
      break;
 8008b8c:	e007      	b.n	8008b9e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	43da      	mvns	r2, r3
 8008b92:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <UTIL_LPM_SetOffMode+0x58>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4013      	ands	r3, r2
 8008b98:	4a06      	ldr	r2, [pc, #24]	; (8008bb4 <UTIL_LPM_SetOffMode+0x58>)
 8008b9a:	6013      	str	r3, [r2, #0]
      break;
 8008b9c:	bf00      	nop
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	20000268 	.word	0x20000268

08008bb8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08c      	sub	sp, #48	; 0x30
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008bc0:	4b63      	ldr	r3, [pc, #396]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8008bc6:	4b62      	ldr	r3, [pc, #392]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	4a60      	ldr	r2, [pc, #384]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008bd0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8008bd2:	e082      	b.n	8008cda <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8008bd8:	e002      	b.n	8008be0 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	3301      	adds	r3, #1
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8008be0:	4a5c      	ldr	r2, [pc, #368]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008be8:	4b5b      	ldr	r3, [pc, #364]	; (8008d58 <UTIL_SEQ_Run+0x1a0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	401a      	ands	r2, r3
 8008bee:	4b58      	ldr	r3, [pc, #352]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008bf8:	4a56      	ldr	r2, [pc, #344]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c00:	4b55      	ldr	r3, [pc, #340]	; (8008d58 <UTIL_SEQ_Run+0x1a0>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	401a      	ands	r2, r3
 8008c06:	4b52      	ldr	r3, [pc, #328]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8008c0e:	4a51      	ldr	r2, [pc, #324]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008c20:	4a4c      	ldr	r2, [pc, #304]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	4413      	add	r3, r2
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8008c2e:	4a49      	ldr	r2, [pc, #292]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f97d 	bl	8008f3c <bit_position>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b45      	ldr	r3, [pc, #276]	; (8008d5c <UTIL_SEQ_Run+0x1a4>)
 8008c46:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8008c48:	4a42      	ldr	r2, [pc, #264]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	4a42      	ldr	r2, [pc, #264]	; (8008d5c <UTIL_SEQ_Run+0x1a4>)
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	2101      	movs	r1, #1
 8008c58:	fa01 f202 	lsl.w	r2, r1, r2
 8008c5c:	43d2      	mvns	r2, r2
 8008c5e:	401a      	ands	r2, r3
 8008c60:	493c      	ldr	r1, [pc, #240]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	440b      	add	r3, r1
 8008c68:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c70:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c74:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8008c76:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <UTIL_SEQ_Run+0x1a4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c80:	43db      	mvns	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <UTIL_SEQ_Run+0x1a8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	4a35      	ldr	r2, [pc, #212]	; (8008d60 <UTIL_SEQ_Run+0x1a8>)
 8008c8c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8008c8e:	2302      	movs	r3, #2
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c92:	e014      	b.n	8008cbe <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	3b01      	subs	r3, #1
 8008c98:	4a2e      	ldr	r2, [pc, #184]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008c9a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c9e:	4b2f      	ldr	r3, [pc, #188]	; (8008d5c <UTIL_SEQ_Run+0x1a4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	400a      	ands	r2, r1
 8008cb2:	4928      	ldr	r1, [pc, #160]	; (8008d54 <UTIL_SEQ_Run+0x19c>)
 8008cb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e7      	bne.n	8008c94 <UTIL_SEQ_Run+0xdc>
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <UTIL_SEQ_Run+0x1a4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <UTIL_SEQ_Run+0x1ac>)
 8008cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd8:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8008cda:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <UTIL_SEQ_Run+0x1a8>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <UTIL_SEQ_Run+0x1a0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <UTIL_SEQ_Run+0x146>
 8008cee:	4b1e      	ldr	r3, [pc, #120]	; (8008d68 <UTIL_SEQ_Run+0x1b0>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <UTIL_SEQ_Run+0x1b4>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f43f af6b 	beq.w	8008bd4 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8008cfe:	f000 f90f 	bl	8008f20 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d02:	f3ef 8310 	mrs	r3, PRIMASK
 8008d06:	613b      	str	r3, [r7, #16]
  return(result);
 8008d08:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d0c:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8008d0e:	4b14      	ldr	r3, [pc, #80]	; (8008d60 <UTIL_SEQ_Run+0x1a8>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <UTIL_SEQ_Run+0x1a0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	401a      	ands	r2, r3
 8008d18:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d108      	bne.n	8008d34 <UTIL_SEQ_Run+0x17c>
 8008d22:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <UTIL_SEQ_Run+0x1b0>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	4b11      	ldr	r3, [pc, #68]	; (8008d6c <UTIL_SEQ_Run+0x1b4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8008d30:	f7f7 fc2b 	bl	800058a <UTIL_SEQ_Idle>
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8008d3e:	f000 f8f6 	bl	8008f2e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008d42:	4a03      	ldr	r2, [pc, #12]	; (8008d50 <UTIL_SEQ_Run+0x198>)
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	6013      	str	r3, [r2, #0]

  return;
 8008d48:	bf00      	nop
}
 8008d4a:	3730      	adds	r7, #48	; 0x30
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000024 	.word	0x20000024
 8008d54:	200002fc 	.word	0x200002fc
 8008d58:	20000020 	.word	0x20000020
 8008d5c:	20000278 	.word	0x20000278
 8008d60:	2000026c 	.word	0x2000026c
 8008d64:	2000027c 	.word	0x2000027c
 8008d68:	20000270 	.word	0x20000270
 8008d6c:	20000274 	.word	0x20000274

08008d70 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d80:	617b      	str	r3, [r7, #20]
  return(result);
 8008d82:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d86:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 f8d7 	bl	8008f3c <bit_position>
 8008d8e:	4601      	mov	r1, r0
 8008d90:	4a06      	ldr	r2, [pc, #24]	; (8008dac <UTIL_SEQ_RegTask+0x3c>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008da2:	bf00      	nop
}
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	2000027c 	.word	0x2000027c

08008db0 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dba:	f3ef 8310 	mrs	r3, PRIMASK
 8008dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc4:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <UTIL_SEQ_SetTask+0x4c>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	4a0b      	ldr	r2, [pc, #44]	; (8008dfc <UTIL_SEQ_SetTask+0x4c>)
 8008dd0:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8008dd2:	4a0b      	ldr	r2, [pc, #44]	; (8008e00 <UTIL_SEQ_SetTask+0x50>)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	4908      	ldr	r1, [pc, #32]	; (8008e00 <UTIL_SEQ_SetTask+0x50>)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008df0:	bf00      	nop
}
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	2000026c 	.word	0x2000026c
 8008e00:	200002fc 	.word	0x200002fc

08008e04 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e12:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e16:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	43da      	mvns	r2, r3
 8008e1c:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <UTIL_SEQ_PauseTask+0x38>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4013      	ands	r3, r2
 8008e22:	4a06      	ldr	r2, [pc, #24]	; (8008e3c <UTIL_SEQ_PauseTask+0x38>)
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008e30:	bf00      	nop
}
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	20000020 	.word	0x20000020

08008e40 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e48:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e52:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <UTIL_SEQ_ResumeTask+0x38>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	4a06      	ldr	r2, [pc, #24]	; (8008e78 <UTIL_SEQ_ResumeTask+0x38>)
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008e6a:	bf00      	nop
}
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000020 	.word	0x20000020

08008e7c <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e8e:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <UTIL_SEQ_SetEvt+0x38>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	4a06      	ldr	r2, [pc, #24]	; (8008eb4 <UTIL_SEQ_SetEvt+0x38>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008ea6:	bf00      	nop
}
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20000270 	.word	0x20000270

08008eb8 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8008ec0:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <UTIL_SEQ_WaitEvt+0x5c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8008ed2:	4a11      	ldr	r2, [pc, #68]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8008ed8:	e005      	b.n	8008ee6 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8008eda:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7f7 fb59 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <UTIL_SEQ_WaitEvt+0x64>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0f2      	beq.n	8008eda <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8008ef4:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	43da      	mvns	r2, r3
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <UTIL_SEQ_WaitEvt+0x64>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4013      	ands	r3, r2
 8008f00:	4a06      	ldr	r2, [pc, #24]	; (8008f1c <UTIL_SEQ_WaitEvt+0x64>)
 8008f02:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008f04:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <UTIL_SEQ_WaitEvt+0x60>)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6013      	str	r3, [r2, #0]

  return;
 8008f0a:	bf00      	nop
}
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000278 	.word	0x20000278
 8008f18:	20000274 	.word	0x20000274
 8008f1c:	20000270 	.word	0x20000270

08008f20 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008f24:	bf00      	nop
}
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008f2e:	b480      	push	{r7}
 8008f30:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008f32:	bf00      	nop
}
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	041b      	lsls	r3, r3, #16
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <bit_position+0x20>
 8008f52:	2310      	movs	r3, #16
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	041b      	lsls	r3, r3, #16
 8008f5a:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d105      	bne.n	8008f72 <bit_position+0x36>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d105      	bne.n	8008f88 <bit_position+0x4c>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	0f1b      	lsrs	r3, r3, #28
 8008f8c:	4a07      	ldr	r2, [pc, #28]	; (8008fac <bit_position+0x70>)
 8008f8e:	5cd3      	ldrb	r3, [r2, r3]
 8008f90:	461a      	mov	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f1c3 031f 	rsb	r3, r3, #31
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	0800917c 	.word	0x0800917c

08008fb0 <__libc_init_array>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	4e0d      	ldr	r6, [pc, #52]	; (8008fe8 <__libc_init_array+0x38>)
 8008fb4:	4c0d      	ldr	r4, [pc, #52]	; (8008fec <__libc_init_array+0x3c>)
 8008fb6:	1ba4      	subs	r4, r4, r6
 8008fb8:	10a4      	asrs	r4, r4, #2
 8008fba:	2500      	movs	r5, #0
 8008fbc:	42a5      	cmp	r5, r4
 8008fbe:	d109      	bne.n	8008fd4 <__libc_init_array+0x24>
 8008fc0:	4e0b      	ldr	r6, [pc, #44]	; (8008ff0 <__libc_init_array+0x40>)
 8008fc2:	4c0c      	ldr	r4, [pc, #48]	; (8008ff4 <__libc_init_array+0x44>)
 8008fc4:	f000 f82c 	bl	8009020 <_init>
 8008fc8:	1ba4      	subs	r4, r4, r6
 8008fca:	10a4      	asrs	r4, r4, #2
 8008fcc:	2500      	movs	r5, #0
 8008fce:	42a5      	cmp	r5, r4
 8008fd0:	d105      	bne.n	8008fde <__libc_init_array+0x2e>
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fd8:	4798      	blx	r3
 8008fda:	3501      	adds	r5, #1
 8008fdc:	e7ee      	b.n	8008fbc <__libc_init_array+0xc>
 8008fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fe2:	4798      	blx	r3
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	e7f2      	b.n	8008fce <__libc_init_array+0x1e>
 8008fe8:	08009194 	.word	0x08009194
 8008fec:	08009194 	.word	0x08009194
 8008ff0:	08009194 	.word	0x08009194
 8008ff4:	08009198 	.word	0x08009198

08008ff8 <memcpy>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	1e43      	subs	r3, r0, #1
 8008ffc:	440a      	add	r2, r1
 8008ffe:	4291      	cmp	r1, r2
 8009000:	d100      	bne.n	8009004 <memcpy+0xc>
 8009002:	bd10      	pop	{r4, pc}
 8009004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800900c:	e7f7      	b.n	8008ffe <memcpy+0x6>

0800900e <memset>:
 800900e:	4402      	add	r2, r0
 8009010:	4603      	mov	r3, r0
 8009012:	4293      	cmp	r3, r2
 8009014:	d100      	bne.n	8009018 <memset+0xa>
 8009016:	4770      	bx	lr
 8009018:	f803 1b01 	strb.w	r1, [r3], #1
 800901c:	e7f9      	b.n	8009012 <memset+0x4>
	...

08009020 <_init>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr

0800902c <_fini>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr
