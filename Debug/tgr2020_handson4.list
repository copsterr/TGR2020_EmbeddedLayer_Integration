
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da7c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800dbbc  0800dbbc  0001dbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd10  0800dd10  0001dd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd1c  0800dd1c  0001dd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000128  20000004  0800dd20  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000012c  0800de48  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  200001c8  0800dee1  000201c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000210  0800df26  00020210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a2  20000224  0800df37  00020224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003c4  200002c8  0800dfd9  000202c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000068c  0800dfd9  0002068c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0005375d  00000000  00000000  000202f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000769b  00000000  00000000  00073a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003d88  00000000  00000000  0007b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003a40  00000000  00000000  0007ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e86f  00000000  00000000  000828b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002c014  00000000  00000000  000b1127  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010758f  00000000  00000000  000dd13b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e46ca  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000105d4  00000000  00000000  001e4748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c8 	.word	0x200002c8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dba4 	.word	0x0800dba4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002cc 	.word	0x200002cc
 800017c:	0800dba4 	.word	0x0800dba4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200005c8 	.word	0x200005c8

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f00d f8ec 	bl	800d6bc <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f00c f80f 	bl	800c510 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f00d f9fc 	bl	800d8f4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f00b fecb 	bl	800c2a4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f00c f901 	bl	800c72c <TL_MM_Init>

  TL_Enable();
 800052a:	f00b ffeb 	bl	800c504 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	0800c2dd 	.word	0x0800c2dd
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f00c f94b 	bl	800c80c <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f00c fa7f 	bl	800ca78 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f00d f8af 	bl	800d6e0 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f00d f8c9 	bl	800d73c <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f00d f9b9 	bl	800d934 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f00d fa14 	bl	800da00 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f00d fa27 	bl	800da3c <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2000012c 	.word	0x2000012c

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200001bc 	.word	0x200001bc
 80007cc:	2000012c 	.word	0x2000012c

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200001bc 	.word	0x200001bc
 8000918:	200001bd 	.word	0x200001bd
 800091c:	2000012c 	.word	0x2000012c
 8000920:	200001c0 	.word	0x200001c0

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200001bc 	.word	0x200001bc
 8000a20:	200001bd 	.word	0x200001bd
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	200001c0 	.word	0x200001c0

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001c0 	.word	0x200001c0
 8000aa0:	200002ea 	.word	0x200002ea
 8000aa4:	200002e9 	.word	0x200002e9
 8000aa8:	200002e8 	.word	0x200002e8

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f004 fe91 	bl	80057ee <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f004 fe79 	bl	800580a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001c0 	.word	0x200001c0
 8000b58:	200002e8 	.word	0x200002e8
 8000b5c:	200002e4 	.word	0x200002e4
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	200002e4 	.word	0x200002e4
 8000c94:	200001bc 	.word	0x200001bc
 8000c98:	2000012c 	.word	0x2000012c
 8000c9c:	200001c4 	.word	0x200001c4
 8000ca0:	200002ec 	.word	0x200002ec

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002e4 	.word	0x200002e4
 8000e34:	200001bc 	.word	0x200001bc
 8000e38:	2000012c 	.word	0x2000012c
 8000e3c:	200001c4 	.word	0x200001c4
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f004 fc41 	bl	800580a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f004 fc1d 	bl	80057ee <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fbd1 	bl	800576a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f004 fbe8 	bl	800579e <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002e4 	.word	0x200002e4
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	200002e8 	.word	0x200002e8
 8000fe4:	200002e9 	.word	0x200002e9
 8000fe8:	200002ea 	.word	0x200002ea
 8000fec:	200002ec 	.word	0x200002ec
 8000ff0:	200001c4 	.word	0x200001c4
 8000ff4:	200001c0 	.word	0x200001c0
 8000ff8:	2000012c 	.word	0x2000012c
 8000ffc:	200001bc 	.word	0x200001bc
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	2000012c 	.word	0x2000012c

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f004 fb57 	bl	80057ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f004 fb29 	bl	800580a <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 fae2 	bl	800579e <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002e4 	.word	0x200002e4
 80011f0:	2000012c 	.word	0x2000012c
 80011f4:	200001bc 	.word	0x200001bc
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	200001bd 	.word	0x200001bd

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f004 fabc 	bl	80057ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f004 fa58 	bl	800579e <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000012c 	.word	0x2000012c
 8001304:	200002e4 	.word	0x200002e4
 8001308:	200001bc 	.word	0x200001bc
 800130c:	200001bd 	.word	0x200001bd

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	200004f8 	.word	0x200004f8

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f004 f812 	bl	80053f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f854 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 80013d0:	f000 f902 	bl	80015d8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80013d4:	f000 f928 	bl	8001628 <MX_TIM17_Init>
  MX_GPIO_Init();
 80013d8:	f000 f998 	bl	800170c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 f94a 	bl	8001674 <MX_USART1_UART_Init>
  MX_RF_Init();
 80013e0:	f000 f8ca 	bl	8001578 <MX_RF_Init>
  MX_RTC_Init();
 80013e4:	f000 f8d0 	bl	8001588 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e8:	f7ff f866 	bl	80004b8 <APPE_Init>

  MX_MEMS_Init();
 80013ec:	f009 faa4 	bl	800a938 <MX_MEMS_Init>

  // start timer16
  HAL_TIM_Base_Start_IT(&htim16);
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <main+0x98>)
 80013f2:	f007 fac1 	bl	8008978 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013f6:	f04f 30ff 	mov.w	r0, #4294967295
 80013fa:	f00c f99f 	bl	800d73c <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

    MX_MEMS_Process();
 80013fe:	f009 faa7 	bl	800a950 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */


    /* STATE SWITCHING ------------------------------------------------------ */
    switch (state)
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <main+0x9c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <main+0x4c>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d017      	beq.n	800143e <main+0x7a>
    case UNCONCIOUS:
        HAL_UART_Transmit(&huart1, (uint8_t*) prompt_dead, strlen(prompt_dead), 1000);
      break;
    
    default:
      break;
 800140e:	e023      	b.n	8001458 <main+0x94>
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_moving, strlen(prompt_moving), 1000);
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <main+0xa0>)
 8001412:	f7fe feb5 	bl	8000180 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <main+0xa0>)
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <main+0xa4>)
 8001422:	f007 fd0d 	bl	8008e40 <HAL_UART_Transmit>
      if (still_timeout_count == 10) {
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <main+0xa8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b0a      	cmp	r3, #10
 800142e:	d112      	bne.n	8001456 <main+0x92>
    	motion_status = MAYBE_DEAD;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <main+0xac>)
 8001432:	2208      	movs	r2, #8
 8001434:	701a      	strb	r2, [r3, #0]
        state = UNCONCIOUS;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <main+0x9c>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
      break;
 800143c:	e00b      	b.n	8001456 <main+0x92>
        HAL_UART_Transmit(&huart1, (uint8_t*) prompt_dead, strlen(prompt_dead), 1000);
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <main+0xb0>)
 8001440:	f7fe fe9e 	bl	8000180 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <main+0xb0>)
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <main+0xa4>)
 8001450:	f007 fcf6 	bl	8008e40 <HAL_UART_Transmit>
      break;
 8001454:	e000      	b.n	8001458 <main+0x94>
      break;
 8001456:	bf00      	nop
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001458:	e7cd      	b.n	80013f6 <main+0x32>
 800145a:	bf00      	nop
 800145c:	200005ec 	.word	0x200005ec
 8001460:	200002fd 	.word	0x200002fd
 8001464:	20000004 	.word	0x20000004
 8001468:	2000053c 	.word	0x2000053c
 800146c:	200002fc 	.word	0x200002fc
 8001470:	200002fe 	.word	0x200002fe
 8001474:	2000001c 	.word	0x2000001c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0ae      	sub	sp, #184	; 0xb8
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001482:	2248      	movs	r2, #72	; 0x48
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f00c fb83 	bl	800db92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2250      	movs	r2, #80	; 0x50
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00c fb73 	bl	800db92 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff59 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <SystemClock_Config+0xfc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <SystemClock_Config+0xfc>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <SystemClock_Config+0xfc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80014ce:	2307      	movs	r3, #7
 80014d0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e2:	2340      	movs	r3, #64	; 0x40
 80014e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fe1a 	bl	800712c <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014fe:	f000 f9f9 	bl	80018f4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001502:	236f      	movs	r3, #111	; 0x6f
 8001504:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001506:	2302      	movs	r3, #2
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800151e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001522:	2101      	movs	r1, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f006 f95f 	bl	80077e8 <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001530:	f000 f9e0 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001534:	f643 0305 	movw	r3, #14341	; 0x3805
 8001538:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800153e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800154a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001550:	2302      	movs	r3, #2
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001554:	2300      	movs	r3, #0
 8001556:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fd7f 	bl	800805e <HAL_RCCEx_PeriphCLKConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001566:	f000 f9c5 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800156a:	bf00      	nop
 800156c:	37b8      	adds	r7, #184	; 0xb8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	58000400 	.word	0x58000400

08001578 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_RTC_Init+0x48>)
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <MX_RTC_Init+0x4c>)
 8001590:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_RTC_Init+0x48>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_RTC_Init+0x48>)
 800159a:	220f      	movs	r2, #15
 800159c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_RTC_Init+0x48>)
 80015a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015a4:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <MX_RTC_Init+0x48>)
 80015a8:	f006 ffdf 	bl	800856a <HAL_RTC_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80015b2:	f000 f99f 	bl	80018f4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_RTC_Init+0x48>)
 80015bc:	f007 f8c4 	bl	8008748 <HAL_RTCEx_SetWakeUpTimer_IT>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80015c6:	f000 f995 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200005c8 	.word	0x200005c8
 80015d4:	40002800 	.word	0x40002800

080015d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_TIM16_Init+0x48>)
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <MX_TIM16_Init+0x4c>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16001;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_TIM16_Init+0x48>)
 80015e4:	f643 6281 	movw	r2, #16001	; 0x3e81
 80015e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_TIM16_Init+0x48>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2001;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_TIM16_Init+0x48>)
 80015f2:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80015f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_TIM16_Init+0x48>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_TIM16_Init+0x48>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_TIM16_Init+0x48>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM16_Init+0x48>)
 800160c:	f007 f988 	bl	8008920 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001616:	f000 f96d 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200005ec 	.word	0x200005ec
 8001624:	40014400 	.word	0x40014400

08001628 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_TIM17_Init+0x44>)
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <MX_TIM17_Init+0x48>)
 8001630:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 161;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_TIM17_Init+0x44>)
 8001634:	22a1      	movs	r2, #161	; 0xa1
 8001636:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_TIM17_Init+0x44>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2001;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_TIM17_Init+0x44>)
 8001640:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001644:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_TIM17_Init+0x44>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_TIM17_Init+0x44>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_TIM17_Init+0x44>)
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_TIM17_Init+0x44>)
 800165a:	f007 f961 	bl	8008920 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001664:	f000 f946 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200004fc 	.word	0x200004fc
 8001670:	40014800 	.word	0x40014800

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <MX_USART1_UART_Init+0x90>)
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <MX_USART1_UART_Init+0x94>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_USART1_UART_Init+0x90>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_USART1_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_USART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_USART1_UART_Init+0x90>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016bc:	4811      	ldr	r0, [pc, #68]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016be:	f007 fb6f 	bl	8008da0 <HAL_UART_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016c8:	f000 f914 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016d0:	f009 f84e 	bl	800a770 <HAL_UARTEx_SetTxFifoThreshold>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016da:	f000 f90b 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016e2:	f009 f883 	bl	800a7ec <HAL_UARTEx_SetRxFifoThreshold>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f000 f902 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_USART1_UART_Init+0x90>)
 80016f2:	f009 f804 	bl	800a6fe <HAL_UARTEx_DisableFifoMode>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f000 f8fa 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000053c 	.word	0x2000053c
 8001708:	40013800 	.word	0x40013800

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	2004      	movs	r0, #4
 8001722:	f7ff fe35 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2002      	movs	r0, #2
 8001728:	f7ff fe32 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fe2f 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2008      	movs	r0, #8
 8001734:	f7ff fe2c 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2123      	movs	r1, #35	; 0x23
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <MX_GPIO_Init+0xb8>)
 800173e:	f004 fb1f 	bl	8005d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 8001742:	2310      	movs	r3, #16
 8001744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_GPIO_Init+0xbc>)
 8001748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2301      	movs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	481e      	ldr	r0, [pc, #120]	; (80017cc <MX_GPIO_Init+0xc0>)
 8001754:	f004 f8c6 	bl	80058e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001758:	2323      	movs	r3, #35	; 0x23
 800175a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4815      	ldr	r0, [pc, #84]	; (80017c4 <MX_GPIO_Init+0xb8>)
 800176e:	f004 f8b9 	bl	80058e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001772:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001784:	230a      	movs	r3, #10
 8001786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f004 f8a8 	bl	80058e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001794:	2303      	movs	r3, #3
 8001796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <MX_GPIO_Init+0xc4>)
 80017a6:	f004 f89d 	bl	80058e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200a      	movs	r0, #10
 80017b0:	f003 ffdb 	bl	800576a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f003 fff2 	bl	800579e <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400
 80017c8:	10210000 	.word	0x10210000
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000c00 	.word	0x48000c00

080017d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* ISR ---------------------------------------------------------------------- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a16      	ldr	r2, [pc, #88]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d11f      	bne.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x50>
    
    if (!is_moving(&old_axe_x, &old_axe_y, &old_axe_z)) {
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80017e6:	4916      	ldr	r1, [pc, #88]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80017e8:	4816      	ldr	r0, [pc, #88]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017ea:	f000 f833 	bl	8001854 <is_moving>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_TIM_PeriodElapsedCallback+0x30>
      still_timeout_count++;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e002      	b.n	800180a <HAL_TIM_PeriodElapsedCallback+0x36>
    } else {
      still_timeout_count = 0;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
    }

    old_axe_x = accelero_val.x;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001810:	6013      	str	r3, [r2, #0]
    old_axe_y = accelero_val.y;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001818:	6013      	str	r3, [r2, #0]
    old_axe_z = accelero_val.z;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001820:	6013      	str	r3, [r2, #0]
    if (old_axe_z - accelero_val.z > 500) {

    }

  }
}
 8001822:	e005      	b.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x5c>
  else if (htim == &htim17) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x5c>
    if (old_axe_z - accelero_val.z > 500) {
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200005ec 	.word	0x200005ec
 800183c:	20000308 	.word	0x20000308
 8001840:	20000304 	.word	0x20000304
 8001844:	20000300 	.word	0x20000300
 8001848:	200002fc 	.word	0x200002fc
 800184c:	200002f0 	.word	0x200002f0
 8001850:	200004fc 	.word	0x200004fc

08001854 <is_moving>:


/* USER DEFINED ------------------------------------------------------------- */
code_status is_moving(int32_t* x, int32_t* y, int32_t* z)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint8_t is_really_moving = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]

  if (accelero_val.x - *x > 20 || accelero_val.x - *x < -20) {
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <is_moving+0x98>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b14      	cmp	r3, #20
 8001870:	dc07      	bgt.n	8001882 <is_moving+0x2e>
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <is_moving+0x98>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f113 0f14 	cmn.w	r3, #20
 8001880:	da02      	bge.n	8001888 <is_moving+0x34>
    is_really_moving = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
 8001886:	e022      	b.n	80018ce <is_moving+0x7a>
  }
  else if (accelero_val.y - *y > 20 || accelero_val.y - *y < -20) {
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <is_moving+0x98>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b14      	cmp	r3, #20
 8001894:	dc07      	bgt.n	80018a6 <is_moving+0x52>
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <is_moving+0x98>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f113 0f14 	cmn.w	r3, #20
 80018a4:	da02      	bge.n	80018ac <is_moving+0x58>
    is_really_moving = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	e010      	b.n	80018ce <is_moving+0x7a>
  }
  else if (accelero_val.z - *z > 20 || accelero_val.z - *z < -20) {
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <is_moving+0x98>)
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b14      	cmp	r3, #20
 80018b8:	dc07      	bgt.n	80018ca <is_moving+0x76>
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <is_moving+0x98>)
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f113 0f14 	cmn.w	r3, #20
 80018c8:	da01      	bge.n	80018ce <is_moving+0x7a>
    is_really_moving = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
  }

  if (is_really_moving) {
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <is_moving+0x8a>
    motion_status = OK;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <is_moving+0x9c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    return 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <is_moving+0x8c>
  }

  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200002f0 	.word	0x200002f0
 80018f0:	200002fe 	.word	0x200002fe

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_AHB2_GRP1_EnableClock>:
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001948:	68fb      	ldr	r3, [r7, #12]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80019be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80019c2:	f7ff ffc8 	bl	8001956 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_RTC_MspInit+0x30>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d109      	bne.n	80019f2 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019de:	f7ff ff90 	bl	8001902 <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2003      	movs	r0, #3
 80019e8:	f003 febf 	bl	800576a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f003 fed6 	bl	800579e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40002800 	.word	0x40002800

08001a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_TIM_Base_MspInit+0x58>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a16:	f7ff ffb7 	bl	8001988 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2019      	movs	r0, #25
 8001a20:	f003 fea3 	bl	800576a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a24:	2019      	movs	r0, #25
 8001a26:	f003 feba 	bl	800579e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a2a:	e010      	b.n	8001a4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x5c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10b      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a36:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a3a:	f7ff ffa5 	bl	8001988 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	201a      	movs	r0, #26
 8001a44:	f003 fe91 	bl	800576a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001a48:	201a      	movs	r0, #26
 8001a4a:	f003 fea8 	bl	800579e <HAL_NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40014400 	.word	0x40014400
 8001a5c:	40014800 	.word	0x40014800

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_UART_MspInit+0x68>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d11e      	bne.n	8001ac0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a86:	f7ff ff7f 	bl	8001988 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7ff ff4a 	bl	8001924 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a90:	23c0      	movs	r3, #192	; 0xc0
 8001a92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <HAL_UART_MspInit+0x6c>)
 8001aac:	f003 ff1a 	bl	80058e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2024      	movs	r0, #36	; 0x24
 8001ab6:	f003 fe58 	bl	800576a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aba:	2024      	movs	r0, #36	; 0x24
 8001abc:	f003 fe6f 	bl	800579e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	48000400 	.word	0x48000400

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f003 fcbe 	bl	80054a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <RTC_WKUP_IRQHandler+0x14>)
 8001b32:	f006 fec5 	bl	80088c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001b36:	f7ff f8b5 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200005c8 	.word	0x200005c8

08001b44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b48:	2010      	movs	r0, #16
 8001b4a:	f004 f94b 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b5a:	f006 ff37 	bl	80089cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200005ec 	.word	0x200005ec

08001b68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001b6e:	f006 ff2d 	bl	80089cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200004fc 	.word	0x200004fc

08001b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART1_IRQHandler+0x10>)
 8001b82:	f007 f9f3 	bl	8008f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000053c 	.word	0x2000053c

08001b90 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001b94:	f00b fc82 	bl	800d49c <HW_IPCC_Tx_Handler>
  return;
 8001b98:	bf00      	nop
}
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001ba0:	f00b fc44 	bl	800d42c <HW_IPCC_Rx_Handler>
  return;
 8001ba4:	bf00      	nop
}
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <LL_AHB2_GRP1_EnableClock>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_APB1_GRP1_EnableClock>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_APB1_GRP1_DisableClock>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c22:	4013      	ands	r3, r2
 8001c24:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <BSP_I2C1_Init+0x70>)
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <BSP_I2C1_Init+0x74>)
 8001c42:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BSP_I2C1_Init+0x78>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	4918      	ldr	r1, [pc, #96]	; (8001cac <BSP_I2C1_Init+0x78>)
 8001c4c:	600a      	str	r2, [r1, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d122      	bne.n	8001c98 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <BSP_I2C1_Init+0x70>)
 8001c54:	f004 fbea 	bl	800642c <HAL_I2C_GetState>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11c      	bne.n	8001c98 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001c5e:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <BSP_I2C1_Init+0x70>)
 8001c60:	f000 f8fe 	bl	8001e60 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <BSP_I2C1_Init+0x70>)
 8001c6c:	f000 f8b4 	bl	8001dd8 <MX_I2C1_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8001c76:	f06f 0307 	mvn.w	r3, #7
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	e00c      	b.n	8001c98 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <BSP_I2C1_Init+0x70>)
 8001c82:	f004 fe09 	bl	8006898 <HAL_I2CEx_ConfigAnalogFilter>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8001c8c:	f06f 0307 	mvn.w	r3, #7
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	e001      	b.n	8001c98 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000062c 	.word	0x2000062c
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	2000030c 	.word	0x2000030c

08001cb0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <BSP_I2C1_DeInit+0x48>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d014      	beq.n	8001cec <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <BSP_I2C1_DeInit+0x48>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <BSP_I2C1_DeInit+0x48>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <BSP_I2C1_DeInit+0x48>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <BSP_I2C1_DeInit+0x4c>)
 8001cd6:	f000 f8e5 	bl	8001ea4 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <BSP_I2C1_DeInit+0x4c>)
 8001cdc:	f004 f934 	bl	8005f48 <HAL_I2C_DeInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8001ce6:	f06f 0307 	mvn.w	r3, #7
 8001cea:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000030c 	.word	0x2000030c
 8001cfc:	2000062c 	.word	0x2000062c

08001d00 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af04      	add	r7, sp, #16
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	81fb      	strh	r3, [r7, #14]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	81bb      	strh	r3, [r7, #12]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001d1a:	89ba      	ldrh	r2, [r7, #12]
 8001d1c:	89f9      	ldrh	r1, [r7, #14]
 8001d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <BSP_I2C1_WriteReg+0x60>)
 8001d30:	f004 f94e 	bl	8005fd0 <HAL_I2C_Mem_Write>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00c      	beq.n	8001d54 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <BSP_I2C1_WriteReg+0x60>)
 8001d3c:	f004 fb84 	bl	8006448 <HAL_I2C_GetError>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d103      	bne.n	8001d4e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001d46:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e002      	b.n	8001d54 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001d4e:	f06f 0303 	mvn.w	r3, #3
 8001d52:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001d54:	697b      	ldr	r3, [r7, #20]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000062c 	.word	0x2000062c

08001d64 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	60ba      	str	r2, [r7, #8]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	81fb      	strh	r3, [r7, #14]
 8001d72:	460b      	mov	r3, r1
 8001d74:	81bb      	strh	r3, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001d7e:	89ba      	ldrh	r2, [r7, #12]
 8001d80:	89f9      	ldrh	r1, [r7, #14]
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2301      	movs	r3, #1
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <BSP_I2C1_ReadReg+0x60>)
 8001d94:	f004 fa30 	bl	80061f8 <HAL_I2C_Mem_Read>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001d9e:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <BSP_I2C1_ReadReg+0x60>)
 8001da0:	f004 fb52 	bl	8006448 <HAL_I2C_GetError>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d103      	bne.n	8001db2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001daa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e002      	b.n	8001db8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001db2:	f06f 0303 	mvn.w	r3, #3
 8001db6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001db8:	697b      	ldr	r3, [r7, #20]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000062c 	.word	0x2000062c

08001dc8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001dcc:	f003 fb7c 	bl	80054c8 <HAL_GetTick>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <MX_I2C1_Init+0x80>)
 8001de8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <MX_I2C1_Init+0x84>)
 8001dee:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f004 f805 	bl	8005e2a <HAL_I2C_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f004 fd33 	bl	8006898 <HAL_I2CEx_ConfigAnalogFilter>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f004 fd75 	bl	800692e <HAL_I2CEx_ConfigDigitalFilter>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40005400 	.word	0x40005400
 8001e5c:	00707cbb 	.word	0x00707cbb

08001e60 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f7ff fe9d 	bl	8001ba8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <I2C1_MspInit+0x40>)
 8001e8c:	f003 fd2a 	bl	80058e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e94:	f7ff fea1 	bl	8001bda <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001eac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001eb0:	f7ff feac 	bl	8001c0c <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001eb4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <I2C1_MspDeInit+0x24>)
 8001eba:	f003 fe83 	bl	8005bc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	48000400 	.word	0x48000400

08001ecc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <SystemInit+0xa0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <SystemInit+0xa0>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <SystemInit+0xa0>)
 8001ede:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001efe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <SystemInit+0xa4>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1c:	f023 0305 	bic.w	r3, r3, #5
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <SystemInit+0xa8>)
 8001f3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <SystemInit+0xa8>)
 8001f46:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	faf6fefb 	.word	0xfaf6fefb
 8001f74:	22041000 	.word	0x22041000

08001f78 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <SystemCoreClockUpdate+0x130>)
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d867      	bhi.n	8002070 <SystemCoreClockUpdate+0xf8>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <SystemCoreClockUpdate+0x30>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fdd 	.word	0x08001fdd
 8001fac:	08002071 	.word	0x08002071
 8001fb0:	08002071 	.word	0x08002071
 8001fb4:	08002071 	.word	0x08002071
 8001fb8:	08001fe5 	.word	0x08001fe5
 8001fbc:	08002071 	.word	0x08002071
 8001fc0:	08002071 	.word	0x08002071
 8001fc4:	08002071 	.word	0x08002071
 8001fc8:	08001fed 	.word	0x08001fed
 8001fcc:	08002071 	.word	0x08002071
 8001fd0:	08002071 	.word	0x08002071
 8001fd4:	08002071 	.word	0x08002071
 8001fd8:	08001ff5 	.word	0x08001ff5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001fdc:	4a33      	ldr	r2, [pc, #204]	; (80020ac <SystemCoreClockUpdate+0x134>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6013      	str	r3, [r2, #0]
      break;
 8001fe2:	e049      	b.n	8002078 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <SystemCoreClockUpdate+0x134>)
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <SystemCoreClockUpdate+0x138>)
 8001fe8:	601a      	str	r2, [r3, #0]
      break;
 8001fea:	e045      	b.n	8002078 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <SystemCoreClockUpdate+0x134>)
 8001fee:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <SystemCoreClockUpdate+0x13c>)
 8001ff0:	601a      	str	r2, [r3, #0]
      break;
 8001ff2:	e041      	b.n	8002078 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	3301      	adds	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d105      	bne.n	8002022 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002016:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <SystemCoreClockUpdate+0x138>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00d      	b.n	800203e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d105      	bne.n	8002034 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <SystemCoreClockUpdate+0x13c>)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e004      	b.n	800203e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fb02 f303 	mul.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0f5b      	lsrs	r3, r3, #29
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	3301      	adds	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <SystemCoreClockUpdate+0x134>)
 800206c:	6013      	str	r3, [r2, #0]
      break;
 800206e:	e003      	b.n	8002078 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <SystemCoreClockUpdate+0x134>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6013      	str	r3, [r2, #0]
      break;
 8002076:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <SystemCoreClockUpdate+0x140>)
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <SystemCoreClockUpdate+0x134>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <SystemCoreClockUpdate+0x134>)
 8002098:	6013      	str	r3, [r2, #0]

}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800dc90 	.word	0x0800dc90
 80020ac:	20000034 	.word	0x20000034
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	01e84800 	.word	0x01e84800
 80020b8:	0800dc30 	.word	0x0800dc30

080020bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80020bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c0:	3304      	adds	r3, #4

080020c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80020c6:	d3f9      	bcc.n	80020bc <CopyDataInit>
  bx lr
 80020c8:	4770      	bx	lr

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80020ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80020cc:	3004      	adds	r0, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80020ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>
  bx lr
 80020d2:	4770      	bx	lr

080020d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80020d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <LoopForever+0x8>)
 80020da:	490d      	ldr	r1, [pc, #52]	; (8002110 <LoopForever+0xc>)
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <LoopForever+0x10>)
 80020de:	2300      	movs	r3, #0
 80020e0:	f7ff ffef 	bl	80020c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopForever+0x14>)
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopForever+0x18>)
 80020e8:	2300      	movs	r3, #0
 80020ea:	f7ff fff0 	bl	80020ce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <LoopForever+0x1c>)
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <LoopForever+0x20>)
 80020f2:	2300      	movs	r3, #0
 80020f4:	f7ff ffeb 	bl	80020ce <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020f8:	f7ff fee8 	bl	8001ecc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020fc:	f00b fd1a 	bl	800db34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002100:	f7ff f960 	bl	80013c4 <main>

08002104 <LoopForever>:

LoopForever:
  b LoopForever
 8002104:	e7fe      	b.n	8002104 <LoopForever>
 8002106:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002108:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800210c:	20000004 	.word	0x20000004
 8002110:	2000012c 	.word	0x2000012c
 8002114:	0800dd20 	.word	0x0800dd20
  INIT_BSS _sbss, _ebss
 8002118:	200002c8 	.word	0x200002c8
 800211c:	2000068c 	.word	0x2000068c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002120:	200301c4 	.word	0x200301c4
 8002124:	20030a44 	.word	0x20030a44

08002128 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_IRQHandler>
	...

0800212c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e04d      	b.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	7b1a      	ldrb	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002184:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800218a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e020      	b.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4798      	blx	r3
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e016      	b.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d112      	bne.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80021c8:	2301      	movs	r3, #1
 80021ca:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	461a      	mov	r2, r3
 80021d0:	2123      	movs	r1, #35	; 0x23
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fb52 	bl	800287c <LSM303AGR_ACC_Write_Reg>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e000      	b.n	80021e6 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	0800308d 	.word	0x0800308d
 80021f4:	080030ef 	.word	0x080030ef

080021f8 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	331c      	adds	r3, #28
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f948 	bl	800349c <lsm303agr_xl_block_data_update_set>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e02c      	b.n	8002272 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	331c      	adds	r3, #28
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fa77 	bl	8003712 <lsm303agr_xl_fifo_mode_set>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e020      	b.n	8002272 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2205      	movs	r2, #5
 8002234:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	331c      	adds	r3, #28
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f84c 	bl	80032dc <lsm303agr_xl_data_rate_set>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e010      	b.n	8002272 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	331c      	adds	r3, #28
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f001 f8c2 	bl	80033e0 <lsm303agr_xl_full_scale_set>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e004      	b.n	8002272 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f87c 	bl	8002380 <LSM303AGR_ACC_Disable>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e008      	b.n	80022a6 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	331c      	adds	r3, #28
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f9df 	bl	8003682 <lsm303agr_xl_device_id_get>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	e000      	b.n	80022d2 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2210      	movs	r2, #16
 8002308:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <LSM303AGR_ACC_GetCapabilities+0x58>)
 800231c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	43c80000 	.word	0x43c80000

08002338 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e014      	b.n	8002378 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f103 021c 	add.w	r2, r3, #28
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f000 ffbd 	bl	80032dc <lsm303agr_xl_data_rate_set>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	e004      	b.n	8002378 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e01f      	b.n	80023d6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 021c 	add.w	r2, r3, #28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	332a      	adds	r3, #42	; 0x2a
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 ffc0 	bl	8003328 <lsm303agr_xl_data_rate_get>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e010      	b.n	80023d6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	331c      	adds	r3, #28
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 ff8e 	bl	80032dc <lsm303agr_xl_data_rate_set>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e004      	b.n	80023d6 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	331c      	adds	r3, #28
 80023f0:	f107 020b 	add.w	r2, r7, #11
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 ff3c 	bl	8003274 <lsm303agr_xl_operating_mode_get>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e02e      	b.n	8002466 <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d00d      	beq.n	800242a <LSM303AGR_ACC_GetSensitivity+0x4c>
 800240e:	2b02      	cmp	r3, #2
 8002410:	d015      	beq.n	800243e <LSM303AGR_ACC_GetSensitivity+0x60>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fca9 	bl	8002d70 <LSM303AGR_ACC_GetSensitivityHR>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01a      	beq.n	800245a <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	e01d      	b.n	8002466 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fce5 	bl	8002dfc <LSM303AGR_ACC_GetSensitivityNM>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e013      	b.n	8002466 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fd21 	bl	8002e88 <LSM303AGR_ACC_GetSensitivityLP>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e009      	b.n	8002466 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	60fb      	str	r3, [r7, #12]
      break;
 8002458:	e004      	b.n	8002464 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800245a:	bf00      	nop
 800245c:	e002      	b.n	8002464 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800245e:	bf00      	nop
 8002460:	e000      	b.n	8002464 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002462:	bf00      	nop
  }

  return ret;
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	331c      	adds	r3, #28
 8002482:	f107 020b 	add.w	r2, r7, #11
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fef3 	bl	8003274 <lsm303agr_xl_operating_mode_get>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	e09f      	b.n	80025da <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	331c      	adds	r3, #28
 800249e:	f107 020a 	add.w	r2, r7, #10
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 ff3f 	bl	8003328 <lsm303agr_xl_data_rate_get>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	e091      	b.n	80025da <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d148      	bne.n	800254e <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 80024bc:	7abb      	ldrb	r3, [r7, #10]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d840      	bhi.n	8002544 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	080024fb 	.word	0x080024fb
 80024d0:	08002505 	.word	0x08002505
 80024d4:	0800250d 	.word	0x0800250d
 80024d8:	08002515 	.word	0x08002515
 80024dc:	0800251d 	.word	0x0800251d
 80024e0:	08002525 	.word	0x08002525
 80024e4:	0800252d 	.word	0x0800252d
 80024e8:	08002535 	.word	0x08002535
 80024ec:	0800253d 	.word	0x0800253d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
        break;
 80024f8:	e06e      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002500:	601a      	str	r2, [r3, #0]
        break;
 8002502:	e069      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002508:	601a      	str	r2, [r3, #0]
        break;
 800250a:	e065      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002510:	601a      	str	r2, [r3, #0]
        break;
 8002512:	e061      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4a35      	ldr	r2, [pc, #212]	; (80025ec <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002518:	601a      	str	r2, [r3, #0]
        break;
 800251a:	e05d      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002520:	601a      	str	r2, [r3, #0]
        break;
 8002522:	e059      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002528:	601a      	str	r2, [r3, #0]
        break;
 800252a:	e055      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4a32      	ldr	r2, [pc, #200]	; (80025f8 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002530:	601a      	str	r2, [r3, #0]
        break;
 8002532:	e051      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4a31      	ldr	r2, [pc, #196]	; (80025fc <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002538:	601a      	str	r2, [r3, #0]
        break;
 800253a:	e04d      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002540:	601a      	str	r2, [r3, #0]
        break;
 8002542:	e049      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	60fb      	str	r3, [r7, #12]
        break;
 800254a:	bf00      	nop
 800254c:	e044      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800254e:	7abb      	ldrb	r3, [r7, #10]
 8002550:	2b09      	cmp	r3, #9
 8002552:	d83d      	bhi.n	80025d0 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	08002585 	.word	0x08002585
 8002560:	0800258f 	.word	0x0800258f
 8002564:	08002599 	.word	0x08002599
 8002568:	080025a1 	.word	0x080025a1
 800256c:	080025a9 	.word	0x080025a9
 8002570:	080025b1 	.word	0x080025b1
 8002574:	080025b9 	.word	0x080025b9
 8002578:	080025c1 	.word	0x080025c1
 800257c:	080025d1 	.word	0x080025d1
 8002580:	080025c9 	.word	0x080025c9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
        break;
 800258c:	e024      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002594:	601a      	str	r2, [r3, #0]
        break;
 8002596:	e01f      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800259c:	601a      	str	r2, [r3, #0]
        break;
 800259e:	e01b      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80025a4:	601a      	str	r2, [r3, #0]
        break;
 80025a6:	e017      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80025ac:	601a      	str	r2, [r3, #0]
        break;
 80025ae:	e013      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80025b4:	601a      	str	r2, [r3, #0]
        break;
 80025b6:	e00f      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80025bc:	601a      	str	r2, [r3, #0]
        break;
 80025be:	e00b      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80025c4:	601a      	str	r2, [r3, #0]
        break;
 80025c6:	e007      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 80025cc:	601a      	str	r2, [r3, #0]
        break;
 80025ce:	e003      	b.n	80025d8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	60fb      	str	r3, [r7, #12]
        break;
 80025d6:	bf00      	nop
    }
  }

  return ret;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	41200000 	.word	0x41200000
 80025e8:	41c80000 	.word	0x41c80000
 80025ec:	42480000 	.word	0x42480000
 80025f0:	42c80000 	.word	0x42c80000
 80025f4:	43480000 	.word	0x43480000
 80025f8:	43c80000 	.word	0x43c80000
 80025fc:	44ca8000 	.word	0x44ca8000
 8002600:	45a80000 	.word	0x45a80000
 8002604:	44a80000 	.word	0x44a80000

08002608 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800261a:	2b01      	cmp	r3, #1
 800261c:	d106      	bne.n	800262c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800261e:	ed97 0a00 	vldr	s0, [r7]
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fc76 	bl	8002f14 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002628:	4603      	mov	r3, r0
 800262a:	e005      	b.n	8002638 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800262c:	ed97 0a00 	vldr	s0, [r7]
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fcd1 	bl	8002fd8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002636:	4603      	mov	r3, r0
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	331c      	adds	r3, #28
 8002652:	f107 020b 	add.w	r2, r7, #11
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fee7 	bl	800342c <lsm303agr_xl_full_scale_get>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e023      	b.n	80026b2 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d81b      	bhi.n	80026a8 <LSM303AGR_ACC_GetFullScale+0x68>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002689 	.word	0x08002689
 800267c:	08002691 	.word	0x08002691
 8002680:	08002699 	.word	0x08002699
 8002684:	080026a1 	.word	0x080026a1
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
      break;
 800268e:	e00f      	b.n	80026b0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2204      	movs	r2, #4
 8002694:	601a      	str	r2, [r3, #0]
      break;
 8002696:	e00b      	b.n	80026b0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2208      	movs	r2, #8
 800269c:	601a      	str	r2, [r3, #0]
      break;
 800269e:	e007      	b.n	80026b0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2210      	movs	r2, #16
 80026a4:	601a      	str	r2, [r3, #0]
      break;
 80026a6:	e003      	b.n	80026b0 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	60fb      	str	r3, [r7, #12]
      break;
 80026ae:	bf00      	nop
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	dd0b      	ble.n	80026e4 <LSM303AGR_ACC_SetFullScale+0x28>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	dd06      	ble.n	80026e0 <LSM303AGR_ACC_SetFullScale+0x24>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	dc01      	bgt.n	80026dc <LSM303AGR_ACC_SetFullScale+0x20>
 80026d8:	2302      	movs	r3, #2
 80026da:	e004      	b.n	80026e6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80026dc:	2303      	movs	r3, #3
 80026de:	e002      	b.n	80026e6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80026e4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 80026e6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	331c      	adds	r3, #28
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fe75 	bl	80033e0 <lsm303agr_xl_full_scale_set>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e000      	b.n	8002704 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	331c      	adds	r3, #28
 8002722:	f107 020f 	add.w	r2, r7, #15
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fda3 	bl	8003274 <lsm303agr_xl_operating_mode_get>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e047      	b.n	80027ca <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d006      	beq.n	800274e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002740:	2b02      	cmp	r3, #2
 8002742:	d007      	beq.n	8002754 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002748:	2310      	movs	r3, #16
 800274a:	83fb      	strh	r3, [r7, #30]
      break;
 800274c:	e00a      	b.n	8002764 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	83fb      	strh	r3, [r7, #30]
      break;
 8002752:	e007      	b.n	8002764 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002758:	83fb      	strh	r3, [r7, #30]
      break;
 800275a:	e003      	b.n	8002764 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	61bb      	str	r3, [r7, #24]
      break;
 8002762:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d101      	bne.n	8002770 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	e02c      	b.n	80027ca <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	331c      	adds	r3, #28
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 feb4 	bl	80034e8 <lsm303agr_acceleration_raw_get>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e01e      	b.n	80027ca <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 800278c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002790:	461a      	mov	r2, r3
 8002792:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002796:	fb92 f3f3 	sdiv	r3, r2, r3
 800279a:	b21a      	sxth	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80027a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80027b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027be:	fb92 f3f3 	sdiv	r3, r2, r3
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	809a      	strh	r2, [r3, #4]

  return ret;
 80027c8:	69bb      	ldr	r3, [r7, #24]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff8f 	bl	800270c <LSM303AGR_ACC_GetAxesRaw>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e03c      	b.n	8002874 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fdec 	bl	80023de <LSM303AGR_ACC_GetSensitivity>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e030      	b.n	8002874 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800282a:	ee17 2a90 	vmov	r2, s15
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284a:	ee17 2a90 	vmov	r2, s15
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002852:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286a:	ee17 2a90 	vmov	r2, s15
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
 8002888:	4613      	mov	r3, r2
 800288a:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 001c 	add.w	r0, r3, #28
 8002892:	1cba      	adds	r2, r7, #2
 8002894:	78f9      	ldrb	r1, [r7, #3]
 8002896:	2301      	movs	r3, #1
 8002898:	f000 fcd4 	bl	8003244 <lsm303agr_write_reg>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e000      	b.n	80028aa <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e04b      	b.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7b1a      	ldrb	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800290c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002912:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d103      	bne.n	800292a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e01e      	b.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e014      	b.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	331c      	adds	r3, #28
 8002954:	2101      	movs	r1, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f000 ff01 	bl	800375e <lsm303agr_mag_i2c_interface_set>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e000      	b.n	800296a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	08003151 	.word	0x08003151
 8002978:	080031b3 	.word	0x080031b3

0800297c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	331c      	adds	r3, #28
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fe42 	bl	8003614 <lsm303agr_mag_block_data_update_set>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e028      	b.n	80029ee <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	331c      	adds	r3, #28
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fdb1 	bl	800350a <lsm303agr_mag_operating_mode_set>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e01c      	b.n	80029ee <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	331c      	adds	r3, #28
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fdcb 	bl	8003556 <lsm303agr_mag_data_rate_set>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	e010      	b.n	80029ee <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	331c      	adds	r3, #28
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fe77 	bl	80036c6 <lsm303agr_mag_self_test_set>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e004      	b.n	80029ee <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f874 	bl	8002aec <LSM303AGR_MAG_Disable>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e004      	b.n	8002a1a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	331c      	adds	r3, #28
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fe36 	bl	80036a4 <lsm303agr_mag_device_id_get>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e000      	b.n	8002a46 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2232      	movs	r2, #50	; 0x32
 8002a82:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002a98:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	42c80000 	.word	0x42c80000

08002aac <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e010      	b.n	8002ae4 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	331c      	adds	r3, #28
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fd1e 	bl	800350a <lsm303agr_mag_operating_mode_set>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e004      	b.n	8002ae4 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e010      	b.n	8002b24 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	331c      	adds	r3, #28
 8002b06:	2102      	movs	r1, #2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fcfe 	bl	800350a <lsm303agr_mag_operating_mode_set>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	e004      	b.n	8002b24 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002b3c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	331c      	adds	r3, #28
 8002b5e:	f107 020b 	add.w	r2, r7, #11
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fd1d 	bl	80035a4 <lsm303agr_mag_data_rate_get>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
 8002b74:	e023      	b.n	8002bbe <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d81b      	bhi.n	8002bb4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002b9d 	.word	0x08002b9d
 8002b8c:	08002ba5 	.word	0x08002ba5
 8002b90:	08002bad 	.word	0x08002bad
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002b98:	601a      	str	r2, [r3, #0]
      break;
 8002b9a:	e00f      	b.n	8002bbc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002ba0:	601a      	str	r2, [r3, #0]
      break;
 8002ba2:	e00b      	b.n	8002bbc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002ba8:	601a      	str	r2, [r3, #0]
      break;
 8002baa:	e007      	b.n	8002bbc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002bb0:	601a      	str	r2, [r3, #0]
      break;
 8002bb2:	e003      	b.n	8002bbc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb8:	60fb      	str	r3, [r7, #12]
      break;
 8002bba:	bf00      	nop
  }

  return ret;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	41200000 	.word	0x41200000
 8002bcc:	41a00000 	.word	0x41a00000
 8002bd0:	42480000 	.word	0x42480000
 8002bd4:	42c80000 	.word	0x42c80000

08002bd8 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002be4:	edd7 7a00 	vldr	s15, [r7]
 8002be8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d801      	bhi.n	8002bfa <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e016      	b.n	8002c28 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002bfa:	edd7 7a00 	vldr	s15, [r7]
 8002bfe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d801      	bhi.n	8002c10 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00b      	b.n	8002c28 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002c10:	edd7 7a00 	vldr	s15, [r7]
 8002c14:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c50 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	d801      	bhi.n	8002c26 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e000      	b.n	8002c28 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002c26:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002c28:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	331c      	adds	r3, #28
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fc8f 	bl	8003556 <lsm303agr_mag_data_rate_set>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e000      	b.n	8002c46 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	42480000 	.word	0x42480000

08002c54 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2232      	movs	r2, #50	; 0x32
 8002c62:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	331c      	adds	r3, #28
 8002c98:	f107 0208 	add.w	r2, r7, #8
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fcde 	bl	8003660 <lsm303agr_magnetic_raw_get>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e00c      	b.n	8002cca <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002cb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002cb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002cc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	331c      	adds	r3, #28
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fcba 	bl	8003660 <lsm303agr_magnetic_raw_get>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e036      	b.n	8002d66 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ff14 	bl	8002b2c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1c:	ee17 2a90 	vmov	r2, s15
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d3c:	ee17 2a90 	vmov	r2, s15
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d5c:	ee17 2a90 	vmov	r2, s15
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	331c      	adds	r3, #28
 8002d82:	f107 020b 	add.w	r2, r7, #11
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb4f 	bl	800342c <lsm303agr_xl_full_scale_get>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e023      	b.n	8002de2 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d81b      	bhi.n	8002dd8 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc1 	.word	0x08002dc1
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002dd1 	.word	0x08002dd1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8002dbc:	601a      	str	r2, [r3, #0]
      break;
 8002dbe:	e00f      	b.n	8002de0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8002dc4:	601a      	str	r2, [r3, #0]
      break;
 8002dc6:	e00b      	b.n	8002de0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8002dcc:	601a      	str	r2, [r3, #0]
      break;
 8002dce:	e007      	b.n	8002de0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8002dd4:	601a      	str	r2, [r3, #0]
      break;
 8002dd6:	e003      	b.n	8002de0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	60fb      	str	r3, [r7, #12]
      break;
 8002dde:	bf00      	nop
  }

  return ret;
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	3f7ae148 	.word	0x3f7ae148
 8002df0:	3ff9999a 	.word	0x3ff9999a
 8002df4:	4079999a 	.word	0x4079999a
 8002df8:	413b851f 	.word	0x413b851f

08002dfc <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	331c      	adds	r3, #28
 8002e0e:	f107 020b 	add.w	r2, r7, #11
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fb09 	bl	800342c <lsm303agr_xl_full_scale_get>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e023      	b.n	8002e6e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d81b      	bhi.n	8002e64 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e55 	.word	0x08002e55
 8002e40:	08002e5d 	.word	0x08002e5d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8002e48:	601a      	str	r2, [r3, #0]
      break;
 8002e4a:	e00f      	b.n	8002e6c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8002e50:	601a      	str	r2, [r3, #0]
      break;
 8002e52:	e00b      	b.n	8002e6c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8002e58:	601a      	str	r2, [r3, #0]
      break;
 8002e5a:	e007      	b.n	8002e6c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8002e60:	601a      	str	r2, [r3, #0]
      break;
 8002e62:	e003      	b.n	8002e6c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	60fb      	str	r3, [r7, #12]
      break;
 8002e6a:	bf00      	nop
  }

  return ret;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	4079999a 	.word	0x4079999a
 8002e7c:	40fa3d71 	.word	0x40fa3d71
 8002e80:	417a147b 	.word	0x417a147b
 8002e84:	423b999a 	.word	0x423b999a

08002e88 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	331c      	adds	r3, #28
 8002e9a:	f107 020b 	add.w	r2, r7, #11
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fac3 	bl	800342c <lsm303agr_xl_full_scale_get>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e023      	b.n	8002efa <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d81b      	bhi.n	8002ef0 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ee9 	.word	0x08002ee9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8002ed4:	601a      	str	r2, [r3, #0]
      break;
 8002ed6:	e00f      	b.n	8002ef8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8002edc:	601a      	str	r2, [r3, #0]
      break;
 8002ede:	e00b      	b.n	8002ef8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8002ee4:	601a      	str	r2, [r3, #0]
      break;
 8002ee6:	e007      	b.n	8002ef8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8002eec:	601a      	str	r2, [r3, #0]
      break;
 8002eee:	e003      	b.n	8002ef8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	60fb      	str	r3, [r7, #12]
      break;
 8002ef6:	bf00      	nop
  }

  return ret;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	417a147b 	.word	0x417a147b
 8002f08:	41fa147b 	.word	0x41fa147b
 8002f0c:	427a147b 	.word	0x427a147b
 8002f10:	433b947b 	.word	0x433b947b

08002f14 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002f20:	edd7 7a00 	vldr	s15, [r7]
 8002f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	d801      	bhi.n	8002f36 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e037      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002f36:	edd7 7a00 	vldr	s15, [r7]
 8002f3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d801      	bhi.n	8002f4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e02c      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002f4c:	edd7 7a00 	vldr	s15, [r7]
 8002f50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	d801      	bhi.n	8002f62 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e021      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002f62:	edd7 7a00 	vldr	s15, [r7]
 8002f66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002fcc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8002f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d801      	bhi.n	8002f78 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e016      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002f78:	edd7 7a00 	vldr	s15, [r7]
 8002f7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002fd0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	d801      	bhi.n	8002f8e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	e00b      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002f8e:	edd7 7a00 	vldr	s15, [r7]
 8002f92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8002f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	d801      	bhi.n	8002fa4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002fa0:	2306      	movs	r3, #6
 8002fa2:	e000      	b.n	8002fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002fa4:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8002fa6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	331c      	adds	r3, #28
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f993 	bl	80032dc <lsm303agr_xl_data_rate_set>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e000      	b.n	8002fc4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	42480000 	.word	0x42480000
 8002fd0:	42c80000 	.word	0x42c80000
 8002fd4:	43480000 	.word	0x43480000

08002fd8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002fe4:	edd7 7a00 	vldr	s15, [r7]
 8002fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d801      	bhi.n	8002ffa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e037      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002ffa:	edd7 7a00 	vldr	s15, [r7]
 8002ffe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d801      	bhi.n	8003010 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800300c:	2302      	movs	r3, #2
 800300e:	e02c      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003010:	edd7 7a00 	vldr	s15, [r7]
 8003014:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	d801      	bhi.n	8003026 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003022:	2303      	movs	r3, #3
 8003024:	e021      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003026:	edd7 7a00 	vldr	s15, [r7]
 800302a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003080 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800302e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d801      	bhi.n	800303c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003038:	2304      	movs	r3, #4
 800303a:	e016      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800303c:	edd7 7a00 	vldr	s15, [r7]
 8003040:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003084 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	d801      	bhi.n	8003052 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800304e:	2305      	movs	r3, #5
 8003050:	e00b      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003052:	edd7 7a00 	vldr	s15, [r7]
 8003056:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003088 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800305a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	d801      	bhi.n	8003068 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003064:	2306      	movs	r3, #6
 8003066:	e000      	b.n	800306a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003068:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	42480000 	.word	0x42480000
 8003084:	42c80000 	.word	0x42c80000
 8003088:	43480000 	.word	0x43480000

0800308c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	72fb      	strb	r3, [r7, #11]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10e      	bne.n	80030ca <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	695c      	ldr	r4, [r3, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	b298      	uxth	r0, r3
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	b299      	uxth	r1, r3
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	47a0      	blx	r4
 80030c6:	4603      	mov	r3, r0
 80030c8:	e00d      	b.n	80030e6 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	695c      	ldr	r4, [r3, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	7b1b      	ldrb	r3, [r3, #12]
 80030d2:	b298      	uxth	r0, r3
 80030d4:	7afb      	ldrb	r3, [r7, #11]
 80030d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	b299      	uxth	r1, r3
 80030de:	893b      	ldrh	r3, [r7, #8]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	47a0      	blx	r4
 80030e4:	4603      	mov	r3, r0
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}

080030ee <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030ee:	b590      	push	{r4, r7, lr}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	461a      	mov	r2, r3
 80030fa:	460b      	mov	r3, r1
 80030fc:	72fb      	strb	r3, [r7, #11]
 80030fe:	4613      	mov	r3, r2
 8003100:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10e      	bne.n	800312c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	691c      	ldr	r4, [r3, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	7b1b      	ldrb	r3, [r3, #12]
 8003116:	b298      	uxth	r0, r3
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800311e:	b2db      	uxtb	r3, r3
 8003120:	b299      	uxth	r1, r3
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	47a0      	blx	r4
 8003128:	4603      	mov	r3, r0
 800312a:	e00d      	b.n	8003148 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	691c      	ldr	r4, [r3, #16]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	7b1b      	ldrb	r3, [r3, #12]
 8003134:	b298      	uxth	r0, r3
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313c:	b2db      	uxtb	r3, r3
 800313e:	b299      	uxth	r1, r3
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	47a0      	blx	r4
 8003146:	4603      	mov	r3, r0
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd90      	pop	{r4, r7, pc}

08003150 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	460b      	mov	r3, r1
 800315e:	72fb      	strb	r3, [r7, #11]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	695c      	ldr	r4, [r3, #20]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	7b1b      	ldrb	r3, [r3, #12]
 8003178:	b298      	uxth	r0, r3
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003180:	b2db      	uxtb	r3, r3
 8003182:	b299      	uxth	r1, r3
 8003184:	893b      	ldrh	r3, [r7, #8]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	47a0      	blx	r4
 800318a:	4603      	mov	r3, r0
 800318c:	e00d      	b.n	80031aa <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	695c      	ldr	r4, [r3, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	7b1b      	ldrb	r3, [r3, #12]
 8003196:	b298      	uxth	r0, r3
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	47a0      	blx	r4
 80031a8:	4603      	mov	r3, r0
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}

080031b2 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031b2:	b590      	push	{r4, r7, lr}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	461a      	mov	r2, r3
 80031be:	460b      	mov	r3, r1
 80031c0:	72fb      	strb	r3, [r7, #11]
 80031c2:	4613      	mov	r3, r2
 80031c4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	691c      	ldr	r4, [r3, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	7b1b      	ldrb	r3, [r3, #12]
 80031da:	b298      	uxth	r0, r3
 80031dc:	7afb      	ldrb	r3, [r7, #11]
 80031de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	b299      	uxth	r1, r3
 80031e6:	893b      	ldrh	r3, [r7, #8]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	47a0      	blx	r4
 80031ec:	4603      	mov	r3, r0
 80031ee:	e00d      	b.n	800320c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	691c      	ldr	r4, [r3, #16]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
 80031f8:	b298      	uxth	r0, r3
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b299      	uxth	r1, r3
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	47a0      	blx	r4
 800320a:	4603      	mov	r3, r0
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}

08003214 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	72fb      	strb	r3, [r7, #11]
 8003224:	4613      	mov	r3, r2
 8003226:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685c      	ldr	r4, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6898      	ldr	r0, [r3, #8]
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	7af9      	ldrb	r1, [r7, #11]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	47a0      	blx	r4
 8003238:	6178      	str	r0, [r7, #20]
  return ret;
 800323a:	697b      	ldr	r3, [r7, #20]
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}

08003244 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	72fb      	strb	r3, [r7, #11]
 8003254:	4613      	mov	r3, r2
 8003256:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681c      	ldr	r4, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6898      	ldr	r0, [r3, #8]
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	7af9      	ldrb	r1, [r7, #11]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	47a0      	blx	r4
 8003268:	6178      	str	r0, [r7, #20]
  return ret;
 800326a:	697b      	ldr	r3, [r7, #20]
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}

08003274 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800327e:	f107 020c 	add.w	r2, r7, #12
 8003282:	2301      	movs	r3, #1
 8003284:	2120      	movs	r1, #32
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffc4 	bl	8003214 <lsm303agr_read_reg>
 800328c:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003294:	f107 0210 	add.w	r2, r7, #16
 8003298:	2301      	movs	r3, #1
 800329a:	2123      	movs	r1, #35	; 0x23
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ffb9 	bl	8003214 <lsm303agr_read_reg>
 80032a2:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 80032a4:	7b3b      	ldrb	r3, [r7, #12]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e00c      	b.n	80032d2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80032b8:	7c3b      	ldrb	r3, [r7, #16]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e002      	b.n	80032d2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80032e8:	f107 0208 	add.w	r2, r7, #8
 80032ec:	2301      	movs	r3, #1
 80032ee:	2120      	movs	r1, #32
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff8f 	bl	8003214 <lsm303agr_read_reg>
 80032f6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	7a3b      	ldrb	r3, [r7, #8]
 8003308:	f362 1307 	bfi	r3, r2, #4, #4
 800330c:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800330e:	f107 0208 	add.w	r2, r7, #8
 8003312:	2301      	movs	r3, #1
 8003314:	2120      	movs	r1, #32
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff94 	bl	8003244 <lsm303agr_write_reg>
 800331c:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003332:	f107 0208 	add.w	r2, r7, #8
 8003336:	2301      	movs	r3, #1
 8003338:	2120      	movs	r1, #32
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff6a 	bl	8003214 <lsm303agr_read_reg>
 8003340:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 8003342:	7a3b      	ldrb	r3, [r7, #8]
 8003344:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b09      	cmp	r3, #9
 800334c:	d83e      	bhi.n	80033cc <lsm303agr_xl_data_rate_get+0xa4>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <lsm303agr_xl_data_rate_get+0x2c>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	0800337d 	.word	0x0800337d
 8003358:	08003385 	.word	0x08003385
 800335c:	0800338d 	.word	0x0800338d
 8003360:	08003395 	.word	0x08003395
 8003364:	0800339d 	.word	0x0800339d
 8003368:	080033a5 	.word	0x080033a5
 800336c:	080033ad 	.word	0x080033ad
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033bd 	.word	0x080033bd
 8003378:	080033c5 	.word	0x080033c5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	e027      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
      break;
 800338a:	e023      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
      break;
 8003392:	e01f      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
      break;
 800339a:	e01b      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
      break;
 80033a2:	e017      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2205      	movs	r2, #5
 80033a8:	701a      	strb	r2, [r3, #0]
      break;
 80033aa:	e013      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2206      	movs	r2, #6
 80033b0:	701a      	strb	r2, [r3, #0]
      break;
 80033b2:	e00f      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2207      	movs	r2, #7
 80033b8:	701a      	strb	r2, [r3, #0]
      break;
 80033ba:	e00b      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2208      	movs	r2, #8
 80033c0:	701a      	strb	r2, [r3, #0]
      break;
 80033c2:	e007      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2209      	movs	r2, #9
 80033c8:	701a      	strb	r2, [r3, #0]
      break;
 80033ca:	e003      	b.n	80033d4 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	bf00      	nop
  }

  return ret;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop

080033e0 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80033ec:	f107 0208 	add.w	r2, r7, #8
 80033f0:	2301      	movs	r3, #1
 80033f2:	2123      	movs	r1, #35	; 0x23
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff0d 	bl	8003214 <lsm303agr_read_reg>
 80033fa:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	7a3b      	ldrb	r3, [r7, #8]
 800340c:	f362 1305 	bfi	r3, r2, #4, #2
 8003410:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003412:	f107 0208 	add.w	r2, r7, #8
 8003416:	2301      	movs	r3, #1
 8003418:	2123      	movs	r1, #35	; 0x23
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff12 	bl	8003244 <lsm303agr_write_reg>
 8003420:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003436:	f107 0208 	add.w	r2, r7, #8
 800343a:	2301      	movs	r3, #1
 800343c:	2123      	movs	r1, #35	; 0x23
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fee8 	bl	8003214 <lsm303agr_read_reg>
 8003444:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8003446:	7a3b      	ldrb	r3, [r7, #8]
 8003448:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b03      	cmp	r3, #3
 8003450:	d81a      	bhi.n	8003488 <lsm303agr_xl_full_scale_get+0x5c>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <lsm303agr_xl_full_scale_get+0x2c>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	08003469 	.word	0x08003469
 800345c:	08003471 	.word	0x08003471
 8003460:	08003479 	.word	0x08003479
 8003464:	08003481 	.word	0x08003481
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e00f      	b.n	8003490 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      break;
 8003476:	e00b      	b.n	8003490 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
      break;
 800347e:	e007      	b.n	8003490 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2203      	movs	r2, #3
 8003484:	701a      	strb	r2, [r3, #0]
      break;
 8003486:	e003      	b.n	8003490 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	bf00      	nop
  }
  return ret;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop

0800349c <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	2301      	movs	r3, #1
 80034ae:	2123      	movs	r1, #35	; 0x23
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff feaf 	bl	8003214 <lsm303agr_read_reg>
 80034b6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	7a3b      	ldrb	r3, [r7, #8]
 80034c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80034cc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80034ce:	f107 0208 	add.w	r2, r7, #8
 80034d2:	2301      	movs	r3, #1
 80034d4:	2123      	movs	r1, #35	; 0x23
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff feb4 	bl	8003244 <lsm303agr_write_reg>
 80034dc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80034f2:	2306      	movs	r3, #6
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	2128      	movs	r1, #40	; 0x28
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fe8b 	bl	8003214 <lsm303agr_read_reg>
 80034fe:	60f8      	str	r0, [r7, #12]
  return ret;
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003516:	f107 0208 	add.w	r2, r7, #8
 800351a:	2301      	movs	r3, #1
 800351c:	2160      	movs	r1, #96	; 0x60
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe78 	bl	8003214 <lsm303agr_read_reg>
 8003524:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	7a3b      	ldrb	r3, [r7, #8]
 8003536:	f362 0301 	bfi	r3, r2, #0, #2
 800353a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800353c:	f107 0208 	add.w	r2, r7, #8
 8003540:	2301      	movs	r3, #1
 8003542:	2160      	movs	r1, #96	; 0x60
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff fe7d 	bl	8003244 <lsm303agr_write_reg>
 800354a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003562:	f107 0208 	add.w	r2, r7, #8
 8003566:	2301      	movs	r3, #1
 8003568:	2160      	movs	r1, #96	; 0x60
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe52 	bl	8003214 <lsm303agr_read_reg>
 8003570:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	b2da      	uxtb	r2, r3
 8003580:	7a3b      	ldrb	r3, [r7, #8]
 8003582:	f362 0383 	bfi	r3, r2, #2, #2
 8003586:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003588:	f107 0208 	add.w	r2, r7, #8
 800358c:	2301      	movs	r3, #1
 800358e:	2160      	movs	r1, #96	; 0x60
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fe57 	bl	8003244 <lsm303agr_write_reg>
 8003596:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003598:	68fb      	ldr	r3, [r7, #12]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80035ae:	f107 0208 	add.w	r2, r7, #8
 80035b2:	2301      	movs	r3, #1
 80035b4:	2160      	movs	r1, #96	; 0x60
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fe2c 	bl	8003214 <lsm303agr_read_reg>
 80035bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 80035be:	7a3b      	ldrb	r3, [r7, #8]
 80035c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d81a      	bhi.n	8003600 <lsm303agr_mag_data_rate_get+0x5c>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <lsm303agr_mag_data_rate_get+0x2c>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035e9 	.word	0x080035e9
 80035d8:	080035f1 	.word	0x080035f1
 80035dc:	080035f9 	.word	0x080035f9
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e00f      	b.n	8003608 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
      break;
 80035ee:	e00b      	b.n	8003608 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
      break;
 80035f6:	e007      	b.n	8003608 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2203      	movs	r2, #3
 80035fc:	701a      	strb	r2, [r3, #0]
      break;
 80035fe:	e003      	b.n	8003608 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
      break;
 8003606:	bf00      	nop
  }
  return ret;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop

08003614 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003620:	f107 0208 	add.w	r2, r7, #8
 8003624:	2301      	movs	r3, #1
 8003626:	2162      	movs	r1, #98	; 0x62
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fdf3 	bl	8003214 <lsm303agr_read_reg>
 800362e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	b2da      	uxtb	r2, r3
 800363e:	7a3b      	ldrb	r3, [r7, #8]
 8003640:	f362 1304 	bfi	r3, r2, #4, #1
 8003644:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003646:	f107 0208 	add.w	r2, r7, #8
 800364a:	2301      	movs	r3, #1
 800364c:	2162      	movs	r1, #98	; 0x62
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fdf8 	bl	8003244 <lsm303agr_write_reg>
 8003654:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800366a:	2306      	movs	r3, #6
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	2168      	movs	r1, #104	; 0x68
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fdcf 	bl	8003214 <lsm303agr_read_reg>
 8003676:	60f8      	str	r0, [r7, #12]
  return ret;
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800368c:	2301      	movs	r3, #1
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	210f      	movs	r1, #15
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fdbe 	bl	8003214 <lsm303agr_read_reg>
 8003698:	60f8      	str	r0, [r7, #12]
  return ret;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80036ae:	2301      	movs	r3, #1
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	214f      	movs	r1, #79	; 0x4f
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fdad 	bl	8003214 <lsm303agr_read_reg>
 80036ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80036d2:	f107 0208 	add.w	r2, r7, #8
 80036d6:	2301      	movs	r3, #1
 80036d8:	2162      	movs	r1, #98	; 0x62
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fd9a 	bl	8003214 <lsm303agr_read_reg>
 80036e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	7a3b      	ldrb	r3, [r7, #8]
 80036f2:	f362 0341 	bfi	r3, r2, #1, #1
 80036f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80036f8:	f107 0208 	add.w	r2, r7, #8
 80036fc:	2301      	movs	r3, #1
 80036fe:	2162      	movs	r1, #98	; 0x62
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fd9f 	bl	8003244 <lsm303agr_write_reg>
 8003706:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003708:	68fb      	ldr	r3, [r7, #12]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800371e:	f107 0208 	add.w	r2, r7, #8
 8003722:	2301      	movs	r3, #1
 8003724:	212e      	movs	r1, #46	; 0x2e
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fd74 	bl	8003214 <lsm303agr_read_reg>
 800372c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	7a3b      	ldrb	r3, [r7, #8]
 800373e:	f362 1387 	bfi	r3, r2, #6, #2
 8003742:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003744:	f107 0208 	add.w	r2, r7, #8
 8003748:	2301      	movs	r3, #1
 800374a:	212e      	movs	r1, #46	; 0x2e
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fd79 	bl	8003244 <lsm303agr_write_reg>
 8003752:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003754:	68fb      	ldr	r3, [r7, #12]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800376a:	f107 0208 	add.w	r2, r7, #8
 800376e:	2301      	movs	r3, #1
 8003770:	2162      	movs	r1, #98	; 0x62
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fd4e 	bl	8003214 <lsm303agr_read_reg>
 8003778:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	7a3b      	ldrb	r3, [r7, #8]
 800378a:	f362 1345 	bfi	r3, r2, #5, #1
 800378e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003790:	f107 0208 	add.w	r2, r7, #8
 8003794:	2301      	movs	r3, #1
 8003796:	2162      	movs	r1, #98	; 0x62
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fd53 	bl	8003244 <lsm303agr_write_reg>
 800379e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80037a0:	68fb      	ldr	r3, [r7, #12]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e04d      	b.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	7b1a      	ldrb	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <LSM6DSL_RegisterBusIO+0xc4>)
 8003804:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <LSM6DSL_RegisterBusIO+0xc8>)
 800380a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e020      	b.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4798      	blx	r3
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e016      	b.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d112      	bne.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003848:	230c      	movs	r3, #12
 800384a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	461a      	mov	r2, r3
 8003850:	2112      	movs	r1, #18
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fd2d 	bl	80042b2 <LSM6DSL_Write_Reg>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	08004721 	.word	0x08004721
 8003874:	08004757 	.word	0x08004757

08003878 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	331c      	adds	r3, #28
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f001 f9e5 	bl	8004c56 <lsm6dsl_auto_increment_set>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e054      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	331c      	adds	r3, #28
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f980 	bl	8004ba4 <lsm6dsl_block_data_update_set>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	e048      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	331c      	adds	r3, #28
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f9f3 	bl	8004ca2 <lsm6dsl_fifo_mode_set>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	e03c      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	331c      	adds	r3, #28
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 ffe6 	bl	80048a8 <lsm6dsl_xl_data_rate_set>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e02c      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	331c      	adds	r3, #28
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 ff7c 	bl	80047ec <lsm6dsl_xl_full_scale_set>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e020      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	331c      	adds	r3, #28
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f8c0 	bl	8004a94 <lsm6dsl_gy_data_rate_set>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e010      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	331c      	adds	r3, #28
 8003924:	2106      	movs	r1, #6
 8003926:	4618      	mov	r0, r3
 8003928:	f001 f84c 	bl	80049c4 <lsm6dsl_gy_full_scale_set>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e004      	b.n	8003942 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f888 	bl	8003a68 <LSM6DSL_ACC_Disable>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	e015      	b.n	8003990 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa9a 	bl	8003e9e <LSM6DSL_GYRO_Disable>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	e00c      	b.n	8003990 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	331c      	adds	r3, #28
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f943 	bl	8004c34 <lsm6dsl_device_id_get>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	e000      	b.n	80039bc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039ec:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2210      	movs	r2, #16
 80039f2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <LSM6DSL_GetCapabilities+0x58>)
 80039fe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <LSM6DSL_GetCapabilities+0x58>)
 8003a04:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	45d02000 	.word	0x45d02000

08003a20 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e014      	b.n	8003a60 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f103 021c 	add.w	r2, r3, #28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 ff2f 	bl	80048a8 <lsm6dsl_xl_data_rate_set>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	e004      	b.n	8003a60 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e01f      	b.n	8003abe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f103 021c 	add.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	332b      	adds	r3, #43	; 0x2b
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f000 ff32 	bl	80048f4 <lsm6dsl_xl_data_rate_get>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e010      	b.n	8003abe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	331c      	adds	r3, #28
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff00 	bl	80048a8 <lsm6dsl_xl_data_rate_set>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	e004      	b.n	8003abe <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	331c      	adds	r3, #28
 8003ada:	f107 020b 	add.w	r2, r7, #11
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fea9 	bl	8004838 <lsm6dsl_xl_full_scale_get>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	e023      	b.n	8003b3a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d81b      	bhi.n	8003b30 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b11 	.word	0x08003b11
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b21 	.word	0x08003b21
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003b14:	601a      	str	r2, [r3, #0]
      break;
 8003b16:	e00f      	b.n	8003b38 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003b1c:	601a      	str	r2, [r3, #0]
      break;
 8003b1e:	e00b      	b.n	8003b38 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003b24:	601a      	str	r2, [r3, #0]
      break;
 8003b26:	e007      	b.n	8003b38 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003b2c:	601a      	str	r2, [r3, #0]
      break;
 8003b2e:	e003      	b.n	8003b38 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	60fb      	str	r3, [r7, #12]
      break;
 8003b36:	bf00      	nop
  }

  return ret;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	3d79db23 	.word	0x3d79db23
 8003b48:	3df9db23 	.word	0x3df9db23
 8003b4c:	3e79db23 	.word	0x3e79db23
 8003b50:	3ef9db23 	.word	0x3ef9db23

08003b54 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	331c      	adds	r3, #28
 8003b66:	f107 020b 	add.w	r2, r7, #11
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fec1 	bl	80048f4 <lsm6dsl_xl_data_rate_get>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e054      	b.n	8003c28 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	2b0b      	cmp	r3, #11
 8003b82:	d84c      	bhi.n	8003c1e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bbd 	.word	0x08003bbd
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bd7 	.word	0x08003bd7
 8003b98:	08003bdf 	.word	0x08003bdf
 8003b9c:	08003be7 	.word	0x08003be7
 8003ba0:	08003bef 	.word	0x08003bef
 8003ba4:	08003bf7 	.word	0x08003bf7
 8003ba8:	08003bff 	.word	0x08003bff
 8003bac:	08003c07 	.word	0x08003c07
 8003bb0:	08003c0f 	.word	0x08003c0f
 8003bb4:	08003c17 	.word	0x08003c17
 8003bb8:	08003bc7 	.word	0x08003bc7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
      break;
 8003bc4:	e02f      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003bca:	601a      	str	r2, [r3, #0]
      break;
 8003bcc:	e02b      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003bd2:	601a      	str	r2, [r3, #0]
      break;
 8003bd4:	e027      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003bda:	601a      	str	r2, [r3, #0]
      break;
 8003bdc:	e023      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003be2:	601a      	str	r2, [r3, #0]
      break;
 8003be4:	e01f      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003bea:	601a      	str	r2, [r3, #0]
      break;
 8003bec:	e01b      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003bf2:	601a      	str	r2, [r3, #0]
      break;
 8003bf4:	e017      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003bfa:	601a      	str	r2, [r3, #0]
      break;
 8003bfc:	e013      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003c02:	601a      	str	r2, [r3, #0]
      break;
 8003c04:	e00f      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003c0a:	601a      	str	r2, [r3, #0]
      break;
 8003c0c:	e00b      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003c12:	601a      	str	r2, [r3, #0]
      break;
 8003c14:	e007      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003c1a:	601a      	str	r2, [r3, #0]
      break;
 8003c1c:	e003      	b.n	8003c26 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	60fb      	str	r3, [r7, #12]
      break;
 8003c24:	bf00      	nop
  }

  return ret;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	3fcccccd 	.word	0x3fcccccd
 8003c34:	41480000 	.word	0x41480000
 8003c38:	41d00000 	.word	0x41d00000
 8003c3c:	42500000 	.word	0x42500000
 8003c40:	42d00000 	.word	0x42d00000
 8003c44:	43500000 	.word	0x43500000
 8003c48:	43d00000 	.word	0x43d00000
 8003c4c:	44504000 	.word	0x44504000
 8003c50:	44cf8000 	.word	0x44cf8000
 8003c54:	45502000 	.word	0x45502000
 8003c58:	45d02000 	.word	0x45d02000

08003c5c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d106      	bne.n	8003c80 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003c72:	ed97 0a00 	vldr	s0, [r7]
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb36 	bl	80042e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	e005      	b.n	8003c8c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c80:	ed97 0a00 	vldr	s0, [r7]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fbbb 	bl	8004400 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003c8a:	4603      	mov	r3, r0
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	331c      	adds	r3, #28
 8003ca6:	f107 020b 	add.w	r2, r7, #11
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fdc3 	bl	8004838 <lsm6dsl_xl_full_scale_get>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	e023      	b.n	8003d06 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d81b      	bhi.n	8003cfc <LSM6DSL_ACC_GetFullScale+0x68>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <LSM6DSL_ACC_GetFullScale+0x38>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003ced 	.word	0x08003ced
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	601a      	str	r2, [r3, #0]
      break;
 8003ce2:	e00f      	b.n	8003d04 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	601a      	str	r2, [r3, #0]
      break;
 8003cea:	e00b      	b.n	8003d04 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
      break;
 8003cf2:	e007      	b.n	8003d04 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	601a      	str	r2, [r3, #0]
      break;
 8003cfa:	e003      	b.n	8003d04 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	60fb      	str	r3, [r7, #12]
      break;
 8003d02:	bf00      	nop
  }

  return ret;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	dd0b      	ble.n	8003d38 <LSM6DSL_ACC_SetFullScale+0x28>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	dd06      	ble.n	8003d34 <LSM6DSL_ACC_SetFullScale+0x24>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	dc01      	bgt.n	8003d30 <LSM6DSL_ACC_SetFullScale+0x20>
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e004      	b.n	8003d3a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e002      	b.n	8003d3a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e000      	b.n	8003d3a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003d38:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003d3a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	331c      	adds	r3, #28
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fd51 	bl	80047ec <lsm6dsl_xl_full_scale_set>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e000      	b.n	8003d58 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	331c      	adds	r3, #28
 8003d6e:	f107 0208 	add.w	r2, r7, #8
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff4c 	bl	8004c12 <lsm6dsl_acceleration_raw_get>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	e00c      	b.n	8003da0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003d86:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003d8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003d96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	331c      	adds	r3, #28
 8003dbc:	f107 0210 	add.w	r2, r7, #16
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ff25 	bl	8004c12 <lsm6dsl_acceleration_raw_get>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e03c      	b.n	8003e4e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fe74 	bl	8003ac8 <LSM6DSL_ACC_GetSensitivity>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e030      	b.n	8003e4e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003dec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e04:	ee17 2a90 	vmov	r2, s15
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e24:	ee17 2a90 	vmov	r2, s15
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e44:	ee17 2a90 	vmov	r2, s15
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e014      	b.n	8003e96 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 021c 	add.w	r2, r3, #28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 fe0a 	bl	8004a94 <lsm6dsl_gy_data_rate_set>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8a:	e004      	b.n	8003e96 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e01f      	b.n	8003ef4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f103 021c 	add.w	r2, r3, #28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	332c      	adds	r3, #44	; 0x2c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 fe0d 	bl	8004ae0 <lsm6dsl_gy_data_rate_get>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e010      	b.n	8003ef4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	331c      	adds	r3, #28
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fddb 	bl	8004a94 <lsm6dsl_gy_data_rate_set>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e004      	b.n	8003ef4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	331c      	adds	r3, #28
 8003f0e:	f107 020b 	add.w	r2, r7, #11
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fd7b 	bl	8004a10 <lsm6dsl_gy_full_scale_get>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	e02d      	b.n	8003f82 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003f26:	7afb      	ldrb	r3, [r7, #11]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d825      	bhi.n	8003f78 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f51 	.word	0x08003f51
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f79 	.word	0x08003f79
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f79 	.word	0x08003f79
 8003f4c:	08003f71 	.word	0x08003f71
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003f54:	601a      	str	r2, [r3, #0]
      break;
 8003f56:	e013      	b.n	8003f80 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8003f5c:	601a      	str	r2, [r3, #0]
      break;
 8003f5e:	e00f      	b.n	8003f80 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8003f64:	601a      	str	r2, [r3, #0]
      break;
 8003f66:	e00b      	b.n	8003f80 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8003f6c:	601a      	str	r2, [r3, #0]
      break;
 8003f6e:	e007      	b.n	8003f80 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8003f74:	601a      	str	r2, [r3, #0]
      break;
 8003f76:	e003      	b.n	8003f80 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	60fb      	str	r3, [r7, #12]
      break;
 8003f7e:	bf00      	nop
  }

  return ret;
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	408c0000 	.word	0x408c0000
 8003f90:	410c0000 	.word	0x410c0000
 8003f94:	418c0000 	.word	0x418c0000
 8003f98:	420c0000 	.word	0x420c0000
 8003f9c:	428c0000 	.word	0x428c0000

08003fa0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	331c      	adds	r3, #28
 8003fb2:	f107 020b 	add.w	r2, r7, #11
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fd91 	bl	8004ae0 <lsm6dsl_gy_data_rate_get>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	e04e      	b.n	8004068 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003fca:	7afb      	ldrb	r3, [r7, #11]
 8003fcc:	2b0a      	cmp	r3, #10
 8003fce:	d846      	bhi.n	800405e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	0800400f 	.word	0x0800400f
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	0800401f 	.word	0x0800401f
 8003fe8:	08004027 	.word	0x08004027
 8003fec:	0800402f 	.word	0x0800402f
 8003ff0:	08004037 	.word	0x08004037
 8003ff4:	0800403f 	.word	0x0800403f
 8003ff8:	08004047 	.word	0x08004047
 8003ffc:	0800404f 	.word	0x0800404f
 8004000:	08004057 	.word	0x08004057
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
      break;
 800400c:	e02b      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004012:	601a      	str	r2, [r3, #0]
      break;
 8004014:	e027      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800401a:	601a      	str	r2, [r3, #0]
      break;
 800401c:	e023      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004022:	601a      	str	r2, [r3, #0]
      break;
 8004024:	e01f      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800402a:	601a      	str	r2, [r3, #0]
      break;
 800402c:	e01b      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004032:	601a      	str	r2, [r3, #0]
      break;
 8004034:	e017      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800403a:	601a      	str	r2, [r3, #0]
      break;
 800403c:	e013      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	4a11      	ldr	r2, [pc, #68]	; (8004088 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004042:	601a      	str	r2, [r3, #0]
      break;
 8004044:	e00f      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4a10      	ldr	r2, [pc, #64]	; (800408c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800404a:	601a      	str	r2, [r3, #0]
      break;
 800404c:	e00b      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004052:	601a      	str	r2, [r3, #0]
      break;
 8004054:	e007      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800405a:	601a      	str	r2, [r3, #0]
      break;
 800405c:	e003      	b.n	8004066 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	60fb      	str	r3, [r7, #12]
      break;
 8004064:	bf00      	nop
  }

  return ret;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	41480000 	.word	0x41480000
 8004074:	41d00000 	.word	0x41d00000
 8004078:	42500000 	.word	0x42500000
 800407c:	42d00000 	.word	0x42d00000
 8004080:	43500000 	.word	0x43500000
 8004084:	43d00000 	.word	0x43d00000
 8004088:	44504000 	.word	0x44504000
 800408c:	44cf8000 	.word	0x44cf8000
 8004090:	45502000 	.word	0x45502000
 8004094:	45d02000 	.word	0x45d02000

08004098 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d106      	bne.n	80040bc <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80040ae:	ed97 0a00 	vldr	s0, [r7]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa26 	bl	8004504 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80040b8:	4603      	mov	r3, r0
 80040ba:	e005      	b.n	80040c8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80040bc:	ed97 0a00 	vldr	s0, [r7]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 faab 	bl	800461c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80040c6:	4603      	mov	r3, r0
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	331c      	adds	r3, #28
 80040e2:	f107 020b 	add.w	r2, r7, #11
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fc91 	bl	8004a10 <lsm6dsl_gy_full_scale_get>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e030      	b.n	800415c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d828      	bhi.n	8004152 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800412d 	.word	0x0800412d
 800410c:	08004125 	.word	0x08004125
 8004110:	08004135 	.word	0x08004135
 8004114:	08004153 	.word	0x08004153
 8004118:	0800413f 	.word	0x0800413f
 800411c:	08004153 	.word	0x08004153
 8004120:	08004149 	.word	0x08004149
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	227d      	movs	r2, #125	; 0x7d
 8004128:	601a      	str	r2, [r3, #0]
      break;
 800412a:	e016      	b.n	800415a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	22fa      	movs	r2, #250	; 0xfa
 8004130:	601a      	str	r2, [r3, #0]
      break;
 8004132:	e012      	b.n	800415a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800413a:	601a      	str	r2, [r3, #0]
      break;
 800413c:	e00d      	b.n	800415a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004144:	601a      	str	r2, [r3, #0]
      break;
 8004146:	e008      	b.n	800415a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800414e:	601a      	str	r2, [r3, #0]
      break;
 8004150:	e003      	b.n	800415a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	60fb      	str	r3, [r7, #12]
      break;
 8004158:	bf00      	nop
  }

  return ret;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b7d      	cmp	r3, #125	; 0x7d
 8004172:	dd12      	ble.n	800419a <LSM6DSL_GYRO_SetFullScale+0x36>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2bfa      	cmp	r3, #250	; 0xfa
 8004178:	dd0d      	ble.n	8004196 <LSM6DSL_GYRO_SetFullScale+0x32>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004180:	dd07      	ble.n	8004192 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004188:	dc01      	bgt.n	800418e <LSM6DSL_GYRO_SetFullScale+0x2a>
 800418a:	2304      	movs	r3, #4
 800418c:	e006      	b.n	800419c <LSM6DSL_GYRO_SetFullScale+0x38>
 800418e:	2306      	movs	r3, #6
 8004190:	e004      	b.n	800419c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004192:	2302      	movs	r3, #2
 8004194:	e002      	b.n	800419c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <LSM6DSL_GYRO_SetFullScale+0x38>
 800419a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800419c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	331c      	adds	r3, #28
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc0c 	bl	80049c4 <lsm6dsl_gy_full_scale_set>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	e000      	b.n	80041ba <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	331c      	adds	r3, #28
 80041d0:	f107 0208 	add.w	r2, r7, #8
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fd0a 	bl	8004bf0 <lsm6dsl_angular_rate_raw_get>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	e00c      	b.n	8004202 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	331c      	adds	r3, #28
 8004218:	f107 0210 	add.w	r2, r7, #16
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fce6 	bl	8004bf0 <lsm6dsl_angular_rate_raw_get>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	e03c      	b.n	80042aa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fe60 	bl	8003efc <LSM6DSL_GYRO_GetSensitivity>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	e030      	b.n	80042aa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004248:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004254:	edd7 7a03 	vldr	s15, [r7, #12]
 8004258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004260:	ee17 2a90 	vmov	r2, s15
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004274:	edd7 7a03 	vldr	s15, [r7, #12]
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004280:	ee17 2a90 	vmov	r2, s15
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004288:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004294:	edd7 7a03 	vldr	s15, [r7, #12]
 8004298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a0:	ee17 2a90 	vmov	r2, s15
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
 80042be:	4613      	mov	r3, r2
 80042c0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f103 001c 	add.w	r0, r3, #28
 80042c8:	1cba      	adds	r2, r7, #2
 80042ca:	78f9      	ldrb	r1, [r7, #3]
 80042cc:	2301      	movs	r3, #1
 80042ce:	f000 fa75 	bl	80047bc <lsm6dsl_write_reg>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e000      	b.n	80042e0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80042f4:	edd7 7a00 	vldr	s15, [r7]
 80042f8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80042fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	d801      	bhi.n	800430a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004306:	2301      	movs	r3, #1
 8004308:	e058      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800430a:	edd7 7a00 	vldr	s15, [r7]
 800430e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431a:	d801      	bhi.n	8004320 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800431c:	2302      	movs	r3, #2
 800431e:	e04d      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004320:	edd7 7a00 	vldr	s15, [r7]
 8004324:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80043e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004330:	d801      	bhi.n	8004336 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004332:	2303      	movs	r3, #3
 8004334:	e042      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004336:	edd7 7a00 	vldr	s15, [r7]
 800433a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800433e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d801      	bhi.n	800434c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004348:	2304      	movs	r3, #4
 800434a:	e037      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800434c:	edd7 7a00 	vldr	s15, [r7]
 8004350:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80043ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d801      	bhi.n	8004362 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800435e:	2305      	movs	r3, #5
 8004360:	e02c      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004362:	edd7 7a00 	vldr	s15, [r7]
 8004366:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80043f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800436a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	d801      	bhi.n	8004378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004374:	2306      	movs	r3, #6
 8004376:	e021      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004378:	edd7 7a00 	vldr	s15, [r7]
 800437c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80043f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004388:	d801      	bhi.n	800438e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800438a:	2307      	movs	r3, #7
 800438c:	e016      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800438e:	edd7 7a00 	vldr	s15, [r7]
 8004392:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80043f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439e:	d801      	bhi.n	80043a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80043a0:	2308      	movs	r3, #8
 80043a2:	e00b      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043a4:	edd7 7a00 	vldr	s15, [r7]
 80043a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80043fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80043ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	d801      	bhi.n	80043ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80043b6:	2309      	movs	r3, #9
 80043b8:	e000      	b.n	80043bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043ba:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80043bc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	331c      	adds	r3, #28
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fa6e 	bl	80048a8 <lsm6dsl_xl_data_rate_set>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	e000      	b.n	80043da <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	42500000 	.word	0x42500000
 80043e8:	42d00000 	.word	0x42d00000
 80043ec:	43500000 	.word	0x43500000
 80043f0:	43d00000 	.word	0x43d00000
 80043f4:	44504000 	.word	0x44504000
 80043f8:	44cf8000 	.word	0x44cf8000
 80043fc:	45502000 	.word	0x45502000

08004400 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800440c:	edd7 7a00 	vldr	s15, [r7]
 8004410:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	d801      	bhi.n	8004422 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800441e:	2301      	movs	r3, #1
 8004420:	e058      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004422:	edd7 7a00 	vldr	s15, [r7]
 8004426:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800442a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	d801      	bhi.n	8004438 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004434:	2302      	movs	r3, #2
 8004436:	e04d      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004438:	edd7 7a00 	vldr	s15, [r7]
 800443c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80044e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	d801      	bhi.n	800444e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800444a:	2303      	movs	r3, #3
 800444c:	e042      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800444e:	edd7 7a00 	vldr	s15, [r7]
 8004452:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80044ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445e:	d801      	bhi.n	8004464 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004460:	2304      	movs	r3, #4
 8004462:	e037      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004464:	edd7 7a00 	vldr	s15, [r7]
 8004468:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80044f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800446c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	d801      	bhi.n	800447a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004476:	2305      	movs	r3, #5
 8004478:	e02c      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800447a:	edd7 7a00 	vldr	s15, [r7]
 800447e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80044f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	d801      	bhi.n	8004490 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800448c:	2306      	movs	r3, #6
 800448e:	e021      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004490:	edd7 7a00 	vldr	s15, [r7]
 8004494:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80044f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	d801      	bhi.n	80044a6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80044a2:	2307      	movs	r3, #7
 80044a4:	e016      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044a6:	edd7 7a00 	vldr	s15, [r7]
 80044aa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80044fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80044ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d801      	bhi.n	80044bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80044b8:	2308      	movs	r3, #8
 80044ba:	e00b      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044bc:	edd7 7a00 	vldr	s15, [r7]
 80044c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004500 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80044c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044cc:	d801      	bhi.n	80044d2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80044ce:	2309      	movs	r3, #9
 80044d0:	e000      	b.n	80044d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044d2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	42500000 	.word	0x42500000
 80044ec:	42d00000 	.word	0x42d00000
 80044f0:	43500000 	.word	0x43500000
 80044f4:	43d00000 	.word	0x43d00000
 80044f8:	44504000 	.word	0x44504000
 80044fc:	44cf8000 	.word	0x44cf8000
 8004500:	45502000 	.word	0x45502000

08004504 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004510:	edd7 7a00 	vldr	s15, [r7]
 8004514:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	d801      	bhi.n	8004526 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004522:	2301      	movs	r3, #1
 8004524:	e058      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004526:	edd7 7a00 	vldr	s15, [r7]
 800452a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	d801      	bhi.n	800453c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004538:	2302      	movs	r3, #2
 800453a:	e04d      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800453c:	edd7 7a00 	vldr	s15, [r7]
 8004540:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004600 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d801      	bhi.n	8004552 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800454e:	2303      	movs	r3, #3
 8004550:	e042      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004552:	edd7 7a00 	vldr	s15, [r7]
 8004556:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004604 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800455a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004562:	d801      	bhi.n	8004568 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004564:	2304      	movs	r3, #4
 8004566:	e037      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004568:	edd7 7a00 	vldr	s15, [r7]
 800456c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004608 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	d801      	bhi.n	800457e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800457a:	2305      	movs	r3, #5
 800457c:	e02c      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800457e:	edd7 7a00 	vldr	s15, [r7]
 8004582:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800460c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	d801      	bhi.n	8004594 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004590:	2306      	movs	r3, #6
 8004592:	e021      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004594:	edd7 7a00 	vldr	s15, [r7]
 8004598:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004610 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800459c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	d801      	bhi.n	80045aa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80045a6:	2307      	movs	r3, #7
 80045a8:	e016      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045aa:	edd7 7a00 	vldr	s15, [r7]
 80045ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004614 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80045b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	d801      	bhi.n	80045c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80045bc:	2308      	movs	r3, #8
 80045be:	e00b      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045c0:	edd7 7a00 	vldr	s15, [r7]
 80045c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004618 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80045c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d0:	d801      	bhi.n	80045d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80045d2:	2309      	movs	r3, #9
 80045d4:	e000      	b.n	80045d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045d6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80045d8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	331c      	adds	r3, #28
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa56 	bl	8004a94 <lsm6dsl_gy_data_rate_set>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	e000      	b.n	80045f6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	42500000 	.word	0x42500000
 8004604:	42d00000 	.word	0x42d00000
 8004608:	43500000 	.word	0x43500000
 800460c:	43d00000 	.word	0x43d00000
 8004610:	44504000 	.word	0x44504000
 8004614:	44cf8000 	.word	0x44cf8000
 8004618:	45502000 	.word	0x45502000

0800461c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004628:	edd7 7a00 	vldr	s15, [r7]
 800462c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004638:	d801      	bhi.n	800463e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800463a:	2301      	movs	r3, #1
 800463c:	e058      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800463e:	edd7 7a00 	vldr	s15, [r7]
 8004642:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	d801      	bhi.n	8004654 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004650:	2302      	movs	r3, #2
 8004652:	e04d      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004654:	edd7 7a00 	vldr	s15, [r7]
 8004658:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004704 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800465c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	d801      	bhi.n	800466a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004666:	2303      	movs	r3, #3
 8004668:	e042      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800466a:	edd7 7a00 	vldr	s15, [r7]
 800466e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004708 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467a:	d801      	bhi.n	8004680 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800467c:	2304      	movs	r3, #4
 800467e:	e037      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004680:	edd7 7a00 	vldr	s15, [r7]
 8004684:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800470c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d801      	bhi.n	8004696 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004692:	2305      	movs	r3, #5
 8004694:	e02c      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004696:	edd7 7a00 	vldr	s15, [r7]
 800469a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004710 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800469e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	d801      	bhi.n	80046ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80046a8:	2306      	movs	r3, #6
 80046aa:	e021      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046ac:	edd7 7a00 	vldr	s15, [r7]
 80046b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004714 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	d801      	bhi.n	80046c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80046be:	2307      	movs	r3, #7
 80046c0:	e016      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046c2:	edd7 7a00 	vldr	s15, [r7]
 80046c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004718 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80046ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	d801      	bhi.n	80046d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80046d4:	2308      	movs	r3, #8
 80046d6:	e00b      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046d8:	edd7 7a00 	vldr	s15, [r7]
 80046dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800471c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80046e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e8:	d801      	bhi.n	80046ee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80046ea:	2309      	movs	r3, #9
 80046ec:	e000      	b.n	80046f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046ee:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	42500000 	.word	0x42500000
 8004708:	42d00000 	.word	0x42d00000
 800470c:	43500000 	.word	0x43500000
 8004710:	43d00000 	.word	0x43d00000
 8004714:	44504000 	.word	0x44504000
 8004718:	44cf8000 	.word	0x44cf8000
 800471c:	45502000 	.word	0x45502000

08004720 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	461a      	mov	r2, r3
 800472c:	460b      	mov	r3, r1
 800472e:	72fb      	strb	r3, [r7, #11]
 8004730:	4613      	mov	r3, r2
 8004732:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	695c      	ldr	r4, [r3, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	7b1b      	ldrb	r3, [r3, #12]
 8004740:	b298      	uxth	r0, r3
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	b299      	uxth	r1, r3
 8004746:	893b      	ldrh	r3, [r7, #8]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	47a0      	blx	r4
 800474c:	4603      	mov	r3, r0
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}

08004756 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004756:	b590      	push	{r4, r7, lr}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	461a      	mov	r2, r3
 8004762:	460b      	mov	r3, r1
 8004764:	72fb      	strb	r3, [r7, #11]
 8004766:	4613      	mov	r3, r2
 8004768:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	691c      	ldr	r4, [r3, #16]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	7b1b      	ldrb	r3, [r3, #12]
 8004776:	b298      	uxth	r0, r3
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	b299      	uxth	r1, r3
 800477c:	893b      	ldrh	r3, [r7, #8]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	47a0      	blx	r4
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}

0800478c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	461a      	mov	r2, r3
 8004798:	460b      	mov	r3, r1
 800479a:	72fb      	strb	r3, [r7, #11]
 800479c:	4613      	mov	r3, r2
 800479e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685c      	ldr	r4, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6898      	ldr	r0, [r3, #8]
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	7af9      	ldrb	r1, [r7, #11]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	47a0      	blx	r4
 80047b0:	6178      	str	r0, [r7, #20]
  return ret;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}

080047bc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	460b      	mov	r3, r1
 80047ca:	72fb      	strb	r3, [r7, #11]
 80047cc:	4613      	mov	r3, r2
 80047ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681c      	ldr	r4, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6898      	ldr	r0, [r3, #8]
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	7af9      	ldrb	r1, [r7, #11]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	47a0      	blx	r4
 80047e0:	6178      	str	r0, [r7, #20]
  return ret;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd90      	pop	{r4, r7, pc}

080047ec <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80047f8:	f107 0208 	add.w	r2, r7, #8
 80047fc:	2301      	movs	r3, #1
 80047fe:	2110      	movs	r1, #16
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ffc3 	bl	800478c <lsm6dsl_read_reg>
 8004806:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	b2da      	uxtb	r2, r3
 8004816:	7a3b      	ldrb	r3, [r7, #8]
 8004818:	f362 0383 	bfi	r3, r2, #2, #2
 800481c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800481e:	f107 0208 	add.w	r2, r7, #8
 8004822:	2301      	movs	r3, #1
 8004824:	2110      	movs	r1, #16
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ffc8 	bl	80047bc <lsm6dsl_write_reg>
 800482c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004842:	f107 0208 	add.w	r2, r7, #8
 8004846:	2301      	movs	r3, #1
 8004848:	2110      	movs	r1, #16
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff9e 	bl	800478c <lsm6dsl_read_reg>
 8004850:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8004852:	7a3b      	ldrb	r3, [r7, #8]
 8004854:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d81a      	bhi.n	8004894 <lsm6dsl_xl_full_scale_get+0x5c>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004875 	.word	0x08004875
 8004868:	0800487d 	.word	0x0800487d
 800486c:	08004885 	.word	0x08004885
 8004870:	0800488d 	.word	0x0800488d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
      break;
 800487a:	e00f      	b.n	800489c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
      break;
 8004882:	e00b      	b.n	800489c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
      break;
 800488a:	e007      	b.n	800489c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2203      	movs	r2, #3
 8004890:	701a      	strb	r2, [r3, #0]
      break;
 8004892:	e003      	b.n	800489c <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	701a      	strb	r2, [r3, #0]
      break;
 800489a:	bf00      	nop
  }

  return ret;
 800489c:	68fb      	ldr	r3, [r7, #12]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop

080048a8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048b4:	f107 0208 	add.w	r2, r7, #8
 80048b8:	2301      	movs	r3, #1
 80048ba:	2110      	movs	r1, #16
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ff65 	bl	800478c <lsm6dsl_read_reg>
 80048c2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	7a3b      	ldrb	r3, [r7, #8]
 80048d4:	f362 1307 	bfi	r3, r2, #4, #4
 80048d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048da:	f107 0208 	add.w	r2, r7, #8
 80048de:	2301      	movs	r3, #1
 80048e0:	2110      	movs	r1, #16
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff6a 	bl	80047bc <lsm6dsl_write_reg>
 80048e8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048fe:	f107 0208 	add.w	r2, r7, #8
 8004902:	2301      	movs	r3, #1
 8004904:	2110      	movs	r1, #16
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff40 	bl	800478c <lsm6dsl_read_reg>
 800490c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 800490e:	7a3b      	ldrb	r3, [r7, #8]
 8004910:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b0b      	cmp	r3, #11
 8004918:	d84a      	bhi.n	80049b0 <lsm6dsl_xl_data_rate_get+0xbc>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <lsm6dsl_xl_data_rate_get+0x2c>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004951 	.word	0x08004951
 8004924:	08004959 	.word	0x08004959
 8004928:	08004961 	.word	0x08004961
 800492c:	08004969 	.word	0x08004969
 8004930:	08004971 	.word	0x08004971
 8004934:	08004979 	.word	0x08004979
 8004938:	08004981 	.word	0x08004981
 800493c:	08004989 	.word	0x08004989
 8004940:	08004991 	.word	0x08004991
 8004944:	08004999 	.word	0x08004999
 8004948:	080049a1 	.word	0x080049a1
 800494c:	080049a9 	.word	0x080049a9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
      break;
 8004956:	e02f      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
      break;
 800495e:	e02b      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	701a      	strb	r2, [r3, #0]
      break;
 8004966:	e027      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2203      	movs	r2, #3
 800496c:	701a      	strb	r2, [r3, #0]
      break;
 800496e:	e023      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2204      	movs	r2, #4
 8004974:	701a      	strb	r2, [r3, #0]
      break;
 8004976:	e01f      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2205      	movs	r2, #5
 800497c:	701a      	strb	r2, [r3, #0]
      break;
 800497e:	e01b      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2206      	movs	r2, #6
 8004984:	701a      	strb	r2, [r3, #0]
      break;
 8004986:	e017      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2207      	movs	r2, #7
 800498c:	701a      	strb	r2, [r3, #0]
      break;
 800498e:	e013      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2208      	movs	r2, #8
 8004994:	701a      	strb	r2, [r3, #0]
      break;
 8004996:	e00f      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2209      	movs	r2, #9
 800499c:	701a      	strb	r2, [r3, #0]
      break;
 800499e:	e00b      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	220a      	movs	r2, #10
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	e007      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	220b      	movs	r2, #11
 80049ac:	701a      	strb	r2, [r3, #0]
      break;
 80049ae:	e003      	b.n	80049b8 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	220c      	movs	r2, #12
 80049b4:	701a      	strb	r2, [r3, #0]
      break;
 80049b6:	bf00      	nop
  }

  return ret;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop

080049c4 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80049d0:	f107 0208 	add.w	r2, r7, #8
 80049d4:	2301      	movs	r3, #1
 80049d6:	2111      	movs	r1, #17
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fed7 	bl	800478c <lsm6dsl_read_reg>
 80049de:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	7a3b      	ldrb	r3, [r7, #8]
 80049f0:	f362 0343 	bfi	r3, r2, #1, #3
 80049f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80049f6:	f107 0208 	add.w	r2, r7, #8
 80049fa:	2301      	movs	r3, #1
 80049fc:	2111      	movs	r1, #17
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fedc 	bl	80047bc <lsm6dsl_write_reg>
 8004a04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004a1a:	f107 0208 	add.w	r2, r7, #8
 8004a1e:	2301      	movs	r3, #1
 8004a20:	2111      	movs	r1, #17
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff feb2 	bl	800478c <lsm6dsl_read_reg>
 8004a28:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8004a2a:	7a3b      	ldrb	r3, [r7, #8]
 8004a2c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d824      	bhi.n	8004a80 <lsm6dsl_gy_full_scale_get+0x70>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <lsm6dsl_gy_full_scale_get+0x2c>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	08004a61 	.word	0x08004a61
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a81 	.word	0x08004a81
 8004a54:	08004a79 	.word	0x08004a79
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
      break;
 8004a5e:	e013      	b.n	8004a88 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
      break;
 8004a66:	e00f      	b.n	8004a88 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	701a      	strb	r2, [r3, #0]
      break;
 8004a6e:	e00b      	b.n	8004a88 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2204      	movs	r2, #4
 8004a74:	701a      	strb	r2, [r3, #0]
      break;
 8004a76:	e007      	b.n	8004a88 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2206      	movs	r2, #6
 8004a7c:	701a      	strb	r2, [r3, #0]
      break;
 8004a7e:	e003      	b.n	8004a88 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2207      	movs	r2, #7
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	bf00      	nop
  }

  return ret;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop

08004a94 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004aa0:	f107 0208 	add.w	r2, r7, #8
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	2111      	movs	r1, #17
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fe6f 	bl	800478c <lsm6dsl_read_reg>
 8004aae:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	7a3b      	ldrb	r3, [r7, #8]
 8004ac0:	f362 1307 	bfi	r3, r2, #4, #4
 8004ac4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ac6:	f107 0208 	add.w	r2, r7, #8
 8004aca:	2301      	movs	r3, #1
 8004acc:	2111      	movs	r1, #17
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fe74 	bl	80047bc <lsm6dsl_write_reg>
 8004ad4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004aea:	f107 0208 	add.w	r2, r7, #8
 8004aee:	2301      	movs	r3, #1
 8004af0:	2111      	movs	r1, #17
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fe4a 	bl	800478c <lsm6dsl_read_reg>
 8004af8:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8004afa:	7a3b      	ldrb	r3, [r7, #8]
 8004afc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b0a      	cmp	r3, #10
 8004b04:	d844      	bhi.n	8004b90 <lsm6dsl_gy_data_rate_get+0xb0>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <lsm6dsl_gy_data_rate_get+0x2c>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b39 	.word	0x08004b39
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b51 	.word	0x08004b51
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b69 	.word	0x08004b69
 8004b28:	08004b71 	.word	0x08004b71
 8004b2c:	08004b79 	.word	0x08004b79
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b89 	.word	0x08004b89
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
      break;
 8004b3e:	e02b      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
      break;
 8004b46:	e027      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	701a      	strb	r2, [r3, #0]
      break;
 8004b4e:	e023      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2203      	movs	r2, #3
 8004b54:	701a      	strb	r2, [r3, #0]
      break;
 8004b56:	e01f      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	701a      	strb	r2, [r3, #0]
      break;
 8004b5e:	e01b      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2205      	movs	r2, #5
 8004b64:	701a      	strb	r2, [r3, #0]
      break;
 8004b66:	e017      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2206      	movs	r2, #6
 8004b6c:	701a      	strb	r2, [r3, #0]
      break;
 8004b6e:	e013      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2207      	movs	r2, #7
 8004b74:	701a      	strb	r2, [r3, #0]
      break;
 8004b76:	e00f      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e00b      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2209      	movs	r2, #9
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e007      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	220a      	movs	r2, #10
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e003      	b.n	8004b98 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	220b      	movs	r2, #11
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	bf00      	nop
  }

  return ret;
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop

08004ba4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004bb0:	f107 0208 	add.w	r2, r7, #8
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	2112      	movs	r1, #18
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fde7 	bl	800478c <lsm6dsl_read_reg>
 8004bbe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	7a3b      	ldrb	r3, [r7, #8]
 8004bd0:	f362 1386 	bfi	r3, r2, #6, #1
 8004bd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004bd6:	f107 0208 	add.w	r2, r7, #8
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2112      	movs	r1, #18
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fdec 	bl	80047bc <lsm6dsl_write_reg>
 8004be4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	2122      	movs	r1, #34	; 0x22
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fdc3 	bl	800478c <lsm6dsl_read_reg>
 8004c06:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004c1c:	2306      	movs	r3, #6
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	2128      	movs	r1, #40	; 0x28
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fdb2 	bl	800478c <lsm6dsl_read_reg>
 8004c28:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004c3e:	2301      	movs	r3, #1
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	210f      	movs	r1, #15
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fda1 	bl	800478c <lsm6dsl_read_reg>
 8004c4a:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c62:	f107 0208 	add.w	r2, r7, #8
 8004c66:	2301      	movs	r3, #1
 8004c68:	2112      	movs	r1, #18
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fd8e 	bl	800478c <lsm6dsl_read_reg>
 8004c70:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	7a3b      	ldrb	r3, [r7, #8]
 8004c82:	f362 0382 	bfi	r3, r2, #2, #1
 8004c86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c88:	f107 0208 	add.w	r2, r7, #8
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2112      	movs	r1, #18
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fd93 	bl	80047bc <lsm6dsl_write_reg>
 8004c96:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004c98:	68fb      	ldr	r3, [r7, #12]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fd68 	bl	800478c <lsm6dsl_read_reg>
 8004cbc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	7a3b      	ldrb	r3, [r7, #8]
 8004cce:	f362 0302 	bfi	r3, r2, #0, #3
 8004cd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004cd4:	f107 0208 	add.w	r2, r7, #8
 8004cd8:	2301      	movs	r3, #1
 8004cda:	210a      	movs	r1, #10
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fd6d 	bl	80047bc <lsm6dsl_write_reg>
 8004ce2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d036      	beq.n	8004d7a <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d302      	bcc.n	8004d16 <IKS01A2_MOTION_SENSOR_Init+0x26>
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d064      	beq.n	8004dde <IKS01A2_MOTION_SENSOR_Init+0xee>
 8004d14:	e095      	b.n	8004e42 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004d16:	6838      	ldr	r0, [r7, #0]
 8004d18:	f000 f966 	bl	8004fe8 <LSM6DSL_0_Probe>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	e0cc      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4967      	ldr	r1, [pc, #412]	; (8004ed0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d3a:	f107 010c 	add.w	r1, r7, #12
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4798      	blx	r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004d48:	f06f 0306 	mvn.w	r3, #6
 8004d4c:	e0b9      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004d4e:	7b3b      	ldrb	r3, [r7, #12]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d103      	bne.n	8004d5c <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004d5c:	7b7b      	ldrb	r3, [r7, #13]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d103      	bne.n	8004d6a <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004d6a:	7bbb      	ldrb	r3, [r7, #14]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d16c      	bne.n	8004e4a <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f043 0304 	orr.w	r3, r3, #4
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004d78:	e067      	b.n	8004e4a <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004d7a:	6838      	ldr	r0, [r7, #0]
 8004d7c:	f000 f9f0 	bl	8005160 <LSM303AGR_ACC_0_Probe>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8004d86:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8a:	e09a      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004d8c:	4a4f      	ldr	r2, [pc, #316]	; (8004ecc <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	494e      	ldr	r1, [pc, #312]	; (8004ed0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d9e:	f107 010c 	add.w	r1, r7, #12
 8004da2:	4610      	mov	r0, r2
 8004da4:	4798      	blx	r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004dac:	f06f 0306 	mvn.w	r3, #6
 8004db0:	e087      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004db2:	7b3b      	ldrb	r3, [r7, #12]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d103      	bne.n	8004dc0 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004dc0:	7b7b      	ldrb	r3, [r7, #13]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d103      	bne.n	8004dce <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d13c      	bne.n	8004e4e <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004ddc:	e037      	b.n	8004e4e <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8004dde:	6838      	ldr	r0, [r7, #0]
 8004de0:	f000 fa62 	bl	80052a8 <LSM303AGR_MAG_0_Probe>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	e068      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004df0:	4a36      	ldr	r2, [pc, #216]	; (8004ecc <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4935      	ldr	r1, [pc, #212]	; (8004ed0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e02:	f107 010c 	add.w	r1, r7, #12
 8004e06:	4610      	mov	r0, r2
 8004e08:	4798      	blx	r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e10:	f06f 0306 	mvn.w	r3, #6
 8004e14:	e055      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004e16:	7b3b      	ldrb	r3, [r7, #12]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d103      	bne.n	8004e24 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004e24:	7b7b      	ldrb	r3, [r7, #13]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d103      	bne.n	8004e32 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004e32:	7bbb      	ldrb	r3, [r7, #14]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10c      	bne.n	8004e52 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004e40:	e007      	b.n	8004e52 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004e42:	f06f 0301 	mvn.w	r3, #1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004e48:	e004      	b.n	8004e54 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004e52:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	e031      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	e02a      	b.n	8004eba <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	4013      	ands	r3, r2
 8004e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d11e      	bne.n	8004eae <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8004e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	4013      	ands	r3, r2
 8004e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d118      	bne.n	8004eae <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e84:	4814      	ldr	r0, [pc, #80]	; (8004ed8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	490e      	ldr	r1, [pc, #56]	; (8004ed0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4798      	blx	r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004ea8:	f06f 0304 	mvn.w	r3, #4
 8004eac:	e009      	b.n	8004ec2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d9d1      	bls.n	8004e64 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3738      	adds	r7, #56	; 0x38
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000334 	.word	0x20000334
 8004ed0:	20000678 	.word	0x20000678
 8004ed4:	200000f8 	.word	0x200000f8
 8004ed8:	20000310 	.word	0x20000310

08004edc <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d903      	bls.n	8004ef4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004eec:	f06f 0301 	mvn.w	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e028      	b.n	8004f46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4013      	ands	r3, r2
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d11c      	bne.n	8004f40 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f0e:	4812      	ldr	r0, [pc, #72]	; (8004f58 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4798      	blx	r3
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f32:	f06f 0304 	mvn.w	r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e005      	b.n	8004f46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e002      	b.n	8004f46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004f40:	f06f 0301 	mvn.w	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000340 	.word	0x20000340
 8004f54:	200000f8 	.word	0x200000f8
 8004f58:	20000310 	.word	0x20000310
 8004f5c:	20000678 	.word	0x20000678

08004f60 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d903      	bls.n	8004f7a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f72:	f06f 0301 	mvn.w	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e029      	b.n	8004fce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d11d      	bne.n	8004fc8 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004f8c:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f94:	4812      	ldr	r0, [pc, #72]	; (8004fe0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	490f      	ldr	r1, [pc, #60]	; (8004fe4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fba:	f06f 0304 	mvn.w	r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e005      	b.n	8004fce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e002      	b.n	8004fce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004fc8:	f06f 0301 	mvn.w	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004fce:	697b      	ldr	r3, [r7, #20]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000340 	.word	0x20000340
 8004fdc:	200000f8 	.word	0x200000f8
 8004fe0:	20000310 	.word	0x20000310
 8004fe4:	20000678 	.word	0x20000678

08004fe8 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b092      	sub	sp, #72	; 0x48
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8004ff8:	23d7      	movs	r3, #215	; 0xd7
 8004ffa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <LSM6DSL_0_Probe+0x140>)
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005002:	4b4a      	ldr	r3, [pc, #296]	; (800512c <LSM6DSL_0_Probe+0x144>)
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005006:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <LSM6DSL_0_Probe+0x148>)
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800500a:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <LSM6DSL_0_Probe+0x14c>)
 800500c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800500e:	4b4a      	ldr	r3, [pc, #296]	; (8005138 <LSM6DSL_0_Probe+0x150>)
 8005010:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005016:	4619      	mov	r1, r3
 8005018:	4848      	ldr	r0, [pc, #288]	; (800513c <LSM6DSL_0_Probe+0x154>)
 800501a:	f7fe fbc7 	bl	80037ac <LSM6DSL_RegisterBusIO>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005024:	f06f 0306 	mvn.w	r3, #6
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	e077      	b.n	800511c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800502c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005030:	4619      	mov	r1, r3
 8005032:	4842      	ldr	r0, [pc, #264]	; (800513c <LSM6DSL_0_Probe+0x154>)
 8005034:	f7fe fcb0 	bl	8003998 <LSM6DSL_ReadID>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800503e:	f06f 0306 	mvn.w	r3, #6
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	e06a      	b.n	800511c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800504a:	2b6a      	cmp	r3, #106	; 0x6a
 800504c:	d003      	beq.n	8005056 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800504e:	f06f 0306 	mvn.w	r3, #6
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	e062      	b.n	800511c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4619      	mov	r1, r3
 800505c:	4837      	ldr	r0, [pc, #220]	; (800513c <LSM6DSL_0_Probe+0x154>)
 800505e:	f7fe fcb1 	bl	80039c4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005062:	7a7b      	ldrb	r3, [r7, #9]
 8005064:	461a      	mov	r2, r3
 8005066:	7a3b      	ldrb	r3, [r7, #8]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	431a      	orrs	r2, r3
 800506c:	7abb      	ldrb	r3, [r7, #10]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4313      	orrs	r3, r2
 8005072:	4a33      	ldr	r2, [pc, #204]	; (8005140 <LSM6DSL_0_Probe+0x158>)
 8005074:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <LSM6DSL_0_Probe+0x15c>)
 8005078:	4a30      	ldr	r2, [pc, #192]	; (800513c <LSM6DSL_0_Probe+0x154>)
 800507a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800507c:	4b32      	ldr	r3, [pc, #200]	; (8005148 <LSM6DSL_0_Probe+0x160>)
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <LSM6DSL_0_Probe+0x164>)
 8005080:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11d      	bne.n	80050c4 <LSM6DSL_0_Probe+0xdc>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <LSM6DSL_0_Probe+0xdc>
 8005092:	7a7b      	ldrb	r3, [r7, #9]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d115      	bne.n	80050c4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <LSM6DSL_0_Probe+0x168>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a2d      	ldr	r2, [pc, #180]	; (8005154 <LSM6DSL_0_Probe+0x16c>)
 800509e:	492e      	ldr	r1, [pc, #184]	; (8005158 <LSM6DSL_0_Probe+0x170>)
 80050a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <LSM6DSL_0_Probe+0x160>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <LSM6DSL_0_Probe+0x15c>)
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	4610      	mov	r0, r2
 80050b0:	4798      	blx	r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050b8:	f06f 0304 	mvn.w	r3, #4
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
 80050be:	e001      	b.n	80050c4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80050c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11d      	bne.n	8005106 <LSM6DSL_0_Probe+0x11e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d018      	beq.n	8005106 <LSM6DSL_0_Probe+0x11e>
 80050d4:	7a3b      	ldrb	r3, [r7, #8]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d115      	bne.n	8005106 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <LSM6DSL_0_Probe+0x168>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <LSM6DSL_0_Probe+0x16c>)
 80050e0:	491e      	ldr	r1, [pc, #120]	; (800515c <LSM6DSL_0_Probe+0x174>)
 80050e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <LSM6DSL_0_Probe+0x160>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <LSM6DSL_0_Probe+0x15c>)
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	4610      	mov	r0, r2
 80050f2:	4798      	blx	r3
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050fa:	f06f 0304 	mvn.w	r3, #4
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005100:	e001      	b.n	8005106 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005102:	2300      	movs	r3, #0
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <LSM6DSL_0_Probe+0x134>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005116:	f06f 0304 	mvn.w	r3, #4
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800511e:	4618      	mov	r0, r3
 8005120:	3748      	adds	r7, #72	; 0x48
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	08001c35 	.word	0x08001c35
 800512c:	08001cb1 	.word	0x08001cb1
 8005130:	08001d65 	.word	0x08001d65
 8005134:	08001d01 	.word	0x08001d01
 8005138:	08001dc9 	.word	0x08001dc9
 800513c:	2000034c 	.word	0x2000034c
 8005140:	20000340 	.word	0x20000340
 8005144:	20000678 	.word	0x20000678
 8005148:	20000334 	.word	0x20000334
 800514c:	200000a0 	.word	0x200000a0
 8005150:	200000f8 	.word	0x200000f8
 8005154:	20000310 	.word	0x20000310
 8005158:	200000d4 	.word	0x200000d4
 800515c:	200000b0 	.word	0x200000b0

08005160 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b092      	sub	sp, #72	; 0x48
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005168:	2300      	movs	r3, #0
 800516a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800516c:	2300      	movs	r3, #0
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005170:	2333      	movs	r3, #51	; 0x33
 8005172:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <LSM303AGR_ACC_0_Probe+0x114>)
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800517a:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <LSM303AGR_ACC_0_Probe+0x118>)
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800517e:	4b3f      	ldr	r3, [pc, #252]	; (800527c <LSM303AGR_ACC_0_Probe+0x11c>)
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <LSM303AGR_ACC_0_Probe+0x120>)
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005186:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <LSM303AGR_ACC_0_Probe+0x124>)
 8005188:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800518a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518e:	4619      	mov	r1, r3
 8005190:	483d      	ldr	r0, [pc, #244]	; (8005288 <LSM303AGR_ACC_0_Probe+0x128>)
 8005192:	f7fc ffcb 	bl	800212c <LSM303AGR_ACC_RegisterBusIO>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800519c:	f06f 0306 	mvn.w	r3, #6
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
 80051a2:	e062      	b.n	800526a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 80051a4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80051a8:	4619      	mov	r1, r3
 80051aa:	4837      	ldr	r0, [pc, #220]	; (8005288 <LSM303AGR_ACC_0_Probe+0x128>)
 80051ac:	f7fd f87f 	bl	80022ae <LSM303AGR_ACC_ReadID>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051b6:	f06f 0306 	mvn.w	r3, #6
 80051ba:	647b      	str	r3, [r7, #68]	; 0x44
 80051bc:	e055      	b.n	800526a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80051be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c2:	2b33      	cmp	r3, #51	; 0x33
 80051c4:	d003      	beq.n	80051ce <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051c6:	f06f 0306 	mvn.w	r3, #6
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
 80051cc:	e04d      	b.n	800526a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	4619      	mov	r1, r3
 80051d4:	482c      	ldr	r0, [pc, #176]	; (8005288 <LSM303AGR_ACC_0_Probe+0x128>)
 80051d6:	f7fd f881 	bl	80022dc <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80051da:	7a7b      	ldrb	r3, [r7, #9]
 80051dc:	461a      	mov	r2, r3
 80051de:	7a3b      	ldrb	r3, [r7, #8]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80051e4:	7abb      	ldrb	r3, [r7, #10]
 80051e6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80051e8:	4313      	orrs	r3, r2
 80051ea:	4a28      	ldr	r2, [pc, #160]	; (800528c <LSM303AGR_ACC_0_Probe+0x12c>)
 80051ec:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <LSM303AGR_ACC_0_Probe+0x130>)
 80051f0:	4a25      	ldr	r2, [pc, #148]	; (8005288 <LSM303AGR_ACC_0_Probe+0x128>)
 80051f2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <LSM303AGR_ACC_0_Probe+0x134>)
 80051f6:	4a28      	ldr	r2, [pc, #160]	; (8005298 <LSM303AGR_ACC_0_Probe+0x138>)
 80051f8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80051fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11e      	bne.n	800523e <LSM303AGR_ACC_0_Probe+0xde>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d019      	beq.n	800523e <LSM303AGR_ACC_0_Probe+0xde>
 800520a:	7a3b      	ldrb	r3, [r7, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d116      	bne.n	800523e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <LSM303AGR_ACC_0_Probe+0x13c>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <LSM303AGR_ACC_0_Probe+0x140>)
 8005216:	3303      	adds	r3, #3
 8005218:	4922      	ldr	r1, [pc, #136]	; (80052a4 <LSM303AGR_ACC_0_Probe+0x144>)
 800521a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <LSM303AGR_ACC_0_Probe+0x134>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <LSM303AGR_ACC_0_Probe+0x130>)
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005232:	f06f 0304 	mvn.w	r3, #4
 8005236:	647b      	str	r3, [r7, #68]	; 0x44
 8005238:	e001      	b.n	800523e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800523a:	2300      	movs	r3, #0
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <LSM303AGR_ACC_0_Probe+0xf4>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800524e:	f06f 0304 	mvn.w	r3, #4
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005256:	2b00      	cmp	r3, #0
 8005258:	d107      	bne.n	800526a <LSM303AGR_ACC_0_Probe+0x10a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005264:	f06f 0304 	mvn.w	r3, #4
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800526a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800526c:	4618      	mov	r0, r3
 800526e:	3748      	adds	r7, #72	; 0x48
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08001c35 	.word	0x08001c35
 8005278:	08001cb1 	.word	0x08001cb1
 800527c:	08001d65 	.word	0x08001d65
 8005280:	08001d01 	.word	0x08001d01
 8005284:	08001dc9 	.word	0x08001dc9
 8005288:	2000037c 	.word	0x2000037c
 800528c:	20000340 	.word	0x20000340
 8005290:	20000678 	.word	0x20000678
 8005294:	20000334 	.word	0x20000334
 8005298:	20000038 	.word	0x20000038
 800529c:	200000f8 	.word	0x200000f8
 80052a0:	20000310 	.word	0x20000310
 80052a4:	20000048 	.word	0x20000048

080052a8 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b092      	sub	sp, #72	; 0x48
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80052b4:	2300      	movs	r3, #0
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80052b8:	233d      	movs	r3, #61	; 0x3d
 80052ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <LSM303AGR_MAG_0_Probe+0x114>)
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <LSM303AGR_MAG_0_Probe+0x118>)
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80052c6:	4b3f      	ldr	r3, [pc, #252]	; (80053c4 <LSM303AGR_MAG_0_Probe+0x11c>)
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80052ca:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <LSM303AGR_MAG_0_Probe+0x120>)
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <LSM303AGR_MAG_0_Probe+0x124>)
 80052d0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	4619      	mov	r1, r3
 80052d8:	483d      	ldr	r0, [pc, #244]	; (80053d0 <LSM303AGR_MAG_0_Probe+0x128>)
 80052da:	f7fd faeb 	bl	80028b4 <LSM303AGR_MAG_RegisterBusIO>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052e4:	f06f 0306 	mvn.w	r3, #6
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	e062      	b.n	80053b2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80052ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80052f0:	4619      	mov	r1, r3
 80052f2:	4837      	ldr	r0, [pc, #220]	; (80053d0 <LSM303AGR_MAG_0_Probe+0x128>)
 80052f4:	f7fd fb95 	bl	8002a22 <LSM303AGR_MAG_ReadID>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80052fe:	f06f 0306 	mvn.w	r3, #6
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
 8005304:	e055      	b.n	80053b2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d003      	beq.n	8005316 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800530e:	f06f 0306 	mvn.w	r3, #6
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
 8005314:	e04d      	b.n	80053b2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4619      	mov	r1, r3
 800531c:	482c      	ldr	r0, [pc, #176]	; (80053d0 <LSM303AGR_MAG_0_Probe+0x128>)
 800531e:	f7fd fb97 	bl	8002a50 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005322:	7a7b      	ldrb	r3, [r7, #9]
 8005324:	461a      	mov	r2, r3
 8005326:	7a3b      	ldrb	r3, [r7, #8]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800532c:	7abb      	ldrb	r3, [r7, #10]
 800532e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005330:	4313      	orrs	r3, r2
 8005332:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005334:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005336:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <LSM303AGR_MAG_0_Probe+0x130>)
 8005338:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <LSM303AGR_MAG_0_Probe+0x128>)
 800533a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800533c:	4b27      	ldr	r3, [pc, #156]	; (80053dc <LSM303AGR_MAG_0_Probe+0x134>)
 800533e:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <LSM303AGR_MAG_0_Probe+0x138>)
 8005340:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11e      	bne.n	8005386 <LSM303AGR_MAG_0_Probe+0xde>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d019      	beq.n	8005386 <LSM303AGR_MAG_0_Probe+0xde>
 8005352:	7abb      	ldrb	r3, [r7, #10]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d116      	bne.n	8005386 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <LSM303AGR_MAG_0_Probe+0x13c>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <LSM303AGR_MAG_0_Probe+0x140>)
 800535e:	3306      	adds	r3, #6
 8005360:	4922      	ldr	r1, [pc, #136]	; (80053ec <LSM303AGR_MAG_0_Probe+0x144>)
 8005362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005366:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <LSM303AGR_MAG_0_Probe+0x134>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <LSM303AGR_MAG_0_Probe+0x130>)
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	4610      	mov	r0, r2
 8005372:	4798      	blx	r3
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800537a:	f06f 0304 	mvn.w	r3, #4
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
 8005380:	e001      	b.n	8005386 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <LSM303AGR_MAG_0_Probe+0xf4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005396:	f06f 0304 	mvn.w	r3, #4
 800539a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <LSM303AGR_MAG_0_Probe+0x10a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ac:	f06f 0304 	mvn.w	r3, #4
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3748      	adds	r7, #72	; 0x48
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08001c35 	.word	0x08001c35
 80053c0:	08001cb1 	.word	0x08001cb1
 80053c4:	08001d65 	.word	0x08001d65
 80053c8:	08001d01 	.word	0x08001d01
 80053cc:	08001dc9 	.word	0x08001dc9
 80053d0:	200003a8 	.word	0x200003a8
 80053d4:	20000340 	.word	0x20000340
 80053d8:	20000678 	.word	0x20000678
 80053dc:	20000334 	.word	0x20000334
 80053e0:	2000006c 	.word	0x2000006c
 80053e4:	200000f8 	.word	0x200000f8
 80053e8:	20000310 	.word	0x20000310
 80053ec:	2000007c 	.word	0x2000007c

080053f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <HAL_Init+0x3c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a0b      	ldr	r2, [pc, #44]	; (800542c <HAL_Init+0x3c>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005404:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005406:	2003      	movs	r0, #3
 8005408:	f000 f9a4 	bl	8005754 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800540c:	2000      	movs	r0, #0
 800540e:	f000 f80f 	bl	8005430 <HAL_InitTick>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	71fb      	strb	r3, [r7, #7]
 800541c:	e001      	b.n	8005422 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800541e:	f7fc facc 	bl	80019ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005422:	79fb      	ldrb	r3, [r7, #7]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	58004000 	.word	0x58004000

08005430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <HAL_InitTick+0x6c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d023      	beq.n	800548c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8005444:	f002 fb76 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8005448:	4601      	mov	r1, r0
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <HAL_InitTick+0x6c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	fbb1 f3f3 	udiv	r3, r1, r3
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f9bb 	bl	80057d6 <HAL_SYSTICK_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d809      	bhi.n	8005480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800546c:	2200      	movs	r2, #0
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	f000 f979 	bl	800576a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_InitTick+0x70>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e007      	b.n	8005490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	e004      	b.n	8005490 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	e001      	b.n	8005490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000110 	.word	0x20000110
 80054a0:	2000010c 	.word	0x2000010c

080054a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_IncTick+0x1c>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_IncTick+0x20>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	4a03      	ldr	r2, [pc, #12]	; (80054c0 <HAL_IncTick+0x1c>)
 80054b4:	6013      	str	r3, [r2, #0]
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000684 	.word	0x20000684
 80054c4:	20000110 	.word	0x20000110

080054c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return uwTick;
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <HAL_GetTick+0x14>)
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000684 	.word	0x20000684

080054e0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_GetTickPrio+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000010c 	.word	0x2000010c

080054f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005514:	4013      	ands	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	60d3      	str	r3, [r2, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <__NVIC_GetPriorityGrouping+0x18>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	f003 0307 	and.w	r3, r3, #7
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db0b      	blt.n	8005586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	4907      	ldr	r1, [pc, #28]	; (8005594 <__NVIC_EnableIRQ+0x38>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2001      	movs	r0, #1
 800557e:	fa00 f202 	lsl.w	r2, r0, r2
 8005582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e100 	.word	0xe000e100

08005598 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db10      	blt.n	80055cc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	f003 021f 	and.w	r2, r3, #31
 80055b0:	4909      	ldr	r1, [pc, #36]	; (80055d8 <__NVIC_DisableIRQ+0x40>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	2001      	movs	r0, #1
 80055ba:	fa00 f202 	lsl.w	r2, r0, r2
 80055be:	3320      	adds	r3, #32
 80055c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80055c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80055c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	e000e100 	.word	0xe000e100

080055dc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	db0c      	blt.n	8005608 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	f003 021f 	and.w	r2, r3, #31
 80055f4:	4907      	ldr	r1, [pc, #28]	; (8005614 <__NVIC_SetPendingIRQ+0x38>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2001      	movs	r0, #1
 80055fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005602:	3340      	adds	r3, #64	; 0x40
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000e100 	.word	0xe000e100

08005618 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	db0c      	blt.n	8005644 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	4907      	ldr	r1, [pc, #28]	; (8005650 <__NVIC_ClearPendingIRQ+0x38>)
 8005632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2001      	movs	r0, #1
 800563a:	fa00 f202 	lsl.w	r2, r0, r2
 800563e:	3360      	adds	r3, #96	; 0x60
 8005640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	e000e100 	.word	0xe000e100

08005654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005664:	2b00      	cmp	r3, #0
 8005666:	db0a      	blt.n	800567e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	490c      	ldr	r1, [pc, #48]	; (80056a0 <__NVIC_SetPriority+0x4c>)
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	440b      	add	r3, r1
 8005678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800567c:	e00a      	b.n	8005694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4908      	ldr	r1, [pc, #32]	; (80056a4 <__NVIC_SetPriority+0x50>)
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	3b04      	subs	r3, #4
 800568c:	0112      	lsls	r2, r2, #4
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	440b      	add	r3, r1
 8005692:	761a      	strb	r2, [r3, #24]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000e100 	.word	0xe000e100
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f1c3 0307 	rsb	r3, r3, #7
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	bf28      	it	cs
 80056c6:	2304      	movcs	r3, #4
 80056c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d902      	bls.n	80056d8 <NVIC_EncodePriority+0x30>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3b03      	subs	r3, #3
 80056d6:	e000      	b.n	80056da <NVIC_EncodePriority+0x32>
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	401a      	ands	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056f0:	f04f 31ff 	mov.w	r1, #4294967295
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	43d9      	mvns	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005700:	4313      	orrs	r3, r2
         );
}
 8005702:	4618      	mov	r0, r3
 8005704:	3724      	adds	r7, #36	; 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005720:	d301      	bcc.n	8005726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005722:	2301      	movs	r3, #1
 8005724:	e00f      	b.n	8005746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <SysTick_Config+0x40>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3b01      	subs	r3, #1
 800572c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800572e:	210f      	movs	r1, #15
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	f7ff ff8e 	bl	8005654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <SysTick_Config+0x40>)
 800573a:	2200      	movs	r2, #0
 800573c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <SysTick_Config+0x40>)
 8005740:	2207      	movs	r2, #7
 8005742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	e000e010 	.word	0xe000e010

08005754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff fecb 	bl	80054f8 <__NVIC_SetPriorityGrouping>
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	4603      	mov	r3, r0
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005778:	f7ff fee2 	bl	8005540 <__NVIC_GetPriorityGrouping>
 800577c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	6978      	ldr	r0, [r7, #20]
 8005784:	f7ff ff90 	bl	80056a8 <NVIC_EncodePriority>
 8005788:	4602      	mov	r2, r0
 800578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578e:	4611      	mov	r1, r2
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ff5f 	bl	8005654 <__NVIC_SetPriority>
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	4603      	mov	r3, r0
 80057a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fed5 	bl	800555c <__NVIC_EnableIRQ>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	4603      	mov	r3, r0
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80057c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fee5 	bl	8005598 <__NVIC_DisableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ff96 	bl	8005710 <SysTick_Config>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80057f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff feed 	bl	80055dc <__NVIC_SetPendingIRQ>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fefd 	bl	8005618 <__NVIC_ClearPendingIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d005      	beq.n	800584a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	e047      	b.n	80058da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 020e 	bic.w	r2, r2, #14
 8005858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	f003 021c 	and.w	r2, r3, #28
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f202 	lsl.w	r2, r1, r2
 800588c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005896:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
    }
  }
  return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058f2:	e14c      	b.n	8005b8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2101      	movs	r1, #1
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	4013      	ands	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 813e 	beq.w	8005b88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d003      	beq.n	800591c <HAL_GPIO_Init+0x38>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b12      	cmp	r3, #18
 800591a:	d123      	bne.n	8005964 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	08da      	lsrs	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3208      	adds	r2, #8
 8005924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005928:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	220f      	movs	r2, #15
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	08da      	lsrs	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3208      	adds	r2, #8
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2203      	movs	r2, #3
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0203 	and.w	r2, r3, #3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d00b      	beq.n	80059b8 <HAL_GPIO_Init+0xd4>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d007      	beq.n	80059b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ac:	2b11      	cmp	r3, #17
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b12      	cmp	r3, #18
 80059b6:	d130      	bne.n	8005a1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	2203      	movs	r2, #3
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4013      	ands	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ee:	2201      	movs	r2, #1
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f003 0201 	and.w	r2, r3, #1
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	2203      	movs	r2, #3
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8098 	beq.w	8005b88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a58:	4a54      	ldr	r2, [pc, #336]	; (8005bac <HAL_GPIO_Init+0x2c8>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	220f      	movs	r2, #15
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a82:	d019      	beq.n	8005ab8 <HAL_GPIO_Init+0x1d4>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a4a      	ldr	r2, [pc, #296]	; (8005bb0 <HAL_GPIO_Init+0x2cc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_GPIO_Init+0x1d0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a49      	ldr	r2, [pc, #292]	; (8005bb4 <HAL_GPIO_Init+0x2d0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00d      	beq.n	8005ab0 <HAL_GPIO_Init+0x1cc>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a48      	ldr	r2, [pc, #288]	; (8005bb8 <HAL_GPIO_Init+0x2d4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <HAL_GPIO_Init+0x1c8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a47      	ldr	r2, [pc, #284]	; (8005bbc <HAL_GPIO_Init+0x2d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_GPIO_Init+0x1c4>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	e008      	b.n	8005aba <HAL_GPIO_Init+0x1d6>
 8005aa8:	2307      	movs	r3, #7
 8005aaa:	e006      	b.n	8005aba <HAL_GPIO_Init+0x1d6>
 8005aac:	2303      	movs	r3, #3
 8005aae:	e004      	b.n	8005aba <HAL_GPIO_Init+0x1d6>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e002      	b.n	8005aba <HAL_GPIO_Init+0x1d6>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <HAL_GPIO_Init+0x1d6>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	f002 0203 	and.w	r2, r2, #3
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	4093      	lsls	r3, r2
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aca:	4938      	ldr	r1, [pc, #224]	; (8005bac <HAL_GPIO_Init+0x2c8>)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005afe:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b2c:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b34:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4013      	ands	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b5e:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	43db      	mvns	r3, r3
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b82:	4a0f      	ldr	r2, [pc, #60]	; (8005bc0 <HAL_GPIO_Init+0x2dc>)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f aeab 	bne.w	80058f4 <HAL_GPIO_Init+0x10>
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	48000400 	.word	0x48000400
 8005bb4:	48000800 	.word	0x48000800
 8005bb8:	48000c00 	.word	0x48000c00
 8005bbc:	48001000 	.word	0x48001000
 8005bc0:	58000800 	.word	0x58000800

08005bc4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005bd2:	e0bb      	b.n	8005d4c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	4013      	ands	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80ae 	beq.w	8005d46 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005bea:	4a5f      	ldr	r2, [pc, #380]	; (8005d68 <HAL_GPIO_DeInit+0x1a4>)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	220f      	movs	r2, #15
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c12:	d019      	beq.n	8005c48 <HAL_GPIO_DeInit+0x84>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a55      	ldr	r2, [pc, #340]	; (8005d6c <HAL_GPIO_DeInit+0x1a8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_GPIO_DeInit+0x80>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a54      	ldr	r2, [pc, #336]	; (8005d70 <HAL_GPIO_DeInit+0x1ac>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00d      	beq.n	8005c40 <HAL_GPIO_DeInit+0x7c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a53      	ldr	r2, [pc, #332]	; (8005d74 <HAL_GPIO_DeInit+0x1b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <HAL_GPIO_DeInit+0x78>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a52      	ldr	r2, [pc, #328]	; (8005d78 <HAL_GPIO_DeInit+0x1b4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_GPIO_DeInit+0x74>
 8005c34:	2304      	movs	r3, #4
 8005c36:	e008      	b.n	8005c4a <HAL_GPIO_DeInit+0x86>
 8005c38:	2307      	movs	r3, #7
 8005c3a:	e006      	b.n	8005c4a <HAL_GPIO_DeInit+0x86>
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e004      	b.n	8005c4a <HAL_GPIO_DeInit+0x86>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e002      	b.n	8005c4a <HAL_GPIO_DeInit+0x86>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <HAL_GPIO_DeInit+0x86>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	f002 0203 	and.w	r2, r2, #3
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	4093      	lsls	r3, r2
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d136      	bne.n	8005cc8 <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	220f      	movs	r2, #15
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <HAL_GPIO_DeInit+0x1a4>)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	089b      	lsrs	r3, r3, #2
 8005c70:	3302      	adds	r3, #2
 8005c72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	483b      	ldr	r0, [pc, #236]	; (8005d68 <HAL_GPIO_DeInit+0x1a4>)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	400a      	ands	r2, r1
 8005c82:	3302      	adds	r3, #2
 8005c84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005c88:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005c8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	493a      	ldr	r1, [pc, #232]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005c9a:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005c9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	4935      	ldr	r1, [pc, #212]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005cac:	4b33      	ldr	r3, [pc, #204]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	4931      	ldr	r1, [pc, #196]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	492e      	ldr	r1, [pc, #184]	; (8005d7c <HAL_GPIO_DeInit+0x1b8>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	2103      	movs	r1, #3
 8005cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	08da      	lsrs	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3208      	adds	r2, #8
 8005ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	08d2      	lsrs	r2, r2, #3
 8005cfc:	4019      	ands	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3208      	adds	r2, #8
 8005d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	2103      	movs	r1, #3
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	2101      	movs	r1, #1
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	fa01 f303 	lsl.w	r3, r1, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	2103      	movs	r1, #3
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	401a      	ands	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f af3d 	bne.w	8005bd4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	48000400 	.word	0x48000400
 8005d70:	48000800 	.word	0x48000800
 8005d74:	48000c00 	.word	0x48000c00
 8005d78:	48001000 	.word	0x48001000
 8005d7c:	58000800 	.word	0x58000800

08005d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d90:	787b      	ldrb	r3, [r7, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d9c:	e002      	b.n	8005da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d9e:	887a      	ldrh	r2, [r7, #2]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005dce:	e002      	b.n	8005dd6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	619a      	str	r2, [r3, #24]
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d006      	beq.n	8005e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dfa:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f806 	bl	8005e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58000800 	.word	0x58000800

08005e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e081      	b.n	8005f40 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8a8 	bl	8005fa6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2224      	movs	r2, #36	; 0x24
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d107      	bne.n	8005ea4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	e006      	b.n	8005eb2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d104      	bne.n	8005ec4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	ea42 0103 	orr.w	r1, r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	021a      	lsls	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69d9      	ldr	r1, [r3, #28]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1a      	ldr	r2, [r3, #32]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e021      	b.n	8005f9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2224      	movs	r2, #36	; 0x24
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f821 	bl	8005fba <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	4608      	mov	r0, r1
 8005fda:	4611      	mov	r1, r2
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	817b      	strh	r3, [r7, #10]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	813b      	strh	r3, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	f040 80f9 	bne.w	80061ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_I2C_Mem_Write+0x34>
 8005ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0ed      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_I2C_Mem_Write+0x4e>
 800601a:	2302      	movs	r3, #2
 800601c:	e0e6      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006026:	f7ff fa4f 	bl	80054c8 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2319      	movs	r3, #25
 8006032:	2201      	movs	r2, #1
 8006034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fadd 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0d1      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2221      	movs	r2, #33	; 0x21
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006070:	88f8      	ldrh	r0, [r7, #6]
 8006072:	893a      	ldrh	r2, [r7, #8]
 8006074:	8979      	ldrh	r1, [r7, #10]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4603      	mov	r3, r0
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f9ed 	bl	8006460 <I2C_RequestMemoryWrite>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0a9      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d90e      	bls.n	80060c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8979      	ldrh	r1, [r7, #10]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fbbf 	bl	800683c <I2C_TransferConfig>
 80060be:	e00f      	b.n	80060e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	8979      	ldrh	r1, [r7, #10]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fbae 	bl	800683c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fac7 	bl	8006678 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e07b      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d034      	beq.n	8006198 <HAL_I2C_Mem_Write+0x1c8>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d130      	bne.n	8006198 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	2200      	movs	r2, #0
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fa59 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e04d      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2bff      	cmp	r3, #255	; 0xff
 8006158:	d90e      	bls.n	8006178 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	b2da      	uxtb	r2, r3
 8006166:	8979      	ldrh	r1, [r7, #10]
 8006168:	2300      	movs	r3, #0
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fb63 	bl	800683c <I2C_TransferConfig>
 8006176:	e00f      	b.n	8006198 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fb52 	bl	800683c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d19e      	bne.n	80060e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 faa6 	bl	80066f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e01a      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2220      	movs	r2, #32
 80061bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <HAL_I2C_Mem_Write+0x224>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	fe00e800 	.word	0xfe00e800

080061f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	817b      	strh	r3, [r7, #10]
 800620a:	460b      	mov	r3, r1
 800620c:	813b      	strh	r3, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b20      	cmp	r3, #32
 800621c:	f040 80fd 	bne.w	800641a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_I2C_Mem_Read+0x34>
 8006226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0f1      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Mem_Read+0x4e>
 8006242:	2302      	movs	r3, #2
 8006244:	e0ea      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800624e:	f7ff f93b 	bl	80054c8 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2319      	movs	r3, #25
 800625a:	2201      	movs	r2, #1
 800625c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f9c9 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0d5      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2222      	movs	r2, #34	; 0x22
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006298:	88f8      	ldrh	r0, [r7, #6]
 800629a:	893a      	ldrh	r2, [r7, #8]
 800629c:	8979      	ldrh	r1, [r7, #10]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	4603      	mov	r3, r0
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f92d 	bl	8006508 <I2C_RequestMemoryRead>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0ad      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2bff      	cmp	r3, #255	; 0xff
 80062c8:	d90e      	bls.n	80062e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	22ff      	movs	r2, #255	; 0xff
 80062ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	8979      	ldrh	r1, [r7, #10]
 80062d8:	4b52      	ldr	r3, [pc, #328]	; (8006424 <HAL_I2C_Mem_Read+0x22c>)
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 faab 	bl	800683c <I2C_TransferConfig>
 80062e6:	e00f      	b.n	8006308 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	8979      	ldrh	r1, [r7, #10]
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <HAL_I2C_Mem_Read+0x22c>)
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fa9a 	bl	800683c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2200      	movs	r2, #0
 8006310:	2104      	movs	r1, #4
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f970 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e07c      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d034      	beq.n	80063c8 <HAL_I2C_Mem_Read+0x1d0>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d130      	bne.n	80063c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f941 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e04d      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2bff      	cmp	r3, #255	; 0xff
 8006388:	d90e      	bls.n	80063a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	22ff      	movs	r2, #255	; 0xff
 800638e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	b2da      	uxtb	r2, r3
 8006396:	8979      	ldrh	r1, [r7, #10]
 8006398:	2300      	movs	r3, #0
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fa4b 	bl	800683c <I2C_TransferConfig>
 80063a6:	e00f      	b.n	80063c8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	8979      	ldrh	r1, [r7, #10]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fa3a 	bl	800683c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d19a      	bne.n	8006308 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f98e 	bl	80066f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e01a      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2220      	movs	r2, #32
 80063ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_I2C_Mem_Read+0x230>)
 80063fa:	400b      	ands	r3, r1
 80063fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	80002400 	.word	0x80002400
 8006428:	fe00e800 	.word	0xfe00e800

0800642c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643a:	b2db      	uxtb	r3, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	460b      	mov	r3, r1
 8006474:	813b      	strh	r3, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	8979      	ldrh	r1, [r7, #10]
 8006480:	4b20      	ldr	r3, [pc, #128]	; (8006504 <I2C_RequestMemoryWrite+0xa4>)
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f9d7 	bl	800683c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	69b9      	ldr	r1, [r7, #24]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f8f0 	bl	8006678 <I2C_WaitOnTXISFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e02c      	b.n	80064fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d105      	bne.n	80064b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064a8:	893b      	ldrh	r3, [r7, #8]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	629a      	str	r2, [r3, #40]	; 0x28
 80064b2:	e015      	b.n	80064e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b4:	893b      	ldrh	r3, [r7, #8]
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	69b9      	ldr	r1, [r7, #24]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f8d6 	bl	8006678 <I2C_WaitOnTXISFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e012      	b.n	80064fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2200      	movs	r2, #0
 80064e8:	2180      	movs	r1, #128	; 0x80
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f884 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	80002000 	.word	0x80002000

08006508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	4603      	mov	r3, r0
 8006518:	817b      	strh	r3, [r7, #10]
 800651a:	460b      	mov	r3, r1
 800651c:	813b      	strh	r3, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	8979      	ldrh	r1, [r7, #10]
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <I2C_RequestMemoryRead+0xa4>)
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f984 	bl	800683c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	69b9      	ldr	r1, [r7, #24]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f89d 	bl	8006678 <I2C_WaitOnTXISFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e02c      	b.n	80065a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d105      	bne.n	800655a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800654e:	893b      	ldrh	r3, [r7, #8]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
 8006558:	e015      	b.n	8006586 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	b29b      	uxth	r3, r3
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f883 	bl	8006678 <I2C_WaitOnTXISFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e012      	b.n	80065a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2200      	movs	r2, #0
 800658e:	2140      	movs	r1, #64	; 0x40
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f831 	bl	80065f8 <I2C_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	80002000 	.word	0x80002000

080065b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d103      	bne.n	80065ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d007      	beq.n	80065ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	619a      	str	r2, [r3, #24]
  }
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006608:	e022      	b.n	8006650 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d01e      	beq.n	8006650 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fe ff59 	bl	80054c8 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e00f      	b.n	8006670 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4013      	ands	r3, r2
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	429a      	cmp	r2, r3
 800666c:	d0cd      	beq.n	800660a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006684:	e02c      	b.n	80066e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f870 	bl	8006770 <I2C_IsAcknowledgeFailed>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e02a      	b.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d01e      	beq.n	80066e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fe ff11 	bl	80054c8 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d113      	bne.n	80066e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e007      	b.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d1cb      	bne.n	8006686 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006704:	e028      	b.n	8006758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f830 	bl	8006770 <I2C_IsAcknowledgeFailed>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e026      	b.n	8006768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fe fed5 	bl	80054c8 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d113      	bne.n	8006758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e007      	b.n	8006768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b20      	cmp	r3, #32
 8006764:	d1cf      	bne.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b10      	cmp	r3, #16
 8006788:	d151      	bne.n	800682e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800678a:	e022      	b.n	80067d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d01e      	beq.n	80067d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006794:	f7fe fe98 	bl	80054c8 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <I2C_IsAcknowledgeFailed+0x3a>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d113      	bne.n	80067d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f043 0220 	orr.w	r2, r3, #32
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e02e      	b.n	8006830 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d1d5      	bne.n	800678c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2210      	movs	r2, #16
 80067e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2220      	movs	r2, #32
 80067ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fedd 	bl	80065b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <I2C_IsAcknowledgeFailed+0xc8>)
 8006802:	400b      	ands	r3, r1
 8006804:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	f043 0204 	orr.w	r2, r3, #4
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	fe00e800 	.word	0xfe00e800

0800683c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	817b      	strh	r3, [r7, #10]
 800684a:	4613      	mov	r3, r2
 800684c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	0d5b      	lsrs	r3, r3, #21
 8006858:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <I2C_TransferConfig+0x58>)
 800685e:	430b      	orrs	r3, r1
 8006860:	43db      	mvns	r3, r3
 8006862:	ea02 0103 	and.w	r1, r2, r3
 8006866:	897b      	ldrh	r3, [r7, #10]
 8006868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800686c:	7a7b      	ldrb	r3, [r7, #9]
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	431a      	orrs	r2, r3
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	431a      	orrs	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	03ff63ff 	.word	0x03ff63ff

08006898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d138      	bne.n	8006920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e032      	b.n	8006922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b20      	cmp	r3, #32
 8006942:	d139      	bne.n	80069b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800694e:	2302      	movs	r3, #2
 8006950:	e033      	b.n	80069ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2224      	movs	r2, #36	; 0x24
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d6:	6013      	str	r3, [r2, #0]
}
 80069d8:	bf00      	nop
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	58000400 	.word	0x58000400

080069e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	58000400 	.word	0x58000400

08006a04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d101      	bne.n	8006a1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <LL_RCC_HSE_EnableBypass>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_HSE_DisableBypass>:
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a58:	6013      	str	r3, [r2, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <LL_RCC_HSE_Enable>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <LL_RCC_HSE_Disable>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
}
 8006a96:	bf00      	nop
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <LL_RCC_HSE_IsReady>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab2:	d101      	bne.n	8006ab8 <LL_RCC_HSE_IsReady+0x18>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <LL_RCC_HSE_IsReady+0x1a>
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <LL_RCC_HSI_Enable>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_RCC_HSI_Disable>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af4:	6013      	str	r3, [r2, #0]
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_RCC_HSI_IsReady>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d101      	bne.n	8006b18 <LL_RCC_HSI_IsReady+0x18>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <LL_RCC_HSI_IsReady+0x1a>
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	061b      	lsls	r3, r3, #24
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	604b      	str	r3, [r1, #4]
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_HSI48_Enable>:
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006b66:	bf00      	nop
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <LL_RCC_HSI48_Disable>:
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_HSI48_IsReady>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d101      	bne.n	8006baa <LL_RCC_HSI48_IsReady+0x18>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <LL_RCC_HSI48_IsReady+0x1a>
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <LL_RCC_LSE_Enable>:
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_RCC_LSE_Disable>:
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <LL_RCC_LSE_EnableBypass>:
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c0a:	f043 0304 	orr.w	r3, r3, #4
 8006c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c12:	bf00      	nop
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <LL_RCC_LSE_DisableBypass>:
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <LL_RCC_LSE_IsReady>:
{
 8006c3e:	b480      	push	{r7}
 8006c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d101      	bne.n	8006c56 <LL_RCC_LSE_IsReady+0x18>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <LL_RCC_LSE_IsReady+0x1a>
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <LL_RCC_LSI1_Enable>:
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c7a:	bf00      	nop
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <LL_RCC_LSI1_Disable>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c9c:	bf00      	nop
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <LL_RCC_LSI1_IsReady>:
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d101      	bne.n	8006cbe <LL_RCC_LSI1_IsReady+0x18>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <LL_RCC_LSI1_IsReady+0x1a>
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <LL_RCC_LSI2_Enable>:
{
 8006cca:	b480      	push	{r7}
 8006ccc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cda:	f043 0304 	orr.w	r3, r3, #4
 8006cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ce2:	bf00      	nop
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <LL_RCC_LSI2_Disable>:
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <LL_RCC_LSI2_IsReady>:
{
 8006d0e:	b480      	push	{r7}
 8006d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d101      	bne.n	8006d26 <LL_RCC_LSI2_IsReady+0x18>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <LL_RCC_LSI2_IsReady+0x1a>
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_LSI2_SetTrimming>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_RCC_MSI_Enable>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_RCC_MSI_Disable>:
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	6013      	str	r3, [r2, #0]
}
 8006d92:	bf00      	nop
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_MSI_IsReady>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d101      	bne.n	8006db2 <LL_RCC_MSI_IsReady+0x16>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <LL_RCC_MSI_IsReady+0x18>
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_RCC_MSI_SetRange>:
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	600b      	str	r3, [r1, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_MSI_GetRange>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2bb0      	cmp	r3, #176	; 0xb0
 8006dfc:	d901      	bls.n	8006e02 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006dfe:	23b0      	movs	r3, #176	; 0xb0
 8006e00:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006e02:	687b      	ldr	r3, [r7, #4]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	604b      	str	r3, [r1, #4]
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_SetSysClkSource>:
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 0203 	bic.w	r2, r3, #3
 8006e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_RCC_GetSysClkSource>:
{
 8006e62:	b480      	push	{r7}
 8006e64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 030c 	and.w	r3, r3, #12
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_SetAHBPrescaler>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <LL_RCC_SetAHB4Prescaler>:
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ede:	f023 020f 	bic.w	r2, r3, #15
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_RCC_SetAPB1Prescaler>:
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	608b      	str	r3, [r1, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_RCC_SetAPB2Prescaler>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	608b      	str	r3, [r1, #8]
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <LL_RCC_GetAHBPrescaler>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <LL_RCC_GetAHB4Prescaler>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <LL_RCC_GetAPB1Prescaler>:
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_GetAPB2Prescaler>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fe0:	6013      	str	r3, [r2, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ffe:	d101      	bne.n	8007004 <LL_RCC_PLL_IsReady+0x18>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <LL_RCC_PLL_IsReady+0x1a>
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007020:	4618      	mov	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800702a:	b480      	push	{r7}
 800702c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800705a:	b480      	push	{r7}
 800705c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800705e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0303 	and.w	r3, r3, #3
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007072:	b480      	push	{r7}
 8007074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	d101      	bne.n	800708a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007096:	b480      	push	{r7}
 8007098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800709a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070aa:	d101      	bne.n	80070b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80070c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d0:	d101      	bne.n	80070d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80070e2:	b480      	push	{r7}
 80070e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80070e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070f4:	d101      	bne.n	80070fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800710a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007118:	d101      	bne.n	800711e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800712c:	b590      	push	{r4, r7, lr}
 800712e:	b08b      	sub	sp, #44	; 0x2c
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e34b      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 808f 	beq.w	800726a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800714c:	f7ff fe89 	bl	8006e62 <LL_RCC_GetSysClkSource>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007152:	f7ff ff82 	bl	800705a <LL_RCC_PLL_GetMainSource>
 8007156:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_RCC_OscConfig+0x3e>
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2b0c      	cmp	r3, #12
 8007162:	d149      	bne.n	80071f8 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d146      	bne.n	80071f8 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800716a:	f7ff fe17 	bl	8006d9c <LL_RCC_MSI_IsReady>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_RCC_OscConfig+0x54>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e32a      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007184:	f7ff fe2f 	bl	8006de6 <LL_RCC_MSI_GetRange>
 8007188:	4603      	mov	r3, r0
 800718a:	429c      	cmp	r4, r3
 800718c:	d914      	bls.n	80071b8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fd0e 	bl	8007bb4 <RCC_SetFlashLatencyFromMSIRange>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e319      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fe09 	bl	8006dbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fe2d 	bl	8006e10 <LL_RCC_MSI_SetCalibTrimming>
 80071b6:	e013      	b.n	80071e0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fdfe 	bl	8006dbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fe22 	bl	8006e10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fcef 	bl	8007bb4 <RCC_SetFlashLatencyFromMSIRange>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e2fa      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80071e0:	f7fa feca 	bl	8001f78 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80071e4:	4bb4      	ldr	r3, [pc, #720]	; (80074b8 <HAL_RCC_OscConfig+0x38c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe f921 	bl	8005430 <HAL_InitTick>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d039      	beq.n	8007268 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e2ee      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007200:	f7ff fdae 	bl	8006d60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007204:	f7fe f960 	bl	80054c8 <HAL_GetTick>
 8007208:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800720c:	f7fe f95c 	bl	80054c8 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e2db      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800721e:	f7ff fdbd 	bl	8006d9c <LL_RCC_MSI_IsReady>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f1      	beq.n	800720c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fdc6 	bl	8006dbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fdea 	bl	8006e10 <LL_RCC_MSI_SetCalibTrimming>
 800723c:	e015      	b.n	800726a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800723e:	f7ff fd9e 	bl	8006d7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007242:	f7fe f941 	bl	80054c8 <HAL_GetTick>
 8007246:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800724a:	f7fe f93d 	bl	80054c8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e2bc      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800725c:	f7ff fd9e 	bl	8006d9c <LL_RCC_MSI_IsReady>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f1      	bne.n	800724a <HAL_RCC_OscConfig+0x11e>
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d05a      	beq.n	800732c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007276:	f7ff fdf4 	bl	8006e62 <LL_RCC_GetSysClkSource>
 800727a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800727c:	f7ff feed 	bl	800705a <LL_RCC_PLL_GetMainSource>
 8007280:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d005      	beq.n	8007294 <HAL_RCC_OscConfig+0x168>
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b0c      	cmp	r3, #12
 800728c:	d10d      	bne.n	80072aa <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d10a      	bne.n	80072aa <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007294:	f7ff fc04 	bl	8006aa0 <LL_RCC_HSE_IsReady>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d045      	beq.n	800732a <HAL_RCC_OscConfig+0x1fe>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d141      	bne.n	800732a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e295      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b2:	d102      	bne.n	80072ba <HAL_RCC_OscConfig+0x18e>
 80072b4:	f7ff fbd6 	bl	8006a64 <LL_RCC_HSE_Enable>
 80072b8:	e00d      	b.n	80072d6 <HAL_RCC_OscConfig+0x1aa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072c2:	d104      	bne.n	80072ce <HAL_RCC_OscConfig+0x1a2>
 80072c4:	f7ff fbb0 	bl	8006a28 <LL_RCC_HSE_EnableBypass>
 80072c8:	f7ff fbcc 	bl	8006a64 <LL_RCC_HSE_Enable>
 80072cc:	e003      	b.n	80072d6 <HAL_RCC_OscConfig+0x1aa>
 80072ce:	f7ff fbd8 	bl	8006a82 <LL_RCC_HSE_Disable>
 80072d2:	f7ff fbb8 	bl	8006a46 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d012      	beq.n	8007304 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072de:	f7fe f8f3 	bl	80054c8 <HAL_GetTick>
 80072e2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072e6:	f7fe f8ef 	bl	80054c8 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b64      	cmp	r3, #100	; 0x64
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e26e      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80072f8:	f7ff fbd2 	bl	8006aa0 <LL_RCC_HSE_IsReady>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f1      	beq.n	80072e6 <HAL_RCC_OscConfig+0x1ba>
 8007302:	e013      	b.n	800732c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fe f8e0 	bl	80054c8 <HAL_GetTick>
 8007308:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800730c:	f7fe f8dc 	bl	80054c8 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b64      	cmp	r3, #100	; 0x64
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e25b      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800731e:	f7ff fbbf 	bl	8006aa0 <LL_RCC_HSE_IsReady>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f1      	bne.n	800730c <HAL_RCC_OscConfig+0x1e0>
 8007328:	e000      	b.n	800732c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800732a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d051      	beq.n	80073dc <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007338:	f7ff fd93 	bl	8006e62 <LL_RCC_GetSysClkSource>
 800733c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800733e:	f7ff fe8c 	bl	800705a <LL_RCC_PLL_GetMainSource>
 8007342:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b04      	cmp	r3, #4
 8007348:	d005      	beq.n	8007356 <HAL_RCC_OscConfig+0x22a>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b0c      	cmp	r3, #12
 800734e:	d113      	bne.n	8007378 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d110      	bne.n	8007378 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007356:	f7ff fbd3 	bl	8006b00 <LL_RCC_HSI_IsReady>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_OscConfig+0x240>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e234      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fbd7 	bl	8006b24 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007376:	e031      	b.n	80073dc <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d019      	beq.n	80073b4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007380:	f7ff fba0 	bl	8006ac4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fe f8a0 	bl	80054c8 <HAL_GetTick>
 8007388:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800738c:	f7fe f89c 	bl	80054c8 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e21b      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800739e:	f7ff fbaf 	bl	8006b00 <LL_RCC_HSI_IsReady>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f1      	beq.n	800738c <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fbb9 	bl	8006b24 <LL_RCC_HSI_SetCalibTrimming>
 80073b2:	e013      	b.n	80073dc <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073b4:	f7ff fb95 	bl	8006ae2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fe f886 	bl	80054c8 <HAL_GetTick>
 80073bc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073c0:	f7fe f882 	bl	80054c8 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e201      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80073d2:	f7ff fb95 	bl	8006b00 <LL_RCC_HSI_IsReady>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f1      	bne.n	80073c0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80a2 	beq.w	800753a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d075      	beq.n	80074ea <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d046      	beq.n	8007498 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800740a:	f7ff fc4c 	bl	8006ca6 <LL_RCC_LSI1_IsReady>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d113      	bne.n	800743c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007414:	f7ff fc25 	bl	8006c62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007418:	f7fe f856 	bl	80054c8 <HAL_GetTick>
 800741c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007420:	f7fe f852 	bl	80054c8 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e1d1      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007432:	f7ff fc38 	bl	8006ca6 <LL_RCC_LSI1_IsReady>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f1      	beq.n	8007420 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800743c:	f7ff fc45 	bl	8006cca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fe f842 	bl	80054c8 <HAL_GetTick>
 8007444:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007448:	f7fe f83e 	bl	80054c8 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e1bd      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800745a:	f7ff fc58 	bl	8006d0e <LL_RCC_LSI2_IsReady>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f1      	beq.n	8007448 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fc62 	bl	8006d32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800746e:	f7ff fc09 	bl	8006c84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fe f829 	bl	80054c8 <HAL_GetTick>
 8007476:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800747a:	f7fe f825 	bl	80054c8 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e1a4      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800748c:	f7ff fc0b 	bl	8006ca6 <LL_RCC_LSI1_IsReady>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f1      	bne.n	800747a <HAL_RCC_OscConfig+0x34e>
 8007496:	e050      	b.n	800753a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007498:	f7ff fbe3 	bl	8006c62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749c:	f7fe f814 	bl	80054c8 <HAL_GetTick>
 80074a0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80074a2:	e00b      	b.n	80074bc <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80074a4:	f7fe f810 	bl	80054c8 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d904      	bls.n	80074bc <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e18f      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
 80074b6:	bf00      	nop
 80074b8:	2000010c 	.word	0x2000010c
        while (LL_RCC_LSI1_IsReady() == 0U)
 80074bc:	f7ff fbf3 	bl	8006ca6 <LL_RCC_LSI1_IsReady>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80074c6:	f7ff fc11 	bl	8006cec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80074cc:	f7fd fffc 	bl	80054c8 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e17b      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80074de:	f7ff fc16 	bl	8006d0e <LL_RCC_LSI2_IsReady>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f1      	bne.n	80074cc <HAL_RCC_OscConfig+0x3a0>
 80074e8:	e027      	b.n	800753a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80074ea:	f7ff fbff 	bl	8006cec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ee:	f7fd ffeb 	bl	80054c8 <HAL_GetTick>
 80074f2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80074f6:	f7fd ffe7 	bl	80054c8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b03      	cmp	r3, #3
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e166      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007508:	f7ff fc01 	bl	8006d0e <LL_RCC_LSI2_IsReady>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f1      	bne.n	80074f6 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007512:	f7ff fbb7 	bl	8006c84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007516:	f7fd ffd7 	bl	80054c8 <HAL_GetTick>
 800751a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800751e:	f7fd ffd3 	bl	80054c8 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e152      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007530:	f7ff fbb9 	bl	8006ca6 <LL_RCC_LSI1_IsReady>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f1      	bne.n	800751e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d05b      	beq.n	80075fe <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007546:	4ba6      	ldr	r3, [pc, #664]	; (80077e0 <HAL_RCC_OscConfig+0x6b4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d114      	bne.n	800757c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007552:	f7ff fa39 	bl	80069c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007556:	f7fd ffb7 	bl	80054c8 <HAL_GetTick>
 800755a:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fd ffb3 	bl	80054c8 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e132      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007570:	4b9b      	ldr	r3, [pc, #620]	; (80077e0 <HAL_RCC_OscConfig+0x6b4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d102      	bne.n	800758a <HAL_RCC_OscConfig+0x45e>
 8007584:	f7ff fb17 	bl	8006bb6 <LL_RCC_LSE_Enable>
 8007588:	e00c      	b.n	80075a4 <HAL_RCC_OscConfig+0x478>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d104      	bne.n	800759c <HAL_RCC_OscConfig+0x470>
 8007592:	f7ff fb32 	bl	8006bfa <LL_RCC_LSE_EnableBypass>
 8007596:	f7ff fb0e 	bl	8006bb6 <LL_RCC_LSE_Enable>
 800759a:	e003      	b.n	80075a4 <HAL_RCC_OscConfig+0x478>
 800759c:	f7ff fb1c 	bl	8006bd8 <LL_RCC_LSE_Disable>
 80075a0:	f7ff fb3c 	bl	8006c1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d014      	beq.n	80075d6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ac:	f7fd ff8c 	bl	80054c8 <HAL_GetTick>
 80075b0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80075b2:	e00a      	b.n	80075ca <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b4:	f7fd ff88 	bl	80054c8 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e105      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80075ca:	f7ff fb38 	bl	8006c3e <LL_RCC_LSE_IsReady>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0ef      	beq.n	80075b4 <HAL_RCC_OscConfig+0x488>
 80075d4:	e013      	b.n	80075fe <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d6:	f7fd ff77 	bl	80054c8 <HAL_GetTick>
 80075da:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80075dc:	e00a      	b.n	80075f4 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075de:	f7fd ff73 	bl	80054c8 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e0f0      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80075f4:	f7ff fb23 	bl	8006c3e <LL_RCC_LSE_IsReady>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1ef      	bne.n	80075de <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02c      	beq.n	8007664 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d014      	beq.n	800763c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007612:	f7ff fa9c 	bl	8006b4e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007616:	f7fd ff57 	bl	80054c8 <HAL_GetTick>
 800761a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800761e:	f7fd ff53 	bl	80054c8 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e0d2      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007630:	f7ff faaf 	bl	8006b92 <LL_RCC_HSI48_IsReady>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0f1      	beq.n	800761e <HAL_RCC_OscConfig+0x4f2>
 800763a:	e013      	b.n	8007664 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800763c:	f7ff fa98 	bl	8006b70 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007640:	f7fd ff42 	bl	80054c8 <HAL_GetTick>
 8007644:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007648:	f7fd ff3e 	bl	80054c8 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e0bd      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800765a:	f7ff fa9a 	bl	8006b92 <LL_RCC_HSI48_IsReady>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f1      	bne.n	8007648 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80b3 	beq.w	80077d4 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800766e:	f7ff fbf8 	bl	8006e62 <LL_RCC_GetSysClkSource>
 8007672:	4603      	mov	r3, r0
 8007674:	2b0c      	cmp	r3, #12
 8007676:	d076      	beq.n	8007766 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	2b02      	cmp	r3, #2
 800767e:	d14b      	bne.n	8007718 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007680:	f7ff fca5 	bl	8006fce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fd ff20 	bl	80054c8 <HAL_GetTick>
 8007688:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768c:	f7fd ff1c 	bl	80054c8 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e09b      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800769e:	f7ff fca5 	bl	8006fec <LL_RCC_PLL_IsReady>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f1      	bne.n	800768c <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	4b4d      	ldr	r3, [pc, #308]	; (80077e4 <HAL_RCC_OscConfig+0x6b8>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ba:	4311      	orrs	r1, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076c0:	0212      	lsls	r2, r2, #8
 80076c2:	4311      	orrs	r1, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076c8:	4311      	orrs	r1, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076ce:	4311      	orrs	r1, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80076d4:	430a      	orrs	r2, r1
 80076d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076da:	4313      	orrs	r3, r2
 80076dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076de:	f7ff fc67 	bl	8006fb0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f2:	f7fd fee9 	bl	80054c8 <HAL_GetTick>
 80076f6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076fa:	f7fd fee5 	bl	80054c8 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e064      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800770c:	f7ff fc6e 	bl	8006fec <LL_RCC_PLL_IsReady>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f1      	beq.n	80076fa <HAL_RCC_OscConfig+0x5ce>
 8007716:	e05d      	b.n	80077d4 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007718:	f7ff fc59 	bl	8006fce <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800771c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800772c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007736:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800773a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fd fec2 	bl	80054c8 <HAL_GetTick>
 8007744:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007748:	f7fd febe 	bl	80054c8 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e03d      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800775a:	f7ff fc47 	bl	8006fec <LL_RCC_PLL_IsReady>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f1      	bne.n	8007748 <HAL_RCC_OscConfig+0x61c>
 8007764:	e036      	b.n	80077d4 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e031      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8007772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 0203 	and.w	r2, r3, #3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	429a      	cmp	r2, r3
 8007786:	d123      	bne.n	80077d0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007792:	429a      	cmp	r2, r3
 8007794:	d11c      	bne.n	80077d0 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d114      	bne.n	80077d0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d10d      	bne.n	80077d0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077be:	429a      	cmp	r2, r3
 80077c0:	d106      	bne.n	80077d0 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d001      	beq.n	80077d4 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	372c      	adds	r7, #44	; 0x2c
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd90      	pop	{r4, r7, pc}
 80077de:	bf00      	nop
 80077e0:	58000400 	.word	0x58000400
 80077e4:	11c1808c 	.word	0x11c1808c

080077e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e12a      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077fc:	4b97      	ldr	r3, [pc, #604]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d91b      	bls.n	8007842 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b94      	ldr	r3, [pc, #592]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 0207 	bic.w	r2, r3, #7
 8007812:	4992      	ldr	r1, [pc, #584]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781a:	f7fd fe55 	bl	80054c8 <HAL_GetTick>
 800781e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007820:	e008      	b.n	8007834 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007822:	f7fd fe51 	bl	80054c8 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e10e      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007834:	4b89      	ldr	r3, [pc, #548]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d1ef      	bne.n	8007822 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fb11 	bl	8006e7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007858:	f7fd fe36 	bl	80054c8 <HAL_GetTick>
 800785c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007860:	f7fd fe32 	bl	80054c8 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e0ef      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007872:	f7ff fbfe 	bl	8007072 <LL_RCC_IsActiveFlag_HPRE>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0f1      	beq.n	8007860 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d016      	beq.n	80078b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fb08 	bl	8006ea2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007892:	f7fd fe19 	bl	80054c8 <HAL_GetTick>
 8007896:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800789a:	f7fd fe15 	bl	80054c8 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e0d2      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80078ac:	f7ff fbf3 	bl	8007096 <LL_RCC_IsActiveFlag_C2HPRE>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f1      	beq.n	800789a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fb01 	bl	8006ece <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80078cc:	f7fd fdfc 	bl	80054c8 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80078d4:	f7fd fdf8 	bl	80054c8 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e0b5      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80078e6:	f7ff fbe9 	bl	80070bc <LL_RCC_IsActiveFlag_SHDHPRE>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f1      	beq.n	80078d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d016      	beq.n	800792a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fafb 	bl	8006efc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007906:	f7fd fddf 	bl	80054c8 <HAL_GetTick>
 800790a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800790c:	e008      	b.n	8007920 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800790e:	f7fd fddb 	bl	80054c8 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e098      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007920:	f7ff fbdf 	bl	80070e2 <LL_RCC_IsActiveFlag_PPRE1>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0f1      	beq.n	800790e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff faf1 	bl	8006f24 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007942:	f7fd fdc1 	bl	80054c8 <HAL_GetTick>
 8007946:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007948:	e008      	b.n	800795c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800794a:	f7fd fdbd 	bl	80054c8 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e07a      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800795c:	f7ff fbd3 	bl	8007106 <LL_RCC_IsActiveFlag_PPRE2>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f1      	beq.n	800794a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d043      	beq.n	80079fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d106      	bne.n	8007988 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800797a:	f7ff f891 	bl	8006aa0 <LL_RCC_HSE_IsReady>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11e      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e064      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d106      	bne.n	800799e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007990:	f7ff fb2c 	bl	8006fec <LL_RCC_PLL_IsReady>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d113      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e059      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80079a6:	f7ff f9f9 	bl	8006d9c <LL_RCC_MSI_IsReady>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e04e      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80079b4:	f7ff f8a4 	bl	8006b00 <LL_RCC_HSI_IsReady>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e047      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fa37 	bl	8006e3a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079cc:	f7fd fd7c 	bl	80054c8 <HAL_GetTick>
 80079d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d4:	f7fd fd78 	bl	80054c8 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e033      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ea:	f7ff fa3a 	bl	8006e62 <LL_RCC_GetSysClkSource>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d1ec      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079fa:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d21b      	bcs.n	8007a40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a08:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f023 0207 	bic.w	r2, r3, #7
 8007a10:	4912      	ldr	r1, [pc, #72]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a18:	f7fd fd56 	bl	80054c8 <HAL_GetTick>
 8007a1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a20:	f7fd fd52 	bl	80054c8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e00f      	b.n	8007a52 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <HAL_RCC_ClockConfig+0x274>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d1ef      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007a40:	f7fa fa9a 	bl	8001f78 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007a44:	f7fd fd4c 	bl	80054e0 <HAL_GetTickPrio>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd fcf0 	bl	8005430 <HAL_InitTick>
 8007a50:	4603      	mov	r3, r0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	58004000 	.word	0x58004000

08007a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a66:	f7ff f9fc 	bl	8006e62 <LL_RCC_GetSysClkSource>
 8007a6a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a72:	f7ff f9b8 	bl	8006de6 <LL_RCC_MSI_GetRange>
 8007a76:	4603      	mov	r3, r0
 8007a78:	091b      	lsrs	r3, r3, #4
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	e04a      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d102      	bne.n	8007a94 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a8e:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e044      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d10a      	bne.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007a9a:	f7fe ffb3 	bl	8006a04 <LL_RCC_HSE_IsEnabledDiv2>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d102      	bne.n	8007aaa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007aa4:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e039      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007aaa:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e036      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007ab0:	f7ff fad3 	bl	800705a <LL_RCC_PLL_GetMainSource>
 8007ab4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x62>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d003      	beq.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x68>
 8007ac0:	e00d      	b.n	8007ade <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007ac2:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ac4:	60bb      	str	r3, [r7, #8]
        break;
 8007ac6:	e015      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007ac8:	f7fe ff9c 	bl	8006a04 <LL_RCC_HSE_IsEnabledDiv2>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007ad2:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ad4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007ad6:	e00d      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8007ad8:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ada:	60bb      	str	r3, [r7, #8]
        break;
 8007adc:	e00a      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ade:	f7ff f982 	bl	8006de6 <LL_RCC_MSI_GetRange>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	091b      	lsrs	r3, r3, #4
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	4a0f      	ldr	r2, [pc, #60]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af0:	60bb      	str	r3, [r7, #8]
        break;
 8007af2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007af4:	f7ff fa8c 	bl	8007010 <LL_RCC_PLL_GetN>
 8007af8:	4602      	mov	r2, r0
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	fb03 f402 	mul.w	r4, r3, r2
 8007b00:	f7ff fa9f 	bl	8007042 <LL_RCC_PLL_GetDivider>
 8007b04:	4603      	mov	r3, r0
 8007b06:	091b      	lsrs	r3, r3, #4
 8007b08:	3301      	adds	r3, #1
 8007b0a:	fbb4 f4f3 	udiv	r4, r4, r3
 8007b0e:	f7ff fa8c 	bl	800702a <LL_RCC_PLL_GetR>
 8007b12:	4603      	mov	r3, r0
 8007b14:	0f5b      	lsrs	r3, r3, #29
 8007b16:	3301      	adds	r3, #1
 8007b18:	fbb4 f3f3 	udiv	r3, r4, r3
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}
 8007b28:	0800dc90 	.word	0x0800dc90
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	01e84800 	.word	0x01e84800

08007b34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b34:	b598      	push	{r3, r4, r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007b38:	f7ff ff92 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	f7ff fa05 	bl	8006f4c <LL_RCC_GetAHBPrescaler>
 8007b42:	4603      	mov	r3, r0
 8007b44:	091b      	lsrs	r3, r3, #4
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	4a03      	ldr	r2, [pc, #12]	; (8007b58 <HAL_RCC_GetHCLKFreq+0x24>)
 8007b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	bd98      	pop	{r3, r4, r7, pc}
 8007b58:	0800dc30 	.word	0x0800dc30

08007b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b5c:	b598      	push	{r3, r4, r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007b60:	f7ff ffe8 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b64:	4604      	mov	r4, r0
 8007b66:	f7ff fa0b 	bl	8006f80 <LL_RCC_GetAPB1Prescaler>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd98      	pop	{r3, r4, r7, pc}
 8007b84:	0800dc70 	.word	0x0800dc70

08007b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b88:	b598      	push	{r3, r4, r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007b8c:	f7ff ffd2 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b90:	4604      	mov	r4, r0
 8007b92:	f7ff fa01 	bl	8006f98 <LL_RCC_GetAPB2Prescaler>
 8007b96:	4603      	mov	r3, r0
 8007b98:	0adb      	lsrs	r3, r3, #11
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	bd98      	pop	{r3, r4, r7, pc}
 8007bb0:	0800dc70 	.word	0x0800dc70

08007bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2bb0      	cmp	r3, #176	; 0xb0
 8007bc0:	d903      	bls.n	8007bca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	e007      	b.n	8007bda <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	091b      	lsrs	r3, r3, #4
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	4a11      	ldr	r2, [pc, #68]	; (8007c18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007bda:	f7ff f9c3 	bl	8006f64 <LL_RCC_GetAHB4Prescaler>
 8007bde:	4603      	mov	r3, r0
 8007be0:	091b      	lsrs	r3, r3, #4
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfc:	0c9c      	lsrs	r4, r3, #18
 8007bfe:	f7fe fef3 	bl	80069e8 <HAL_PWREx_GetVoltageRange>
 8007c02:	4603      	mov	r3, r0
 8007c04:	4619      	mov	r1, r3
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 f80c 	bl	8007c24 <RCC_SetFlashLatency>
 8007c0c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd90      	pop	{r4, r7, pc}
 8007c16:	bf00      	nop
 8007c18:	0800dc90 	.word	0x0800dc90
 8007c1c:	0800dc30 	.word	0x0800dc30
 8007c20:	431bde83 	.word	0x431bde83

08007c24 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b093      	sub	sp, #76	; 0x4c
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007c2e:	4b39      	ldr	r3, [pc, #228]	; (8007d14 <RCC_SetFlashLatency+0xf0>)
 8007c30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007c3a:	4a37      	ldr	r2, [pc, #220]	; (8007d18 <RCC_SetFlashLatency+0xf4>)
 8007c3c:	f107 031c 	add.w	r3, r7, #28
 8007c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007c46:	4b35      	ldr	r3, [pc, #212]	; (8007d1c <RCC_SetFlashLatency+0xf8>)
 8007c48:	f107 040c 	add.w	r4, r7, #12
 8007c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007c52:	2300      	movs	r3, #0
 8007c54:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5c:	d11c      	bne.n	8007c98 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	643b      	str	r3, [r7, #64]	; 0x40
 8007c62:	e015      	b.n	8007c90 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d808      	bhi.n	8007c8a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007c80:	4413      	add	r3, r2
 8007c82:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007c86:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007c88:	e022      	b.n	8007cd0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d9e6      	bls.n	8007c64 <RCC_SetFlashLatency+0x40>
 8007c96:	e01b      	b.n	8007cd0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e015      	b.n	8007cca <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d808      	bhi.n	8007cc4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007cba:	4413      	add	r3, r2
 8007cbc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007cc2:	e005      	b.n	8007cd0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d9e6      	bls.n	8007c9e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007cd0:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <RCC_SetFlashLatency+0xfc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f023 0207 	bic.w	r2, r3, #7
 8007cd8:	4911      	ldr	r1, [pc, #68]	; (8007d20 <RCC_SetFlashLatency+0xfc>)
 8007cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce0:	f7fd fbf2 	bl	80054c8 <HAL_GetTick>
 8007ce4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ce6:	e008      	b.n	8007cfa <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ce8:	f7fd fbee 	bl	80054c8 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e007      	b.n	8007d0a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <RCC_SetFlashLatency+0xfc>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d1ef      	bne.n	8007ce8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	374c      	adds	r7, #76	; 0x4c
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	0800dbbc 	.word	0x0800dbbc
 8007d18:	0800dbcc 	.word	0x0800dbcc
 8007d1c:	0800dbd8 	.word	0x0800dbd8
 8007d20:	58004000 	.word	0x58004000

08007d24 <LL_RCC_LSE_IsEnabled>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <LL_RCC_LSE_IsEnabled+0x18>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <LL_RCC_LSE_IsEnabled+0x1a>
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <LL_RCC_LSE_IsReady>:
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d101      	bne.n	8007d60 <LL_RCC_LSE_IsReady+0x18>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <LL_RCC_LSE_IsReady+0x1a>
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <LL_RCC_SetRFWKPClockSource>:
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <LL_RCC_SetSMPSClockSource>:
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	f023 0203 	bic.w	r2, r3, #3
 8007daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <LL_RCC_SetSMPSPrescaler>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <LL_RCC_SetUSARTClockSource>:
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f023 0203 	bic.w	r2, r3, #3
 8007dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <LL_RCC_SetLPUARTClockSource>:
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <LL_RCC_SetI2CClockSource>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	091b      	lsrs	r3, r3, #4
 8007e54:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <LL_RCC_SetLPTIMClockSource>:
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	43db      	mvns	r3, r3
 8007e92:	401a      	ands	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	041b      	lsls	r3, r3, #16
 8007e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_RCC_SetSAIClockSource>:
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <LL_RCC_SetRNGClockSource>:
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <LL_RCC_SetCLK48ClockSource>:
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <LL_RCC_SetUSBClockSource>:
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ffe3 	bl	8007f06 <LL_RCC_SetCLK48ClockSource>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <LL_RCC_SetADCClockSource>:
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <LL_RCC_SetRTCClockSource>:
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <LL_RCC_GetRTCClockSource>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <LL_RCC_ForceBackupDomainReset>:
{
 8007fba:	b480      	push	{r7}
 8007fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <LL_RCC_ReleaseBackupDomainReset>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <LL_RCC_PLLSAI1_Enable>:
{
 8007ffe:	b480      	push	{r7}
 8008000:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800800c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008010:	6013      	str	r3, [r2, #0]
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_RCC_PLLSAI1_Disable>:
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800802a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800802e:	6013      	str	r3, [r2, #0]
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <LL_RCC_PLLSAI1_IsReady>:
{
 800803a:	b480      	push	{r7}
 800803c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800803e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800804c:	d101      	bne.n	8008052 <LL_RCC_PLLSAI1_IsReady+0x18>
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800806a:	2300      	movs	r3, #0
 800806c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d033      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008082:	d00c      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008088:	d802      	bhi.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d010      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800808e:	e017      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008094:	d017      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800809a:	d016      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800809c:	e010      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ac:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80080ae:	e00d      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f947 	bl	8008348 <RCCEx_PLLSAI1_ConfigNP>
 80080ba:	4603      	mov	r3, r0
 80080bc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80080be:	e005      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	77fb      	strb	r3, [r7, #31]
        break;
 80080c4:	e002      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80080ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080cc:	7ffb      	ldrb	r3, [r7, #31]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fee9 	bl	8007eae <LL_RCC_SetSAIClockSource>
 80080dc:	e001      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080de:	7ffb      	ldrb	r3, [r7, #31]
 80080e0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d046      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80080ee:	f7ff ff57 	bl	8007fa0 <LL_RCC_GetRTCClockSource>
 80080f2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d03c      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80080fe:	f7fe fc63 	bl	80069c8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff31 	bl	8007f74 <LL_RCC_SetRTCClockSource>
 8008112:	e02e      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800811e:	f7ff ff4c 	bl	8007fba <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008122:	f7ff ff5b 	bl	8007fdc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800813e:	f7ff fdf1 	bl	8007d24 <LL_RCC_LSE_IsEnabled>
 8008142:	4603      	mov	r3, r0
 8008144:	2b01      	cmp	r3, #1
 8008146:	d114      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008148:	f7fd f9be 	bl	80054c8 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800814e:	e00b      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008150:	f7fd f9ba 	bl	80054c8 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	4293      	cmp	r3, r2
 8008160:	d902      	bls.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	77fb      	strb	r3, [r7, #31]
              break;
 8008166:	e004      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008168:	f7ff fdee 	bl	8007d48 <LL_RCC_LSE_IsReady>
 800816c:	4603      	mov	r3, r0
 800816e:	2b01      	cmp	r3, #1
 8008170:	d1ee      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008172:	7ffb      	ldrb	r3, [r7, #31]
 8008174:	77bb      	strb	r3, [r7, #30]
 8008176:	e001      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008178:	7ffb      	ldrb	r3, [r7, #31]
 800817a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fe2b 	bl	8007de8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fe36 	bl	8007e14 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fe5e 	bl	8007e7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fe53 	bl	8007e7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fe2b 	bl	8007e40 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fe20 	bl	8007e40 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d022      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fe8e 	bl	8007f32 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800821e:	d107      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800822a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800822e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008238:	d10b      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f8dd 	bl	80083fe <RCCEx_PLLSAI1_ConfigNQ>
 8008244:	4603      	mov	r3, r0
 8008246:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008248:	7ffb      	ldrb	r3, [r7, #31]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800824e:	7ffb      	ldrb	r3, [r7, #31]
 8008250:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800825a:	2b00      	cmp	r3, #0
 800825c:	d02b      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008266:	d008      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008270:	d003      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fe2b 	bl	8007eda <LL_RCC_SetRNGClockSource>
 8008284:	e00a      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	2000      	movs	r0, #0
 8008292:	f7ff fe22 	bl	8007eda <LL_RCC_SetRNGClockSource>
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fe35 	bl	8007f06 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80082a4:	d107      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d022      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fe3e 	bl	8007f48 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d107      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082e4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ee:	d10b      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f8dd 	bl	80084b4 <RCCEx_PLLSAI1_ConfigNR>
 80082fa:	4603      	mov	r3, r0
 80082fc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80082fe:	7ffb      	ldrb	r3, [r7, #31]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8008304:	7ffb      	ldrb	r3, [r7, #31]
 8008306:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d004      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fd27 	bl	8007d6c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fd46 	bl	8007dc0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fd2d 	bl	8007d98 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800833e:	7fbb      	ldrb	r3, [r7, #30]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008354:	f7ff fe62 	bl	800801c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008358:	f7fd f8b6 	bl	80054c8 <HAL_GetTick>
 800835c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800835e:	e009      	b.n	8008374 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008360:	f7fd f8b2 	bl	80054c8 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d902      	bls.n	8008374 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e004      	b.n	800837e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008374:	f7ff fe61 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f0      	bne.n	8008360 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d137      	bne.n	80083f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008398:	4313      	orrs	r3, r2
 800839a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800839c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083ae:	4313      	orrs	r3, r2
 80083b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80083b2:	f7ff fe24 	bl	8007ffe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b6:	f7fd f887 	bl	80054c8 <HAL_GetTick>
 80083ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083bc:	e009      	b.n	80083d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083be:	f7fd f883 	bl	80054c8 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d902      	bls.n	80083d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	73fb      	strb	r3, [r7, #15]
        break;
 80083d0:	e004      	b.n	80083dc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083d2:	f7ff fe32 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d1f0      	bne.n	80083be <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d108      	bne.n	80083f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083f0:	4313      	orrs	r3, r2
 80083f2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800840a:	f7ff fe07 	bl	800801c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800840e:	f7fd f85b 	bl	80054c8 <HAL_GetTick>
 8008412:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008414:	e009      	b.n	800842a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008416:	f7fd f857 	bl	80054c8 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d902      	bls.n	800842a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	73fb      	strb	r3, [r7, #15]
      break;
 8008428:	e004      	b.n	8008434 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800842a:	f7ff fe06 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f0      	bne.n	8008416 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d137      	bne.n	80084aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800843a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	021b      	lsls	r3, r3, #8
 800844a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800844e:	4313      	orrs	r3, r2
 8008450:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008464:	4313      	orrs	r3, r2
 8008466:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008468:	f7ff fdc9 	bl	8007ffe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846c:	f7fd f82c 	bl	80054c8 <HAL_GetTick>
 8008470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008472:	e009      	b.n	8008488 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008474:	f7fd f828 	bl	80054c8 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d902      	bls.n	8008488 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	73fb      	strb	r3, [r7, #15]
        break;
 8008486:	e004      	b.n	8008492 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008488:	f7ff fdd7 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 800848c:	4603      	mov	r3, r0
 800848e:	2b01      	cmp	r3, #1
 8008490:	d1f0      	bne.n	8008474 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d108      	bne.n	80084aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084a6:	4313      	orrs	r3, r2
 80084a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80084c0:	f7ff fdac 	bl	800801c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084c4:	f7fd f800 	bl	80054c8 <HAL_GetTick>
 80084c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80084ca:	e009      	b.n	80084e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084cc:	f7fc fffc 	bl	80054c8 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d902      	bls.n	80084e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
      break;
 80084de:	e004      	b.n	80084ea <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80084e0:	f7ff fdab 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d137      	bne.n	8008560 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80084f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008504:	4313      	orrs	r3, r2
 8008506:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800851a:	4313      	orrs	r3, r2
 800851c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800851e:	f7ff fd6e 	bl	8007ffe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008522:	f7fc ffd1 	bl	80054c8 <HAL_GetTick>
 8008526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008528:	e009      	b.n	800853e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800852a:	f7fc ffcd 	bl	80054c8 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d902      	bls.n	800853e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	73fb      	strb	r3, [r7, #15]
        break;
 800853c:	e004      	b.n	8008548 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800853e:	f7ff fd7c 	bl	800803a <LL_RCC_PLLSAI1_IsReady>
 8008542:	4603      	mov	r3, r0
 8008544:	2b01      	cmp	r3, #1
 8008546:	d1f0      	bne.n	800852a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d108      	bne.n	8008560 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800854e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800855c:	4313      	orrs	r3, r2
 800855e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e090      	b.n	800869e <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7f9 fa1b 	bl	80019cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	22ca      	movs	r2, #202	; 0xca
 80085a4:	625a      	str	r2, [r3, #36]	; 0x24
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2253      	movs	r2, #83	; 0x53
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f89f 	bl	80086f2 <RTC_EnterInitMode>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	22ff      	movs	r2, #255	; 0xff
 80085c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2204      	movs	r2, #4
 80085c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e067      	b.n	800869e <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6899      	ldr	r1, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68d2      	ldr	r2, [r2, #12]
 8008608:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6919      	ldr	r1, [r3, #16]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	041a      	lsls	r2, r3, #16
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800862c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0203 	bic.w	r2, r2, #3
 800863c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d113      	bne.n	800868c <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f81e 	bl	80086a6 <HAL_RTC_WaitForSynchro>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	22ff      	movs	r2, #255	; 0xff
 8008676:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2204      	movs	r2, #4
 800867c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e008      	b.n	800869e <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	22ff      	movs	r2, #255	; 0xff
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800869c:	2300      	movs	r3, #0
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086bc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80086be:	f7fc ff03 	bl	80054c8 <HAL_GetTick>
 80086c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086c4:	e009      	b.n	80086da <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086c6:	f7fc feff 	bl	80054c8 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086d4:	d901      	bls.n	80086da <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e007      	b.n	80086ea <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0ee      	beq.n	80086c6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d119      	bne.n	800873c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008712:	f7fc fed9 	bl	80054c8 <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008718:	e009      	b.n	800872e <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800871a:	f7fc fed5 	bl	80054c8 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008728:	d901      	bls.n	800872e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e007      	b.n	800873e <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ee      	beq.n	800871a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800875e:	2302      	movs	r3, #2
 8008760:	e0a8      	b.n	80088b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	22ca      	movs	r2, #202	; 0xca
 8008778:	625a      	str	r2, [r3, #36]	; 0x24
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2253      	movs	r2, #83	; 0x53
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800878c:	2b00      	cmp	r3, #0
 800878e:	d020      	beq.n	80087d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 8008790:	f7fc fe9a 	bl	80054c8 <HAL_GetTick>
 8008794:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008796:	e015      	b.n	80087c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008798:	f7fc fe96 	bl	80054c8 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087a6:	d90d      	bls.n	80087c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2203      	movs	r2, #3
 80087b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e077      	b.n	80088b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e2      	bne.n	8008798 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80087f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80087f4:	f7fc fe68 	bl	80054c8 <HAL_GetTick>
 80087f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80087fa:	e015      	b.n	8008828 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087fc:	f7fc fe64 	bl	80054c8 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800880a:	d90d      	bls.n	8008828 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	22ff      	movs	r2, #255	; 0xff
 8008812:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2203      	movs	r2, #3
 8008818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e045      	b.n	80088b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0e2      	beq.n	80087fc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0207 	bic.w	r2, r2, #7
 800884c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6899      	ldr	r1, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	430a      	orrs	r2, r1
 800885c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800885e:	4b17      	ldr	r3, [pc, #92]	; (80088bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008864:	4a15      	ldr	r2, [pc, #84]	; (80088bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800886a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a12      	ldr	r2, [pc, #72]	; (80088bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008878:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008888:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008898:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ff      	movs	r2, #255	; 0xff
 80088a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	58000800 	.word	0x58000800

080088c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f818 	bl	800890c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80088ec:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80088f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80088f4:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	58000800 	.word	0x58000800

0800890c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e01d      	b.n	800896e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f9 f85a 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f000 f97c 	bl	8008c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <HAL_TIM_Base_Start_IT+0x50>)
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d00b      	beq.n	80089ba <HAL_TIM_Base_Start_IT+0x42>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a8:	d007      	beq.n	80089ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	00010007 	.word	0x00010007

080089cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d122      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d11b      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0202 	mvn.w	r2, #2
 80089f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f905 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008a14:	e005      	b.n	8008a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8f7 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f908 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d122      	bne.n	8008a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d11b      	bne.n	8008a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0204 	mvn.w	r2, #4
 8008a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8db 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008a68:	e005      	b.n	8008a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f8cd 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8de 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d122      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0308 	and.w	r3, r3, #8
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d11b      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f06f 0208 	mvn.w	r2, #8
 8008aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8b1 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008abc:	e005      	b.n	8008aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8a3 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8b4 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0310 	and.w	r3, r3, #16
 8008ada:	2b10      	cmp	r3, #16
 8008adc:	d122      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d11b      	bne.n	8008b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0210 	mvn.w	r2, #16
 8008af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2208      	movs	r2, #8
 8008afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f887 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f879 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f88a 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10e      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d107      	bne.n	8008b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f06f 0201 	mvn.w	r2, #1
 8008b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7f8 fe42 	bl	80017d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d10e      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b68:	2b80      	cmp	r3, #128	; 0x80
 8008b6a:	d107      	bne.n	8008b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f8de 	bl	8008d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8a:	d10e      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f8d1 	bl	8008d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc2:	2b40      	cmp	r3, #64	; 0x40
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f838 	bl	8008c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d10e      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d107      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0220 	mvn.w	r2, #32
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f891 	bl	8008d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c02:	bf00      	nop
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
	...

08008c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a2a      	ldr	r2, [pc, #168]	; (8008d18 <TIM_Base_SetConfig+0xbc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_Base_SetConfig+0x20>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7a:	d108      	bne.n	8008c8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a21      	ldr	r2, [pc, #132]	; (8008d18 <TIM_Base_SetConfig+0xbc>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <TIM_Base_SetConfig+0x52>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9c:	d007      	beq.n	8008cae <TIM_Base_SetConfig+0x52>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <TIM_Base_SetConfig+0xc0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <TIM_Base_SetConfig+0x52>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	; (8008d20 <TIM_Base_SetConfig+0xc4>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d108      	bne.n	8008cc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <TIM_Base_SetConfig+0xbc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_Base_SetConfig+0xa0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a0b      	ldr	r2, [pc, #44]	; (8008d1c <TIM_Base_SetConfig+0xc0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_Base_SetConfig+0xa0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <TIM_Base_SetConfig+0xc4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d103      	bne.n	8008d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	615a      	str	r2, [r3, #20]
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800

08008d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <LL_RCC_GetUSARTClockSource>:
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4013      	ands	r3, r2
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <LL_RCC_GetLPUARTClockSource>:
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4013      	ands	r3, r2
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e042      	b.n	8008e38 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7f8 fe4b 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2224      	movs	r2, #36	; 0x24
 8008dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa4c 	bl	8009280 <UART_SetConfig>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e022      	b.n	8008e38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 faa4 	bl	800a348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0201 	orr.w	r2, r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 fb2b 	bl	800a48c <UART_CheckIdleState>
 8008e36:	4603      	mov	r3, r0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	f040 8083 	bne.w	8008f62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Transmit+0x28>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e07b      	b.n	8008f64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Transmit+0x3a>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e074      	b.n	8008f64 <HAL_UART_Transmit+0x124>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2221      	movs	r2, #33	; 0x21
 8008e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e92:	f7fc fb19 	bl	80054c8 <HAL_GetTick>
 8008e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb0:	d108      	bne.n	8008ec4 <HAL_UART_Transmit+0x84>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e003      	b.n	8008ecc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008ed4:	e02c      	b.n	8008f30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	2180      	movs	r1, #128	; 0x80
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 fb1b 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e039      	b.n	8008f64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10b      	bne.n	8008f0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	3302      	adds	r3, #2
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e007      	b.n	8008f1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1cc      	bne.n	8008ed6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2200      	movs	r2, #0
 8008f44:	2140      	movs	r1, #64	; 0x40
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f001 fae8 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e006      	b.n	8008f64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e000      	b.n	8008f64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f62:	2302      	movs	r3, #2
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f92:	4013      	ands	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d118      	bne.n	8008fce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d013      	beq.n	8008fce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8145 	beq.w	800924e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
      }
      return;
 8008fcc:	e13f      	b.n	800924e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80e8 	beq.w	80091a6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4ba1      	ldr	r3, [pc, #644]	; (8009260 <HAL_UART_IRQHandler+0x2f4>)
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d105      	bne.n	8008fec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	4ba0      	ldr	r3, [pc, #640]	; (8009264 <HAL_UART_IRQHandler+0x2f8>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 80dd 	beq.w	80091a6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d010      	beq.n	8009018 <HAL_UART_IRQHandler+0xac>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900e:	f043 0201 	orr.w	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d010      	beq.n	8009044 <HAL_UART_IRQHandler+0xd8>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2202      	movs	r2, #2
 8009032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903a:	f043 0204 	orr.w	r2, r3, #4
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	d010      	beq.n	8009070 <HAL_UART_IRQHandler+0x104>
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2204      	movs	r2, #4
 800905e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009066:	f043 0202 	orr.w	r2, r3, #2
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b00      	cmp	r3, #0
 8009078:	d015      	beq.n	80090a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	4b76      	ldr	r3, [pc, #472]	; (8009260 <HAL_UART_IRQHandler+0x2f4>)
 8009088:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00b      	beq.n	80090a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2208      	movs	r2, #8
 8009094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800909c:	f043 0208 	orr.w	r2, r3, #8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d011      	beq.n	80090d4 <HAL_UART_IRQHandler+0x168>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f043 0220 	orr.w	r2, r3, #32
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80b9 	beq.w	8009252 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d011      	beq.n	800910e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009114:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d004      	beq.n	800912e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800912a:	2b00      	cmp	r3, #0
 800912c:	d031      	beq.n	8009192 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fa74 	bl	800a61c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913e:	2b40      	cmp	r3, #64	; 0x40
 8009140:	d123      	bne.n	800918a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009150:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009156:	2b00      	cmp	r3, #0
 8009158:	d013      	beq.n	8009182 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800915e:	4a42      	ldr	r2, [pc, #264]	; (8009268 <HAL_UART_IRQHandler+0x2fc>)
 8009160:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc fb5d 	bl	8005826 <HAL_DMA_Abort_IT>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d017      	beq.n	80091a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009180:	e00f      	b.n	80091a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f872 	bl	800926c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009188:	e00b      	b.n	80091a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f86e 	bl	800926c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009190:	e007      	b.n	80091a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f86a 	bl	800926c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80091a0:	e057      	b.n	8009252 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a2:	bf00      	nop
    return;
 80091a4:	e055      	b.n	8009252 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00d      	beq.n	80091cc <HAL_UART_IRQHandler+0x260>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d008      	beq.n	80091cc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fa7c 	bl	800a6c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ca:	e045      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d008      	beq.n	80091fc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d031      	beq.n	8009256 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
    }
    return;
 80091fa:	e02c      	b.n	8009256 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <HAL_UART_IRQHandler+0x2ac>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fa3c 	bl	800a68e <UART_EndTransmit_IT>
    return;
 8009216:	e01f      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d008      	beq.n	8009234 <HAL_UART_IRQHandler+0x2c8>
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fa5c 	bl	800a6ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009232:	e011      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <HAL_UART_IRQHandler+0x2ec>
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	da09      	bge.n	8009258 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fa46 	bl	800a6d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800924a:	bf00      	nop
 800924c:	e004      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
      return;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009256:	bf00      	nop
  }
}
 8009258:	3720      	adds	r7, #32
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	10000001 	.word	0x10000001
 8009264:	04000120 	.word	0x04000120
 8009268:	0800a663 	.word	0x0800a663

0800926c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009280:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009284:	b08a      	sub	sp, #40	; 0x28
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b4:	4313      	orrs	r3, r2
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4ba4      	ldr	r3, [pc, #656]	; (8009550 <UART_SetConfig+0x2d0>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a99      	ldr	r2, [pc, #612]	; (8009554 <UART_SetConfig+0x2d4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d004      	beq.n	80092fc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f8:	4313      	orrs	r3, r2
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009306:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6812      	ldr	r2, [r2, #0]
 800930e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009310:	430b      	orrs	r3, r1
 8009312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	f023 010f 	bic.w	r1, r3, #15
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a8a      	ldr	r2, [pc, #552]	; (8009558 <UART_SetConfig+0x2d8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d126      	bne.n	8009382 <UART_SetConfig+0x102>
 8009334:	2003      	movs	r0, #3
 8009336:	f7ff fd13 	bl	8008d60 <LL_RCC_GetUSARTClockSource>
 800933a:	4603      	mov	r3, r0
 800933c:	2b03      	cmp	r3, #3
 800933e:	d81b      	bhi.n	8009378 <UART_SetConfig+0xf8>
 8009340:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0xc8>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	08009359 	.word	0x08009359
 800934c:	08009369 	.word	0x08009369
 8009350:	08009361 	.word	0x08009361
 8009354:	08009371 	.word	0x08009371
 8009358:	2301      	movs	r3, #1
 800935a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800935e:	e042      	b.n	80093e6 <UART_SetConfig+0x166>
 8009360:	2302      	movs	r3, #2
 8009362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009366:	e03e      	b.n	80093e6 <UART_SetConfig+0x166>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800936e:	e03a      	b.n	80093e6 <UART_SetConfig+0x166>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009376:	e036      	b.n	80093e6 <UART_SetConfig+0x166>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937e:	bf00      	nop
 8009380:	e031      	b.n	80093e6 <UART_SetConfig+0x166>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a73      	ldr	r2, [pc, #460]	; (8009554 <UART_SetConfig+0x2d4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d129      	bne.n	80093e0 <UART_SetConfig+0x160>
 800938c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009390:	f7ff fcf6 	bl	8008d80 <LL_RCC_GetLPUARTClockSource>
 8009394:	4603      	mov	r3, r0
 8009396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800939a:	d014      	beq.n	80093c6 <UART_SetConfig+0x146>
 800939c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a0:	d802      	bhi.n	80093a8 <UART_SetConfig+0x128>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <UART_SetConfig+0x136>
 80093a6:	e016      	b.n	80093d6 <UART_SetConfig+0x156>
 80093a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ac:	d007      	beq.n	80093be <UART_SetConfig+0x13e>
 80093ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093b2:	d00c      	beq.n	80093ce <UART_SetConfig+0x14e>
 80093b4:	e00f      	b.n	80093d6 <UART_SetConfig+0x156>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093bc:	e013      	b.n	80093e6 <UART_SetConfig+0x166>
 80093be:	2302      	movs	r3, #2
 80093c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093c4:	e00f      	b.n	80093e6 <UART_SetConfig+0x166>
 80093c6:	2304      	movs	r3, #4
 80093c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093cc:	e00b      	b.n	80093e6 <UART_SetConfig+0x166>
 80093ce:	2308      	movs	r3, #8
 80093d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093d4:	e007      	b.n	80093e6 <UART_SetConfig+0x166>
 80093d6:	2310      	movs	r3, #16
 80093d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093dc:	bf00      	nop
 80093de:	e002      	b.n	80093e6 <UART_SetConfig+0x166>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a5a      	ldr	r2, [pc, #360]	; (8009554 <UART_SetConfig+0x2d4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	f040 8428 	bne.w	8009c42 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093f6:	2b08      	cmp	r3, #8
 80093f8:	f200 8171 	bhi.w	80096de <UART_SetConfig+0x45e>
 80093fc:	a201      	add	r2, pc, #4	; (adr r2, 8009404 <UART_SetConfig+0x184>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	08009429 	.word	0x08009429
 8009408:	080096df 	.word	0x080096df
 800940c:	080094cb 	.word	0x080094cb
 8009410:	080096df 	.word	0x080096df
 8009414:	0800958f 	.word	0x0800958f
 8009418:	080096df 	.word	0x080096df
 800941c:	080096df 	.word	0x080096df
 8009420:	080096df 	.word	0x080096df
 8009424:	08009631 	.word	0x08009631
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009428:	f7fe fb98 	bl	8007b5c <HAL_RCC_GetPCLK1Freq>
 800942c:	4602      	mov	r2, r0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d044      	beq.n	80094c0 <UART_SetConfig+0x240>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b01      	cmp	r3, #1
 800943c:	d03e      	beq.n	80094bc <UART_SetConfig+0x23c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009442:	2b02      	cmp	r3, #2
 8009444:	d038      	beq.n	80094b8 <UART_SetConfig+0x238>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	2b03      	cmp	r3, #3
 800944c:	d032      	beq.n	80094b4 <UART_SetConfig+0x234>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	2b04      	cmp	r3, #4
 8009454:	d02c      	beq.n	80094b0 <UART_SetConfig+0x230>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	2b05      	cmp	r3, #5
 800945c:	d026      	beq.n	80094ac <UART_SetConfig+0x22c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	2b06      	cmp	r3, #6
 8009464:	d020      	beq.n	80094a8 <UART_SetConfig+0x228>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	2b07      	cmp	r3, #7
 800946c:	d01a      	beq.n	80094a4 <UART_SetConfig+0x224>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	2b08      	cmp	r3, #8
 8009474:	d014      	beq.n	80094a0 <UART_SetConfig+0x220>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	2b09      	cmp	r3, #9
 800947c:	d00e      	beq.n	800949c <UART_SetConfig+0x21c>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b0a      	cmp	r3, #10
 8009484:	d008      	beq.n	8009498 <UART_SetConfig+0x218>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	2b0b      	cmp	r3, #11
 800948c:	d102      	bne.n	8009494 <UART_SetConfig+0x214>
 800948e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009492:	e016      	b.n	80094c2 <UART_SetConfig+0x242>
 8009494:	2301      	movs	r3, #1
 8009496:	e014      	b.n	80094c2 <UART_SetConfig+0x242>
 8009498:	2380      	movs	r3, #128	; 0x80
 800949a:	e012      	b.n	80094c2 <UART_SetConfig+0x242>
 800949c:	2340      	movs	r3, #64	; 0x40
 800949e:	e010      	b.n	80094c2 <UART_SetConfig+0x242>
 80094a0:	2320      	movs	r3, #32
 80094a2:	e00e      	b.n	80094c2 <UART_SetConfig+0x242>
 80094a4:	2310      	movs	r3, #16
 80094a6:	e00c      	b.n	80094c2 <UART_SetConfig+0x242>
 80094a8:	230c      	movs	r3, #12
 80094aa:	e00a      	b.n	80094c2 <UART_SetConfig+0x242>
 80094ac:	230a      	movs	r3, #10
 80094ae:	e008      	b.n	80094c2 <UART_SetConfig+0x242>
 80094b0:	2308      	movs	r3, #8
 80094b2:	e006      	b.n	80094c2 <UART_SetConfig+0x242>
 80094b4:	2306      	movs	r3, #6
 80094b6:	e004      	b.n	80094c2 <UART_SetConfig+0x242>
 80094b8:	2304      	movs	r3, #4
 80094ba:	e002      	b.n	80094c2 <UART_SetConfig+0x242>
 80094bc:	2302      	movs	r3, #2
 80094be:	e000      	b.n	80094c2 <UART_SetConfig+0x242>
 80094c0:	2301      	movs	r3, #1
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	617b      	str	r3, [r7, #20]
        break;
 80094c8:	e10c      	b.n	80096e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d05a      	beq.n	8009588 <UART_SetConfig+0x308>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d054      	beq.n	8009584 <UART_SetConfig+0x304>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d04e      	beq.n	8009580 <UART_SetConfig+0x300>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d048      	beq.n	800957c <UART_SetConfig+0x2fc>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d02c      	beq.n	800954c <UART_SetConfig+0x2cc>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d026      	beq.n	8009548 <UART_SetConfig+0x2c8>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b06      	cmp	r3, #6
 8009500:	d020      	beq.n	8009544 <UART_SetConfig+0x2c4>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b07      	cmp	r3, #7
 8009508:	d01a      	beq.n	8009540 <UART_SetConfig+0x2c0>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b08      	cmp	r3, #8
 8009510:	d014      	beq.n	800953c <UART_SetConfig+0x2bc>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b09      	cmp	r3, #9
 8009518:	d00e      	beq.n	8009538 <UART_SetConfig+0x2b8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b0a      	cmp	r3, #10
 8009520:	d008      	beq.n	8009534 <UART_SetConfig+0x2b4>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b0b      	cmp	r3, #11
 8009528:	d102      	bne.n	8009530 <UART_SetConfig+0x2b0>
 800952a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800952e:	e02c      	b.n	800958a <UART_SetConfig+0x30a>
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <UART_SetConfig+0x2dc>)
 8009532:	e02a      	b.n	800958a <UART_SetConfig+0x30a>
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <UART_SetConfig+0x2e0>)
 8009536:	e028      	b.n	800958a <UART_SetConfig+0x30a>
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <UART_SetConfig+0x2e4>)
 800953a:	e026      	b.n	800958a <UART_SetConfig+0x30a>
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <UART_SetConfig+0x2e8>)
 800953e:	e024      	b.n	800958a <UART_SetConfig+0x30a>
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <UART_SetConfig+0x2ec>)
 8009542:	e022      	b.n	800958a <UART_SetConfig+0x30a>
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <UART_SetConfig+0x2f0>)
 8009546:	e020      	b.n	800958a <UART_SetConfig+0x30a>
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <UART_SetConfig+0x2f4>)
 800954a:	e01e      	b.n	800958a <UART_SetConfig+0x30a>
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <UART_SetConfig+0x2f8>)
 800954e:	e01c      	b.n	800958a <UART_SetConfig+0x30a>
 8009550:	cfff69f3 	.word	0xcfff69f3
 8009554:	40008000 	.word	0x40008000
 8009558:	40013800 	.word	0x40013800
 800955c:	00f42400 	.word	0x00f42400
 8009560:	0001e848 	.word	0x0001e848
 8009564:	0003d090 	.word	0x0003d090
 8009568:	0007a120 	.word	0x0007a120
 800956c:	000f4240 	.word	0x000f4240
 8009570:	00145855 	.word	0x00145855
 8009574:	00186a00 	.word	0x00186a00
 8009578:	001e8480 	.word	0x001e8480
 800957c:	4ba6      	ldr	r3, [pc, #664]	; (8009818 <UART_SetConfig+0x598>)
 800957e:	e004      	b.n	800958a <UART_SetConfig+0x30a>
 8009580:	4ba6      	ldr	r3, [pc, #664]	; (800981c <UART_SetConfig+0x59c>)
 8009582:	e002      	b.n	800958a <UART_SetConfig+0x30a>
 8009584:	4ba6      	ldr	r3, [pc, #664]	; (8009820 <UART_SetConfig+0x5a0>)
 8009586:	e000      	b.n	800958a <UART_SetConfig+0x30a>
 8009588:	4ba6      	ldr	r3, [pc, #664]	; (8009824 <UART_SetConfig+0x5a4>)
 800958a:	617b      	str	r3, [r7, #20]
        break;
 800958c:	e0aa      	b.n	80096e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800958e:	f7fe fa67 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 8009592:	4602      	mov	r2, r0
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d044      	beq.n	8009626 <UART_SetConfig+0x3a6>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d03e      	beq.n	8009622 <UART_SetConfig+0x3a2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d038      	beq.n	800961e <UART_SetConfig+0x39e>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d032      	beq.n	800961a <UART_SetConfig+0x39a>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d02c      	beq.n	8009616 <UART_SetConfig+0x396>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b05      	cmp	r3, #5
 80095c2:	d026      	beq.n	8009612 <UART_SetConfig+0x392>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b06      	cmp	r3, #6
 80095ca:	d020      	beq.n	800960e <UART_SetConfig+0x38e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b07      	cmp	r3, #7
 80095d2:	d01a      	beq.n	800960a <UART_SetConfig+0x38a>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d014      	beq.n	8009606 <UART_SetConfig+0x386>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d00e      	beq.n	8009602 <UART_SetConfig+0x382>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b0a      	cmp	r3, #10
 80095ea:	d008      	beq.n	80095fe <UART_SetConfig+0x37e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b0b      	cmp	r3, #11
 80095f2:	d102      	bne.n	80095fa <UART_SetConfig+0x37a>
 80095f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095f8:	e016      	b.n	8009628 <UART_SetConfig+0x3a8>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e014      	b.n	8009628 <UART_SetConfig+0x3a8>
 80095fe:	2380      	movs	r3, #128	; 0x80
 8009600:	e012      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009602:	2340      	movs	r3, #64	; 0x40
 8009604:	e010      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009606:	2320      	movs	r3, #32
 8009608:	e00e      	b.n	8009628 <UART_SetConfig+0x3a8>
 800960a:	2310      	movs	r3, #16
 800960c:	e00c      	b.n	8009628 <UART_SetConfig+0x3a8>
 800960e:	230c      	movs	r3, #12
 8009610:	e00a      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009612:	230a      	movs	r3, #10
 8009614:	e008      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009616:	2308      	movs	r3, #8
 8009618:	e006      	b.n	8009628 <UART_SetConfig+0x3a8>
 800961a:	2306      	movs	r3, #6
 800961c:	e004      	b.n	8009628 <UART_SetConfig+0x3a8>
 800961e:	2304      	movs	r3, #4
 8009620:	e002      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009622:	2302      	movs	r3, #2
 8009624:	e000      	b.n	8009628 <UART_SetConfig+0x3a8>
 8009626:	2301      	movs	r3, #1
 8009628:	fbb2 f3f3 	udiv	r3, r2, r3
 800962c:	617b      	str	r3, [r7, #20]
        break;
 800962e:	e059      	b.n	80096e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d04e      	beq.n	80096d6 <UART_SetConfig+0x456>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b01      	cmp	r3, #1
 800963e:	d047      	beq.n	80096d0 <UART_SetConfig+0x450>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2b02      	cmp	r3, #2
 8009646:	d040      	beq.n	80096ca <UART_SetConfig+0x44a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b03      	cmp	r3, #3
 800964e:	d039      	beq.n	80096c4 <UART_SetConfig+0x444>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b04      	cmp	r3, #4
 8009656:	d032      	beq.n	80096be <UART_SetConfig+0x43e>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2b05      	cmp	r3, #5
 800965e:	d02b      	beq.n	80096b8 <UART_SetConfig+0x438>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	2b06      	cmp	r3, #6
 8009666:	d024      	beq.n	80096b2 <UART_SetConfig+0x432>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b07      	cmp	r3, #7
 800966e:	d01d      	beq.n	80096ac <UART_SetConfig+0x42c>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	2b08      	cmp	r3, #8
 8009676:	d016      	beq.n	80096a6 <UART_SetConfig+0x426>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	2b09      	cmp	r3, #9
 800967e:	d00f      	beq.n	80096a0 <UART_SetConfig+0x420>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	2b0a      	cmp	r3, #10
 8009686:	d008      	beq.n	800969a <UART_SetConfig+0x41a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b0b      	cmp	r3, #11
 800968e:	d101      	bne.n	8009694 <UART_SetConfig+0x414>
 8009690:	2380      	movs	r3, #128	; 0x80
 8009692:	e022      	b.n	80096da <UART_SetConfig+0x45a>
 8009694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009698:	e01f      	b.n	80096da <UART_SetConfig+0x45a>
 800969a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969e:	e01c      	b.n	80096da <UART_SetConfig+0x45a>
 80096a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a4:	e019      	b.n	80096da <UART_SetConfig+0x45a>
 80096a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096aa:	e016      	b.n	80096da <UART_SetConfig+0x45a>
 80096ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096b0:	e013      	b.n	80096da <UART_SetConfig+0x45a>
 80096b2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80096b6:	e010      	b.n	80096da <UART_SetConfig+0x45a>
 80096b8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80096bc:	e00d      	b.n	80096da <UART_SetConfig+0x45a>
 80096be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096c2:	e00a      	b.n	80096da <UART_SetConfig+0x45a>
 80096c4:	f241 5355 	movw	r3, #5461	; 0x1555
 80096c8:	e007      	b.n	80096da <UART_SetConfig+0x45a>
 80096ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096ce:	e004      	b.n	80096da <UART_SetConfig+0x45a>
 80096d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096d4:	e001      	b.n	80096da <UART_SetConfig+0x45a>
 80096d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096da:	617b      	str	r3, [r7, #20]
        break;
 80096dc:	e002      	b.n	80096e4 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	76fb      	strb	r3, [r7, #27]
        break;
 80096e2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8604 	beq.w	800a2f4 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d305      	bcc.n	8009708 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	429a      	cmp	r2, r3
 8009706:	d903      	bls.n	8009710 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	76fb      	strb	r3, [r7, #27]
 800970c:	f000 bdf2 	b.w	800a2f4 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8009710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009714:	2b08      	cmp	r3, #8
 8009716:	f200 8281 	bhi.w	8009c1c <UART_SetConfig+0x99c>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <UART_SetConfig+0x4a0>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009745 	.word	0x08009745
 8009724:	08009c1d 	.word	0x08009c1d
 8009728:	08009895 	.word	0x08009895
 800972c:	08009c1d 	.word	0x08009c1d
 8009730:	0800998b 	.word	0x0800998b
 8009734:	08009c1d 	.word	0x08009c1d
 8009738:	08009c1d 	.word	0x08009c1d
 800973c:	08009c1d 	.word	0x08009c1d
 8009740:	08009ac9 	.word	0x08009ac9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009744:	f7fe fa0a 	bl	8007b5c <HAL_RCC_GetPCLK1Freq>
 8009748:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	4618      	mov	r0, r3
 800974e:	f04f 0100 	mov.w	r1, #0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d070      	beq.n	800983c <UART_SetConfig+0x5bc>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b01      	cmp	r3, #1
 8009760:	d067      	beq.n	8009832 <UART_SetConfig+0x5b2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b02      	cmp	r3, #2
 8009768:	d05e      	beq.n	8009828 <UART_SetConfig+0x5a8>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b03      	cmp	r3, #3
 8009770:	d04c      	beq.n	800980c <UART_SetConfig+0x58c>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b04      	cmp	r3, #4
 8009778:	d043      	beq.n	8009802 <UART_SetConfig+0x582>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b05      	cmp	r3, #5
 8009780:	d03a      	beq.n	80097f8 <UART_SetConfig+0x578>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2b06      	cmp	r3, #6
 8009788:	d031      	beq.n	80097ee <UART_SetConfig+0x56e>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	2b07      	cmp	r3, #7
 8009790:	d028      	beq.n	80097e4 <UART_SetConfig+0x564>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	2b08      	cmp	r3, #8
 8009798:	d01f      	beq.n	80097da <UART_SetConfig+0x55a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	2b09      	cmp	r3, #9
 80097a0:	d016      	beq.n	80097d0 <UART_SetConfig+0x550>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b0a      	cmp	r3, #10
 80097a8:	d00d      	beq.n	80097c6 <UART_SetConfig+0x546>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b0b      	cmp	r3, #11
 80097b0:	d104      	bne.n	80097bc <UART_SetConfig+0x53c>
 80097b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b6:	f04f 0400 	mov.w	r4, #0
 80097ba:	e043      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097bc:	f04f 0301 	mov.w	r3, #1
 80097c0:	f04f 0400 	mov.w	r4, #0
 80097c4:	e03e      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80097ca:	f04f 0400 	mov.w	r4, #0
 80097ce:	e039      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80097d4:	f04f 0400 	mov.w	r4, #0
 80097d8:	e034      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097da:	f04f 0320 	mov.w	r3, #32
 80097de:	f04f 0400 	mov.w	r4, #0
 80097e2:	e02f      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097e4:	f04f 0310 	mov.w	r3, #16
 80097e8:	f04f 0400 	mov.w	r4, #0
 80097ec:	e02a      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097ee:	f04f 030c 	mov.w	r3, #12
 80097f2:	f04f 0400 	mov.w	r4, #0
 80097f6:	e025      	b.n	8009844 <UART_SetConfig+0x5c4>
 80097f8:	f04f 030a 	mov.w	r3, #10
 80097fc:	f04f 0400 	mov.w	r4, #0
 8009800:	e020      	b.n	8009844 <UART_SetConfig+0x5c4>
 8009802:	f04f 0308 	mov.w	r3, #8
 8009806:	f04f 0400 	mov.w	r4, #0
 800980a:	e01b      	b.n	8009844 <UART_SetConfig+0x5c4>
 800980c:	f04f 0306 	mov.w	r3, #6
 8009810:	f04f 0400 	mov.w	r4, #0
 8009814:	e016      	b.n	8009844 <UART_SetConfig+0x5c4>
 8009816:	bf00      	nop
 8009818:	0028b0aa 	.word	0x0028b0aa
 800981c:	003d0900 	.word	0x003d0900
 8009820:	007a1200 	.word	0x007a1200
 8009824:	00f42400 	.word	0x00f42400
 8009828:	f04f 0304 	mov.w	r3, #4
 800982c:	f04f 0400 	mov.w	r4, #0
 8009830:	e008      	b.n	8009844 <UART_SetConfig+0x5c4>
 8009832:	f04f 0302 	mov.w	r3, #2
 8009836:	f04f 0400 	mov.w	r4, #0
 800983a:	e003      	b.n	8009844 <UART_SetConfig+0x5c4>
 800983c:	f04f 0301 	mov.w	r3, #1
 8009840:	f04f 0400 	mov.w	r4, #0
 8009844:	461a      	mov	r2, r3
 8009846:	4623      	mov	r3, r4
 8009848:	f7f6 fca2 	bl	8000190 <__aeabi_uldivmod>
 800984c:	4603      	mov	r3, r0
 800984e:	460c      	mov	r4, r1
 8009850:	4619      	mov	r1, r3
 8009852:	4622      	mov	r2, r4
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	0214      	lsls	r4, r2, #8
 800985e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009862:	020b      	lsls	r3, r1, #8
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6852      	ldr	r2, [r2, #4]
 8009868:	0852      	lsrs	r2, r2, #1
 800986a:	4611      	mov	r1, r2
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	eb13 0b01 	adds.w	fp, r3, r1
 8009874:	eb44 0c02 	adc.w	ip, r4, r2
 8009878:	4658      	mov	r0, fp
 800987a:	4661      	mov	r1, ip
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f04f 0400 	mov.w	r4, #0
 8009884:	461a      	mov	r2, r3
 8009886:	4623      	mov	r3, r4
 8009888:	f7f6 fc82 	bl	8000190 <__aeabi_uldivmod>
 800988c:	4603      	mov	r3, r0
 800988e:	460c      	mov	r4, r1
 8009890:	61fb      	str	r3, [r7, #28]
            break;
 8009892:	e1c6      	b.n	8009c22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	2b00      	cmp	r3, #0
 800989a:	d05b      	beq.n	8009954 <UART_SetConfig+0x6d4>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d053      	beq.n	800994c <UART_SetConfig+0x6cc>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d04b      	beq.n	8009944 <UART_SetConfig+0x6c4>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d043      	beq.n	800993c <UART_SetConfig+0x6bc>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d03b      	beq.n	8009934 <UART_SetConfig+0x6b4>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	d033      	beq.n	800992c <UART_SetConfig+0x6ac>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	2b06      	cmp	r3, #6
 80098ca:	d02b      	beq.n	8009924 <UART_SetConfig+0x6a4>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2b07      	cmp	r3, #7
 80098d2:	d023      	beq.n	800991c <UART_SetConfig+0x69c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d01b      	beq.n	8009914 <UART_SetConfig+0x694>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e0:	2b09      	cmp	r3, #9
 80098e2:	d013      	beq.n	800990c <UART_SetConfig+0x68c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	2b0a      	cmp	r3, #10
 80098ea:	d00b      	beq.n	8009904 <UART_SetConfig+0x684>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	2b0b      	cmp	r3, #11
 80098f2:	d103      	bne.n	80098fc <UART_SetConfig+0x67c>
 80098f4:	4bae      	ldr	r3, [pc, #696]	; (8009bb0 <UART_SetConfig+0x930>)
 80098f6:	f04f 0400 	mov.w	r4, #0
 80098fa:	e02e      	b.n	800995a <UART_SetConfig+0x6da>
 80098fc:	4bad      	ldr	r3, [pc, #692]	; (8009bb4 <UART_SetConfig+0x934>)
 80098fe:	f04f 0400 	mov.w	r4, #0
 8009902:	e02a      	b.n	800995a <UART_SetConfig+0x6da>
 8009904:	4bac      	ldr	r3, [pc, #688]	; (8009bb8 <UART_SetConfig+0x938>)
 8009906:	f04f 0400 	mov.w	r4, #0
 800990a:	e026      	b.n	800995a <UART_SetConfig+0x6da>
 800990c:	4bab      	ldr	r3, [pc, #684]	; (8009bbc <UART_SetConfig+0x93c>)
 800990e:	f04f 0400 	mov.w	r4, #0
 8009912:	e022      	b.n	800995a <UART_SetConfig+0x6da>
 8009914:	4baa      	ldr	r3, [pc, #680]	; (8009bc0 <UART_SetConfig+0x940>)
 8009916:	f04f 0400 	mov.w	r4, #0
 800991a:	e01e      	b.n	800995a <UART_SetConfig+0x6da>
 800991c:	4ba9      	ldr	r3, [pc, #676]	; (8009bc4 <UART_SetConfig+0x944>)
 800991e:	f04f 0400 	mov.w	r4, #0
 8009922:	e01a      	b.n	800995a <UART_SetConfig+0x6da>
 8009924:	a49e      	add	r4, pc, #632	; (adr r4, 8009ba0 <UART_SetConfig+0x920>)
 8009926:	e9d4 3400 	ldrd	r3, r4, [r4]
 800992a:	e016      	b.n	800995a <UART_SetConfig+0x6da>
 800992c:	4ba6      	ldr	r3, [pc, #664]	; (8009bc8 <UART_SetConfig+0x948>)
 800992e:	f04f 0400 	mov.w	r4, #0
 8009932:	e012      	b.n	800995a <UART_SetConfig+0x6da>
 8009934:	4ba5      	ldr	r3, [pc, #660]	; (8009bcc <UART_SetConfig+0x94c>)
 8009936:	f04f 0400 	mov.w	r4, #0
 800993a:	e00e      	b.n	800995a <UART_SetConfig+0x6da>
 800993c:	a49a      	add	r4, pc, #616	; (adr r4, 8009ba8 <UART_SetConfig+0x928>)
 800993e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009942:	e00a      	b.n	800995a <UART_SetConfig+0x6da>
 8009944:	4ba2      	ldr	r3, [pc, #648]	; (8009bd0 <UART_SetConfig+0x950>)
 8009946:	f04f 0400 	mov.w	r4, #0
 800994a:	e006      	b.n	800995a <UART_SetConfig+0x6da>
 800994c:	4ba1      	ldr	r3, [pc, #644]	; (8009bd4 <UART_SetConfig+0x954>)
 800994e:	f04f 0400 	mov.w	r4, #0
 8009952:	e002      	b.n	800995a <UART_SetConfig+0x6da>
 8009954:	4b97      	ldr	r3, [pc, #604]	; (8009bb4 <UART_SetConfig+0x934>)
 8009956:	f04f 0400 	mov.w	r4, #0
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6852      	ldr	r2, [r2, #4]
 800995e:	0852      	lsrs	r2, r2, #1
 8009960:	4611      	mov	r1, r2
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	eb13 0b01 	adds.w	fp, r3, r1
 800996a:	eb44 0c02 	adc.w	ip, r4, r2
 800996e:	4658      	mov	r0, fp
 8009970:	4661      	mov	r1, ip
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f04f 0400 	mov.w	r4, #0
 800997a:	461a      	mov	r2, r3
 800997c:	4623      	mov	r3, r4
 800997e:	f7f6 fc07 	bl	8000190 <__aeabi_uldivmod>
 8009982:	4603      	mov	r3, r0
 8009984:	460c      	mov	r4, r1
 8009986:	61fb      	str	r3, [r7, #28]
            break;
 8009988:	e14b      	b.n	8009c22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800998a:	f7fe f869 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 800998e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4618      	mov	r0, r3
 8009994:	f04f 0100 	mov.w	r1, #0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	d067      	beq.n	8009a70 <UART_SetConfig+0x7f0>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d05e      	beq.n	8009a66 <UART_SetConfig+0x7e6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d055      	beq.n	8009a5c <UART_SetConfig+0x7dc>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d04c      	beq.n	8009a52 <UART_SetConfig+0x7d2>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d043      	beq.n	8009a48 <UART_SetConfig+0x7c8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	2b05      	cmp	r3, #5
 80099c6:	d03a      	beq.n	8009a3e <UART_SetConfig+0x7be>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b06      	cmp	r3, #6
 80099ce:	d031      	beq.n	8009a34 <UART_SetConfig+0x7b4>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b07      	cmp	r3, #7
 80099d6:	d028      	beq.n	8009a2a <UART_SetConfig+0x7aa>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d01f      	beq.n	8009a20 <UART_SetConfig+0x7a0>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	2b09      	cmp	r3, #9
 80099e6:	d016      	beq.n	8009a16 <UART_SetConfig+0x796>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	2b0a      	cmp	r3, #10
 80099ee:	d00d      	beq.n	8009a0c <UART_SetConfig+0x78c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	2b0b      	cmp	r3, #11
 80099f6:	d104      	bne.n	8009a02 <UART_SetConfig+0x782>
 80099f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099fc:	f04f 0400 	mov.w	r4, #0
 8009a00:	e03a      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a02:	f04f 0301 	mov.w	r3, #1
 8009a06:	f04f 0400 	mov.w	r4, #0
 8009a0a:	e035      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009a10:	f04f 0400 	mov.w	r4, #0
 8009a14:	e030      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009a1a:	f04f 0400 	mov.w	r4, #0
 8009a1e:	e02b      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a20:	f04f 0320 	mov.w	r3, #32
 8009a24:	f04f 0400 	mov.w	r4, #0
 8009a28:	e026      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a2a:	f04f 0310 	mov.w	r3, #16
 8009a2e:	f04f 0400 	mov.w	r4, #0
 8009a32:	e021      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a34:	f04f 030c 	mov.w	r3, #12
 8009a38:	f04f 0400 	mov.w	r4, #0
 8009a3c:	e01c      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a3e:	f04f 030a 	mov.w	r3, #10
 8009a42:	f04f 0400 	mov.w	r4, #0
 8009a46:	e017      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a48:	f04f 0308 	mov.w	r3, #8
 8009a4c:	f04f 0400 	mov.w	r4, #0
 8009a50:	e012      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a52:	f04f 0306 	mov.w	r3, #6
 8009a56:	f04f 0400 	mov.w	r4, #0
 8009a5a:	e00d      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a5c:	f04f 0304 	mov.w	r3, #4
 8009a60:	f04f 0400 	mov.w	r4, #0
 8009a64:	e008      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a66:	f04f 0302 	mov.w	r3, #2
 8009a6a:	f04f 0400 	mov.w	r4, #0
 8009a6e:	e003      	b.n	8009a78 <UART_SetConfig+0x7f8>
 8009a70:	f04f 0301 	mov.w	r3, #1
 8009a74:	f04f 0400 	mov.w	r4, #0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4623      	mov	r3, r4
 8009a7c:	f7f6 fb88 	bl	8000190 <__aeabi_uldivmod>
 8009a80:	4603      	mov	r3, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	4619      	mov	r1, r3
 8009a86:	4622      	mov	r2, r4
 8009a88:	f04f 0300 	mov.w	r3, #0
 8009a8c:	f04f 0400 	mov.w	r4, #0
 8009a90:	0214      	lsls	r4, r2, #8
 8009a92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a96:	020b      	lsls	r3, r1, #8
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6852      	ldr	r2, [r2, #4]
 8009a9c:	0852      	lsrs	r2, r2, #1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	f04f 0200 	mov.w	r2, #0
 8009aa4:	eb13 0b01 	adds.w	fp, r3, r1
 8009aa8:	eb44 0c02 	adc.w	ip, r4, r2
 8009aac:	4658      	mov	r0, fp
 8009aae:	4661      	mov	r1, ip
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f04f 0400 	mov.w	r4, #0
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4623      	mov	r3, r4
 8009abc:	f7f6 fb68 	bl	8000190 <__aeabi_uldivmod>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	61fb      	str	r3, [r7, #28]
            break;
 8009ac6:	e0ac      	b.n	8009c22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8089 	beq.w	8009be4 <UART_SetConfig+0x964>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d05b      	beq.n	8009b92 <UART_SetConfig+0x912>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d052      	beq.n	8009b88 <UART_SetConfig+0x908>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d04a      	beq.n	8009b80 <UART_SetConfig+0x900>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d041      	beq.n	8009b76 <UART_SetConfig+0x8f6>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d039      	beq.n	8009b6e <UART_SetConfig+0x8ee>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	2b06      	cmp	r3, #6
 8009b00:	d031      	beq.n	8009b66 <UART_SetConfig+0x8e6>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	2b07      	cmp	r3, #7
 8009b08:	d028      	beq.n	8009b5c <UART_SetConfig+0x8dc>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d01f      	beq.n	8009b52 <UART_SetConfig+0x8d2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	2b09      	cmp	r3, #9
 8009b18:	d016      	beq.n	8009b48 <UART_SetConfig+0x8c8>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	2b0a      	cmp	r3, #10
 8009b20:	d00d      	beq.n	8009b3e <UART_SetConfig+0x8be>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	2b0b      	cmp	r3, #11
 8009b28:	d104      	bne.n	8009b34 <UART_SetConfig+0x8b4>
 8009b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2e:	f04f 0400 	mov.w	r4, #0
 8009b32:	e05b      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009b38:	f04f 0400 	mov.w	r4, #0
 8009b3c:	e056      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b42:	f04f 0400 	mov.w	r4, #0
 8009b46:	e051      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b4c:	f04f 0400 	mov.w	r4, #0
 8009b50:	e04c      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b56:	f04f 0400 	mov.w	r4, #0
 8009b5a:	e047      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b60:	f04f 0400 	mov.w	r4, #0
 8009b64:	e042      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b66:	4b1c      	ldr	r3, [pc, #112]	; (8009bd8 <UART_SetConfig+0x958>)
 8009b68:	f04f 0400 	mov.w	r4, #0
 8009b6c:	e03e      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b6e:	4b1b      	ldr	r3, [pc, #108]	; (8009bdc <UART_SetConfig+0x95c>)
 8009b70:	f04f 0400 	mov.w	r4, #0
 8009b74:	e03a      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b7a:	f04f 0400 	mov.w	r4, #0
 8009b7e:	e035      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b80:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <UART_SetConfig+0x960>)
 8009b82:	f04f 0400 	mov.w	r4, #0
 8009b86:	e031      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b8c:	f04f 0400 	mov.w	r4, #0
 8009b90:	e02c      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	e027      	b.n	8009bec <UART_SetConfig+0x96c>
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	14585500 	.word	0x14585500
 8009ba4:	00000000 	.word	0x00000000
 8009ba8:	28b0aa00 	.word	0x28b0aa00
 8009bac:	00000000 	.word	0x00000000
 8009bb0:	00f42400 	.word	0x00f42400
 8009bb4:	f4240000 	.word	0xf4240000
 8009bb8:	01e84800 	.word	0x01e84800
 8009bbc:	03d09000 	.word	0x03d09000
 8009bc0:	07a12000 	.word	0x07a12000
 8009bc4:	0f424000 	.word	0x0f424000
 8009bc8:	186a0000 	.word	0x186a0000
 8009bcc:	1e848000 	.word	0x1e848000
 8009bd0:	3d090000 	.word	0x3d090000
 8009bd4:	7a120000 	.word	0x7a120000
 8009bd8:	000aaa00 	.word	0x000aaa00
 8009bdc:	000ccc00 	.word	0x000ccc00
 8009be0:	00155500 	.word	0x00155500
 8009be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009be8:	f04f 0400 	mov.w	r4, #0
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6852      	ldr	r2, [r2, #4]
 8009bf0:	0852      	lsrs	r2, r2, #1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	f04f 0200 	mov.w	r2, #0
 8009bf8:	eb13 0b01 	adds.w	fp, r3, r1
 8009bfc:	eb44 0c02 	adc.w	ip, r4, r2
 8009c00:	4658      	mov	r0, fp
 8009c02:	4661      	mov	r1, ip
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f04f 0400 	mov.w	r4, #0
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4623      	mov	r3, r4
 8009c10:	f7f6 fabe 	bl	8000190 <__aeabi_uldivmod>
 8009c14:	4603      	mov	r3, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	61fb      	str	r3, [r7, #28]
            break;
 8009c1a:	e002      	b.n	8009c22 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	76fb      	strb	r3, [r7, #27]
            break;
 8009c20:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c28:	d308      	bcc.n	8009c3c <UART_SetConfig+0x9bc>
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c30:	d204      	bcs.n	8009c3c <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	60da      	str	r2, [r3, #12]
 8009c3a:	e35b      	b.n	800a2f4 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	76fb      	strb	r3, [r7, #27]
 8009c40:	e358      	b.n	800a2f4 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4a:	f040 81a6 	bne.w	8009f9a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c52:	3b01      	subs	r3, #1
 8009c54:	2b07      	cmp	r3, #7
 8009c56:	f200 8180 	bhi.w	8009f5a <UART_SetConfig+0xcda>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <UART_SetConfig+0x9e0>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009d39 	.word	0x08009d39
 8009c68:	08009f5b 	.word	0x08009f5b
 8009c6c:	08009de1 	.word	0x08009de1
 8009c70:	08009f5b 	.word	0x08009f5b
 8009c74:	08009f5b 	.word	0x08009f5b
 8009c78:	08009f5b 	.word	0x08009f5b
 8009c7c:	08009e99 	.word	0x08009e99
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c80:	f7fd ff82 	bl	8007b88 <HAL_RCC_GetPCLK2Freq>
 8009c84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d044      	beq.n	8009d18 <UART_SetConfig+0xa98>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d03e      	beq.n	8009d14 <UART_SetConfig+0xa94>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d038      	beq.n	8009d10 <UART_SetConfig+0xa90>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d032      	beq.n	8009d0c <UART_SetConfig+0xa8c>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d02c      	beq.n	8009d08 <UART_SetConfig+0xa88>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	d026      	beq.n	8009d04 <UART_SetConfig+0xa84>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	2b06      	cmp	r3, #6
 8009cbc:	d020      	beq.n	8009d00 <UART_SetConfig+0xa80>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	d01a      	beq.n	8009cfc <UART_SetConfig+0xa7c>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d014      	beq.n	8009cf8 <UART_SetConfig+0xa78>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	d00e      	beq.n	8009cf4 <UART_SetConfig+0xa74>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b0a      	cmp	r3, #10
 8009cdc:	d008      	beq.n	8009cf0 <UART_SetConfig+0xa70>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	2b0b      	cmp	r3, #11
 8009ce4:	d102      	bne.n	8009cec <UART_SetConfig+0xa6c>
 8009ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cea:	e016      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e014      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	e012      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	e010      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	e00e      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	e00c      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d00:	230c      	movs	r3, #12
 8009d02:	e00a      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d04:	230a      	movs	r3, #10
 8009d06:	e008      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	e006      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d0c:	2306      	movs	r3, #6
 8009d0e:	e004      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d10:	2304      	movs	r3, #4
 8009d12:	e002      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e000      	b.n	8009d1a <UART_SetConfig+0xa9a>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	005a      	lsls	r2, r3, #1
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	441a      	add	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	61fb      	str	r3, [r7, #28]
        break;
 8009d36:	e113      	b.n	8009f60 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d043      	beq.n	8009dc8 <UART_SetConfig+0xb48>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d03d      	beq.n	8009dc4 <UART_SetConfig+0xb44>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d037      	beq.n	8009dc0 <UART_SetConfig+0xb40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d031      	beq.n	8009dbc <UART_SetConfig+0xb3c>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d02b      	beq.n	8009db8 <UART_SetConfig+0xb38>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d025      	beq.n	8009db4 <UART_SetConfig+0xb34>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	2b06      	cmp	r3, #6
 8009d6e:	d01f      	beq.n	8009db0 <UART_SetConfig+0xb30>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	2b07      	cmp	r3, #7
 8009d76:	d019      	beq.n	8009dac <UART_SetConfig+0xb2c>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d013      	beq.n	8009da8 <UART_SetConfig+0xb28>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	2b09      	cmp	r3, #9
 8009d86:	d00d      	beq.n	8009da4 <UART_SetConfig+0xb24>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	2b0a      	cmp	r3, #10
 8009d8e:	d007      	beq.n	8009da0 <UART_SetConfig+0xb20>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	2b0b      	cmp	r3, #11
 8009d96:	d101      	bne.n	8009d9c <UART_SetConfig+0xb1c>
 8009d98:	4b8c      	ldr	r3, [pc, #560]	; (8009fcc <UART_SetConfig+0xd4c>)
 8009d9a:	e016      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009d9c:	4b8c      	ldr	r3, [pc, #560]	; (8009fd0 <UART_SetConfig+0xd50>)
 8009d9e:	e014      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009da0:	4b8c      	ldr	r3, [pc, #560]	; (8009fd4 <UART_SetConfig+0xd54>)
 8009da2:	e012      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009da4:	4b8c      	ldr	r3, [pc, #560]	; (8009fd8 <UART_SetConfig+0xd58>)
 8009da6:	e010      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009da8:	4b8c      	ldr	r3, [pc, #560]	; (8009fdc <UART_SetConfig+0xd5c>)
 8009daa:	e00e      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009dac:	4b8c      	ldr	r3, [pc, #560]	; (8009fe0 <UART_SetConfig+0xd60>)
 8009dae:	e00c      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009db0:	4b8c      	ldr	r3, [pc, #560]	; (8009fe4 <UART_SetConfig+0xd64>)
 8009db2:	e00a      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009db4:	4b8c      	ldr	r3, [pc, #560]	; (8009fe8 <UART_SetConfig+0xd68>)
 8009db6:	e008      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009db8:	4b8c      	ldr	r3, [pc, #560]	; (8009fec <UART_SetConfig+0xd6c>)
 8009dba:	e006      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009dbc:	4b8c      	ldr	r3, [pc, #560]	; (8009ff0 <UART_SetConfig+0xd70>)
 8009dbe:	e004      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009dc0:	4b8c      	ldr	r3, [pc, #560]	; (8009ff4 <UART_SetConfig+0xd74>)
 8009dc2:	e002      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009dc4:	4b8c      	ldr	r3, [pc, #560]	; (8009ff8 <UART_SetConfig+0xd78>)
 8009dc6:	e000      	b.n	8009dca <UART_SetConfig+0xb4a>
 8009dc8:	4b81      	ldr	r3, [pc, #516]	; (8009fd0 <UART_SetConfig+0xd50>)
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6852      	ldr	r2, [r2, #4]
 8009dce:	0852      	lsrs	r2, r2, #1
 8009dd0:	441a      	add	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	61fb      	str	r3, [r7, #28]
        break;
 8009dde:	e0bf      	b.n	8009f60 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009de0:	f7fd fe3e 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 8009de4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d044      	beq.n	8009e78 <UART_SetConfig+0xbf8>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d03e      	beq.n	8009e74 <UART_SetConfig+0xbf4>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d038      	beq.n	8009e70 <UART_SetConfig+0xbf0>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d032      	beq.n	8009e6c <UART_SetConfig+0xbec>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d02c      	beq.n	8009e68 <UART_SetConfig+0xbe8>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	d026      	beq.n	8009e64 <UART_SetConfig+0xbe4>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b06      	cmp	r3, #6
 8009e1c:	d020      	beq.n	8009e60 <UART_SetConfig+0xbe0>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	2b07      	cmp	r3, #7
 8009e24:	d01a      	beq.n	8009e5c <UART_SetConfig+0xbdc>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	2b08      	cmp	r3, #8
 8009e2c:	d014      	beq.n	8009e58 <UART_SetConfig+0xbd8>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	2b09      	cmp	r3, #9
 8009e34:	d00e      	beq.n	8009e54 <UART_SetConfig+0xbd4>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2b0a      	cmp	r3, #10
 8009e3c:	d008      	beq.n	8009e50 <UART_SetConfig+0xbd0>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2b0b      	cmp	r3, #11
 8009e44:	d102      	bne.n	8009e4c <UART_SetConfig+0xbcc>
 8009e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e4a:	e016      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e014      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	e012      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	e010      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e58:	2320      	movs	r3, #32
 8009e5a:	e00e      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	e00c      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e60:	230c      	movs	r3, #12
 8009e62:	e00a      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e64:	230a      	movs	r3, #10
 8009e66:	e008      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	e006      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e6c:	2306      	movs	r3, #6
 8009e6e:	e004      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e70:	2304      	movs	r3, #4
 8009e72:	e002      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e000      	b.n	8009e7a <UART_SetConfig+0xbfa>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e80:	005a      	lsls	r2, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	085b      	lsrs	r3, r3, #1
 8009e88:	441a      	add	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	61fb      	str	r3, [r7, #28]
        break;
 8009e96:	e063      	b.n	8009f60 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d04f      	beq.n	8009f40 <UART_SetConfig+0xcc0>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d048      	beq.n	8009f3a <UART_SetConfig+0xcba>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d041      	beq.n	8009f34 <UART_SetConfig+0xcb4>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d03a      	beq.n	8009f2e <UART_SetConfig+0xcae>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d033      	beq.n	8009f28 <UART_SetConfig+0xca8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d02c      	beq.n	8009f22 <UART_SetConfig+0xca2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b06      	cmp	r3, #6
 8009ece:	d025      	beq.n	8009f1c <UART_SetConfig+0xc9c>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	2b07      	cmp	r3, #7
 8009ed6:	d01e      	beq.n	8009f16 <UART_SetConfig+0xc96>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d017      	beq.n	8009f10 <UART_SetConfig+0xc90>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d010      	beq.n	8009f0a <UART_SetConfig+0xc8a>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b0a      	cmp	r3, #10
 8009eee:	d009      	beq.n	8009f04 <UART_SetConfig+0xc84>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b0b      	cmp	r3, #11
 8009ef6:	d102      	bne.n	8009efe <UART_SetConfig+0xc7e>
 8009ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009efc:	e022      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f02:	e01f      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f08:	e01c      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0e:	e019      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f14:	e016      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f1a:	e013      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f1c:	f241 5354 	movw	r3, #5460	; 0x1554
 8009f20:	e010      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f22:	f641 1398 	movw	r3, #6552	; 0x1998
 8009f26:	e00d      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f2c:	e00a      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f2e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009f32:	e007      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f38:	e004      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3e:	e001      	b.n	8009f44 <UART_SetConfig+0xcc4>
 8009f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6852      	ldr	r2, [r2, #4]
 8009f48:	0852      	lsrs	r2, r2, #1
 8009f4a:	441a      	add	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	61fb      	str	r3, [r7, #28]
        break;
 8009f58:	e002      	b.n	8009f60 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	76fb      	strb	r3, [r7, #27]
        break;
 8009f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	2b0f      	cmp	r3, #15
 8009f64:	d916      	bls.n	8009f94 <UART_SetConfig+0xd14>
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f6c:	d212      	bcs.n	8009f94 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f023 030f 	bic.w	r3, r3, #15
 8009f76:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	89fb      	ldrh	r3, [r7, #14]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	89fa      	ldrh	r2, [r7, #14]
 8009f90:	60da      	str	r2, [r3, #12]
 8009f92:	e1af      	b.n	800a2f4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	76fb      	strb	r3, [r7, #27]
 8009f98:	e1ac      	b.n	800a2f4 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8009f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	2b07      	cmp	r3, #7
 8009fa2:	f200 8196 	bhi.w	800a2d2 <UART_SetConfig+0x1052>
 8009fa6:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <UART_SetConfig+0xd2c>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	08009ffd 	.word	0x08009ffd
 8009fb0:	0800a0b3 	.word	0x0800a0b3
 8009fb4:	0800a2d3 	.word	0x0800a2d3
 8009fb8:	0800a15d 	.word	0x0800a15d
 8009fbc:	0800a2d3 	.word	0x0800a2d3
 8009fc0:	0800a2d3 	.word	0x0800a2d3
 8009fc4:	0800a2d3 	.word	0x0800a2d3
 8009fc8:	0800a213 	.word	0x0800a213
 8009fcc:	0001e848 	.word	0x0001e848
 8009fd0:	01e84800 	.word	0x01e84800
 8009fd4:	0003d090 	.word	0x0003d090
 8009fd8:	0007a120 	.word	0x0007a120
 8009fdc:	000f4240 	.word	0x000f4240
 8009fe0:	001e8480 	.word	0x001e8480
 8009fe4:	0028b0aa 	.word	0x0028b0aa
 8009fe8:	0030d400 	.word	0x0030d400
 8009fec:	003d0900 	.word	0x003d0900
 8009ff0:	00516154 	.word	0x00516154
 8009ff4:	007a1200 	.word	0x007a1200
 8009ff8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ffc:	f7fd fdc4 	bl	8007b88 <HAL_RCC_GetPCLK2Freq>
 800a000:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b00      	cmp	r3, #0
 800a008:	d044      	beq.n	800a094 <UART_SetConfig+0xe14>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d03e      	beq.n	800a090 <UART_SetConfig+0xe10>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b02      	cmp	r3, #2
 800a018:	d038      	beq.n	800a08c <UART_SetConfig+0xe0c>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d032      	beq.n	800a088 <UART_SetConfig+0xe08>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b04      	cmp	r3, #4
 800a028:	d02c      	beq.n	800a084 <UART_SetConfig+0xe04>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	2b05      	cmp	r3, #5
 800a030:	d026      	beq.n	800a080 <UART_SetConfig+0xe00>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b06      	cmp	r3, #6
 800a038:	d020      	beq.n	800a07c <UART_SetConfig+0xdfc>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	2b07      	cmp	r3, #7
 800a040:	d01a      	beq.n	800a078 <UART_SetConfig+0xdf8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b08      	cmp	r3, #8
 800a048:	d014      	beq.n	800a074 <UART_SetConfig+0xdf4>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2b09      	cmp	r3, #9
 800a050:	d00e      	beq.n	800a070 <UART_SetConfig+0xdf0>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	2b0a      	cmp	r3, #10
 800a058:	d008      	beq.n	800a06c <UART_SetConfig+0xdec>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2b0b      	cmp	r3, #11
 800a060:	d102      	bne.n	800a068 <UART_SetConfig+0xde8>
 800a062:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a066:	e016      	b.n	800a096 <UART_SetConfig+0xe16>
 800a068:	2301      	movs	r3, #1
 800a06a:	e014      	b.n	800a096 <UART_SetConfig+0xe16>
 800a06c:	2380      	movs	r3, #128	; 0x80
 800a06e:	e012      	b.n	800a096 <UART_SetConfig+0xe16>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	e010      	b.n	800a096 <UART_SetConfig+0xe16>
 800a074:	2320      	movs	r3, #32
 800a076:	e00e      	b.n	800a096 <UART_SetConfig+0xe16>
 800a078:	2310      	movs	r3, #16
 800a07a:	e00c      	b.n	800a096 <UART_SetConfig+0xe16>
 800a07c:	230c      	movs	r3, #12
 800a07e:	e00a      	b.n	800a096 <UART_SetConfig+0xe16>
 800a080:	230a      	movs	r3, #10
 800a082:	e008      	b.n	800a096 <UART_SetConfig+0xe16>
 800a084:	2308      	movs	r3, #8
 800a086:	e006      	b.n	800a096 <UART_SetConfig+0xe16>
 800a088:	2306      	movs	r3, #6
 800a08a:	e004      	b.n	800a096 <UART_SetConfig+0xe16>
 800a08c:	2304      	movs	r3, #4
 800a08e:	e002      	b.n	800a096 <UART_SetConfig+0xe16>
 800a090:	2302      	movs	r3, #2
 800a092:	e000      	b.n	800a096 <UART_SetConfig+0xe16>
 800a094:	2301      	movs	r3, #1
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	fbb2 f2f3 	udiv	r2, r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	085b      	lsrs	r3, r3, #1
 800a0a2:	441a      	add	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	61fb      	str	r3, [r7, #28]
        break;
 800a0b0:	e112      	b.n	800a2d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d044      	beq.n	800a144 <UART_SetConfig+0xec4>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d03e      	beq.n	800a140 <UART_SetConfig+0xec0>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d038      	beq.n	800a13c <UART_SetConfig+0xebc>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b03      	cmp	r3, #3
 800a0d0:	d032      	beq.n	800a138 <UART_SetConfig+0xeb8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d02c      	beq.n	800a134 <UART_SetConfig+0xeb4>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d026      	beq.n	800a130 <UART_SetConfig+0xeb0>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2b06      	cmp	r3, #6
 800a0e8:	d020      	beq.n	800a12c <UART_SetConfig+0xeac>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	2b07      	cmp	r3, #7
 800a0f0:	d01a      	beq.n	800a128 <UART_SetConfig+0xea8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d014      	beq.n	800a124 <UART_SetConfig+0xea4>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	d00e      	beq.n	800a120 <UART_SetConfig+0xea0>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b0a      	cmp	r3, #10
 800a108:	d008      	beq.n	800a11c <UART_SetConfig+0xe9c>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b0b      	cmp	r3, #11
 800a110:	d102      	bne.n	800a118 <UART_SetConfig+0xe98>
 800a112:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a116:	e016      	b.n	800a146 <UART_SetConfig+0xec6>
 800a118:	4b80      	ldr	r3, [pc, #512]	; (800a31c <UART_SetConfig+0x109c>)
 800a11a:	e014      	b.n	800a146 <UART_SetConfig+0xec6>
 800a11c:	4b80      	ldr	r3, [pc, #512]	; (800a320 <UART_SetConfig+0x10a0>)
 800a11e:	e012      	b.n	800a146 <UART_SetConfig+0xec6>
 800a120:	4b80      	ldr	r3, [pc, #512]	; (800a324 <UART_SetConfig+0x10a4>)
 800a122:	e010      	b.n	800a146 <UART_SetConfig+0xec6>
 800a124:	4b80      	ldr	r3, [pc, #512]	; (800a328 <UART_SetConfig+0x10a8>)
 800a126:	e00e      	b.n	800a146 <UART_SetConfig+0xec6>
 800a128:	4b80      	ldr	r3, [pc, #512]	; (800a32c <UART_SetConfig+0x10ac>)
 800a12a:	e00c      	b.n	800a146 <UART_SetConfig+0xec6>
 800a12c:	4b80      	ldr	r3, [pc, #512]	; (800a330 <UART_SetConfig+0x10b0>)
 800a12e:	e00a      	b.n	800a146 <UART_SetConfig+0xec6>
 800a130:	4b80      	ldr	r3, [pc, #512]	; (800a334 <UART_SetConfig+0x10b4>)
 800a132:	e008      	b.n	800a146 <UART_SetConfig+0xec6>
 800a134:	4b80      	ldr	r3, [pc, #512]	; (800a338 <UART_SetConfig+0x10b8>)
 800a136:	e006      	b.n	800a146 <UART_SetConfig+0xec6>
 800a138:	4b80      	ldr	r3, [pc, #512]	; (800a33c <UART_SetConfig+0x10bc>)
 800a13a:	e004      	b.n	800a146 <UART_SetConfig+0xec6>
 800a13c:	4b80      	ldr	r3, [pc, #512]	; (800a340 <UART_SetConfig+0x10c0>)
 800a13e:	e002      	b.n	800a146 <UART_SetConfig+0xec6>
 800a140:	4b80      	ldr	r3, [pc, #512]	; (800a344 <UART_SetConfig+0x10c4>)
 800a142:	e000      	b.n	800a146 <UART_SetConfig+0xec6>
 800a144:	4b75      	ldr	r3, [pc, #468]	; (800a31c <UART_SetConfig+0x109c>)
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6852      	ldr	r2, [r2, #4]
 800a14a:	0852      	lsrs	r2, r2, #1
 800a14c:	441a      	add	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	fbb2 f3f3 	udiv	r3, r2, r3
 800a156:	b29b      	uxth	r3, r3
 800a158:	61fb      	str	r3, [r7, #28]
        break;
 800a15a:	e0bd      	b.n	800a2d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a15c:	f7fd fc80 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 800a160:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d044      	beq.n	800a1f4 <UART_SetConfig+0xf74>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d03e      	beq.n	800a1f0 <UART_SetConfig+0xf70>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b02      	cmp	r3, #2
 800a178:	d038      	beq.n	800a1ec <UART_SetConfig+0xf6c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d032      	beq.n	800a1e8 <UART_SetConfig+0xf68>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b04      	cmp	r3, #4
 800a188:	d02c      	beq.n	800a1e4 <UART_SetConfig+0xf64>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d026      	beq.n	800a1e0 <UART_SetConfig+0xf60>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b06      	cmp	r3, #6
 800a198:	d020      	beq.n	800a1dc <UART_SetConfig+0xf5c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b07      	cmp	r3, #7
 800a1a0:	d01a      	beq.n	800a1d8 <UART_SetConfig+0xf58>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d014      	beq.n	800a1d4 <UART_SetConfig+0xf54>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b09      	cmp	r3, #9
 800a1b0:	d00e      	beq.n	800a1d0 <UART_SetConfig+0xf50>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b0a      	cmp	r3, #10
 800a1b8:	d008      	beq.n	800a1cc <UART_SetConfig+0xf4c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b0b      	cmp	r3, #11
 800a1c0:	d102      	bne.n	800a1c8 <UART_SetConfig+0xf48>
 800a1c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c6:	e016      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e014      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	e012      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1d0:	2340      	movs	r3, #64	; 0x40
 800a1d2:	e010      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	e00e      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1d8:	2310      	movs	r3, #16
 800a1da:	e00c      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1dc:	230c      	movs	r3, #12
 800a1de:	e00a      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1e0:	230a      	movs	r3, #10
 800a1e2:	e008      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1e4:	2308      	movs	r3, #8
 800a1e6:	e006      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1e8:	2306      	movs	r3, #6
 800a1ea:	e004      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	e002      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e000      	b.n	800a1f6 <UART_SetConfig+0xf76>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	085b      	lsrs	r3, r3, #1
 800a202:	441a      	add	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	61fb      	str	r3, [r7, #28]
        break;
 800a210:	e062      	b.n	800a2d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d04e      	beq.n	800a2b8 <UART_SetConfig+0x1038>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d047      	beq.n	800a2b2 <UART_SetConfig+0x1032>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b02      	cmp	r3, #2
 800a228:	d040      	beq.n	800a2ac <UART_SetConfig+0x102c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d039      	beq.n	800a2a6 <UART_SetConfig+0x1026>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b04      	cmp	r3, #4
 800a238:	d032      	beq.n	800a2a0 <UART_SetConfig+0x1020>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b05      	cmp	r3, #5
 800a240:	d02b      	beq.n	800a29a <UART_SetConfig+0x101a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b06      	cmp	r3, #6
 800a248:	d024      	beq.n	800a294 <UART_SetConfig+0x1014>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b07      	cmp	r3, #7
 800a250:	d01d      	beq.n	800a28e <UART_SetConfig+0x100e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b08      	cmp	r3, #8
 800a258:	d016      	beq.n	800a288 <UART_SetConfig+0x1008>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b09      	cmp	r3, #9
 800a260:	d00f      	beq.n	800a282 <UART_SetConfig+0x1002>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b0a      	cmp	r3, #10
 800a268:	d008      	beq.n	800a27c <UART_SetConfig+0xffc>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b0b      	cmp	r3, #11
 800a270:	d101      	bne.n	800a276 <UART_SetConfig+0xff6>
 800a272:	2380      	movs	r3, #128	; 0x80
 800a274:	e022      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a27a:	e01f      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a280:	e01c      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a282:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a286:	e019      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28c:	e016      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a28e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a292:	e013      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a294:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a298:	e010      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a29a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a29e:	e00d      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2a4:	e00a      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a2a6:	f241 5355 	movw	r3, #5461	; 0x1555
 800a2aa:	e007      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a2ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2b0:	e004      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a2b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2b6:	e001      	b.n	800a2bc <UART_SetConfig+0x103c>
 800a2b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6852      	ldr	r2, [r2, #4]
 800a2c0:	0852      	lsrs	r2, r2, #1
 800a2c2:	441a      	add	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	61fb      	str	r3, [r7, #28]
        break;
 800a2d0:	e002      	b.n	800a2d8 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	76fb      	strb	r3, [r7, #27]
        break;
 800a2d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	d908      	bls.n	800a2f0 <UART_SetConfig+0x1070>
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e4:	d204      	bcs.n	800a2f0 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	60da      	str	r2, [r3, #12]
 800a2ee:	e001      	b.n	800a2f4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a310:	7efb      	ldrb	r3, [r7, #27]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3728      	adds	r7, #40	; 0x28
 800a316:	46bd      	mov	sp, r7
 800a318:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a31c:	00f42400 	.word	0x00f42400
 800a320:	0001e848 	.word	0x0001e848
 800a324:	0003d090 	.word	0x0003d090
 800a328:	0007a120 	.word	0x0007a120
 800a32c:	000f4240 	.word	0x000f4240
 800a330:	00145855 	.word	0x00145855
 800a334:	00186a00 	.word	0x00186a00
 800a338:	001e8480 	.word	0x001e8480
 800a33c:	0028b0aa 	.word	0x0028b0aa
 800a340:	003d0900 	.word	0x003d0900
 800a344:	007a1200 	.word	0x007a1200

0800a348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	f003 0308 	and.w	r3, r3, #8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01a      	beq.n	800a45e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a446:	d10a      	bne.n	800a45e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]
  }
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a49c:	f7fb f814 	bl	80054c8 <HAL_GetTick>
 800a4a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d10e      	bne.n	800a4ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f82c 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e022      	b.n	800a514 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d10e      	bne.n	800a4fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f816 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e00c      	b.n	800a514 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	4613      	mov	r3, r2
 800a52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a52c:	e062      	b.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d05e      	beq.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a536:	f7fa ffc7 	bl	80054c8 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	429a      	cmp	r2, r3
 800a544:	d302      	bcc.n	800a54c <UART_WaitOnFlagUntilTimeout+0x30>
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d11d      	bne.n	800a588 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a55a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0201 	bic.w	r2, r2, #1
 800a56a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e045      	b.n	800a614 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d02e      	beq.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5a4:	d126      	bne.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ae:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0201 	bic.w	r2, r2, #1
 800a5ce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e00f      	b.n	800a614 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	69da      	ldr	r2, [r3, #28]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	429a      	cmp	r2, r3
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d08d      	beq.n	800a52e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a632:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a642:	f023 0301 	bic.w	r3, r3, #1
 800a646:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7fe fdf3 	bl	800926c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7f6 fe39 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6de:	bf00      	nop
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d101      	bne.n	800a714 <HAL_UARTEx_DisableFifoMode+0x16>
 800a710:	2302      	movs	r3, #2
 800a712:	e027      	b.n	800a764 <HAL_UARTEx_DisableFifoMode+0x66>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2224      	movs	r2, #36	; 0x24
 800a720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a742:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a784:	2302      	movs	r3, #2
 800a786:	e02d      	b.n	800a7e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2224      	movs	r2, #36	; 0x24
 800a794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0201 	bic.w	r2, r2, #1
 800a7ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f84f 	bl	800a868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a800:	2302      	movs	r3, #2
 800a802:	e02d      	b.n	800a860 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2224      	movs	r2, #36	; 0x24
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 0201 	bic.w	r2, r2, #1
 800a82a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	430a      	orrs	r2, r1
 800a83e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f811 	bl	800a868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b089      	sub	sp, #36	; 0x24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a870:	4a2f      	ldr	r2, [pc, #188]	; (800a930 <UARTEx_SetNbDataToProcess+0xc8>)
 800a872:	f107 0314 	add.w	r3, r7, #20
 800a876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a87a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a87e:	4a2d      	ldr	r2, [pc, #180]	; (800a934 <UARTEx_SetNbDataToProcess+0xcc>)
 800a880:	f107 030c 	add.w	r3, r7, #12
 800a884:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a888:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a890:	2b00      	cmp	r3, #0
 800a892:	d108      	bne.n	800a8a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8a4:	e03d      	b.n	800a922 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	0e5b      	lsrs	r3, r3, #25
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0307 	and.w	r3, r3, #7
 800a8bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	0f5b      	lsrs	r3, r3, #29
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a8ce:	7fbb      	ldrb	r3, [r7, #30]
 800a8d0:	7f3a      	ldrb	r2, [r7, #28]
 800a8d2:	f107 0120 	add.w	r1, r7, #32
 800a8d6:	440a      	add	r2, r1
 800a8d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a8dc:	fb02 f303 	mul.w	r3, r2, r3
 800a8e0:	7f3a      	ldrb	r2, [r7, #28]
 800a8e2:	f107 0120 	add.w	r1, r7, #32
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a8f8:	7ffb      	ldrb	r3, [r7, #31]
 800a8fa:	7f7a      	ldrb	r2, [r7, #29]
 800a8fc:	f107 0120 	add.w	r1, r7, #32
 800a900:	440a      	add	r2, r1
 800a902:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a906:	fb02 f303 	mul.w	r3, r2, r3
 800a90a:	7f7a      	ldrb	r2, [r7, #29]
 800a90c:	f107 0120 	add.w	r1, r7, #32
 800a910:	440a      	add	r2, r1
 800a912:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a916:	fb93 f3f2 	sdiv	r3, r3, r2
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a922:	bf00      	nop
 800a924:	3724      	adds	r7, #36	; 0x24
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	0800dbe8 	.word	0x0800dbe8
 800a934:	0800dbf0 	.word	0x0800dbf0

0800a938 <MX_MEMS_Init>:
#include "iks01a2_motion_sensors.h"

extern IKS01A2_MOTION_SENSOR_Axes_t accelero_val;

void MX_MEMS_Init(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800a93c:	2102      	movs	r1, #2
 800a93e:	2000      	movs	r0, #0
 800a940:	f7fa f9d6 	bl	8004cf0 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800a944:	2102      	movs	r1, #2
 800a946:	2000      	movs	r0, #0
 800a948:	f7fa fac8 	bl	8004edc <IKS01A2_MOTION_SENSOR_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800a94c:	bf00      	nop
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelero_val);
 800a954:	4a03      	ldr	r2, [pc, #12]	; (800a964 <MX_MEMS_Process+0x14>)
 800a956:	2102      	movs	r1, #2
 800a958:	2000      	movs	r0, #0
 800a95a:	f7fa fb01 	bl	8004f60 <IKS01A2_MOTION_SENSOR_GetAxes>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800a95e:	bf00      	nop
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	200002f0 	.word	0x200002f0

0800a968 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a972:	f107 0308 	add.w	r3, r7, #8
 800a976:	2218      	movs	r2, #24
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 ff98 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a980:	233f      	movs	r3, #63	; 0x3f
 800a982:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a984:	2381      	movs	r3, #129	; 0x81
 800a986:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a988:	1dfb      	adds	r3, r7, #7
 800a98a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a98c:	2301      	movs	r3, #1
 800a98e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a990:	f107 0308 	add.w	r3, r7, #8
 800a994:	2100      	movs	r1, #0
 800a996:	4618      	mov	r0, r3
 800a998:	f001 fb58 	bl	800c04c <hci_send_req>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da01      	bge.n	800a9a6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a9a2:	23ff      	movs	r3, #255	; 0xff
 800a9a4:	e005      	b.n	800a9b2 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	e000      	b.n	800a9b2 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800a9ba:	b5b0      	push	{r4, r5, r7, lr}
 800a9bc:	b0ce      	sub	sp, #312	; 0x138
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	1dfb      	adds	r3, r7, #7
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	801a      	strh	r2, [r3, #0]
 800a9d4:	1cbb      	adds	r3, r7, #2
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	1dbb      	adds	r3, r7, #6
 800a9dc:	460a      	mov	r2, r1
 800a9de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a9e0:	f107 0310 	add.w	r3, r7, #16
 800a9e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a9e8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	f107 0210 	add.w	r2, r7, #16
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a9f8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a9fc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aa00:	4413      	add	r3, r2
 800aa02:	3309      	adds	r3, #9
 800aa04:	f107 0210 	add.w	r2, r7, #16
 800aa08:	4413      	add	r3, r2
 800aa0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa0e:	f107 030f 	add.w	r3, r7, #15
 800aa12:	2200      	movs	r2, #0
 800aa14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800aa1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa20:	1dfa      	adds	r2, r7, #7
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800aa30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa34:	1d3a      	adds	r2, r7, #4
 800aa36:	8812      	ldrh	r2, [r2, #0]
 800aa38:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800aa3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa40:	3302      	adds	r3, #2
 800aa42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800aa46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa4a:	1cba      	adds	r2, r7, #2
 800aa4c:	8812      	ldrh	r2, [r2, #0]
 800aa4e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800aa52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa56:	3302      	adds	r3, #2
 800aa58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800aa5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa60:	1dba      	adds	r2, r7, #6
 800aa62:	7812      	ldrb	r2, [r2, #0]
 800aa64:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aa66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800aa70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa74:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aa78:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aa7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800aa84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa88:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aa8c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800aa8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa92:	3301      	adds	r3, #1
 800aa94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800aa98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aaa2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fef2 	bl	800b890 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800aaac:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aab0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aab4:	4413      	add	r3, r2
 800aab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800aaba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aabe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aac2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800aac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aac8:	3301      	adds	r3, #1
 800aaca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800aace:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aad2:	3301      	adds	r3, #1
 800aad4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aad8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fed7 	bl	800b890 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800aae2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aae6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aaea:	4413      	add	r3, r2
 800aaec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800aaf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800aaf8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800aafa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aafe:	3302      	adds	r3, #2
 800ab00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800ab04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab08:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ab0c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ab0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab12:	3302      	adds	r3, #2
 800ab14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab1c:	2218      	movs	r2, #24
 800ab1e:	2100      	movs	r1, #0
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fec5 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab26:	233f      	movs	r3, #63	; 0x3f
 800ab28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ab2c:	2383      	movs	r3, #131	; 0x83
 800ab2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab32:	f107 0310 	add.w	r3, r7, #16
 800ab36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab42:	f107 030f 	add.w	r3, r7, #15
 800ab46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 fa78 	bl	800c04c <hci_send_req>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	da01      	bge.n	800ab66 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800ab62:	23ff      	movs	r3, #255	; 0xff
 800ab64:	e009      	b.n	800ab7a <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800ab66:	f107 030f 	add.w	r3, r7, #15
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800ab70:	f107 030f 	add.w	r3, r7, #15
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	e000      	b.n	800ab7a <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bdb0      	pop	{r4, r5, r7, pc}

0800ab84 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b0cc      	sub	sp, #304	; 0x130
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	1dfb      	adds	r3, r7, #7
 800ab8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ab90:	f107 0310 	add.w	r3, r7, #16
 800ab94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ab98:	f107 030f 	add.w	r3, r7, #15
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800aba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abaa:	1dfa      	adds	r2, r7, #7
 800abac:	7812      	ldrb	r2, [r2, #0]
 800abae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abb4:	3301      	adds	r3, #1
 800abb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800abba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abbe:	2218      	movs	r2, #24
 800abc0:	2100      	movs	r1, #0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fe74 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800abc8:	233f      	movs	r3, #63	; 0x3f
 800abca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800abce:	2385      	movs	r3, #133	; 0x85
 800abd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800abd4:	f107 0310 	add.w	r3, r7, #16
 800abd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800abdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800abe4:	f107 030f 	add.w	r3, r7, #15
 800abe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800abec:	2301      	movs	r3, #1
 800abee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800abf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 fa27 	bl	800c04c <hci_send_req>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da01      	bge.n	800ac08 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800ac04:	23ff      	movs	r3, #255	; 0xff
 800ac06:	e009      	b.n	800ac1c <aci_gap_set_io_capability+0x98>
  if (status) 
 800ac08:	f107 030f 	add.w	r3, r7, #15
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <aci_gap_set_io_capability+0x96>
  {
    return status;
 800ac12:	f107 030f 	add.w	r3, r7, #15
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	e000      	b.n	800ac1c <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800ac26:	b5b0      	push	{r4, r5, r7, lr}
 800ac28:	b0cc      	sub	sp, #304	; 0x130
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4610      	mov	r0, r2
 800ac32:	4619      	mov	r1, r3
 800ac34:	1dfb      	adds	r3, r7, #7
 800ac36:	462a      	mov	r2, r5
 800ac38:	701a      	strb	r2, [r3, #0]
 800ac3a:	1dbb      	adds	r3, r7, #6
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	701a      	strb	r2, [r3, #0]
 800ac40:	1d7b      	adds	r3, r7, #5
 800ac42:	4602      	mov	r2, r0
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	1d3b      	adds	r3, r7, #4
 800ac48:	460a      	mov	r2, r1
 800ac4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac54:	f107 030f 	add.w	r3, r7, #15
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800ac62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac66:	1dfa      	adds	r2, r7, #7
 800ac68:	7812      	ldrb	r2, [r2, #0]
 800ac6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac70:	3301      	adds	r3, #1
 800ac72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ac76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac7a:	1dba      	adds	r2, r7, #6
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ac80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac84:	3301      	adds	r3, #1
 800ac86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ac8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac8e:	1d7a      	adds	r2, r7, #5
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ac94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac98:	3301      	adds	r3, #1
 800ac9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ac9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca2:	1d3a      	adds	r2, r7, #4
 800aca4:	7812      	ldrb	r2, [r2, #0]
 800aca6:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800aca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acac:	3301      	adds	r3, #1
 800acae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800acb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb6:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800acba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800acbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acc0:	3301      	adds	r3, #1
 800acc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800acc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acca:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800acce:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800acd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acd4:	3301      	adds	r3, #1
 800acd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800acda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acde:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ace2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ace4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ace8:	3301      	adds	r3, #1
 800acea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800acee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acf2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800acf6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800acfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acfe:	3304      	adds	r3, #4
 800ad00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800ad04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad08:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ad0c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ad0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad12:	3301      	adds	r3, #1
 800ad14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad1c:	2218      	movs	r2, #24
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fdc5 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad26:	233f      	movs	r3, #63	; 0x3f
 800ad28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800ad2c:	2386      	movs	r3, #134	; 0x86
 800ad2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad32:	f107 0310 	add.w	r3, r7, #16
 800ad36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad42:	f107 030f 	add.w	r3, r7, #15
 800ad46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ad50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad54:	2100      	movs	r1, #0
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 f978 	bl	800c04c <hci_send_req>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da01      	bge.n	800ad66 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800ad62:	23ff      	movs	r3, #255	; 0xff
 800ad64:	e009      	b.n	800ad7a <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800ad66:	f107 030f 	add.w	r3, r7, #15
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800ad70:	f107 030f 	add.w	r3, r7, #15
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	e000      	b.n	800ad7a <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bdb0      	pop	{r4, r5, r7, pc}

0800ad84 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ad84:	b590      	push	{r4, r7, lr}
 800ad86:	b0cd      	sub	sp, #308	; 0x134
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	4611      	mov	r1, r2
 800ad90:	463a      	mov	r2, r7
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	1dfb      	adds	r3, r7, #7
 800ad96:	4622      	mov	r2, r4
 800ad98:	701a      	strb	r2, [r3, #0]
 800ad9a:	1dbb      	adds	r3, r7, #6
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	1d7b      	adds	r3, r7, #5
 800ada2:	460a      	mov	r2, r1
 800ada4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ada6:	f107 0310 	add.w	r3, r7, #16
 800adaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800adae:	f107 0308 	add.w	r3, r7, #8
 800adb2:	2207      	movs	r2, #7
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fd7a 	bl	800b8b0 <Osal_MemSet>
  int index_input = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800adc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc6:	1dfa      	adds	r2, r7, #7
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800adcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800add0:	3301      	adds	r3, #1
 800add2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800add6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adda:	1dba      	adds	r2, r7, #6
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ade0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ade4:	3301      	adds	r3, #1
 800ade6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800adea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adee:	1d7a      	adds	r2, r7, #5
 800adf0:	7812      	ldrb	r2, [r2, #0]
 800adf2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800adf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adf8:	3301      	adds	r3, #1
 800adfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800adfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae02:	2218      	movs	r2, #24
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 fd52 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae0c:	233f      	movs	r3, #63	; 0x3f
 800ae0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ae12:	238a      	movs	r3, #138	; 0x8a
 800ae14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ae18:	f107 0310 	add.w	r3, r7, #16
 800ae1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ae28:	f107 0308 	add.w	r3, r7, #8
 800ae2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ae30:	2307      	movs	r3, #7
 800ae32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f001 f905 	bl	800c04c <hci_send_req>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	da01      	bge.n	800ae4c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800ae48:	23ff      	movs	r3, #255	; 0xff
 800ae4a:	e021      	b.n	800ae90 <aci_gap_init+0x10c>
  if (resp.Status) 
 800ae4c:	f107 0308 	add.w	r3, r7, #8
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <aci_gap_init+0xda>
  {
    return resp.Status;
 800ae56:	f107 0308 	add.w	r3, r7, #8
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	e018      	b.n	800ae90 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ae5e:	f107 0308 	add.w	r3, r7, #8
 800ae62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	463b      	mov	r3, r7
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ae7c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ae8c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd90      	pop	{r4, r7, pc}

0800ae9a <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b0cc      	sub	sp, #304	; 0x130
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	4602      	mov	r2, r0
 800aea2:	463b      	mov	r3, r7
 800aea4:	6019      	str	r1, [r3, #0]
 800aea6:	1dfb      	adds	r3, r7, #7
 800aea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800aeaa:	f107 0310 	add.w	r3, r7, #16
 800aeae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aeb2:	f107 030f 	add.w	r3, r7, #15
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800aec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aec4:	1dfa      	adds	r2, r7, #7
 800aec6:	7812      	ldrb	r2, [r2, #0]
 800aec8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aeca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aece:	3301      	adds	r3, #1
 800aed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800aed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed8:	1c58      	adds	r0, r3, #1
 800aeda:	1dfb      	adds	r3, r7, #7
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	463b      	mov	r3, r7
 800aee0:	6819      	ldr	r1, [r3, #0]
 800aee2:	f000 fcd5 	bl	800b890 <Osal_MemCpy>
  index_input += AdvDataLen;
 800aee6:	1dfb      	adds	r3, r7, #7
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aeee:	4413      	add	r3, r2
 800aef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aef8:	2218      	movs	r2, #24
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fcd7 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af02:	233f      	movs	r3, #63	; 0x3f
 800af04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800af08:	238e      	movs	r3, #142	; 0x8e
 800af0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af0e:	f107 0310 	add.w	r3, r7, #16
 800af12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af1e:	f107 030f 	add.w	r3, r7, #15
 800af22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af26:	2301      	movs	r3, #1
 800af28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f001 f88a 	bl	800c04c <hci_send_req>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	da01      	bge.n	800af42 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800af3e:	23ff      	movs	r3, #255	; 0xff
 800af40:	e009      	b.n	800af56 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800af42:	f107 030f 	add.w	r3, r7, #15
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <aci_gap_update_adv_data+0xba>
  {
    return status;
 800af4c:	f107 030f 	add.w	r3, r7, #15
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	e000      	b.n	800af56 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	2218      	movs	r2, #24
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fc9c 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af78:	233f      	movs	r3, #63	; 0x3f
 800af7a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800af7c:	2392      	movs	r3, #146	; 0x92
 800af7e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800af80:	1dfb      	adds	r3, r7, #7
 800af82:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800af84:	2301      	movs	r3, #1
 800af86:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 f85c 	bl	800c04c <hci_send_req>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	da01      	bge.n	800af9e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800af9a:	23ff      	movs	r3, #255	; 0xff
 800af9c:	e005      	b.n	800afaa <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	e000      	b.n	800afaa <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3720      	adds	r7, #32
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b088      	sub	sp, #32
 800afb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afbc:	f107 0308 	add.w	r3, r7, #8
 800afc0:	2218      	movs	r2, #24
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fc73 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afca:	233f      	movs	r3, #63	; 0x3f
 800afcc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800afce:	f240 1301 	movw	r3, #257	; 0x101
 800afd2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800afd4:	1dfb      	adds	r3, r7, #7
 800afd6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800afd8:	2301      	movs	r3, #1
 800afda:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f001 f832 	bl	800c04c <hci_send_req>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	da01      	bge.n	800aff2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800afee:	23ff      	movs	r3, #255	; 0xff
 800aff0:	e005      	b.n	800affe <aci_gatt_init+0x4c>
  if (status) 
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <aci_gatt_init+0x4a>
  {
    return status;
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	e000      	b.n	800affe <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3720      	adds	r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800b006:	b590      	push	{r4, r7, lr}
 800b008:	b0cf      	sub	sp, #316	; 0x13c
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	4604      	mov	r4, r0
 800b00e:	4638      	mov	r0, r7
 800b010:	6001      	str	r1, [r0, #0]
 800b012:	4610      	mov	r0, r2
 800b014:	4619      	mov	r1, r3
 800b016:	1dfb      	adds	r3, r7, #7
 800b018:	4622      	mov	r2, r4
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	1dbb      	adds	r3, r7, #6
 800b01e:	4602      	mov	r2, r0
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	1d7b      	adds	r3, r7, #5
 800b024:	460a      	mov	r2, r1
 800b026:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b028:	f107 0310 	add.w	r3, r7, #16
 800b02c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b030:	1dfb      	adds	r3, r7, #7
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d007      	beq.n	800b048 <aci_gatt_add_service+0x42>
 800b038:	1dfb      	adds	r3, r7, #7
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d101      	bne.n	800b044 <aci_gatt_add_service+0x3e>
 800b040:	2311      	movs	r3, #17
 800b042:	e002      	b.n	800b04a <aci_gatt_add_service+0x44>
 800b044:	2301      	movs	r3, #1
 800b046:	e000      	b.n	800b04a <aci_gatt_add_service+0x44>
 800b048:	2303      	movs	r3, #3
 800b04a:	f107 0210 	add.w	r2, r7, #16
 800b04e:	4413      	add	r3, r2
 800b050:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b054:	f107 030c 	add.w	r3, r7, #12
 800b058:	2203      	movs	r2, #3
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fc27 	bl	800b8b0 <Osal_MemSet>
  int index_input = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800b068:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b06c:	1dfa      	adds	r2, r7, #7
 800b06e:	7812      	ldrb	r2, [r2, #0]
 800b070:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b076:	3301      	adds	r3, #1
 800b078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800b07c:	1dfb      	adds	r3, r7, #7
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d002      	beq.n	800b08a <aci_gatt_add_service+0x84>
 800b084:	2b02      	cmp	r3, #2
 800b086:	d004      	beq.n	800b092 <aci_gatt_add_service+0x8c>
 800b088:	e007      	b.n	800b09a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800b08a:	2302      	movs	r3, #2
 800b08c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b090:	e005      	b.n	800b09e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b092:	2310      	movs	r3, #16
 800b094:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b098:	e001      	b.n	800b09e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b09a:	2347      	movs	r3, #71	; 0x47
 800b09c:	e05d      	b.n	800b15a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800b09e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0a2:	1c58      	adds	r0, r3, #1
 800b0a4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b0a8:	463b      	mov	r3, r7
 800b0aa:	6819      	ldr	r1, [r3, #0]
 800b0ac:	f000 fbf0 	bl	800b890 <Osal_MemCpy>
    index_input += size;
 800b0b0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b0b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800b0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c2:	1dba      	adds	r2, r7, #6
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b0c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800b0d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d6:	1d7a      	adds	r2, r7, #5
 800b0d8:	7812      	ldrb	r2, [r2, #0]
 800b0da:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b0dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0ea:	2218      	movs	r2, #24
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fbde 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0f4:	233f      	movs	r3, #63	; 0x3f
 800b0f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b0fa:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b0fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b102:	f107 0310 	add.w	r3, r7, #16
 800b106:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b10a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b10e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b112:	f107 030c 	add.w	r3, r7, #12
 800b116:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b11a:	2303      	movs	r3, #3
 800b11c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f000 ff90 	bl	800c04c <hci_send_req>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	da01      	bge.n	800b136 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b132:	23ff      	movs	r3, #255	; 0xff
 800b134:	e011      	b.n	800b15a <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800b140:	f107 030c 	add.w	r3, r7, #12
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	e008      	b.n	800b15a <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b148:	f107 030c 	add.w	r3, r7, #12
 800b14c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b150:	b29a      	uxth	r2, r3
 800b152:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b156:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b160:	46bd      	mov	sp, r7
 800b162:	bd90      	pop	{r4, r7, pc}

0800b164 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b0d1      	sub	sp, #324	; 0x144
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4604      	mov	r4, r0
 800b16c:	4608      	mov	r0, r1
 800b16e:	f107 0108 	add.w	r1, r7, #8
 800b172:	600a      	str	r2, [r1, #0]
 800b174:	4619      	mov	r1, r3
 800b176:	f107 030e 	add.w	r3, r7, #14
 800b17a:	4622      	mov	r2, r4
 800b17c:	801a      	strh	r2, [r3, #0]
 800b17e:	f107 030d 	add.w	r3, r7, #13
 800b182:	4602      	mov	r2, r0
 800b184:	701a      	strb	r2, [r3, #0]
 800b186:	1dbb      	adds	r3, r7, #6
 800b188:	460a      	mov	r2, r1
 800b18a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b18c:	f107 0318 	add.w	r3, r7, #24
 800b190:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b194:	f107 030d 	add.w	r3, r7, #13
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d008      	beq.n	800b1b0 <aci_gatt_add_char+0x4c>
 800b19e:	f107 030d 	add.w	r3, r7, #13
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d101      	bne.n	800b1ac <aci_gatt_add_char+0x48>
 800b1a8:	2313      	movs	r3, #19
 800b1aa:	e002      	b.n	800b1b2 <aci_gatt_add_char+0x4e>
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e000      	b.n	800b1b2 <aci_gatt_add_char+0x4e>
 800b1b0:	2305      	movs	r3, #5
 800b1b2:	f107 0218 	add.w	r2, r7, #24
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b1bc:	f107 0314 	add.w	r3, r7, #20
 800b1c0:	2203      	movs	r2, #3
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 fb73 	bl	800b8b0 <Osal_MemSet>
  int index_input = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b1d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b1d4:	f107 020e 	add.w	r2, r7, #14
 800b1d8:	8812      	ldrh	r2, [r2, #0]
 800b1da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800b1e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b1ea:	f107 020d 	add.w	r2, r7, #13
 800b1ee:	7812      	ldrb	r2, [r2, #0]
 800b1f0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b1f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800b1fc:	f107 030d 	add.w	r3, r7, #13
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d002      	beq.n	800b20c <aci_gatt_add_char+0xa8>
 800b206:	2b02      	cmp	r3, #2
 800b208:	d004      	beq.n	800b214 <aci_gatt_add_char+0xb0>
 800b20a:	e007      	b.n	800b21c <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800b20c:	2302      	movs	r3, #2
 800b20e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b212:	e005      	b.n	800b220 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b214:	2310      	movs	r3, #16
 800b216:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b21a:	e001      	b.n	800b220 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b21c:	2347      	movs	r3, #71	; 0x47
 800b21e:	e086      	b.n	800b32e <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800b220:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b224:	1cd8      	adds	r0, r3, #3
 800b226:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b22a:	f107 0308 	add.w	r3, r7, #8
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	f000 fb2e 	bl	800b890 <Osal_MemCpy>
    index_input += size;
 800b234:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b238:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b23c:	4413      	add	r3, r2
 800b23e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800b242:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b246:	1dba      	adds	r2, r7, #6
 800b248:	8812      	ldrh	r2, [r2, #0]
 800b24a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b24c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b250:	3302      	adds	r3, #2
 800b252:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800b256:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b25a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b25e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b264:	3301      	adds	r3, #1
 800b266:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800b26a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b26e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b272:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b274:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b278:	3301      	adds	r3, #1
 800b27a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800b27e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b282:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b286:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b28c:	3301      	adds	r3, #1
 800b28e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800b292:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b296:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b29a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b29c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800b2a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b2aa:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b2ae:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b2b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b2ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b2be:	2218      	movs	r2, #24
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 faf4 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2c8:	233f      	movs	r3, #63	; 0x3f
 800b2ca:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b2ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b2d2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b2d6:	f107 0318 	add.w	r3, r7, #24
 800b2da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b2de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b2e6:	f107 0314 	add.w	r3, r7, #20
 800b2ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b2f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fea6 	bl	800c04c <hci_send_req>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	da01      	bge.n	800b30a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800b306:	23ff      	movs	r3, #255	; 0xff
 800b308:	e011      	b.n	800b32e <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b314:	f107 0314 	add.w	r3, r7, #20
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	e008      	b.n	800b32e <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b31c:	f107 0314 	add.w	r3, r7, #20
 800b320:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b324:	b29a      	uxth	r2, r3
 800b326:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b32a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b334:	46bd      	mov	sp, r7
 800b336:	bd90      	pop	{r4, r7, pc}

0800b338 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b338:	b5b0      	push	{r4, r5, r7, lr}
 800b33a:	b0cc      	sub	sp, #304	; 0x130
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4605      	mov	r5, r0
 800b340:	460c      	mov	r4, r1
 800b342:	4610      	mov	r0, r2
 800b344:	4619      	mov	r1, r3
 800b346:	1dbb      	adds	r3, r7, #6
 800b348:	462a      	mov	r2, r5
 800b34a:	801a      	strh	r2, [r3, #0]
 800b34c:	1d3b      	adds	r3, r7, #4
 800b34e:	4622      	mov	r2, r4
 800b350:	801a      	strh	r2, [r3, #0]
 800b352:	1cfb      	adds	r3, r7, #3
 800b354:	4602      	mov	r2, r0
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	1cbb      	adds	r3, r7, #2
 800b35a:	460a      	mov	r2, r1
 800b35c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b35e:	f107 0310 	add.w	r3, r7, #16
 800b362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b366:	f107 030f 	add.w	r3, r7, #15
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b378:	1dba      	adds	r2, r7, #6
 800b37a:	8812      	ldrh	r2, [r2, #0]
 800b37c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b37e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b382:	3302      	adds	r3, #2
 800b384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b38c:	1d3a      	adds	r2, r7, #4
 800b38e:	8812      	ldrh	r2, [r2, #0]
 800b390:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b392:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b396:	3302      	adds	r3, #2
 800b398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b39c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3a0:	1cfa      	adds	r2, r7, #3
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b3a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3b4:	1cba      	adds	r2, r7, #2
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b3ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3be:	3301      	adds	r3, #1
 800b3c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b3c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3c8:	1d98      	adds	r0, r3, #6
 800b3ca:	1cbb      	adds	r3, r7, #2
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b3d4:	f000 fa5c 	bl	800b890 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b3d8:	1cbb      	adds	r3, r7, #2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b3e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3ea:	2218      	movs	r2, #24
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fa5e 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b3f4:	233f      	movs	r3, #63	; 0x3f
 800b3f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b3fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b3fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b402:	f107 0310 	add.w	r3, r7, #16
 800b406:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b40a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b40e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b412:	f107 030f 	add.w	r3, r7, #15
 800b416:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b420:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b424:	2100      	movs	r1, #0
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fe10 	bl	800c04c <hci_send_req>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da01      	bge.n	800b436 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b432:	23ff      	movs	r3, #255	; 0xff
 800b434:	e009      	b.n	800b44a <aci_gatt_update_char_value+0x112>
  if (status) 
 800b436:	f107 030f 	add.w	r3, r7, #15
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d003      	beq.n	800b448 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b440:	f107 030f 	add.w	r3, r7, #15
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	e000      	b.n	800b44a <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b450:	46bd      	mov	sp, r7
 800b452:	bdb0      	pop	{r4, r5, r7, pc}

0800b454 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b0cc      	sub	sp, #304	; 0x130
 800b458:	af00      	add	r7, sp, #0
 800b45a:	463b      	mov	r3, r7
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	1dfb      	adds	r3, r7, #7
 800b460:	4602      	mov	r2, r0
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	1dbb      	adds	r3, r7, #6
 800b466:	460a      	mov	r2, r1
 800b468:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b46a:	f107 0310 	add.w	r3, r7, #16
 800b46e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b472:	f107 030f 	add.w	r3, r7, #15
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b484:	1dfa      	adds	r2, r7, #7
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b48e:	3301      	adds	r3, #1
 800b490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b498:	1dba      	adds	r2, r7, #6
 800b49a:	7812      	ldrb	r2, [r2, #0]
 800b49c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b49e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b4a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4ac:	1c98      	adds	r0, r3, #2
 800b4ae:	1dbb      	adds	r3, r7, #6
 800b4b0:	781a      	ldrb	r2, [r3, #0]
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	6819      	ldr	r1, [r3, #0]
 800b4b6:	f000 f9eb 	bl	800b890 <Osal_MemCpy>
  index_input += Length;
 800b4ba:	1dbb      	adds	r3, r7, #6
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b4c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4cc:	2218      	movs	r2, #24
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f9ed 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b4d6:	233f      	movs	r3, #63	; 0x3f
 800b4d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b4dc:	230c      	movs	r3, #12
 800b4de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b4e2:	f107 0310 	add.w	r3, r7, #16
 800b4e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b4f2:	f107 030f 	add.w	r3, r7, #15
 800b4f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fda0 	bl	800c04c <hci_send_req>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	da01      	bge.n	800b516 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b512:	23ff      	movs	r3, #255	; 0xff
 800b514:	e009      	b.n	800b52a <aci_hal_write_config_data+0xd6>
  if (status) 
 800b516:	f107 030f 	add.w	r3, r7, #15
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b520:	f107 030f 	add.w	r3, r7, #15
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	e000      	b.n	800b52a <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b0cc      	sub	sp, #304	; 0x130
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4602      	mov	r2, r0
 800b53c:	1dfb      	adds	r3, r7, #7
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	1dbb      	adds	r3, r7, #6
 800b542:	460a      	mov	r2, r1
 800b544:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b546:	f107 0310 	add.w	r3, r7, #16
 800b54a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b54e:	f107 030f 	add.w	r3, r7, #15
 800b552:	2200      	movs	r2, #0
 800b554:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b55c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b560:	1dfa      	adds	r2, r7, #7
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b56a:	3301      	adds	r3, #1
 800b56c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b574:	1dba      	adds	r2, r7, #6
 800b576:	7812      	ldrb	r2, [r2, #0]
 800b578:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b57a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b57e:	3301      	adds	r3, #1
 800b580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b588:	2218      	movs	r2, #24
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 f98f 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b592:	233f      	movs	r3, #63	; 0x3f
 800b594:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b598:	230f      	movs	r3, #15
 800b59a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b59e:	f107 0310 	add.w	r3, r7, #16
 800b5a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5ae:	f107 030f 	add.w	r3, r7, #15
 800b5b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fd42 	bl	800c04c <hci_send_req>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da01      	bge.n	800b5d2 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b5ce:	23ff      	movs	r3, #255	; 0xff
 800b5d0:	e009      	b.n	800b5e6 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b5d2:	f107 030f 	add.w	r3, r7, #15
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b5dc:	f107 030f 	add.w	r3, r7, #15
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	e000      	b.n	800b5e6 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b0cc      	sub	sp, #304	; 0x130
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	1dbb      	adds	r3, r7, #6
 800b5fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b5fc:	f107 0310 	add.w	r3, r7, #16
 800b600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b604:	f107 030f 	add.w	r3, r7, #15
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b616:	1dba      	adds	r2, r7, #6
 800b618:	8812      	ldrh	r2, [r2, #0]
 800b61a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b61c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b620:	3302      	adds	r3, #2
 800b622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b62a:	2218      	movs	r2, #24
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 f93e 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b634:	233f      	movs	r3, #63	; 0x3f
 800b636:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b63a:	2318      	movs	r3, #24
 800b63c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b640:	f107 0310 	add.w	r3, r7, #16
 800b644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b64c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b650:	f107 030f 	add.w	r3, r7, #15
 800b654:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b658:	2301      	movs	r3, #1
 800b65a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b65e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b662:	2100      	movs	r1, #0
 800b664:	4618      	mov	r0, r3
 800b666:	f000 fcf1 	bl	800c04c <hci_send_req>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da01      	bge.n	800b674 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b670:	23ff      	movs	r3, #255	; 0xff
 800b672:	e009      	b.n	800b688 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b674:	f107 030f 	add.w	r3, r7, #15
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b67e:	f107 030f 	add.w	r3, r7, #15
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	e000      	b.n	800b688 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b088      	sub	sp, #32
 800b696:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	2218      	movs	r2, #24
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f903 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x03;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b6b2:	1dfb      	adds	r3, r7, #7
 800b6b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b6ba:	f107 0308 	add.w	r3, r7, #8
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fcc3 	bl	800c04c <hci_send_req>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	da01      	bge.n	800b6d0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b6cc:	23ff      	movs	r3, #255	; 0xff
 800b6ce:	e005      	b.n	800b6dc <hci_reset+0x4a>
  if (status) 
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <hci_reset+0x48>
  {
    return status;
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	e000      	b.n	800b6dc <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3720      	adds	r7, #32
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b0ce      	sub	sp, #312	; 0x138
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	f107 0308 	add.w	r3, r7, #8
 800b6ee:	6019      	str	r1, [r3, #0]
 800b6f0:	1d3b      	adds	r3, r7, #4
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f107 030e 	add.w	r3, r7, #14
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b6fc:	f107 0318 	add.w	r3, r7, #24
 800b700:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b704:	f107 0310 	add.w	r3, r7, #16
 800b708:	2205      	movs	r2, #5
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f8cf 	bl	800b8b0 <Osal_MemSet>
  int index_input = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b718:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b71c:	f107 020e 	add.w	r2, r7, #14
 800b720:	8812      	ldrh	r2, [r2, #0]
 800b722:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b724:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b728:	3302      	adds	r3, #2
 800b72a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b72e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b732:	2218      	movs	r2, #24
 800b734:	2100      	movs	r1, #0
 800b736:	4618      	mov	r0, r3
 800b738:	f000 f8ba 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x08;
 800b73c:	2308      	movs	r3, #8
 800b73e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b742:	2330      	movs	r3, #48	; 0x30
 800b744:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b748:	f107 0318 	add.w	r3, r7, #24
 800b74c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b750:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b754:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b758:	f107 0310 	add.w	r3, r7, #16
 800b75c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b760:	2305      	movs	r3, #5
 800b762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b766:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fc6d 	bl	800c04c <hci_send_req>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	da01      	bge.n	800b77c <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b778:	23ff      	movs	r3, #255	; 0xff
 800b77a:	e016      	b.n	800b7aa <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800b77c:	f107 0310 	add.w	r3, r7, #16
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800b786:	f107 0310 	add.w	r3, r7, #16
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	e00d      	b.n	800b7aa <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800b78e:	f107 0310 	add.w	r3, r7, #16
 800b792:	78da      	ldrb	r2, [r3, #3]
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800b79c:	f107 0310 	add.w	r3, r7, #16
 800b7a0:	791a      	ldrb	r2, [r3, #4]
 800b7a2:	1d3b      	adds	r3, r7, #4
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b0cd      	sub	sp, #308	; 0x134
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	4611      	mov	r1, r2
 800b7c0:	1dfb      	adds	r3, r7, #7
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	1dbb      	adds	r3, r7, #6
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	701a      	strb	r2, [r3, #0]
 800b7cc:	1d7b      	adds	r3, r7, #5
 800b7ce:	460a      	mov	r2, r1
 800b7d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b7d2:	f107 0310 	add.w	r3, r7, #16
 800b7d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b7da:	f107 030f 	add.w	r3, r7, #15
 800b7de:	2200      	movs	r2, #0
 800b7e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800b7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7ec:	1dfa      	adds	r2, r7, #7
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b7f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800b7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b800:	1dba      	adds	r2, r7, #6
 800b802:	7812      	ldrb	r2, [r2, #0]
 800b804:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b80a:	3301      	adds	r3, #1
 800b80c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800b810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b814:	1d7a      	adds	r2, r7, #5
 800b816:	7812      	ldrb	r2, [r2, #0]
 800b818:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b81a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b81e:	3301      	adds	r3, #1
 800b820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b824:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b828:	2218      	movs	r2, #24
 800b82a:	2100      	movs	r1, #0
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 f83f 	bl	800b8b0 <Osal_MemSet>
  rq.ogf = 0x08;
 800b832:	2308      	movs	r3, #8
 800b834:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b838:	2331      	movs	r3, #49	; 0x31
 800b83a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b83e:	f107 0310 	add.w	r3, r7, #16
 800b842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b84a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b84e:	f107 030f 	add.w	r3, r7, #15
 800b852:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b856:	2301      	movs	r3, #1
 800b858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b85c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b860:	2100      	movs	r1, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fbf2 	bl	800c04c <hci_send_req>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da01      	bge.n	800b872 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800b86e:	23ff      	movs	r3, #255	; 0xff
 800b870:	e009      	b.n	800b886 <hci_le_set_default_phy+0xd2>
  if (status) 
 800b872:	f107 030f 	add.w	r3, r7, #15
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800b87c:	f107 030f 	add.w	r3, r7, #15
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	e000      	b.n	800b886 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd90      	pop	{r4, r7, pc}

0800b890 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f002 f96b 	bl	800db7c <memcpy>
 800b8a6:	4603      	mov	r3, r0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f002 f966 	bl	800db92 <memset>
 800b8c6:	4603      	mov	r3, r0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08a      	sub	sp, #40	; 0x28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2bff      	cmp	r3, #255	; 0xff
 800b8ea:	d000      	beq.n	800b8ee <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b8ec:	e04a      	b.n	800b984 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f640 4301 	movw	r3, #3073	; 0xc01
 800b900:	429a      	cmp	r2, r3
 800b902:	d000      	beq.n	800b906 <PeerToPeer_Event_Handler+0x36>
          break;
 800b904:	e03d      	b.n	800b982 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	3302      	adds	r3, #2
 800b90a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	b29b      	uxth	r3, r3
 800b912:	461a      	mov	r2, r3
 800b914:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <PeerToPeer_Event_Handler+0xc0>)
 800b916:	889b      	ldrh	r3, [r3, #4]
 800b918:	3302      	adds	r3, #2
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d118      	bne.n	800b950 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800b91e:	2301      	movs	r3, #1
 800b920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	7a1b      	ldrb	r3, [r3, #8]
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d007      	beq.n	800b940 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b930:	2300      	movs	r3, #0
 800b932:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 fbd5 	bl	800d0e8 <P2PS_STM_App_Notification>
        break;
 800b93e:	e01f      	b.n	800b980 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b940:	2301      	movs	r3, #1
 800b942:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b944:	f107 0308 	add.w	r3, r7, #8
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 fbcd 	bl	800d0e8 <P2PS_STM_App_Notification>
        break;
 800b94e:	e017      	b.n	800b980 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	885b      	ldrh	r3, [r3, #2]
 800b954:	b29b      	uxth	r3, r3
 800b956:	461a      	mov	r2, r3
 800b958:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <PeerToPeer_Event_Handler+0xc0>)
 800b95a:	885b      	ldrh	r3, [r3, #2]
 800b95c:	3301      	adds	r3, #1
 800b95e:	429a      	cmp	r2, r3
 800b960:	d10e      	bne.n	800b980 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b962:	2303      	movs	r3, #3
 800b964:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	88db      	ldrh	r3, [r3, #6]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	3308      	adds	r3, #8
 800b974:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b976:	f107 0308 	add.w	r3, r7, #8
 800b97a:	4618      	mov	r0, r3
 800b97c:	f001 fbb4 	bl	800d0e8 <P2PS_STM_App_Notification>
        break;
 800b980:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b982:	bf00      	nop
  }

  return(return_value);
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b988:	4618      	mov	r0, r3
 800b98a:	3728      	adds	r7, #40	; 0x28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200001c8 	.word	0x200001c8

0800b994 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08a      	sub	sp, #40	; 0x28
 800b998:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b99a:	484a      	ldr	r0, [pc, #296]	; (800bac4 <P2PS_STM_Init+0x130>)
 800b99c:	f000 f930 	bl	800bc00 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b9a0:	238f      	movs	r3, #143	; 0x8f
 800b9a2:	703b      	strb	r3, [r7, #0]
 800b9a4:	23e5      	movs	r3, #229	; 0xe5
 800b9a6:	707b      	strb	r3, [r7, #1]
 800b9a8:	23b3      	movs	r3, #179	; 0xb3
 800b9aa:	70bb      	strb	r3, [r7, #2]
 800b9ac:	23d5      	movs	r3, #213	; 0xd5
 800b9ae:	70fb      	strb	r3, [r7, #3]
 800b9b0:	232e      	movs	r3, #46	; 0x2e
 800b9b2:	713b      	strb	r3, [r7, #4]
 800b9b4:	237f      	movs	r3, #127	; 0x7f
 800b9b6:	717b      	strb	r3, [r7, #5]
 800b9b8:	234a      	movs	r3, #74	; 0x4a
 800b9ba:	71bb      	strb	r3, [r7, #6]
 800b9bc:	2398      	movs	r3, #152	; 0x98
 800b9be:	71fb      	strb	r3, [r7, #7]
 800b9c0:	232a      	movs	r3, #42	; 0x2a
 800b9c2:	723b      	strb	r3, [r7, #8]
 800b9c4:	2348      	movs	r3, #72	; 0x48
 800b9c6:	727b      	strb	r3, [r7, #9]
 800b9c8:	237a      	movs	r3, #122	; 0x7a
 800b9ca:	72bb      	strb	r3, [r7, #10]
 800b9cc:	23cc      	movs	r3, #204	; 0xcc
 800b9ce:	72fb      	strb	r3, [r7, #11]
 800b9d0:	2340      	movs	r3, #64	; 0x40
 800b9d2:	733b      	strb	r3, [r7, #12]
 800b9d4:	23fe      	movs	r3, #254	; 0xfe
 800b9d6:	737b      	strb	r3, [r7, #13]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73bb      	strb	r3, [r7, #14]
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4b39      	ldr	r3, [pc, #228]	; (800bac8 <P2PS_STM_Init+0x134>)
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	2002      	movs	r0, #2
 800b9ec:	f7ff fb0b 	bl	800b006 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b9f0:	2319      	movs	r3, #25
 800b9f2:	703b      	strb	r3, [r7, #0]
 800b9f4:	23ed      	movs	r3, #237	; 0xed
 800b9f6:	707b      	strb	r3, [r7, #1]
 800b9f8:	2382      	movs	r3, #130	; 0x82
 800b9fa:	70bb      	strb	r3, [r7, #2]
 800b9fc:	23ae      	movs	r3, #174	; 0xae
 800b9fe:	70fb      	strb	r3, [r7, #3]
 800ba00:	23ed      	movs	r3, #237	; 0xed
 800ba02:	713b      	strb	r3, [r7, #4]
 800ba04:	2321      	movs	r3, #33	; 0x21
 800ba06:	717b      	strb	r3, [r7, #5]
 800ba08:	234c      	movs	r3, #76	; 0x4c
 800ba0a:	71bb      	strb	r3, [r7, #6]
 800ba0c:	239d      	movs	r3, #157	; 0x9d
 800ba0e:	71fb      	strb	r3, [r7, #7]
 800ba10:	2341      	movs	r3, #65	; 0x41
 800ba12:	723b      	strb	r3, [r7, #8]
 800ba14:	2345      	movs	r3, #69	; 0x45
 800ba16:	727b      	strb	r3, [r7, #9]
 800ba18:	2322      	movs	r3, #34	; 0x22
 800ba1a:	72bb      	strb	r3, [r7, #10]
 800ba1c:	238e      	movs	r3, #142	; 0x8e
 800ba1e:	72fb      	strb	r3, [r7, #11]
 800ba20:	2341      	movs	r3, #65	; 0x41
 800ba22:	733b      	strb	r3, [r7, #12]
 800ba24:	23fe      	movs	r3, #254	; 0xfe
 800ba26:	737b      	strb	r3, [r7, #13]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ba30:	4b25      	ldr	r3, [pc, #148]	; (800bac8 <P2PS_STM_Init+0x134>)
 800ba32:	8818      	ldrh	r0, [r3, #0]
 800ba34:	463a      	mov	r2, r7
 800ba36:	4b25      	ldr	r3, [pc, #148]	; (800bacc <P2PS_STM_Init+0x138>)
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	230a      	movs	r3, #10
 800ba40:	9303      	str	r3, [sp, #12]
 800ba42:	2301      	movs	r3, #1
 800ba44:	9302      	str	r3, [sp, #8]
 800ba46:	2300      	movs	r3, #0
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	2306      	movs	r3, #6
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	2302      	movs	r3, #2
 800ba50:	2102      	movs	r1, #2
 800ba52:	f7ff fb87 	bl	800b164 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ba56:	2319      	movs	r3, #25
 800ba58:	703b      	strb	r3, [r7, #0]
 800ba5a:	23ed      	movs	r3, #237	; 0xed
 800ba5c:	707b      	strb	r3, [r7, #1]
 800ba5e:	2382      	movs	r3, #130	; 0x82
 800ba60:	70bb      	strb	r3, [r7, #2]
 800ba62:	23ae      	movs	r3, #174	; 0xae
 800ba64:	70fb      	strb	r3, [r7, #3]
 800ba66:	23ed      	movs	r3, #237	; 0xed
 800ba68:	713b      	strb	r3, [r7, #4]
 800ba6a:	2321      	movs	r3, #33	; 0x21
 800ba6c:	717b      	strb	r3, [r7, #5]
 800ba6e:	234c      	movs	r3, #76	; 0x4c
 800ba70:	71bb      	strb	r3, [r7, #6]
 800ba72:	239d      	movs	r3, #157	; 0x9d
 800ba74:	71fb      	strb	r3, [r7, #7]
 800ba76:	2341      	movs	r3, #65	; 0x41
 800ba78:	723b      	strb	r3, [r7, #8]
 800ba7a:	2345      	movs	r3, #69	; 0x45
 800ba7c:	727b      	strb	r3, [r7, #9]
 800ba7e:	2322      	movs	r3, #34	; 0x22
 800ba80:	72bb      	strb	r3, [r7, #10]
 800ba82:	238e      	movs	r3, #142	; 0x8e
 800ba84:	72fb      	strb	r3, [r7, #11]
 800ba86:	2342      	movs	r3, #66	; 0x42
 800ba88:	733b      	strb	r3, [r7, #12]
 800ba8a:	23fe      	movs	r3, #254	; 0xfe
 800ba8c:	737b      	strb	r3, [r7, #13]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73bb      	strb	r3, [r7, #14]
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ba96:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <P2PS_STM_Init+0x134>)
 800ba98:	8818      	ldrh	r0, [r3, #0]
 800ba9a:	463a      	mov	r2, r7
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <P2PS_STM_Init+0x13c>)
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	2301      	movs	r3, #1
 800baa2:	9304      	str	r3, [sp, #16]
 800baa4:	230a      	movs	r3, #10
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	2301      	movs	r3, #1
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	2300      	movs	r3, #0
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	2310      	movs	r3, #16
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2302      	movs	r3, #2
 800bab6:	2102      	movs	r1, #2
 800bab8:	f7ff fb54 	bl	800b164 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800babc:	bf00      	nop
}
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	0800b8d1 	.word	0x0800b8d1
 800bac8:	200001c8 	.word	0x200001c8
 800bacc:	200001ca 	.word	0x200001ca
 800bad0:	200001cc 	.word	0x200001cc

0800bad4 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
  return;
 800bad8:	bf00      	nop
}
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bae2:	b480      	push	{r7}
 800bae4:	af00      	add	r7, sp, #0
  return;
 800bae6:	bf00      	nop
}
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <DIS_Init>:
__weak void DIS_Init( void )
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
  return;
 800baf4:	bf00      	nop
}
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bafe:	b480      	push	{r7}
 800bb00:	af00      	add	r7, sp, #0
  return;
 800bb02:	bf00      	nop
}
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  return;
 800bb10:	bf00      	nop
}
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <HRS_Init>:
__weak void HRS_Init( void )
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	af00      	add	r7, sp, #0
  return;
 800bb1e:	bf00      	nop
}
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HTS_Init>:
__weak void HTS_Init( void )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  return;
 800bb2c:	bf00      	nop
}
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bb36:	b480      	push	{r7}
 800bb38:	af00      	add	r7, sp, #0
  return;
 800bb3a:	bf00      	nop
}
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
  return;
 800bb48:	bf00      	nop
}
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bb52:	b480      	push	{r7}
 800bb54:	af00      	add	r7, sp, #0
  return;
 800bb56:	bf00      	nop
}
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
  return;
 800bb64:	bf00      	nop
}
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bb6e:	b480      	push	{r7}
 800bb70:	af00      	add	r7, sp, #0
  return;
 800bb72:	bf00      	nop
}
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <MESH_Init>:
__weak void MESH_Init( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  return;
 800bb80:	bf00      	nop
}
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	af00      	add	r7, sp, #0
  return;
 800bb8e:	bf00      	nop
}
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bb9c:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <SVCCTL_Init+0x18>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bba2:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <SVCCTL_Init+0x1c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bba8:	f000 f806 	bl	800bbb8 <SVCCTL_SvcInit>

  return;
 800bbac:	bf00      	nop
}
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	200001d0 	.word	0x200001d0
 800bbb4:	200001f0 	.word	0x200001f0

0800bbb8 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
  BLS_Init();
 800bbbc:	f7ff ff8a 	bl	800bad4 <BLS_Init>

  CRS_STM_Init();
 800bbc0:	f7ff ff8f 	bl	800bae2 <CRS_STM_Init>

  DIS_Init();
 800bbc4:	f7ff ff94 	bl	800baf0 <DIS_Init>

  EDS_STM_Init();
 800bbc8:	f7ff ff99 	bl	800bafe <EDS_STM_Init>

  HIDS_Init();
 800bbcc:	f7ff ff9e 	bl	800bb0c <HIDS_Init>

  HRS_Init();
 800bbd0:	f7ff ffa3 	bl	800bb1a <HRS_Init>

  HTS_Init();
 800bbd4:	f7ff ffa8 	bl	800bb28 <HTS_Init>

  IAS_Init();
 800bbd8:	f7ff ffad 	bl	800bb36 <IAS_Init>

  LLS_Init();
 800bbdc:	f7ff ffb2 	bl	800bb44 <LLS_Init>

  TPS_Init();
 800bbe0:	f7ff ffb7 	bl	800bb52 <TPS_Init>

  MOTENV_STM_Init();
 800bbe4:	f7ff ffbc 	bl	800bb60 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bbe8:	f7ff fed4 	bl	800b994 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bbec:	f7ff ffbf 	bl	800bb6e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bbf0:	f7ff ffcb 	bl	800bb8a <BVOPUS_STM_Init>

  MESH_Init();
 800bbf4:	f7ff ffc2 	bl	800bb7c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bbf8:	f000 f8ea 	bl	800bdd0 <SVCCTL_InitCustomSvc>
  
  return;
 800bbfc:	bf00      	nop
}
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bc08:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <SVCCTL_RegisterSvcHandler+0x30>)
 800bc0a:	7f1b      	ldrb	r3, [r3, #28]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	4a08      	ldr	r2, [pc, #32]	; (800bc30 <SVCCTL_RegisterSvcHandler+0x30>)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bc16:	4b06      	ldr	r3, [pc, #24]	; (800bc30 <SVCCTL_RegisterSvcHandler+0x30>)
 800bc18:	7f1b      	ldrb	r3, [r3, #28]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <SVCCTL_RegisterSvcHandler+0x30>)
 800bc20:	771a      	strb	r2, [r3, #28]

  return;
 800bc22:	bf00      	nop
}
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200001d0 	.word	0x200001d0

0800bc34 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bc42:	2300      	movs	r3, #0
 800bc44:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2bff      	cmp	r3, #255	; 0xff
 800bc4c:	d000      	beq.n	800bc50 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bc4e:	e025      	b.n	800bc9c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	3302      	adds	r3, #2
 800bc54:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc64:	d000      	beq.n	800bc68 <SVCCTL_UserEvtRx+0x34>
          break;
 800bc66:	e018      	b.n	800bc9a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	757b      	strb	r3, [r7, #21]
 800bc6c:	e00d      	b.n	800bc8a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bc6e:	7d7b      	ldrb	r3, [r7, #21]
 800bc70:	4a18      	ldr	r2, [pc, #96]	; (800bcd4 <SVCCTL_UserEvtRx+0xa0>)
 800bc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d108      	bne.n	800bc96 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bc84:	7d7b      	ldrb	r3, [r7, #21]
 800bc86:	3301      	adds	r3, #1
 800bc88:	757b      	strb	r3, [r7, #21]
 800bc8a:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <SVCCTL_UserEvtRx+0xa0>)
 800bc8c:	7f1b      	ldrb	r3, [r3, #28]
 800bc8e:	7d7a      	ldrb	r2, [r7, #21]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d3ec      	bcc.n	800bc6e <SVCCTL_UserEvtRx+0x3a>
          break;
 800bc94:	e000      	b.n	800bc98 <SVCCTL_UserEvtRx+0x64>
              break;
 800bc96:	bf00      	nop
          break;
 800bc98:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bc9a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d009      	beq.n	800bcb6 <SVCCTL_UserEvtRx+0x82>
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d00a      	beq.n	800bcbc <SVCCTL_UserEvtRx+0x88>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 ff4e 	bl	800cb4c <SVCCTL_App_Notification>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75bb      	strb	r3, [r7, #22]
      break;
 800bcb4:	e008      	b.n	800bcc8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	75bb      	strb	r3, [r7, #22]
      break;
 800bcba:	e005      	b.n	800bcc8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	75bb      	strb	r3, [r7, #22]
      break;
 800bcc0:	e002      	b.n	800bcc8 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	75bb      	strb	r3, [r7, #22]
      break;
 800bcc6:	bf00      	nop
  }

  return (return_status);
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200001d0 	.word	0x200001d0

0800bcd8 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800bce0:	2300      	movs	r3, #0
 800bce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3301      	adds	r3, #1
 800bcea:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2bff      	cmp	r3, #255	; 0xff
 800bcf2:	d000      	beq.n	800bcf6 <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bcf4:	e063      	b.n	800bdbe <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	3302      	adds	r3, #2
 800bcfa:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	461a      	mov	r2, r3
 800bd04:	f640 4301 	movw	r3, #3073	; 0xc01
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d000      	beq.n	800bd0e <Template_Event_Handler+0x36>
          break;
 800bd0c:	e056      	b.n	800bdbc <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	3302      	adds	r3, #2
 800bd12:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	885b      	ldrh	r3, [r3, #2]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <Template_Event_Handler+0xf4>)
 800bd1e:	889b      	ldrh	r3, [r3, #4]
 800bd20:	3302      	adds	r3, #2
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d118      	bne.n	800bd58 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bd26:	2301      	movs	r3, #1
 800bd28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	7a1b      	ldrb	r3, [r3, #8]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d007      	beq.n	800bd48 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bd3c:	f107 0308 	add.w	r3, r7, #8
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 fa0d 	bl	800d160 <TEMPLATE_STM_App_Notification>
        break;
 800bd46:	e038      	b.n	800bdba <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bd4c:	f107 0308 	add.w	r3, r7, #8
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 fa05 	bl	800d160 <TEMPLATE_STM_App_Notification>
        break;
 800bd56:	e030      	b.n	800bdba <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <Template_Event_Handler+0xf4>)
 800bd62:	885b      	ldrh	r3, [r3, #2]
 800bd64:	3301      	adds	r3, #1
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d10f      	bne.n	800bd8a <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	88db      	ldrh	r3, [r3, #6]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 f9ec 	bl	800d160 <TEMPLATE_STM_App_Notification>
        break;
 800bd88:	e017      	b.n	800bdba <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	885b      	ldrh	r3, [r3, #2]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	461a      	mov	r2, r3
 800bd92:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <Template_Event_Handler+0xf4>)
 800bd94:	88db      	ldrh	r3, [r3, #6]
 800bd96:	3301      	adds	r3, #1
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d10e      	bne.n	800bdba <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800bd9c:	2304      	movs	r3, #4
 800bd9e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	88db      	ldrh	r3, [r3, #6]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	3308      	adds	r3, #8
 800bdae:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800bdb0:	f107 0308 	add.w	r3, r7, #8
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f001 f9d3 	bl	800d160 <TEMPLATE_STM_App_Notification>
        break;
 800bdba:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bdbc:	bf00      	nop
  }

  return(return_value);
 800bdbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3728      	adds	r7, #40	; 0x28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200001f4 	.word	0x200001f4

0800bdd0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08a      	sub	sp, #40	; 0x28
 800bdd4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800bdd6:	484a      	ldr	r0, [pc, #296]	; (800bf00 <SVCCTL_InitCustomSvc+0x130>)
 800bdd8:	f7ff ff12 	bl	800bc00 <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800bddc:	238f      	movs	r3, #143	; 0x8f
 800bdde:	703b      	strb	r3, [r7, #0]
 800bde0:	23e5      	movs	r3, #229	; 0xe5
 800bde2:	707b      	strb	r3, [r7, #1]
 800bde4:	23b3      	movs	r3, #179	; 0xb3
 800bde6:	70bb      	strb	r3, [r7, #2]
 800bde8:	23d5      	movs	r3, #213	; 0xd5
 800bdea:	70fb      	strb	r3, [r7, #3]
 800bdec:	232e      	movs	r3, #46	; 0x2e
 800bdee:	713b      	strb	r3, [r7, #4]
 800bdf0:	237f      	movs	r3, #127	; 0x7f
 800bdf2:	717b      	strb	r3, [r7, #5]
 800bdf4:	234a      	movs	r3, #74	; 0x4a
 800bdf6:	71bb      	strb	r3, [r7, #6]
 800bdf8:	2398      	movs	r3, #152	; 0x98
 800bdfa:	71fb      	strb	r3, [r7, #7]
 800bdfc:	232a      	movs	r3, #42	; 0x2a
 800bdfe:	723b      	strb	r3, [r7, #8]
 800be00:	2348      	movs	r3, #72	; 0x48
 800be02:	727b      	strb	r3, [r7, #9]
 800be04:	237a      	movs	r3, #122	; 0x7a
 800be06:	72bb      	strb	r3, [r7, #10]
 800be08:	23cc      	movs	r3, #204	; 0xcc
 800be0a:	72fb      	strb	r3, [r7, #11]
 800be0c:	23bb      	movs	r3, #187	; 0xbb
 800be0e:	733b      	strb	r3, [r7, #12]
 800be10:	23aa      	movs	r3, #170	; 0xaa
 800be12:	737b      	strb	r3, [r7, #13]
 800be14:	2300      	movs	r3, #0
 800be16:	73bb      	strb	r3, [r7, #14]
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800be1c:	4639      	mov	r1, r7
 800be1e:	4b39      	ldr	r3, [pc, #228]	; (800bf04 <SVCCTL_InitCustomSvc+0x134>)
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	2308      	movs	r3, #8
 800be24:	2201      	movs	r2, #1
 800be26:	2002      	movs	r0, #2
 800be28:	f7ff f8ed 	bl	800b006 <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800be2c:	2319      	movs	r3, #25
 800be2e:	703b      	strb	r3, [r7, #0]
 800be30:	23ed      	movs	r3, #237	; 0xed
 800be32:	707b      	strb	r3, [r7, #1]
 800be34:	2382      	movs	r3, #130	; 0x82
 800be36:	70bb      	strb	r3, [r7, #2]
 800be38:	23ae      	movs	r3, #174	; 0xae
 800be3a:	70fb      	strb	r3, [r7, #3]
 800be3c:	23ed      	movs	r3, #237	; 0xed
 800be3e:	713b      	strb	r3, [r7, #4]
 800be40:	2321      	movs	r3, #33	; 0x21
 800be42:	717b      	strb	r3, [r7, #5]
 800be44:	234c      	movs	r3, #76	; 0x4c
 800be46:	71bb      	strb	r3, [r7, #6]
 800be48:	239d      	movs	r3, #157	; 0x9d
 800be4a:	71fb      	strb	r3, [r7, #7]
 800be4c:	2341      	movs	r3, #65	; 0x41
 800be4e:	723b      	strb	r3, [r7, #8]
 800be50:	2345      	movs	r3, #69	; 0x45
 800be52:	727b      	strb	r3, [r7, #9]
 800be54:	2322      	movs	r3, #34	; 0x22
 800be56:	72bb      	strb	r3, [r7, #10]
 800be58:	238e      	movs	r3, #142	; 0x8e
 800be5a:	72fb      	strb	r3, [r7, #11]
 800be5c:	23cc      	movs	r3, #204	; 0xcc
 800be5e:	733b      	strb	r3, [r7, #12]
 800be60:	23aa      	movs	r3, #170	; 0xaa
 800be62:	737b      	strb	r3, [r7, #13]
 800be64:	2300      	movs	r3, #0
 800be66:	73bb      	strb	r3, [r7, #14]
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800be6c:	4b25      	ldr	r3, [pc, #148]	; (800bf04 <SVCCTL_InitCustomSvc+0x134>)
 800be6e:	8818      	ldrh	r0, [r3, #0]
 800be70:	463a      	mov	r2, r7
 800be72:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <SVCCTL_InitCustomSvc+0x138>)
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	2301      	movs	r3, #1
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	230a      	movs	r3, #10
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	2301      	movs	r3, #1
 800be80:	9302      	str	r3, [sp, #8]
 800be82:	2300      	movs	r3, #0
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	2306      	movs	r3, #6
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2302      	movs	r3, #2
 800be8c:	2102      	movs	r1, #2
 800be8e:	f7ff f969 	bl	800b164 <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800be92:	2319      	movs	r3, #25
 800be94:	703b      	strb	r3, [r7, #0]
 800be96:	23ed      	movs	r3, #237	; 0xed
 800be98:	707b      	strb	r3, [r7, #1]
 800be9a:	2382      	movs	r3, #130	; 0x82
 800be9c:	70bb      	strb	r3, [r7, #2]
 800be9e:	23ae      	movs	r3, #174	; 0xae
 800bea0:	70fb      	strb	r3, [r7, #3]
 800bea2:	23ed      	movs	r3, #237	; 0xed
 800bea4:	713b      	strb	r3, [r7, #4]
 800bea6:	2321      	movs	r3, #33	; 0x21
 800bea8:	717b      	strb	r3, [r7, #5]
 800beaa:	234c      	movs	r3, #76	; 0x4c
 800beac:	71bb      	strb	r3, [r7, #6]
 800beae:	239d      	movs	r3, #157	; 0x9d
 800beb0:	71fb      	strb	r3, [r7, #7]
 800beb2:	2341      	movs	r3, #65	; 0x41
 800beb4:	723b      	strb	r3, [r7, #8]
 800beb6:	2345      	movs	r3, #69	; 0x45
 800beb8:	727b      	strb	r3, [r7, #9]
 800beba:	2322      	movs	r3, #34	; 0x22
 800bebc:	72bb      	strb	r3, [r7, #10]
 800bebe:	238e      	movs	r3, #142	; 0x8e
 800bec0:	72fb      	strb	r3, [r7, #11]
 800bec2:	23dd      	movs	r3, #221	; 0xdd
 800bec4:	733b      	strb	r3, [r7, #12]
 800bec6:	23aa      	movs	r3, #170	; 0xaa
 800bec8:	737b      	strb	r3, [r7, #13]
 800beca:	2300      	movs	r3, #0
 800becc:	73bb      	strb	r3, [r7, #14]
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800bed2:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <SVCCTL_InitCustomSvc+0x134>)
 800bed4:	8818      	ldrh	r0, [r3, #0]
 800bed6:	463a      	mov	r2, r7
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <SVCCTL_InitCustomSvc+0x13c>)
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	2301      	movs	r3, #1
 800bede:	9304      	str	r3, [sp, #16]
 800bee0:	230a      	movs	r3, #10
 800bee2:	9303      	str	r3, [sp, #12]
 800bee4:	2301      	movs	r3, #1
 800bee6:	9302      	str	r3, [sp, #8]
 800bee8:	2300      	movs	r3, #0
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	2310      	movs	r3, #16
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	2302      	movs	r3, #2
 800bef2:	2102      	movs	r1, #2
 800bef4:	f7ff f936 	bl	800b164 <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800bef8:	bf00      	nop
}
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	0800bcd9 	.word	0x0800bcd9
 800bf04:	200001f4 	.word	0x200001f4
 800bf08:	200001f6 	.word	0x200001f6
 800bf0c:	200001f8 	.word	0x200001f8

0800bf10 <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	4603      	mov	r3, r0
 800bf18:	6039      	str	r1, [r7, #0]
 800bf1a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800bf1c:	2342      	movs	r3, #66	; 0x42
 800bf1e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d000      	beq.n	800bf28 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800bf26:	e00c      	b.n	800bf42 <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800bf28:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bf2a:	8818      	ldrh	r0, [r3, #0]
 800bf2c:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bf2e:	8899      	ldrh	r1, [r3, #4]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	2302      	movs	r3, #2
 800bf36:	2200      	movs	r2, #0
 800bf38:	f7ff f9fe 	bl	800b338 <aci_gatt_update_char_value>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf40:	bf00      	nop
  }

  return result;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200001f4 	.word	0x200001f4

0800bf50 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf58:	f107 030c 	add.w	r3, r7, #12
 800bf5c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	2121      	movs	r1, #33	; 0x21
 800bf68:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bf6c:	f000 fa00 	bl	800c370 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	330b      	adds	r3, #11
 800bf74:	78db      	ldrb	r3, [r3, #3]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3720      	adds	r7, #32
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4a08      	ldr	r2, [pc, #32]	; (800bfb0 <hci_init+0x30>)
 800bf90:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bf92:	4a08      	ldr	r2, [pc, #32]	; (800bfb4 <hci_init+0x34>)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bf98:	4806      	ldr	r0, [pc, #24]	; (800bfb4 <hci_init+0x34>)
 800bf9a:	f000 f96f 	bl	800c27c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f8d0 	bl	800c148 <TlInit>

  return;
 800bfa8:	bf00      	nop
}
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	200003fc 	.word	0x200003fc
 800bfb4:	200003d4 	.word	0x200003d4

0800bfb8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bfbe:	4820      	ldr	r0, [pc, #128]	; (800c040 <hci_user_evt_proc+0x88>)
 800bfc0:	f000 fc92 	bl	800c8e8 <LST_is_empty>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d128      	bne.n	800c01c <hci_user_evt_proc+0x64>
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <hci_user_evt_proc+0x8c>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d024      	beq.n	800c01c <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bfd2:	f107 030c 	add.w	r3, r7, #12
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4819      	ldr	r0, [pc, #100]	; (800c040 <hci_user_evt_proc+0x88>)
 800bfda:	f000 fd0c 	bl	800c9f6 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bfde:	4b19      	ldr	r3, [pc, #100]	; (800c044 <hci_user_evt_proc+0x8c>)
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800bfe4:	4b18      	ldr	r3, [pc, #96]	; (800c048 <hci_user_evt_proc+0x90>)
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d009      	beq.n	800c000 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bff0:	4b15      	ldr	r3, [pc, #84]	; (800c048 <hci_user_evt_proc+0x90>)
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	1d3a      	adds	r2, r7, #4
 800bff6:	4610      	mov	r0, r2
 800bff8:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bffa:	793a      	ldrb	r2, [r7, #4]
 800bffc:	4b11      	ldr	r3, [pc, #68]	; (800c044 <hci_user_evt_proc+0x8c>)
 800bffe:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c000:	4b10      	ldr	r3, [pc, #64]	; (800c044 <hci_user_evt_proc+0x8c>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d004      	beq.n	800c012 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fbca 	bl	800c7a4 <TL_MM_EvtDone>
 800c010:	e004      	b.n	800c01c <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4619      	mov	r1, r3
 800c016:	480a      	ldr	r0, [pc, #40]	; (800c040 <hci_user_evt_proc+0x88>)
 800c018:	f000 fc86 	bl	800c928 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c01c:	4808      	ldr	r0, [pc, #32]	; (800c040 <hci_user_evt_proc+0x88>)
 800c01e:	f000 fc63 	bl	800c8e8 <LST_is_empty>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d107      	bne.n	800c038 <hci_user_evt_proc+0x80>
 800c028:	4b06      	ldr	r3, [pc, #24]	; (800c044 <hci_user_evt_proc+0x8c>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c030:	4803      	ldr	r0, [pc, #12]	; (800c040 <hci_user_evt_proc+0x88>)
 800c032:	f001 f800 	bl	800d036 <hci_notify_asynch_evt>
  }


  return;
 800c036:	bf00      	nop
 800c038:	bf00      	nop
}
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	20000200 	.word	0x20000200
 800c044:	2000020c 	.word	0x2000020c
 800c048:	200003d4 	.word	0x200003d4

0800c04c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c058:	2000      	movs	r0, #0
 800c05a:	f000 f8cb 	bl	800c1f4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c05e:	2300      	movs	r3, #0
 800c060:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	885b      	ldrh	r3, [r3, #2]
 800c066:	b21b      	sxth	r3, r3
 800c068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c06c:	b21a      	sxth	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	029b      	lsls	r3, r3, #10
 800c074:	b21b      	sxth	r3, r3
 800c076:	4313      	orrs	r3, r2
 800c078:	b21b      	sxth	r3, r3
 800c07a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	b2d9      	uxtb	r1, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	8bbb      	ldrh	r3, [r7, #28]
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 f88d 	bl	800c1a8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c08e:	e04e      	b.n	800c12e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c090:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c094:	f000 ffe6 	bl	800d064 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c098:	e043      	b.n	800c122 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c09a:	f107 030c 	add.w	r3, r7, #12
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4828      	ldr	r0, [pc, #160]	; (800c144 <hci_send_req+0xf8>)
 800c0a2:	f000 fca8 	bl	800c9f6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	7a5b      	ldrb	r3, [r3, #9]
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d114      	bne.n	800c0d8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	330b      	adds	r3, #11
 800c0b2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	885b      	ldrh	r3, [r3, #2]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	8bba      	ldrh	r2, [r7, #28]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d104      	bne.n	800c0ca <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	785b      	ldrb	r3, [r3, #1]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d027      	beq.n	800c122 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	77fb      	strb	r3, [r7, #31]
 800c0d6:	e024      	b.n	800c122 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	330b      	adds	r3, #11
 800c0dc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	8bba      	ldrh	r2, [r7, #28]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d114      	bne.n	800c116 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	7a9b      	ldrb	r3, [r3, #10]
 800c0f0:	3b03      	subs	r3, #3
 800c0f2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695a      	ldr	r2, [r3, #20]
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	bfa8      	it	ge
 800c0fe:	461a      	movge	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6918      	ldr	r0, [r3, #16]
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	1cd9      	adds	r1, r3, #3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	461a      	mov	r2, r3
 800c112:	f001 fd33 	bl	800db7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c11e:	2301      	movs	r3, #1
 800c120:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c122:	4808      	ldr	r0, [pc, #32]	; (800c144 <hci_send_req+0xf8>)
 800c124:	f000 fbe0 	bl	800c8e8 <LST_is_empty>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d0b5      	beq.n	800c09a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c12e:	7ffb      	ldrb	r3, [r7, #31]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0ad      	beq.n	800c090 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c134:	2001      	movs	r0, #1
 800c136:	f000 f85d 	bl	800c1f4 <NotifyCmdStatus>

  return 0;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	200003f4 	.word	0x200003f4

0800c148 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c150:	480f      	ldr	r0, [pc, #60]	; (800c190 <TlInit+0x48>)
 800c152:	f000 fbb9 	bl	800c8c8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c156:	4a0f      	ldr	r2, [pc, #60]	; (800c194 <TlInit+0x4c>)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c15c:	480e      	ldr	r0, [pc, #56]	; (800c198 <TlInit+0x50>)
 800c15e:	f000 fbb3 	bl	800c8c8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <TlInit+0x54>)
 800c164:	2201      	movs	r2, #1
 800c166:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c168:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <TlInit+0x58>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00a      	beq.n	800c186 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c174:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <TlInit+0x5c>)
 800c176:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <TlInit+0x58>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f107 0208 	add.w	r2, r7, #8
 800c180:	4610      	mov	r0, r2
 800c182:	4798      	blx	r3
  }

  return;
 800c184:	bf00      	nop
 800c186:	bf00      	nop
}
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	200003f4 	.word	0x200003f4
 800c194:	20000208 	.word	0x20000208
 800c198:	20000200 	.word	0x20000200
 800c19c:	2000020c 	.word	0x2000020c
 800c1a0:	200003d4 	.word	0x200003d4
 800c1a4:	0800c235 	.word	0x0800c235

0800c1a8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	603a      	str	r2, [r7, #0]
 800c1b2:	80fb      	strh	r3, [r7, #6]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <SendCmd+0x44>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	88fa      	ldrh	r2, [r7, #6]
 800c1be:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c1c2:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <SendCmd+0x44>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	797a      	ldrb	r2, [r7, #5]
 800c1c8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c1ca:	4b08      	ldr	r3, [pc, #32]	; (800c1ec <SendCmd+0x44>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	797a      	ldrb	r2, [r7, #5]
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 fcd1 	bl	800db7c <memcpy>

  hciContext.io.Send(0,0);
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <SendCmd+0x48>)
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	2100      	movs	r1, #0
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	4798      	blx	r3

  return;
 800c1e4:	bf00      	nop
}
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20000208 	.word	0x20000208
 800c1f0:	200003d4 	.word	0x200003d4

0800c1f4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d108      	bne.n	800c216 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c204:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <NotifyCmdStatus+0x3c>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00d      	beq.n	800c228 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c20c:	4b08      	ldr	r3, [pc, #32]	; (800c230 <NotifyCmdStatus+0x3c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2000      	movs	r0, #0
 800c212:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c214:	e008      	b.n	800c228 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c216:	4b06      	ldr	r3, [pc, #24]	; (800c230 <NotifyCmdStatus+0x3c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c21e:	4b04      	ldr	r3, [pc, #16]	; (800c230 <NotifyCmdStatus+0x3c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2001      	movs	r0, #1
 800c224:	4798      	blx	r3
  return;
 800c226:	bf00      	nop
 800c228:	bf00      	nop
}
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200003fc 	.word	0x200003fc

0800c234 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7a5b      	ldrb	r3, [r3, #9]
 800c240:	2b0f      	cmp	r3, #15
 800c242:	d003      	beq.n	800c24c <TlEvtReceived+0x18>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7a5b      	ldrb	r3, [r3, #9]
 800c248:	2b0e      	cmp	r3, #14
 800c24a:	d107      	bne.n	800c25c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	4809      	ldr	r0, [pc, #36]	; (800c274 <TlEvtReceived+0x40>)
 800c250:	f000 fb8e 	bl	800c970 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c254:	2000      	movs	r0, #0
 800c256:	f000 fefa 	bl	800d04e <hci_cmd_resp_release>
 800c25a:	e006      	b.n	800c26a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	4806      	ldr	r0, [pc, #24]	; (800c278 <TlEvtReceived+0x44>)
 800c260:	f000 fb86 	bl	800c970 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c264:	4804      	ldr	r0, [pc, #16]	; (800c278 <TlEvtReceived+0x44>)
 800c266:	f000 fee6 	bl	800d036 <hci_notify_asynch_evt>
  }

  return;
 800c26a:	bf00      	nop
}
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	200003f4 	.word	0x200003f4
 800c278:	20000200 	.word	0x20000200

0800c27c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a05      	ldr	r2, [pc, #20]	; (800c29c <hci_register_io_bus+0x20>)
 800c288:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a04      	ldr	r2, [pc, #16]	; (800c2a0 <hci_register_io_bus+0x24>)
 800c28e:	611a      	str	r2, [r3, #16]

  return;
 800c290:	bf00      	nop
}
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	0800c57d 	.word	0x0800c57d
 800c2a0:	0800c5e5 	.word	0x0800c5e5

0800c2a4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <shci_init+0x30>)
 800c2b4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c2b6:	4a08      	ldr	r2, [pc, #32]	; (800c2d8 <shci_init+0x34>)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c2bc:	4806      	ldr	r0, [pc, #24]	; (800c2d8 <shci_init+0x34>)
 800c2be:	f000 f90d 	bl	800c4dc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f890 	bl	800c3ec <TlInit>

  return;
 800c2cc:	bf00      	nop
}
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20000420 	.word	0x20000420
 800c2d8:	20000400 	.word	0x20000400

0800c2dc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c2e2:	4820      	ldr	r0, [pc, #128]	; (800c364 <shci_user_evt_proc+0x88>)
 800c2e4:	f000 fb00 	bl	800c8e8 <LST_is_empty>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d128      	bne.n	800c340 <shci_user_evt_proc+0x64>
 800c2ee:	4b1e      	ldr	r3, [pc, #120]	; (800c368 <shci_user_evt_proc+0x8c>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d024      	beq.n	800c340 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c2f6:	f107 030c 	add.w	r3, r7, #12
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4819      	ldr	r0, [pc, #100]	; (800c364 <shci_user_evt_proc+0x88>)
 800c2fe:	f000 fb7a 	bl	800c9f6 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c302:	4b19      	ldr	r3, [pc, #100]	; (800c368 <shci_user_evt_proc+0x8c>)
 800c304:	2201      	movs	r2, #1
 800c306:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c308:	4b18      	ldr	r3, [pc, #96]	; (800c36c <shci_user_evt_proc+0x90>)
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c314:	4b15      	ldr	r3, [pc, #84]	; (800c36c <shci_user_evt_proc+0x90>)
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	1d3a      	adds	r2, r7, #4
 800c31a:	4610      	mov	r0, r2
 800c31c:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c31e:	793a      	ldrb	r2, [r7, #4]
 800c320:	4b11      	ldr	r3, [pc, #68]	; (800c368 <shci_user_evt_proc+0x8c>)
 800c322:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c324:	4b10      	ldr	r3, [pc, #64]	; (800c368 <shci_user_evt_proc+0x8c>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fa38 	bl	800c7a4 <TL_MM_EvtDone>
 800c334:	e004      	b.n	800c340 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4619      	mov	r1, r3
 800c33a:	480a      	ldr	r0, [pc, #40]	; (800c364 <shci_user_evt_proc+0x88>)
 800c33c:	f000 faf4 	bl	800c928 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c340:	4808      	ldr	r0, [pc, #32]	; (800c364 <shci_user_evt_proc+0x88>)
 800c342:	f000 fad1 	bl	800c8e8 <LST_is_empty>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d107      	bne.n	800c35c <shci_user_evt_proc+0x80>
 800c34c:	4b06      	ldr	r3, [pc, #24]	; (800c368 <shci_user_evt_proc+0x8c>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c354:	4803      	ldr	r0, [pc, #12]	; (800c364 <shci_user_evt_proc+0x88>)
 800c356:	f7f4 f92c 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
}
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20000210 	.word	0x20000210
 800c368:	20000220 	.word	0x20000220
 800c36c:	20000400 	.word	0x20000400

0800c370 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60ba      	str	r2, [r7, #8]
 800c378:	607b      	str	r3, [r7, #4]
 800c37a:	4603      	mov	r3, r0
 800c37c:	81fb      	strh	r3, [r7, #14]
 800c37e:	460b      	mov	r3, r1
 800c380:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c382:	2000      	movs	r0, #0
 800c384:	f000 f864 	bl	800c450 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c388:	4b16      	ldr	r3, [pc, #88]	; (800c3e4 <shci_send+0x74>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	89fa      	ldrh	r2, [r7, #14]
 800c38e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c392:	4b14      	ldr	r3, [pc, #80]	; (800c3e4 <shci_send+0x74>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	7b7a      	ldrb	r2, [r7, #13]
 800c398:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c39a:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <shci_send+0x74>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	330c      	adds	r3, #12
 800c3a0:	7b7a      	ldrb	r2, [r7, #13]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f001 fbe9 	bl	800db7c <memcpy>

  shciContext.io.Send(0,0);
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <shci_send+0x78>)
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c3b4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c3b8:	f7f4 f912 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f103 0008 	add.w	r0, r3, #8
 800c3c2:	4b08      	ldr	r3, [pc, #32]	; (800c3e4 <shci_send+0x74>)
 800c3c4:	6819      	ldr	r1, [r3, #0]
 800c3c6:	4b07      	ldr	r3, [pc, #28]	; (800c3e4 <shci_send+0x74>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	789b      	ldrb	r3, [r3, #2]
 800c3cc:	3303      	adds	r3, #3
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f001 fbd4 	bl	800db7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	f000 f83b 	bl	800c450 <Cmd_SetStatus>

  return;
 800c3da:	bf00      	nop
}
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	2000021c 	.word	0x2000021c
 800c3e8:	20000400 	.word	0x20000400

0800c3ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c3f4:	4a10      	ldr	r2, [pc, #64]	; (800c438 <TlInit+0x4c>)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c3fa:	4810      	ldr	r0, [pc, #64]	; (800c43c <TlInit+0x50>)
 800c3fc:	f000 fa64 	bl	800c8c8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c400:	2001      	movs	r0, #1
 800c402:	f000 f825 	bl	800c450 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c406:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <TlInit+0x54>)
 800c408:	2201      	movs	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <TlInit+0x58>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00c      	beq.n	800c42e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <TlInit+0x5c>)
 800c41a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c41c:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <TlInit+0x60>)
 800c41e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c420:	4b08      	ldr	r3, [pc, #32]	; (800c444 <TlInit+0x58>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f107 020c 	add.w	r2, r7, #12
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
  }

  return;
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
}
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	2000021c 	.word	0x2000021c
 800c43c:	20000210 	.word	0x20000210
 800c440:	20000220 	.word	0x20000220
 800c444:	20000400 	.word	0x20000400
 800c448:	0800c4a1 	.word	0x0800c4a1
 800c44c:	0800c4b9 	.word	0x0800c4b9

0800c450 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10b      	bne.n	800c478 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c460:	4b0d      	ldr	r3, [pc, #52]	; (800c498 <Cmd_SetStatus+0x48>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <Cmd_SetStatus+0x48>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2000      	movs	r0, #0
 800c46e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <Cmd_SetStatus+0x4c>)
 800c472:	2200      	movs	r2, #0
 800c474:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c476:	e00b      	b.n	800c490 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c478:	4b08      	ldr	r3, [pc, #32]	; (800c49c <Cmd_SetStatus+0x4c>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c47e:	4b06      	ldr	r3, [pc, #24]	; (800c498 <Cmd_SetStatus+0x48>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d004      	beq.n	800c490 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c486:	4b04      	ldr	r3, [pc, #16]	; (800c498 <Cmd_SetStatus+0x48>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2001      	movs	r0, #1
 800c48c:	4798      	blx	r3
  return;
 800c48e:	bf00      	nop
 800c490:	bf00      	nop
}
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000420 	.word	0x20000420
 800c49c:	20000218 	.word	0x20000218

0800c4a0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f7f4 f88e 	bl	80005ca <shci_cmd_resp_release>

  return;
 800c4ae:	bf00      	nop
}
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	4805      	ldr	r0, [pc, #20]	; (800c4d8 <TlUserEvtReceived+0x20>)
 800c4c4:	f000 fa54 	bl	800c970 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c4c8:	4803      	ldr	r0, [pc, #12]	; (800c4d8 <TlUserEvtReceived+0x20>)
 800c4ca:	f7f4 f872 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800c4ce:	bf00      	nop
}
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000210 	.word	0x20000210

0800c4dc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a05      	ldr	r2, [pc, #20]	; (800c4fc <shci_register_io_bus+0x20>)
 800c4e8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a04      	ldr	r2, [pc, #16]	; (800c500 <shci_register_io_bus+0x24>)
 800c4ee:	611a      	str	r2, [r3, #16]

  return;
 800c4f0:	bf00      	nop
}
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	0800c659 	.word	0x0800c659
 800c500:	0800c6ad 	.word	0x0800c6ad

0800c504 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c508:	f001 f812 	bl	800d530 <HW_IPCC_Enable>

  return;
 800c50c:	bf00      	nop
}
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <TL_Init>:


void TL_Init( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c514:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <TL_Init+0x44>)
 800c516:	4a10      	ldr	r2, [pc, #64]	; (800c558 <TL_Init+0x48>)
 800c518:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c51a:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <TL_Init+0x44>)
 800c51c:	4a0f      	ldr	r2, [pc, #60]	; (800c55c <TL_Init+0x4c>)
 800c51e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c520:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <TL_Init+0x44>)
 800c522:	4a0f      	ldr	r2, [pc, #60]	; (800c560 <TL_Init+0x50>)
 800c524:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <TL_Init+0x44>)
 800c528:	4a0e      	ldr	r2, [pc, #56]	; (800c564 <TL_Init+0x54>)
 800c52a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c52c:	4b09      	ldr	r3, [pc, #36]	; (800c554 <TL_Init+0x44>)
 800c52e:	4a0e      	ldr	r2, [pc, #56]	; (800c568 <TL_Init+0x58>)
 800c530:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <TL_Init+0x44>)
 800c534:	4a0d      	ldr	r2, [pc, #52]	; (800c56c <TL_Init+0x5c>)
 800c536:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c538:	4b06      	ldr	r3, [pc, #24]	; (800c554 <TL_Init+0x44>)
 800c53a:	4a0d      	ldr	r2, [pc, #52]	; (800c570 <TL_Init+0x60>)
 800c53c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <TL_Init+0x44>)
 800c540:	4a0c      	ldr	r2, [pc, #48]	; (800c574 <TL_Init+0x64>)
 800c542:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c544:	4b03      	ldr	r3, [pc, #12]	; (800c554 <TL_Init+0x44>)
 800c546:	4a0c      	ldr	r2, [pc, #48]	; (800c578 <TL_Init+0x68>)
 800c548:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c54a:	f000 fff9 	bl	800d540 <HW_IPCC_Init>

  return;
 800c54e:	bf00      	nop
}
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20030000 	.word	0x20030000
 800c558:	20030024 	.word	0x20030024
 800c55c:	20030044 	.word	0x20030044
 800c560:	20030054 	.word	0x20030054
 800c564:	20030060 	.word	0x20030060
 800c568:	20030068 	.word	0x20030068
 800c56c:	20030070 	.word	0x20030070
 800c570:	2003008c 	.word	0x2003008c
 800c574:	20030090 	.word	0x20030090
 800c578:	2003009c 	.word	0x2003009c

0800c57c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c588:	4811      	ldr	r0, [pc, #68]	; (800c5d0 <TL_BLE_Init+0x54>)
 800c58a:	f000 f99d 	bl	800c8c8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c58e:	4b11      	ldr	r3, [pc, #68]	; (800c5d4 <TL_BLE_Init+0x58>)
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	4a0c      	ldr	r2, [pc, #48]	; (800c5d8 <TL_BLE_Init+0x5c>)
 800c5a8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4a08      	ldr	r2, [pc, #32]	; (800c5d0 <TL_BLE_Init+0x54>)
 800c5ae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c5b0:	f000 ffdc 	bl	800d56c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a08      	ldr	r2, [pc, #32]	; (800c5dc <TL_BLE_Init+0x60>)
 800c5ba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4a07      	ldr	r2, [pc, #28]	; (800c5e0 <TL_BLE_Init+0x64>)
 800c5c2:	6013      	str	r3, [r2, #0]

  return 0;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20030a34 	.word	0x20030a34
 800c5d4:	20030000 	.word	0x20030000
 800c5d8:	20030a24 	.word	0x20030a24
 800c5dc:	2000042c 	.word	0x2000042c
 800c5e0:	20000430 	.word	0x20000430

0800c5e4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <TL_BLE_SendCmd+0x24>)
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c5fa:	f000 ffc1 	bl	800d580 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20030000 	.word	0x20030000

0800c60c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c612:	e009      	b.n	800c628 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c614:	1d3b      	adds	r3, r7, #4
 800c616:	4619      	mov	r1, r3
 800c618:	4808      	ldr	r0, [pc, #32]	; (800c63c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c61a:	f000 f9ec 	bl	800c9f6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c61e:	4b08      	ldr	r3, [pc, #32]	; (800c640 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4610      	mov	r0, r2
 800c626:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c628:	4804      	ldr	r0, [pc, #16]	; (800c63c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c62a:	f000 f95d 	bl	800c8e8 <LST_is_empty>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0ef      	beq.n	800c614 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c634:	bf00      	nop
}
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20030a34 	.word	0x20030a34
 800c640:	2000042c 	.word	0x2000042c

0800c644 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4798      	blx	r3

  return;
 800c64e:	bf00      	nop
}
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20000430 	.word	0x20000430

0800c658 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c664:	480d      	ldr	r0, [pc, #52]	; (800c69c <TL_SYS_Init+0x44>)
 800c666:	f000 f92f 	bl	800c8c8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c66a:	4b0d      	ldr	r3, [pc, #52]	; (800c6a0 <TL_SYS_Init+0x48>)
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	4a08      	ldr	r2, [pc, #32]	; (800c69c <TL_SYS_Init+0x44>)
 800c67c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c67e:	f000 ffa1 	bl	800d5c4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a07      	ldr	r2, [pc, #28]	; (800c6a4 <TL_SYS_Init+0x4c>)
 800c688:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	4a06      	ldr	r2, [pc, #24]	; (800c6a8 <TL_SYS_Init+0x50>)
 800c690:	6013      	str	r3, [r2, #0]

  return 0;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20030a3c 	.word	0x20030a3c
 800c6a0:	20030000 	.word	0x20030000
 800c6a4:	20000434 	.word	0x20000434
 800c6a8:	20000438 	.word	0x20000438

0800c6ac <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <TL_SYS_SendCmd+0x24>)
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2210      	movs	r2, #16
 800c6c0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c6c2:	f000 ff89 	bl	800d5d8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20030000 	.word	0x20030000

0800c6d4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c6d8:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a04      	ldr	r2, [pc, #16]	; (800c6f0 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c6de:	68d2      	ldr	r2, [r2, #12]
 800c6e0:	6812      	ldr	r2, [r2, #0]
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	4798      	blx	r3

  return;
 800c6e6:	bf00      	nop
}
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20000434 	.word	0x20000434
 800c6f0:	20030000 	.word	0x20030000

0800c6f4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c6fa:	e009      	b.n	800c710 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c6fc:	1d3b      	adds	r3, r7, #4
 800c6fe:	4619      	mov	r1, r3
 800c700:	4808      	ldr	r0, [pc, #32]	; (800c724 <HW_IPCC_SYS_EvtNot+0x30>)
 800c702:	f000 f978 	bl	800c9f6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c706:	4b08      	ldr	r3, [pc, #32]	; (800c728 <HW_IPCC_SYS_EvtNot+0x34>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	4610      	mov	r0, r2
 800c70e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c710:	4804      	ldr	r0, [pc, #16]	; (800c724 <HW_IPCC_SYS_EvtNot+0x30>)
 800c712:	f000 f8e9 	bl	800c8e8 <LST_is_empty>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d0ef      	beq.n	800c6fc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c71c:	bf00      	nop
}
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20030a3c 	.word	0x20030a3c
 800c728:	20000438 	.word	0x20000438

0800c72c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c734:	4817      	ldr	r0, [pc, #92]	; (800c794 <TL_MM_Init+0x68>)
 800c736:	f000 f8c7 	bl	800c8c8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c73a:	4817      	ldr	r0, [pc, #92]	; (800c798 <TL_MM_Init+0x6c>)
 800c73c:	f000 f8c4 	bl	800c8c8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c740:	4b16      	ldr	r3, [pc, #88]	; (800c79c <TL_MM_Init+0x70>)
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	4a16      	ldr	r2, [pc, #88]	; (800c7a0 <TL_MM_Init+0x74>)
 800c746:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c748:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <TL_MM_Init+0x74>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	6892      	ldr	r2, [r2, #8]
 800c750:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <TL_MM_Init+0x74>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	68d2      	ldr	r2, [r2, #12]
 800c75a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <TL_MM_Init+0x74>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a0c      	ldr	r2, [pc, #48]	; (800c794 <TL_MM_Init+0x68>)
 800c762:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c764:	4b0e      	ldr	r3, [pc, #56]	; (800c7a0 <TL_MM_Init+0x74>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	6812      	ldr	r2, [r2, #0]
 800c76c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c76e:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <TL_MM_Init+0x74>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6852      	ldr	r2, [r2, #4]
 800c776:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c778:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <TL_MM_Init+0x74>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6912      	ldr	r2, [r2, #16]
 800c780:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c782:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <TL_MM_Init+0x74>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6952      	ldr	r2, [r2, #20]
 800c78a:	619a      	str	r2, [r3, #24]

  return;
 800c78c:	bf00      	nop
}
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	200300a8 	.word	0x200300a8
 800c798:	20000424 	.word	0x20000424
 800c79c:	20030000 	.word	0x20030000
 800c7a0:	2000043c 	.word	0x2000043c

0800c7a4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	4805      	ldr	r0, [pc, #20]	; (800c7c4 <TL_MM_EvtDone+0x20>)
 800c7b0:	f000 f8de 	bl	800c970 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c7b4:	4804      	ldr	r0, [pc, #16]	; (800c7c8 <TL_MM_EvtDone+0x24>)
 800c7b6:	f000 ff35 	bl	800d624 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c7ba:	bf00      	nop
}
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20000424 	.word	0x20000424
 800c7c8:	0800c7cd 	.word	0x0800c7cd

0800c7cc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c7d2:	e00c      	b.n	800c7ee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c7d4:	1d3b      	adds	r3, r7, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	480a      	ldr	r0, [pc, #40]	; (800c804 <SendFreeBuf+0x38>)
 800c7da:	f000 f90c 	bl	800c9f6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c7de:	4b0a      	ldr	r3, [pc, #40]	; (800c808 <SendFreeBuf+0x3c>)
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 f8c1 	bl	800c970 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c7ee:	4805      	ldr	r0, [pc, #20]	; (800c804 <SendFreeBuf+0x38>)
 800c7f0:	f000 f87a 	bl	800c8e8 <LST_is_empty>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0ec      	beq.n	800c7d4 <SendFreeBuf+0x8>
  }

  return;
 800c7fa:	bf00      	nop
}
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20000424 	.word	0x20000424
 800c808:	20030000 	.word	0x20030000

0800c80c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c810:	4805      	ldr	r0, [pc, #20]	; (800c828 <TL_TRACES_Init+0x1c>)
 800c812:	f000 f859 	bl	800c8c8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <TL_TRACES_Init+0x20>)
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	4a03      	ldr	r2, [pc, #12]	; (800c828 <TL_TRACES_Init+0x1c>)
 800c81c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c81e:	f000 ff37 	bl	800d690 <HW_IPCC_TRACES_Init>

  return;
 800c822:	bf00      	nop
}
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	200300b0 	.word	0x200300b0
 800c82c:	20030000 	.word	0x20030000

0800c830 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c836:	e008      	b.n	800c84a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c838:	1d3b      	adds	r3, r7, #4
 800c83a:	4619      	mov	r1, r3
 800c83c:	4808      	ldr	r0, [pc, #32]	; (800c860 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c83e:	f000 f8da 	bl	800c9f6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	f000 f80d 	bl	800c864 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c84a:	4805      	ldr	r0, [pc, #20]	; (800c860 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c84c:	f000 f84c 	bl	800c8e8 <LST_is_empty>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0f0      	beq.n	800c838 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c856:	bf00      	nop
}
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200300b0 	.word	0x200300b0

0800c864 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	4603      	mov	r3, r0
 800c880:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <OTP_Read+0x48>)
 800c884:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c886:	e002      	b.n	800c88e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3b08      	subs	r3, #8
 800c88c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	79fa      	ldrb	r2, [r7, #7]
 800c896:	429a      	cmp	r2, r3
 800c898:	d003      	beq.n	800c8a2 <OTP_Read+0x2a>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4a09      	ldr	r2, [pc, #36]	; (800c8c4 <OTP_Read+0x4c>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d1f2      	bne.n	800c888 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3307      	adds	r3, #7
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d001      	beq.n	800c8b2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	1fff73f8 	.word	0x1fff73f8
 800c8c4:	1fff7000 	.word	0x1fff7000

0800c8c8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	605a      	str	r2, [r3, #4]
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8fa:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	429a      	cmp	r2, r3
 800c904:	d102      	bne.n	800c90c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c906:	2301      	movs	r3, #1
 800c908:	75fb      	strb	r3, [r7, #23]
 800c90a:	e001      	b.n	800c910 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c90c:	2300      	movs	r3, #0
 800c90e:	75fb      	strb	r3, [r7, #23]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c932:	f3ef 8310 	mrs	r3, PRIMASK
 800c936:	60fb      	str	r3, [r7, #12]
  return(result);
 800c938:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c93a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c93c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	605a      	str	r2, [r3, #4]
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c964:	bf00      	nop
 800c966:	371c      	adds	r7, #28
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c97a:	f3ef 8310 	mrs	r3, PRIMASK
 800c97e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c980:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c984:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c9ac:	bf00      	nop
 800c9ae:	371c      	adds	r7, #28
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c9c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9ca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	6852      	ldr	r2, [r2, #4]
 800c9de:	605a      	str	r2, [r3, #4]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c9ea:	bf00      	nop
 800c9ec:	371c      	adds	r7, #28
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b086      	sub	sp, #24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca00:	f3ef 8310 	mrs	r3, PRIMASK
 800ca04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca0a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff ffcd 	bl	800c9b8 <LST_remove_node>
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ca28:	bf00      	nop
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ca34:	4b03      	ldr	r3, [pc, #12]	; (800ca44 <LL_FLASH_GetUDN+0x14>)
 800ca36:	681b      	ldr	r3, [r3, #0]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	1fff7580 	.word	0x1fff7580

0800ca48 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <LL_FLASH_GetDeviceID+0x14>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	b2db      	uxtb	r3, r3
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	1fff7584 	.word	0x1fff7584

0800ca60 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800ca64:	4b03      	ldr	r3, [pc, #12]	; (800ca74 <LL_FLASH_GetSTCompanyID+0x14>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	0a1b      	lsrs	r3, r3, #8
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	1fff7584 	.word	0x1fff7584

0800ca78 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800ca78:	b5b0      	push	{r4, r5, r7, lr}
 800ca7a:	b08c      	sub	sp, #48	; 0x30
 800ca7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ca7e:	4b29      	ldr	r3, [pc, #164]	; (800cb24 <APP_BLE_Init+0xac>)
 800ca80:	463c      	mov	r4, r7
 800ca82:	461d      	mov	r5, r3
 800ca84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca90:	c407      	stmia	r4!, {r0, r1, r2}
 800ca92:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800ca94:	f000 f900 	bl	800cc98 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ca98:	2101      	movs	r1, #1
 800ca9a:	2002      	movs	r0, #2
 800ca9c:	f000 fe20 	bl	800d6e0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800caa0:	4a21      	ldr	r2, [pc, #132]	; (800cb28 <APP_BLE_Init+0xb0>)
 800caa2:	2100      	movs	r1, #0
 800caa4:	2004      	movs	r0, #4
 800caa6:	f000 ff25 	bl	800d8f4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800caaa:	463b      	mov	r3, r7
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff fa4f 	bl	800bf50 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800cab2:	f000 f907 	bl	800ccc4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800cab6:	f7ff f86f 	bl	800bb98 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800caba:	4b1c      	ldr	r3, [pc, #112]	; (800cb2c <APP_BLE_Init+0xb4>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800cac2:	4b1a      	ldr	r3, [pc, #104]	; (800cb2c <APP_BLE_Init+0xb4>)
 800cac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cac8:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800caca:	4a19      	ldr	r2, [pc, #100]	; (800cb30 <APP_BLE_Init+0xb8>)
 800cacc:	2100      	movs	r1, #0
 800cace:	2001      	movs	r0, #1
 800cad0:	f000 ff10 	bl	800d8f4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800cad4:	2006      	movs	r0, #6
 800cad6:	f7fe fd8b 	bl	800b5f0 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800cada:	f000 fb31 	bl	800d140 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800cade:	f000 fb67 	bl	800d1b0 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800cae2:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <APP_BLE_Init+0xbc>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	4914      	ldr	r1, [pc, #80]	; (800cb38 <APP_BLE_Init+0xc0>)
 800cae8:	2000      	movs	r0, #0
 800caea:	f7f4 fa8b 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800caee:	4b13      	ldr	r3, [pc, #76]	; (800cb3c <APP_BLE_Init+0xc4>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	4913      	ldr	r1, [pc, #76]	; (800cb40 <APP_BLE_Init+0xc8>)
 800caf4:	2000      	movs	r0, #0
 800caf6:	f7f4 fa85 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800cafa:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <APP_BLE_Init+0xb4>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800cb02:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <APP_BLE_Init+0xb4>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cb0a:	4b0e      	ldr	r3, [pc, #56]	; (800cb44 <APP_BLE_Init+0xcc>)
 800cb0c:	2280      	movs	r2, #128	; 0x80
 800cb0e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cb10:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <APP_BLE_Init+0xd0>)
 800cb12:	22a0      	movs	r2, #160	; 0xa0
 800cb14:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800cb16:	2001      	movs	r0, #1
 800cb18:	f000 f9ae 	bl	800ce78 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800cb1c:	bf00      	nop
}
 800cb1e:	3730      	adds	r7, #48	; 0x30
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bdb0      	pop	{r4, r5, r7, pc}
 800cb24:	0800dbf8 	.word	0x0800dbf8
 800cb28:	0800bfb9 	.word	0x0800bfb9
 800cb2c:	20000224 	.word	0x20000224
 800cb30:	0800cfe5 	.word	0x0800cfe5
 800cb34:	0800d019 	.word	0x0800d019
 800cb38:	200002b5 	.word	0x200002b5
 800cb3c:	0800d029 	.word	0x0800d029
 800cb40:	200002b6 	.word	0x200002b6
 800cb44:	200002b8 	.word	0x200002b8
 800cb48:	200002ba 	.word	0x200002ba

0800cb4c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cb54:	2342      	movs	r3, #66	; 0x42
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b3e      	cmp	r3, #62	; 0x3e
 800cb66:	d024      	beq.n	800cbb2 <SVCCTL_App_Notification+0x66>
 800cb68:	2bff      	cmp	r3, #255	; 0xff
 800cb6a:	d070      	beq.n	800cc4e <SVCCTL_App_Notification+0x102>
 800cb6c:	2b05      	cmp	r3, #5
 800cb6e:	d000      	beq.n	800cb72 <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800cb70:	e086      	b.n	800cc80 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	3302      	adds	r3, #2
 800cb76:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	4b42      	ldr	r3, [pc, #264]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cb82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d106      	bne.n	800cb96 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cb88:	4b40      	ldr	r3, [pc, #256]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cb8e:	4b3f      	ldr	r3, [pc, #252]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800cb96:	2001      	movs	r0, #1
 800cb98:	f000 f96e 	bl	800ce78 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cb9c:	4b3c      	ldr	r3, [pc, #240]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cb9e:	2201      	movs	r2, #1
 800cba0:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cba2:	4b3a      	ldr	r3, [pc, #232]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cba4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cba6:	4b3a      	ldr	r3, [pc, #232]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cba8:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800cbaa:	4839      	ldr	r0, [pc, #228]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cbac:	f000 fab4 	bl	800d118 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800cbb0:	e066      	b.n	800cc80 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	3302      	adds	r3, #2
 800cbb6:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d042      	beq.n	800cc46 <SVCCTL_App_Notification+0xfa>
 800cbc0:	2b0c      	cmp	r3, #12
 800cbc2:	d002      	beq.n	800cbca <SVCCTL_App_Notification+0x7e>
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d016      	beq.n	800cbf6 <SVCCTL_App_Notification+0xaa>
          break;
 800cbc8:	e040      	b.n	800cc4c <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cbd0:	4b2e      	ldr	r3, [pc, #184]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cbd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cbd4:	f107 020a 	add.w	r2, r7, #10
 800cbd8:	f107 010b 	add.w	r1, r7, #11
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fd81 	bl	800b6e4 <hci_le_read_phy>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800cbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d12c      	bne.n	800cc4a <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	2b02      	cmp	r3, #2
          break;
 800cbf4:	e029      	b.n	800cc4a <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cbfc:	4b23      	ldr	r3, [pc, #140]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cbfe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f4 fa74 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cc08:	4b20      	ldr	r3, [pc, #128]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cc0a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d104      	bne.n	800cc1c <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cc12:	4b1e      	ldr	r3, [pc, #120]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cc14:	2206      	movs	r2, #6
 800cc16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800cc1a:	e003      	b.n	800cc24 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cc1c:	4b1b      	ldr	r3, [pc, #108]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cc1e:	2205      	movs	r2, #5
 800cc20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc2a:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800cc2c:	4b17      	ldr	r3, [pc, #92]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cc2e:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cc30:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cc36:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <SVCCTL_App_Notification+0x140>)
 800cc38:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cc3a:	4b15      	ldr	r3, [pc, #84]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cc3c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800cc3e:	4814      	ldr	r0, [pc, #80]	; (800cc90 <SVCCTL_App_Notification+0x144>)
 800cc40:	f000 fa6a 	bl	800d118 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800cc44:	e002      	b.n	800cc4c <SVCCTL_App_Notification+0x100>
          break;
 800cc46:	bf00      	nop
 800cc48:	e01a      	b.n	800cc80 <SVCCTL_App_Notification+0x134>
          break;
 800cc4a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800cc4c:	e018      	b.n	800cc80 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	3302      	adds	r3, #2
 800cc52:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f240 4207 	movw	r2, #1031	; 0x407
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d00a      	beq.n	800cc78 <SVCCTL_App_Notification+0x12c>
 800cc62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc66:	d009      	beq.n	800cc7c <SVCCTL_App_Notification+0x130>
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d000      	beq.n	800cc6e <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800cc6c:	e007      	b.n	800cc7e <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800cc6e:	2101      	movs	r1, #1
 800cc70:	4808      	ldr	r0, [pc, #32]	; (800cc94 <SVCCTL_App_Notification+0x148>)
 800cc72:	f7f9 f89d 	bl	8005db0 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800cc76:	e002      	b.n	800cc7e <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800cc78:	bf00      	nop
 800cc7a:	e000      	b.n	800cc7e <SVCCTL_App_Notification+0x132>
      break;
 800cc7c:	bf00      	nop
      break; /* EVT_VENDOR */
 800cc7e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cc80:	2301      	movs	r3, #1
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3728      	adds	r7, #40	; 0x28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20000224 	.word	0x20000224
 800cc90:	20000688 	.word	0x20000688
 800cc94:	48000400 	.word	0x48000400

0800cc98 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cc9e:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <Ble_Tl_Init+0x20>)
 800cca0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cca2:	4b06      	ldr	r3, [pc, #24]	; (800ccbc <Ble_Tl_Init+0x24>)
 800cca4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cca6:	463b      	mov	r3, r7
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4805      	ldr	r0, [pc, #20]	; (800ccc0 <Ble_Tl_Init+0x28>)
 800ccac:	f7ff f968 	bl	800bf80 <hci_init>

  return;
 800ccb0:	bf00      	nop
}
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	200300b8 	.word	0x200300b8
 800ccbc:	0800d0b3 	.word	0x0800d0b3
 800ccc0:	0800d07b 	.word	0x0800d07b

0800ccc4 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800ccc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc6:	b091      	sub	sp, #68	; 0x44
 800ccc8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ccca:	2300      	movs	r3, #0
 800cccc:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ccce:	f7fe fce0 	bl	800b692 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ccd2:	f000 f943 	bl	800cf5c <BleGetBdAddress>
 800ccd6:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ccd8:	6a3a      	ldr	r2, [r7, #32]
 800ccda:	2106      	movs	r1, #6
 800ccdc:	2000      	movs	r0, #0
 800ccde:	f7fe fbb9 	bl	800b454 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	795a      	ldrb	r2, [r3, #5]
 800cce6:	4b5e      	ldr	r3, [pc, #376]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cce8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	791a      	ldrb	r2, [r3, #4]
 800ccee:	4b5c      	ldr	r3, [pc, #368]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ccf0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	78da      	ldrb	r2, [r3, #3]
 800ccf6:	4b5a      	ldr	r3, [pc, #360]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ccf8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	789a      	ldrb	r2, [r3, #2]
 800ccfe:	4b58      	ldr	r3, [pc, #352]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cd00:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	785a      	ldrb	r2, [r3, #1]
 800cd06:	4b56      	ldr	r3, [pc, #344]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cd08:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	781a      	ldrb	r2, [r3, #0]
 800cd0e:	4b54      	ldr	r3, [pc, #336]	; (800ce60 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cd10:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800cd12:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800cd16:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800cd18:	f7ff fe8a 	bl	800ca30 <LL_FLASH_GetUDN>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cd20:	f107 0308 	add.w	r3, r7, #8
 800cd24:	461a      	mov	r2, r3
 800cd26:	2106      	movs	r1, #6
 800cd28:	202e      	movs	r0, #46	; 0x2e
 800cd2a:	f7fe fb93 	bl	800b454 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cd2e:	4a4d      	ldr	r2, [pc, #308]	; (800ce64 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800cd30:	2110      	movs	r1, #16
 800cd32:	2018      	movs	r0, #24
 800cd34:	f7fe fb8e 	bl	800b454 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cd38:	4a4b      	ldr	r2, [pc, #300]	; (800ce68 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800cd3a:	2110      	movs	r1, #16
 800cd3c:	2008      	movs	r0, #8
 800cd3e:	f7fe fb89 	bl	800b454 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cd42:	2118      	movs	r1, #24
 800cd44:	2001      	movs	r0, #1
 800cd46:	f7fe fbf5 	bl	800b534 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800cd4a:	f7fe f932 	bl	800afb2 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cd52:	7ffb      	ldrb	r3, [r7, #31]
 800cd54:	f043 0301 	orr.w	r3, r3, #1
 800cd58:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800cd5a:	7ffb      	ldrb	r3, [r7, #31]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d01e      	beq.n	800cd9e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800cd60:	4b42      	ldr	r3, [pc, #264]	; (800ce6c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800cd62:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800cd64:	f107 0216 	add.w	r2, r7, #22
 800cd68:	7ff8      	ldrb	r0, [r7, #31]
 800cd6a:	f107 0312 	add.w	r3, r7, #18
 800cd6e:	9301      	str	r3, [sp, #4]
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	4613      	mov	r3, r2
 800cd78:	2207      	movs	r2, #7
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	f7fe f802 	bl	800ad84 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cd80:	8afc      	ldrh	r4, [r7, #22]
 800cd82:	8abd      	ldrh	r5, [r7, #20]
 800cd84:	69b8      	ldr	r0, [r7, #24]
 800cd86:	f7f3 f9fb 	bl	8000180 <strlen>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	4613      	mov	r3, r2
 800cd94:	2200      	movs	r2, #0
 800cd96:	4629      	mov	r1, r5
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f7fe facd 	bl	800b338 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800cd9e:	8af8      	ldrh	r0, [r7, #22]
 800cda0:	8a79      	ldrh	r1, [r7, #18]
 800cda2:	1d3b      	adds	r3, r7, #4
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	2302      	movs	r3, #2
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f7fe fac5 	bl	800b338 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800cdae:	2202      	movs	r2, #2
 800cdb0:	2102      	movs	r1, #2
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f7fe fcfe 	bl	800b7b4 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cdb8:	4b2d      	ldr	r3, [pc, #180]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdba:	2201      	movs	r2, #1
 800cdbc:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cdbe:	4b2c      	ldr	r3, [pc, #176]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fd fede 	bl	800ab84 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cdc8:	4b29      	ldr	r3, [pc, #164]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cdce:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cdd4:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdd6:	2208      	movs	r2, #8
 800cdd8:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cdda:	4b25      	ldr	r3, [pc, #148]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cddc:	2210      	movs	r2, #16
 800cdde:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cde0:	4b23      	ldr	r3, [pc, #140]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cde2:	2201      	movs	r2, #1
 800cde4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cde6:	4b22      	ldr	r3, [pc, #136]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cde8:	4a22      	ldr	r2, [pc, #136]	; (800ce74 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800cdea:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cdec:	4b20      	ldr	r3, [pc, #128]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cdee:	2201      	movs	r2, #1
 800cdf0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdf8:	e00b      	b.n	800ce12 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800cdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdfe:	4a1c      	ldr	r2, [pc, #112]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce00:	4413      	add	r3, r2
 800ce02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ce06:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800ce08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce16:	2b0f      	cmp	r3, #15
 800ce18:	d9ef      	bls.n	800cdfa <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce1c:	789d      	ldrb	r5, [r3, #2]
 800ce1e:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce20:	785e      	ldrb	r6, [r3, #1]
 800ce22:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce24:	7d5b      	ldrb	r3, [r3, #21]
 800ce26:	4a12      	ldr	r2, [pc, #72]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce28:	7d92      	ldrb	r2, [r2, #22]
 800ce2a:	4911      	ldr	r1, [pc, #68]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce2c:	7d09      	ldrb	r1, [r1, #20]
 800ce2e:	4810      	ldr	r0, [pc, #64]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce30:	6980      	ldr	r0, [r0, #24]
 800ce32:	2400      	movs	r4, #0
 800ce34:	9404      	str	r4, [sp, #16]
 800ce36:	9003      	str	r0, [sp, #12]
 800ce38:	9102      	str	r1, [sp, #8]
 800ce3a:	9201      	str	r2, [sp, #4]
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	2201      	movs	r2, #1
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	f7fd feee 	bl	800ac26 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce4c:	789b      	ldrb	r3, [r3, #2]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800ce52:	f7fe f885 	bl	800af60 <aci_gap_configure_whitelist>
   }
}
 800ce56:	bf00      	nop
 800ce58:	372c      	adds	r7, #44	; 0x2c
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20000114 	.word	0x20000114
 800ce64:	0800dcd8 	.word	0x0800dcd8
 800ce68:	0800dce8 	.word	0x0800dce8
 800ce6c:	0800dc28 	.word	0x0800dc28
 800ce70:	20000224 	.word	0x20000224
 800ce74:	0001b207 	.word	0x0001b207

0800ce78 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08c      	sub	sp, #48	; 0x30
 800ce7c:	af08      	add	r7, sp, #32
 800ce7e:	4603      	mov	r3, r0
 800ce80:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ce82:	2342      	movs	r3, #66	; 0x42
 800ce84:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d106      	bne.n	800ce9a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ce8c:	4b2c      	ldr	r3, [pc, #176]	; (800cf40 <Adv_Request+0xc8>)
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800ce92:	4b2c      	ldr	r3, [pc, #176]	; (800cf44 <Adv_Request+0xcc>)
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	81bb      	strh	r3, [r7, #12]
 800ce98:	e005      	b.n	800cea6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800ce9a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800ce9e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800cea0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cea4:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cea6:	4b28      	ldr	r3, [pc, #160]	; (800cf48 <Adv_Request+0xd0>)
 800cea8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f4 f91f 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d10d      	bne.n	800ced4 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800ceb8:	4b23      	ldr	r3, [pc, #140]	; (800cf48 <Adv_Request+0xd0>)
 800ceba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d004      	beq.n	800cecc <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800cec2:	4b21      	ldr	r3, [pc, #132]	; (800cf48 <Adv_Request+0xd0>)
 800cec4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d103      	bne.n	800ced4 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800cecc:	f7fd fd4c 	bl	800a968 <aci_gap_set_non_discoverable>
 800ced0:	4603      	mov	r3, r0
 800ced2:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800ced4:	4a1c      	ldr	r2, [pc, #112]	; (800cf48 <Adv_Request+0xd0>)
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800cedc:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <Adv_Request+0xd0>)
 800cede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee2:	89b8      	ldrh	r0, [r7, #12]
 800cee4:	89f9      	ldrh	r1, [r7, #14]
 800cee6:	2200      	movs	r2, #0
 800cee8:	9206      	str	r2, [sp, #24]
 800ceea:	2200      	movs	r2, #0
 800ceec:	9205      	str	r2, [sp, #20]
 800ceee:	4a17      	ldr	r2, [pc, #92]	; (800cf4c <Adv_Request+0xd4>)
 800cef0:	9204      	str	r2, [sp, #16]
 800cef2:	9303      	str	r3, [sp, #12]
 800cef4:	4b16      	ldr	r3, [pc, #88]	; (800cf50 <Adv_Request+0xd8>)
 800cef6:	9302      	str	r3, [sp, #8]
 800cef8:	2306      	movs	r3, #6
 800cefa:	9301      	str	r3, [sp, #4]
 800cefc:	2300      	movs	r3, #0
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	2300      	movs	r3, #0
 800cf02:	4602      	mov	r2, r0
 800cf04:	2000      	movs	r0, #0
 800cf06:	f7fd fd58 	bl	800a9ba <aci_gap_set_discoverable>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800cf0e:	4911      	ldr	r1, [pc, #68]	; (800cf54 <Adv_Request+0xdc>)
 800cf10:	200e      	movs	r0, #14
 800cf12:	f7fd ffc2 	bl	800ae9a <aci_gap_update_adv_data>
 800cf16:	4603      	mov	r3, r0
 800cf18:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800cf1a:	7afb      	ldrb	r3, [r7, #11]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d107      	bne.n	800cf36 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800cf26:	4b08      	ldr	r3, [pc, #32]	; (800cf48 <Adv_Request+0xd0>)
 800cf28:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cf2c:	490a      	ldr	r1, [pc, #40]	; (800cf58 <Adv_Request+0xe0>)
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f4 f968 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
}
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	200002b8 	.word	0x200002b8
 800cf44:	200002ba 	.word	0x200002ba
 800cf48:	20000224 	.word	0x20000224
 800cf4c:	2000024d 	.word	0x2000024d
 800cf50:	0800dcf8 	.word	0x0800dcf8
 800cf54:	20000114 	.word	0x20000114
 800cf58:	0001e046 	.word	0x0001e046

0800cf5c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cf62:	f7ff fd65 	bl	800ca30 <LL_FLASH_GetUDN>
 800cf66:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6e:	d023      	beq.n	800cfb8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800cf70:	f7ff fd76 	bl	800ca60 <LL_FLASH_GetSTCompanyID>
 800cf74:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800cf76:	f7ff fd67 	bl	800ca48 <LL_FLASH_GetDeviceID>
 800cf7a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <BleGetBdAddress+0x80>)
 800cf82:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	0a1b      	lsrs	r3, r3, #8
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	4b14      	ldr	r3, [pc, #80]	; (800cfdc <BleGetBdAddress+0x80>)
 800cf8c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	0c1b      	lsrs	r3, r3, #16
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <BleGetBdAddress+0x80>)
 800cf96:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <BleGetBdAddress+0x80>)
 800cf9e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <BleGetBdAddress+0x80>)
 800cfa6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	0a1b      	lsrs	r3, r3, #8
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <BleGetBdAddress+0x80>)
 800cfb0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800cfb2:	4b0a      	ldr	r3, [pc, #40]	; (800cfdc <BleGetBdAddress+0x80>)
 800cfb4:	617b      	str	r3, [r7, #20]
 800cfb6:	e00b      	b.n	800cfd0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f7ff fc5d 	bl	800c878 <OTP_Read>
 800cfbe:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d002      	beq.n	800cfcc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e001      	b.n	800cfd0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <BleGetBdAddress+0x84>)
 800cfce:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800cfd0:	697b      	ldr	r3, [r7, #20]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000440 	.word	0x20000440
 800cfe0:	0800dcd0 	.word	0x0800dcd0

0800cfe4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cfea:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <Adv_Cancel+0x30>)
 800cfec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cff0:	2b05      	cmp	r3, #5
 800cff2:	d00a      	beq.n	800d00a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800cff4:	2300      	movs	r3, #0
 800cff6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800cff8:	f7fd fcb6 	bl	800a968 <aci_gap_set_non_discoverable>
 800cffc:	4603      	mov	r3, r0
 800cffe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d000:	4b04      	ldr	r3, [pc, #16]	; (800d014 <Adv_Cancel+0x30>)
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
}
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20000224 	.word	0x20000224

0800d018 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d01c:	2100      	movs	r1, #0
 800d01e:	2001      	movs	r0, #1
 800d020:	f000 fc88 	bl	800d934 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800d024:	bf00      	nop
}
 800d026:	bd80      	pop	{r7, pc}

0800d028 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800d028:	b480      	push	{r7}
 800d02a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800d02c:	bf00      	nop
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d03e:	2100      	movs	r1, #0
 800d040:	2004      	movs	r0, #4
 800d042:	f000 fc77 	bl	800d934 <UTIL_SEQ_SetTask>
  return;
 800d046:	bf00      	nop
}
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d056:	2001      	movs	r0, #1
 800d058:	f000 fcd2 	bl	800da00 <UTIL_SEQ_SetEvt>
  return;
 800d05c:	bf00      	nop
}
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d06c:	2001      	movs	r0, #1
 800d06e:	f000 fce5 	bl	800da3c <UTIL_SEQ_WaitEvt>
  return;
 800d072:	bf00      	nop
}
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	3308      	adds	r3, #8
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fdd1 	bl	800bc34 <SVCCTL_UserEvtRx>
 800d092:	4603      	mov	r3, r0
 800d094:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d096:	7afb      	ldrb	r3, [r7, #11]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d003      	beq.n	800d0a4 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d0a2:	e002      	b.n	800d0aa <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <BLE_StatusNot+0x16>
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d006      	beq.n	800d0d4 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d0c6:	e00b      	b.n	800d0e0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d0c8:	231f      	movs	r3, #31
 800d0ca:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 fc5b 	bl	800d988 <UTIL_SEQ_PauseTask>
      break;
 800d0d2:	e005      	b.n	800d0e0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d0d4:	231f      	movs	r3, #31
 800d0d6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 fc73 	bl	800d9c4 <UTIL_SEQ_ResumeTask>
      break;
 800d0de:	bf00      	nop
  }
  return;
 800d0e0:	bf00      	nop
}
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d004      	beq.n	800d102 <P2PS_STM_App_Notification+0x1a>
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	d004      	beq.n	800d106 <P2PS_STM_App_Notification+0x1e>
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d100:	e004      	b.n	800d10c <P2PS_STM_App_Notification+0x24>
      break;
 800d102:	bf00      	nop
 800d104:	e002      	b.n	800d10c <P2PS_STM_App_Notification+0x24>
      break;
 800d106:	bf00      	nop
 800d108:	e000      	b.n	800d10c <P2PS_STM_App_Notification+0x24>
      break;
 800d10a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d10c:	bf00      	nop
}
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <P2PS_APP_Notification+0x16>
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d002      	beq.n	800d132 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d12c:	e002      	b.n	800d134 <P2PS_APP_Notification+0x1c>
    break;
 800d12e:	bf00      	nop
 800d130:	e000      	b.n	800d134 <P2PS_APP_Notification+0x1c>
    break;
 800d132:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d134:	bf00      	nop
}
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d140:	b480      	push	{r7}
 800d142:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800d144:	bf00      	nop
}
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	af00      	add	r7, sp, #0
UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 800d152:	2100      	movs	r1, #0
 800d154:	2010      	movs	r0, #16
 800d156:	f000 fbed 	bl	800d934 <UTIL_SEQ_SetTask>
}
 800d15a:	bf00      	nop
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d00e      	beq.n	800d18e <TEMPLATE_STM_App_Notification+0x2e>
 800d170:	2b03      	cmp	r3, #3
 800d172:	d015      	beq.n	800d1a0 <TEMPLATE_STM_App_Notification+0x40>
 800d174:	2b00      	cmp	r3, #0
 800d176:	d000      	beq.n	800d17a <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800d178:	e013      	b.n	800d1a2 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800d17a:	4b0c      	ldr	r3, [pc, #48]	; (800d1ac <TEMPLATE_STM_App_Notification+0x4c>)
 800d17c:	2201      	movs	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <TEMPLATE_STM_App_Notification+0x4c>)
 800d182:	7a1b      	ldrb	r3, [r3, #8]
 800d184:	21cc      	movs	r1, #204	; 0xcc
 800d186:	4618      	mov	r0, r3
 800d188:	f7f4 f83c 	bl	8001204 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800d18c:	e009      	b.n	800d1a2 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800d18e:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <TEMPLATE_STM_App_Notification+0x4c>)
 800d190:	2200      	movs	r2, #0
 800d192:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <TEMPLATE_STM_App_Notification+0x4c>)
 800d196:	7a1b      	ldrb	r3, [r3, #8]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f3 ffa9 	bl	80010f0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800d19e:	e000      	b.n	800d1a2 <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800d1a0:	bf00      	nop
  }

  return;
 800d1a2:	bf00      	nop
}
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	200002bc 	.word	0x200002bc

0800d1b0 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800d1b4:	4a08      	ldr	r2, [pc, #32]	; (800d1d8 <TEMPLATE_APP_Init+0x28>)
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	2010      	movs	r0, #16
 800d1ba:	f000 fb9b 	bl	800d8f4 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800d1be:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <TEMPLATE_APP_Init+0x2c>)
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	4907      	ldr	r1, [pc, #28]	; (800d1e0 <TEMPLATE_APP_Init+0x30>)
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	f7f3 ff1d 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800d1ca:	4b06      	ldr	r3, [pc, #24]	; (800d1e4 <TEMPLATE_APP_Init+0x34>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800d1d0:	f000 f80a 	bl	800d1e8 <TEMPLATE_APP_context_Init>
  return;
 800d1d4:	bf00      	nop
}
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	0800d20d 	.word	0x0800d20d
 800d1dc:	0800d14f 	.word	0x0800d14f
 800d1e0:	200002c4 	.word	0x200002c4
 800d1e4:	200002bc 	.word	0x200002bc

0800d1e8 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <TEMPLATE_APP_context_Init+0x20>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <TEMPLATE_APP_context_Init+0x20>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800d1f8:	4b03      	ldr	r3, [pc, #12]	; (800d208 <TEMPLATE_APP_context_Init+0x20>)
 800d1fa:	220a      	movs	r2, #10
 800d1fc:	80da      	strh	r2, [r3, #6]
}
 800d1fe:	bf00      	nop
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	200002bc 	.word	0x200002bc

0800d20c <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
  uint8_t value[4];
  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
 800d212:	4b21      	ldr	r3, [pc, #132]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d214:	885b      	ldrh	r3, [r3, #2]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
 800d21a:	4b1f      	ldr	r3, [pc, #124]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d21c:	885b      	ldrh	r3, [r3, #2]
 800d21e:	0a1b      	lsrs	r3, r3, #8
 800d220:	b29b      	uxth	r3, r3
 800d222:	b2db      	uxtb	r3, r3
 800d224:	717b      	strb	r3, [r7, #5]
  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
 800d226:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d228:	889b      	ldrh	r3, [r3, #4]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	71bb      	strb	r3, [r7, #6]
  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
 800d22e:	4b1a      	ldr	r3, [pc, #104]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d230:	889b      	ldrh	r3, [r3, #4]
 800d232:	0a1b      	lsrs	r3, r3, #8
 800d234:	b29b      	uxth	r3, r3
 800d236:	b2db      	uxtb	r3, r3
 800d238:	71fb      	strb	r3, [r7, #7]
  TEMPLATE_Server_App_Context.Parameter.Temperature += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800d23a:	4b17      	ldr	r3, [pc, #92]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d23c:	889a      	ldrh	r2, [r3, #4]
 800d23e:	4b16      	ldr	r3, [pc, #88]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d240:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d244:	b29b      	uxth	r3, r3
 800d246:	4413      	add	r3, r2
 800d248:	b29a      	uxth	r2, r3
 800d24a:	4b13      	ldr	r3, [pc, #76]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d24c:	809a      	strh	r2, [r3, #4]
  TEMPLATE_Server_App_Context.Parameter.TimeStamp += PARAMETER_CHANGE_STEP;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d250:	885b      	ldrh	r3, [r3, #2]
 800d252:	330a      	adds	r3, #10
 800d254:	b29a      	uxth	r2, r3
 800d256:	4b10      	ldr	r3, [pc, #64]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d258:	805a      	strh	r2, [r3, #2]
  if (TEMPLATE_Server_App_Context.Parameter.Temperature > PARAMETER_VALUE_MAX_THRESHOLD) {
 800d25a:	4b0f      	ldr	r3, [pc, #60]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d25c:	889b      	ldrh	r3, [r3, #4]
 800d25e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800d262:	d904      	bls.n	800d26e <TEMPLATE_Send_Notification_Task+0x62>
    TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d266:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800d26a:	80da      	strh	r2, [r3, #6]
 800d26c:	e006      	b.n	800d27c <TEMPLATE_Send_Notification_Task+0x70>
  }
  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
 800d26e:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d270:	889b      	ldrh	r3, [r3, #4]
 800d272:	2b63      	cmp	r3, #99	; 0x63
 800d274:	d802      	bhi.n	800d27c <TEMPLATE_Send_Notification_Task+0x70>
  {
    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 800d276:	4b08      	ldr	r3, [pc, #32]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d278:	220a      	movs	r2, #10
 800d27a:	80da      	strh	r2, [r3, #6]
  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800d27c:	4b06      	ldr	r3, [pc, #24]	; (800d298 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <TEMPLATE_Send_Notification_Task+0x84>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800d284:	1d3b      	adds	r3, r7, #4
 800d286:	4619      	mov	r1, r3
 800d288:	2000      	movs	r0, #0
 800d28a:	f7fe fe41 	bl	800bf10 <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800d28e:	bf00      	nop
 800d290:	bf00      	nop
}
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	200002bc 	.word	0x200002bc

0800d29c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <LL_PWR_EnableBootC2+0x1c>)
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	4a04      	ldr	r2, [pc, #16]	; (800d2b8 <LL_PWR_EnableBootC2+0x1c>)
 800d2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2aa:	60d3      	str	r3, [r2, #12]
}
 800d2ac:	bf00      	nop
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	58000400 	.word	0x58000400

0800d2bc <LL_AHB3_GRP1_EnableClock>:
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d2c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d2d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4013      	ands	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
}
 800d2e2:	bf00      	nop
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	601a      	str	r2, [r3, #0]
}
 800d302:	bf00      	nop
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f043 0201 	orr.w	r2, r3, #1
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	601a      	str	r2, [r3, #0]
}
 800d322:	bf00      	nop
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	041b      	lsls	r3, r3, #16
 800d340:	43db      	mvns	r3, r3
 800d342:	401a      	ands	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	605a      	str	r2, [r3, #4]
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	041b      	lsls	r3, r3, #16
 800d366:	431a      	orrs	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	605a      	str	r2, [r3, #4]
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	43db      	mvns	r3, r3
 800d38a:	401a      	ands	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	605a      	str	r2, [r3, #4]
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	683a      	ldr	r2, [r7, #0]
 800d3aa:	609a      	str	r2, [r3, #8]
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	041a      	lsls	r2, r3, #16
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	609a      	str	r2, [r3, #8]
}
 800d3ca:	bf00      	nop
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d101      	bne.n	800d3f2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	69da      	ldr	r2, [r3, #28]
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	4013      	ands	r3, r2
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d101      	bne.n	800d41c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d418:	2301      	movs	r3, #1
 800d41a:	e000      	b.n	800d41e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
	...

0800d42c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d430:	2102      	movs	r1, #2
 800d432:	4819      	ldr	r0, [pc, #100]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d434:	f7ff ffe4 	bl	800d400 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d009      	beq.n	800d452 <HW_IPCC_Rx_Handler+0x26>
 800d43e:	4b16      	ldr	r3, [pc, #88]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	43db      	mvns	r3, r3
 800d444:	f003 0302 	and.w	r3, r3, #2
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d44c:	f000 f8de 	bl	800d60c <HW_IPCC_SYS_EvtHandler>
 800d450:	e01f      	b.n	800d492 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d452:	2101      	movs	r1, #1
 800d454:	4810      	ldr	r0, [pc, #64]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d456:	f7ff ffd3 	bl	800d400 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d008      	beq.n	800d472 <HW_IPCC_Rx_Handler+0x46>
 800d460:	4b0d      	ldr	r3, [pc, #52]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d46c:	f000 f892 	bl	800d594 <HW_IPCC_BLE_EvtHandler>
 800d470:	e00f      	b.n	800d492 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d472:	2108      	movs	r1, #8
 800d474:	4808      	ldr	r0, [pc, #32]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d476:	f7ff ffc3 	bl	800d400 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d009      	beq.n	800d494 <HW_IPCC_Rx_Handler+0x68>
 800d480:	4b05      	ldr	r3, [pc, #20]	; (800d498 <HW_IPCC_Rx_Handler+0x6c>)
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	43db      	mvns	r3, r3
 800d486:	f003 0308 	and.w	r3, r3, #8
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d002      	beq.n	800d494 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d48e:	f000 f909 	bl	800d6a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d492:	bf00      	nop
 800d494:	bf00      	nop
}
 800d496:	bd80      	pop	{r7, pc}
 800d498:	58000c00 	.word	0x58000c00

0800d49c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d4a0:	2102      	movs	r1, #2
 800d4a2:	4822      	ldr	r0, [pc, #136]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4a4:	f7ff ff97 	bl	800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d109      	bne.n	800d4c2 <HW_IPCC_Tx_Handler+0x26>
 800d4ae:	4b1f      	ldr	r3, [pc, #124]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	43db      	mvns	r3, r3
 800d4b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d4bc:	f000 f89a 	bl	800d5f4 <HW_IPCC_SYS_CmdEvtHandler>
 800d4c0:	e031      	b.n	800d526 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d4c2:	2102      	movs	r1, #2
 800d4c4:	4819      	ldr	r0, [pc, #100]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4c6:	f7ff ff86 	bl	800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <HW_IPCC_Tx_Handler+0x48>
 800d4d0:	4b16      	ldr	r3, [pc, #88]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	43db      	mvns	r3, r3
 800d4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d4de:	f000 f889 	bl	800d5f4 <HW_IPCC_SYS_CmdEvtHandler>
 800d4e2:	e020      	b.n	800d526 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d4e4:	2108      	movs	r1, #8
 800d4e6:	4811      	ldr	r0, [pc, #68]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4e8:	f7ff ff75 	bl	800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <HW_IPCC_Tx_Handler+0x6a>
 800d4f2:	4b0e      	ldr	r3, [pc, #56]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	43db      	mvns	r3, r3
 800d4f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d500:	f000 f8b2 	bl	800d668 <HW_IPCC_MM_FreeBufHandler>
 800d504:	e00f      	b.n	800d526 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d506:	2120      	movs	r1, #32
 800d508:	4808      	ldr	r0, [pc, #32]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d50a:	f7ff ff64 	bl	800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d109      	bne.n	800d528 <HW_IPCC_Tx_Handler+0x8c>
 800d514:	4b05      	ldr	r3, [pc, #20]	; (800d52c <HW_IPCC_Tx_Handler+0x90>)
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	43db      	mvns	r3, r3
 800d51a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d522:	f000 f843 	bl	800d5ac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d526:	bf00      	nop
 800d528:	bf00      	nop
}
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	58000c00 	.word	0x58000c00

0800d530 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d534:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d536:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d538:	f7ff feb0 	bl	800d29c <LL_PWR_EnableBootC2>

  return;
 800d53c:	bf00      	nop
}
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d544:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d548:	f7ff feb8 	bl	800d2bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d54c:	4806      	ldr	r0, [pc, #24]	; (800d568 <HW_IPCC_Init+0x28>)
 800d54e:	f7ff fede 	bl	800d30e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d552:	4805      	ldr	r0, [pc, #20]	; (800d568 <HW_IPCC_Init+0x28>)
 800d554:	f7ff fecb 	bl	800d2ee <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d558:	202c      	movs	r0, #44	; 0x2c
 800d55a:	f7f8 f920 	bl	800579e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d55e:	202d      	movs	r0, #45	; 0x2d
 800d560:	f7f8 f91d 	bl	800579e <HAL_NVIC_EnableIRQ>

  return;
 800d564:	bf00      	nop
}
 800d566:	bd80      	pop	{r7, pc}
 800d568:	58000c00 	.word	0x58000c00

0800d56c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d570:	2101      	movs	r1, #1
 800d572:	4802      	ldr	r0, [pc, #8]	; (800d57c <HW_IPCC_BLE_Init+0x10>)
 800d574:	f7ff ff00 	bl	800d378 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d578:	bf00      	nop
}
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	58000c00 	.word	0x58000c00

0800d580 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d584:	2101      	movs	r1, #1
 800d586:	4802      	ldr	r0, [pc, #8]	; (800d590 <HW_IPCC_BLE_SendCmd+0x10>)
 800d588:	f7ff ff16 	bl	800d3b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d58c:	bf00      	nop
}
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	58000c00 	.word	0x58000c00

0800d594 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d598:	f7ff f838 	bl	800c60c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d59c:	2101      	movs	r1, #1
 800d59e:	4802      	ldr	r0, [pc, #8]	; (800d5a8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d5a0:	f7ff fefc 	bl	800d39c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d5a4:	bf00      	nop
}
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	58000c00 	.word	0x58000c00

0800d5ac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d5b0:	2120      	movs	r1, #32
 800d5b2:	4803      	ldr	r0, [pc, #12]	; (800d5c0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d5b4:	f7ff fece 	bl	800d354 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d5b8:	f7ff f844 	bl	800c644 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d5bc:	bf00      	nop
}
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	58000c00 	.word	0x58000c00

0800d5c4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d5c8:	2102      	movs	r1, #2
 800d5ca:	4802      	ldr	r0, [pc, #8]	; (800d5d4 <HW_IPCC_SYS_Init+0x10>)
 800d5cc:	f7ff fed4 	bl	800d378 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d5d0:	bf00      	nop
}
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	58000c00 	.word	0x58000c00

0800d5d8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d5dc:	2102      	movs	r1, #2
 800d5de:	4804      	ldr	r0, [pc, #16]	; (800d5f0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d5e0:	f7ff feea 	bl	800d3b8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d5e4:	2102      	movs	r1, #2
 800d5e6:	4802      	ldr	r0, [pc, #8]	; (800d5f0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d5e8:	f7ff fea1 	bl	800d32e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d5ec:	bf00      	nop
}
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	58000c00 	.word	0x58000c00

0800d5f4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d5f8:	2102      	movs	r1, #2
 800d5fa:	4803      	ldr	r0, [pc, #12]	; (800d608 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d5fc:	f7ff feaa 	bl	800d354 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d600:	f7ff f868 	bl	800c6d4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d604:	bf00      	nop
}
 800d606:	bd80      	pop	{r7, pc}
 800d608:	58000c00 	.word	0x58000c00

0800d60c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d610:	f7ff f870 	bl	800c6f4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d614:	2102      	movs	r1, #2
 800d616:	4802      	ldr	r0, [pc, #8]	; (800d620 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d618:	f7ff fec0 	bl	800d39c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d61c:	bf00      	nop
}
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	58000c00 	.word	0x58000c00

0800d624 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d62c:	2108      	movs	r1, #8
 800d62e:	480c      	ldr	r0, [pc, #48]	; (800d660 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d630:	f7ff fed1 	bl	800d3d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d63a:	4a0a      	ldr	r2, [pc, #40]	; (800d664 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d640:	2108      	movs	r1, #8
 800d642:	4807      	ldr	r0, [pc, #28]	; (800d660 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d644:	f7ff fe73 	bl	800d32e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d648:	e006      	b.n	800d658 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d64e:	2108      	movs	r1, #8
 800d650:	4803      	ldr	r0, [pc, #12]	; (800d660 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d652:	f7ff feb1 	bl	800d3b8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d656:	bf00      	nop
}
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	58000c00 	.word	0x58000c00
 800d664:	20000448 	.word	0x20000448

0800d668 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d66c:	2108      	movs	r1, #8
 800d66e:	4806      	ldr	r0, [pc, #24]	; (800d688 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d670:	f7ff fe70 	bl	800d354 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d674:	4b05      	ldr	r3, [pc, #20]	; (800d68c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d67a:	2108      	movs	r1, #8
 800d67c:	4802      	ldr	r0, [pc, #8]	; (800d688 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d67e:	f7ff fe9b 	bl	800d3b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d682:	bf00      	nop
}
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	58000c00 	.word	0x58000c00
 800d68c:	20000448 	.word	0x20000448

0800d690 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d694:	2108      	movs	r1, #8
 800d696:	4802      	ldr	r0, [pc, #8]	; (800d6a0 <HW_IPCC_TRACES_Init+0x10>)
 800d698:	f7ff fe6e 	bl	800d378 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d69c:	bf00      	nop
}
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	58000c00 	.word	0x58000c00

0800d6a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d6a8:	f7ff f8c2 	bl	800c830 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d6ac:	2108      	movs	r1, #8
 800d6ae:	4802      	ldr	r0, [pc, #8]	; (800d6b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d6b0:	f7ff fe74 	bl	800d39c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d6b4:	bf00      	nop
}
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	58000c00 	.word	0x58000c00

0800d6bc <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <UTIL_LPM_Init+0x1c>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d6c6:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <UTIL_LPM_Init+0x20>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d6cc:	bf00      	nop
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	2000044c 	.word	0x2000044c
 800d6dc:	20000450 	.word	0x20000450

0800d6e0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d6f0:	613b      	str	r3, [r7, #16]
  return(result);
 800d6f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d6f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6f6:	b672      	cpsid	i
  
  switch(state)
 800d6f8:	78fb      	ldrb	r3, [r7, #3]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d009      	beq.n	800d712 <UTIL_LPM_SetOffMode+0x32>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d000      	beq.n	800d704 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800d702:	e00e      	b.n	800d722 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d704:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <UTIL_LPM_SetOffMode+0x58>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	4a0a      	ldr	r2, [pc, #40]	; (800d738 <UTIL_LPM_SetOffMode+0x58>)
 800d70e:	6013      	str	r3, [r2, #0]
      break;
 800d710:	e007      	b.n	800d722 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	43da      	mvns	r2, r3
 800d716:	4b08      	ldr	r3, [pc, #32]	; (800d738 <UTIL_LPM_SetOffMode+0x58>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4013      	ands	r3, r2
 800d71c:	4a06      	ldr	r2, [pc, #24]	; (800d738 <UTIL_LPM_SetOffMode+0x58>)
 800d71e:	6013      	str	r3, [r2, #0]
      break;
 800d720:	bf00      	nop
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d72c:	bf00      	nop
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	20000450 	.word	0x20000450

0800d73c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08c      	sub	sp, #48	; 0x30
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d744:	4b63      	ldr	r3, [pc, #396]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800d74a:	4b62      	ldr	r3, [pc, #392]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4013      	ands	r3, r2
 800d752:	4a60      	ldr	r2, [pc, #384]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d754:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d756:	e082      	b.n	800d85e <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d75c:	e002      	b.n	800d764 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	3301      	adds	r3, #1
 800d762:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d764:	4a5c      	ldr	r2, [pc, #368]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d76c:	4b5b      	ldr	r3, [pc, #364]	; (800d8dc <UTIL_SEQ_Run+0x1a0>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	401a      	ands	r2, r3
 800d772:	4b58      	ldr	r3, [pc, #352]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4013      	ands	r3, r2
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0f0      	beq.n	800d75e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d77c:	4a56      	ldr	r2, [pc, #344]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d784:	4b55      	ldr	r3, [pc, #340]	; (800d8dc <UTIL_SEQ_Run+0x1a0>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	401a      	ands	r2, r3
 800d78a:	4b52      	ldr	r3, [pc, #328]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4013      	ands	r3, r2
 800d790:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800d792:	4a51      	ldr	r2, [pc, #324]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	4413      	add	r3, r2
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	4013      	ands	r3, r2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d7a4:	4a4c      	ldr	r2, [pc, #304]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800d7b2:	4a49      	ldr	r2, [pc, #292]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	4413      	add	r3, r2
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	4013      	ands	r3, r2
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 f97d 	bl	800dac0 <bit_position>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	4b45      	ldr	r3, [pc, #276]	; (800d8e0 <UTIL_SEQ_Run+0x1a4>)
 800d7ca:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800d7cc:	4a42      	ldr	r2, [pc, #264]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	00db      	lsls	r3, r3, #3
 800d7d2:	4413      	add	r3, r2
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	4a42      	ldr	r2, [pc, #264]	; (800d8e0 <UTIL_SEQ_Run+0x1a4>)
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	2101      	movs	r1, #1
 800d7dc:	fa01 f202 	lsl.w	r2, r1, r2
 800d7e0:	43d2      	mvns	r2, r2
 800d7e2:	401a      	ands	r2, r3
 800d7e4:	493c      	ldr	r1, [pc, #240]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	440b      	add	r3, r1
 800d7ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7f4:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d7f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7f8:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800d7fa:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <UTIL_SEQ_Run+0x1a4>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2201      	movs	r2, #1
 800d800:	fa02 f303 	lsl.w	r3, r2, r3
 800d804:	43db      	mvns	r3, r3
 800d806:	461a      	mov	r2, r3
 800d808:	4b36      	ldr	r3, [pc, #216]	; (800d8e4 <UTIL_SEQ_Run+0x1a8>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4013      	ands	r3, r2
 800d80e:	4a35      	ldr	r2, [pc, #212]	; (800d8e4 <UTIL_SEQ_Run+0x1a8>)
 800d810:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d812:	2302      	movs	r3, #2
 800d814:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d816:	e014      	b.n	800d842 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	3b01      	subs	r3, #1
 800d81c:	4a2e      	ldr	r2, [pc, #184]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d81e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d822:	4b2f      	ldr	r3, [pc, #188]	; (800d8e0 <UTIL_SEQ_Run+0x1a4>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2101      	movs	r1, #1
 800d828:	fa01 f303 	lsl.w	r3, r1, r3
 800d82c:	43db      	mvns	r3, r3
 800d82e:	4619      	mov	r1, r3
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	3b01      	subs	r3, #1
 800d834:	400a      	ands	r2, r1
 800d836:	4928      	ldr	r1, [pc, #160]	; (800d8d8 <UTIL_SEQ_Run+0x19c>)
 800d838:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	3b01      	subs	r3, #1
 800d840:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e7      	bne.n	800d818 <UTIL_SEQ_Run+0xdc>
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d852:	4b23      	ldr	r3, [pc, #140]	; (800d8e0 <UTIL_SEQ_Run+0x1a4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a24      	ldr	r2, [pc, #144]	; (800d8e8 <UTIL_SEQ_Run+0x1ac>)
 800d858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d85c:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d85e:	4b21      	ldr	r3, [pc, #132]	; (800d8e4 <UTIL_SEQ_Run+0x1a8>)
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	4b1e      	ldr	r3, [pc, #120]	; (800d8dc <UTIL_SEQ_Run+0x1a0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	401a      	ands	r2, r3
 800d868:	4b1a      	ldr	r3, [pc, #104]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4013      	ands	r3, r2
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d007      	beq.n	800d882 <UTIL_SEQ_Run+0x146>
 800d872:	4b1e      	ldr	r3, [pc, #120]	; (800d8ec <UTIL_SEQ_Run+0x1b0>)
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	4b1e      	ldr	r3, [pc, #120]	; (800d8f0 <UTIL_SEQ_Run+0x1b4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4013      	ands	r3, r2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f43f af6b 	beq.w	800d758 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800d882:	f000 f90f 	bl	800daa4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d886:	f3ef 8310 	mrs	r3, PRIMASK
 800d88a:	613b      	str	r3, [r7, #16]
  return(result);
 800d88c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d88e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d890:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800d892:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <UTIL_SEQ_Run+0x1a8>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b11      	ldr	r3, [pc, #68]	; (800d8dc <UTIL_SEQ_Run+0x1a0>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	401a      	ands	r2, r3
 800d89c:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d108      	bne.n	800d8b8 <UTIL_SEQ_Run+0x17c>
 800d8a6:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <UTIL_SEQ_Run+0x1b0>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	4b11      	ldr	r3, [pc, #68]	; (800d8f0 <UTIL_SEQ_Run+0x1b4>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800d8b4:	f7f2 fe69 	bl	800058a <UTIL_SEQ_Idle>
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800d8c2:	f000 f8f6 	bl	800dab2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d8c6:	4a03      	ldr	r2, [pc, #12]	; (800d8d4 <UTIL_SEQ_Run+0x198>)
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	6013      	str	r3, [r2, #0]

  return;
 800d8cc:	bf00      	nop
}
 800d8ce:	3730      	adds	r7, #48	; 0x30
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20000128 	.word	0x20000128
 800d8d8:	200004e4 	.word	0x200004e4
 800d8dc:	20000124 	.word	0x20000124
 800d8e0:	20000460 	.word	0x20000460
 800d8e4:	20000454 	.word	0x20000454
 800d8e8:	20000464 	.word	0x20000464
 800d8ec:	20000458 	.word	0x20000458
 800d8f0:	2000045c 	.word	0x2000045c

0800d8f4 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d900:	f3ef 8310 	mrs	r3, PRIMASK
 800d904:	617b      	str	r3, [r7, #20]
  return(result);
 800d906:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d90a:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 f8d7 	bl	800dac0 <bit_position>
 800d912:	4601      	mov	r1, r0
 800d914:	4a06      	ldr	r2, [pc, #24]	; (800d930 <UTIL_SEQ_RegTask+0x3c>)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d926:	bf00      	nop
}
 800d928:	3720      	adds	r7, #32
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000464 	.word	0x20000464

0800d934 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93e:	f3ef 8310 	mrs	r3, PRIMASK
 800d942:	60fb      	str	r3, [r7, #12]
  return(result);
 800d944:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d946:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d948:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800d94a:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <UTIL_SEQ_SetTask+0x4c>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4313      	orrs	r3, r2
 800d952:	4a0b      	ldr	r2, [pc, #44]	; (800d980 <UTIL_SEQ_SetTask+0x4c>)
 800d954:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800d956:	4a0b      	ldr	r2, [pc, #44]	; (800d984 <UTIL_SEQ_SetTask+0x50>)
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	431a      	orrs	r2, r3
 800d962:	4908      	ldr	r1, [pc, #32]	; (800d984 <UTIL_SEQ_SetTask+0x50>)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d974:	bf00      	nop
}
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	20000454 	.word	0x20000454
 800d984:	200004e4 	.word	0x200004e4

0800d988 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800d988:	b480      	push	{r7}
 800d98a:	b087      	sub	sp, #28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d990:	f3ef 8310 	mrs	r3, PRIMASK
 800d994:	60fb      	str	r3, [r7, #12]
  return(result);
 800d996:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d99a:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	43da      	mvns	r2, r3
 800d9a0:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <UTIL_SEQ_PauseTask+0x38>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <UTIL_SEQ_PauseTask+0x38>)
 800d9a8:	6013      	str	r3, [r2, #0]
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d9b4:	bf00      	nop
}
 800d9b6:	371c      	adds	r7, #28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	20000124 	.word	0x20000124

0800d9c4 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b087      	sub	sp, #28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9d6:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800d9d8:	4b08      	ldr	r3, [pc, #32]	; (800d9fc <UTIL_SEQ_ResumeTask+0x38>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	4a06      	ldr	r2, [pc, #24]	; (800d9fc <UTIL_SEQ_ResumeTask+0x38>)
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d9ee:	bf00      	nop
}
 800d9f0:	371c      	adds	r7, #28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	20000124 	.word	0x20000124

0800da00 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da08:	f3ef 8310 	mrs	r3, PRIMASK
 800da0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800da0e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da12:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800da14:	4b08      	ldr	r3, [pc, #32]	; (800da38 <UTIL_SEQ_SetEvt+0x38>)
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4313      	orrs	r3, r2
 800da1c:	4a06      	ldr	r2, [pc, #24]	; (800da38 <UTIL_SEQ_SetEvt+0x38>)
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da2a:	bf00      	nop
}
 800da2c:	371c      	adds	r7, #28
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20000458 	.word	0x20000458

0800da3c <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800da44:	4b14      	ldr	r3, [pc, #80]	; (800da98 <UTIL_SEQ_WaitEvt+0x5c>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2201      	movs	r2, #1
 800da4a:	fa02 f303 	lsl.w	r3, r2, r3
 800da4e:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800da50:	4b12      	ldr	r3, [pc, #72]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800da56:	4a11      	ldr	r2, [pc, #68]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800da5c:	e005      	b.n	800da6a <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4619      	mov	r1, r3
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7f2 fd97 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800da6a:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <UTIL_SEQ_WaitEvt+0x64>)
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b0b      	ldr	r3, [pc, #44]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4013      	ands	r3, r2
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f2      	beq.n	800da5e <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800da78:	4b08      	ldr	r3, [pc, #32]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	43da      	mvns	r2, r3
 800da7e:	4b08      	ldr	r3, [pc, #32]	; (800daa0 <UTIL_SEQ_WaitEvt+0x64>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4013      	ands	r3, r2
 800da84:	4a06      	ldr	r2, [pc, #24]	; (800daa0 <UTIL_SEQ_WaitEvt+0x64>)
 800da86:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800da88:	4a04      	ldr	r2, [pc, #16]	; (800da9c <UTIL_SEQ_WaitEvt+0x60>)
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	6013      	str	r3, [r2, #0]

  return;
 800da8e:	bf00      	nop
}
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20000460 	.word	0x20000460
 800da9c:	2000045c 	.word	0x2000045c
 800daa0:	20000458 	.word	0x20000458

0800daa4 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800daa8:	bf00      	nop
}
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dab2:	b480      	push	{r7}
 800dab4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dab6:	bf00      	nop
}
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	0c1b      	lsrs	r3, r3, #16
 800dad0:	041b      	lsls	r3, r3, #16
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d104      	bne.n	800dae0 <bit_position+0x20>
 800dad6:	2310      	movs	r3, #16
 800dad8:	60fb      	str	r3, [r7, #12]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	041b      	lsls	r3, r3, #16
 800dade:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d105      	bne.n	800daf6 <bit_position+0x36>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3308      	adds	r3, #8
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	021b      	lsls	r3, r3, #8
 800daf4:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d105      	bne.n	800db0c <bit_position+0x4c>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3304      	adds	r3, #4
 800db04:	60fb      	str	r3, [r7, #12]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	011b      	lsls	r3, r3, #4
 800db0a:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	0f1b      	lsrs	r3, r3, #28
 800db10:	4a07      	ldr	r2, [pc, #28]	; (800db30 <bit_position+0x70>)
 800db12:	5cd3      	ldrb	r3, [r2, r3]
 800db14:	461a      	mov	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	4413      	add	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f1c3 031f 	rsb	r3, r3, #31
}
 800db22:	4618      	mov	r0, r3
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	0800dd00 	.word	0x0800dd00

0800db34 <__libc_init_array>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	4e0d      	ldr	r6, [pc, #52]	; (800db6c <__libc_init_array+0x38>)
 800db38:	4c0d      	ldr	r4, [pc, #52]	; (800db70 <__libc_init_array+0x3c>)
 800db3a:	1ba4      	subs	r4, r4, r6
 800db3c:	10a4      	asrs	r4, r4, #2
 800db3e:	2500      	movs	r5, #0
 800db40:	42a5      	cmp	r5, r4
 800db42:	d109      	bne.n	800db58 <__libc_init_array+0x24>
 800db44:	4e0b      	ldr	r6, [pc, #44]	; (800db74 <__libc_init_array+0x40>)
 800db46:	4c0c      	ldr	r4, [pc, #48]	; (800db78 <__libc_init_array+0x44>)
 800db48:	f000 f82c 	bl	800dba4 <_init>
 800db4c:	1ba4      	subs	r4, r4, r6
 800db4e:	10a4      	asrs	r4, r4, #2
 800db50:	2500      	movs	r5, #0
 800db52:	42a5      	cmp	r5, r4
 800db54:	d105      	bne.n	800db62 <__libc_init_array+0x2e>
 800db56:	bd70      	pop	{r4, r5, r6, pc}
 800db58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db5c:	4798      	blx	r3
 800db5e:	3501      	adds	r5, #1
 800db60:	e7ee      	b.n	800db40 <__libc_init_array+0xc>
 800db62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db66:	4798      	blx	r3
 800db68:	3501      	adds	r5, #1
 800db6a:	e7f2      	b.n	800db52 <__libc_init_array+0x1e>
 800db6c:	0800dd18 	.word	0x0800dd18
 800db70:	0800dd18 	.word	0x0800dd18
 800db74:	0800dd18 	.word	0x0800dd18
 800db78:	0800dd1c 	.word	0x0800dd1c

0800db7c <memcpy>:
 800db7c:	b510      	push	{r4, lr}
 800db7e:	1e43      	subs	r3, r0, #1
 800db80:	440a      	add	r2, r1
 800db82:	4291      	cmp	r1, r2
 800db84:	d100      	bne.n	800db88 <memcpy+0xc>
 800db86:	bd10      	pop	{r4, pc}
 800db88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db90:	e7f7      	b.n	800db82 <memcpy+0x6>

0800db92 <memset>:
 800db92:	4402      	add	r2, r0
 800db94:	4603      	mov	r3, r0
 800db96:	4293      	cmp	r3, r2
 800db98:	d100      	bne.n	800db9c <memset+0xa>
 800db9a:	4770      	bx	lr
 800db9c:	f803 1b01 	strb.w	r1, [r3], #1
 800dba0:	e7f9      	b.n	800db96 <memset+0x4>
	...

0800dba4 <_init>:
 800dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba6:	bf00      	nop
 800dba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbaa:	bc08      	pop	{r3}
 800dbac:	469e      	mov	lr, r3
 800dbae:	4770      	bx	lr

0800dbb0 <_fini>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	bf00      	nop
 800dbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	469e      	mov	lr, r3
 800dbba:	4770      	bx	lr
