
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc3c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800dd7c  0800dd7c  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ded8  0800ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dedc  0800dedc  0001dedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000170  20000004  0800dee0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000174  0800e050  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  20000210  0800e0e9  00020210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000258  0800e12e  00020258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a2  2000026c  0800e13f  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003d4  20000310  0800e1e1  00020310  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006e4  0800e1e1  000206e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002030e  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00053821  00000000  00000000  0002033e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007672  00000000  00000000  00073b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003d88  00000000  00000000  0007b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003a40  00000000  00000000  0007ef60  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e86f  00000000  00000000  000829a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002c052  00000000  00000000  000b120f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001075f9  00000000  00000000  000dd261  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e485a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000105d4  00000000  00000000  001e48d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000310 	.word	0x20000310
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dd64 	.word	0x0800dd64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000314 	.word	0x20000314
 800017c:	0800dd64 	.word	0x0800dd64

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000620 	.word	0x20000620

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f00d f9cc 	bl	800d87c <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f00c f8ef 	bl	800c6d0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f00d fadc 	bl	800dab4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f00b ffab 	bl	800c464 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f00c f9e1 	bl	800c8ec <TL_MM_Init>

  TL_Enable();
 800052a:	f00c f8cb 	bl	800c6c4 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	0800c49d 	.word	0x0800c49d
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f00c fa2b 	bl	800c9cc <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f00c fb5f 	bl	800cc38 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f00d f98f 	bl	800d8a0 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f00d f9a9 	bl	800d8fc <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f00d fa99 	bl	800daf4 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f00d faf4 	bl	800dbc0 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f00d fb07 	bl	800dbfc <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000174 	.word	0x20000174

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000204 	.word	0x20000204
 80007cc:	20000174 	.word	0x20000174

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000204 	.word	0x20000204
 8000918:	20000205 	.word	0x20000205
 800091c:	20000174 	.word	0x20000174
 8000920:	20000208 	.word	0x20000208

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000204 	.word	0x20000204
 8000a20:	20000205 	.word	0x20000205
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000208 	.word	0x20000208

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000208 	.word	0x20000208
 8000aa0:	20000332 	.word	0x20000332
 8000aa4:	20000331 	.word	0x20000331
 8000aa8:	20000330 	.word	0x20000330

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f004 ff6f 	bl	80059aa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f004 ff57 	bl	80059c6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000208 	.word	0x20000208
 8000b58:	20000330 	.word	0x20000330
 8000b5c:	2000032c 	.word	0x2000032c
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	2000032c 	.word	0x2000032c
 8000c94:	20000204 	.word	0x20000204
 8000c98:	20000174 	.word	0x20000174
 8000c9c:	2000020c 	.word	0x2000020c
 8000ca0:	20000334 	.word	0x20000334

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000032c 	.word	0x2000032c
 8000e34:	20000204 	.word	0x20000204
 8000e38:	20000174 	.word	0x20000174
 8000e3c:	2000020c 	.word	0x2000020c
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f004 fd1f 	bl	80059c6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f004 fcfb 	bl	80059aa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fcaf 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f004 fcc6 	bl	800595a <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000032c 	.word	0x2000032c
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	20000330 	.word	0x20000330
 8000fe4:	20000331 	.word	0x20000331
 8000fe8:	20000332 	.word	0x20000332
 8000fec:	20000334 	.word	0x20000334
 8000ff0:	2000020c 	.word	0x2000020c
 8000ff4:	20000208 	.word	0x20000208
 8000ff8:	20000174 	.word	0x20000174
 8000ffc:	20000204 	.word	0x20000204
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000174 	.word	0x20000174

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f004 fc35 	bl	8005976 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f004 fc07 	bl	80059c6 <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 fbc0 	bl	800595a <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000032c 	.word	0x2000032c
 80011f0:	20000174 	.word	0x20000174
 80011f4:	20000204 	.word	0x20000204
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	20000205 	.word	0x20000205

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f004 fb9a 	bl	8005976 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f004 fb36 	bl	800595a <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000174 	.word	0x20000174
 8001304:	2000032c 	.word	0x2000032c
 8001308:	20000204 	.word	0x20000204
 800130c:	20000205 	.word	0x20000205

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	20000550 	.word	0x20000550

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f004 f8f0 	bl	80055ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f90a 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 80013d0:	f000 f9b8 	bl	8001744 <MX_TIM16_Init>
  MX_TIM17_Init();
 80013d4:	f000 f9de 	bl	8001794 <MX_TIM17_Init>
  MX_GPIO_Init();
 80013d8:	f000 fa4e 	bl	8001878 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 fa00 	bl	80017e0 <MX_USART1_UART_Init>
  MX_RF_Init();
 80013e0:	f000 f980 	bl	80016e4 <MX_RF_Init>
  MX_RTC_Init();
 80013e4:	f000 f986 	bl	80016f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e8:	f7ff f866 	bl	80004b8 <APPE_Init>

  MX_MEMS_Init();
 80013ec:	f009 fb84 	bl	800aaf8 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f00c fa82 	bl	800d8fc <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

    MX_MEMS_Process();
 80013f8:	f009 fb8a 	bl	800ab10 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */

    if (run_this_once) {
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <main+0x1d8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <main+0x52>
      HAL_TIM_Base_Start_IT(&htim16);
 8001404:	4866      	ldr	r0, [pc, #408]	; (80015a0 <main+0x1dc>)
 8001406:	f007 fb95 	bl	8008b34 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim17);
 800140a:	4866      	ldr	r0, [pc, #408]	; (80015a4 <main+0x1e0>)
 800140c:	f007 fb92 	bl	8008b34 <HAL_TIM_Base_Start_IT>
      run_this_once = 0;
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <main+0x1d8>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    }


    /* STATE SWITCHING ------------------------------------------------------ */
    switch (state)
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <main+0x1e4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b03      	cmp	r3, #3
 800141c:	f200 80b6 	bhi.w	800158c <main+0x1c8>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <main+0x64>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	0800148b 	.word	0x0800148b
 8001430:	080014b9 	.word	0x080014b9
 8001434:	0800156f 	.word	0x0800156f
    {
    case NORMAL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_moving, strlen(prompt_moving), 1000);
 8001438:	485c      	ldr	r0, [pc, #368]	; (80015ac <main+0x1e8>)
 800143a:	f7fe fea1 	bl	8000180 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	4959      	ldr	r1, [pc, #356]	; (80015ac <main+0x1e8>)
 8001448:	4859      	ldr	r0, [pc, #356]	; (80015b0 <main+0x1ec>)
 800144a:	f007 fdd7 	bl	8008ffc <HAL_UART_Transmit>

      if (still_timeout_count == 10) {
 800144e:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <main+0x1f0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d105      	bne.n	8001464 <main+0xa0>
        motion_status = MAYBE_DEAD;
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <main+0x1f4>)
 800145a:	2208      	movs	r2, #8
 800145c:	701a      	strb	r2, [r3, #0]
        state = UNCONCIOUS;
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <main+0x1e4>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
      }

      if (motion_status == MAN_DOWN) {
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <main+0x1f4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b80      	cmp	r3, #128	; 0x80
 800146c:	d103      	bne.n	8001476 <main+0xb2>
        state = FALL;
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <main+0x1e4>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
      }
      else if (motion_status == MAN_FLY) {
        state = FALL;
      }

      break;
 8001474:	e08c      	b.n	8001590 <main+0x1cc>
      else if (motion_status == MAN_FLY) {
 8001476:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <main+0x1f4>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b81      	cmp	r3, #129	; 0x81
 800147e:	f040 8087 	bne.w	8001590 <main+0x1cc>
        state = FALL;
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <main+0x1e4>)
 8001484:	2202      	movs	r2, #2
 8001486:	701a      	strb	r2, [r3, #0]
      break;
 8001488:	e082      	b.n	8001590 <main+0x1cc>
    
    case UNCONCIOUS:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_dead, strlen(prompt_dead), 1000);
 800148a:	484c      	ldr	r0, [pc, #304]	; (80015bc <main+0x1f8>)
 800148c:	f7fe fe78 	bl	8000180 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	4948      	ldr	r1, [pc, #288]	; (80015bc <main+0x1f8>)
 800149a:	4845      	ldr	r0, [pc, #276]	; (80015b0 <main+0x1ec>)
 800149c:	f007 fdae 	bl	8008ffc <HAL_UART_Transmit>

      still_timeout_count = 0;
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <main+0x1f0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
      if (motion_status == OK) {
 80014a6:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <main+0x1f4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d171      	bne.n	8001594 <main+0x1d0>
        state = NORMAL;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <main+0x1e4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
      }

      break;
 80014b6:	e06d      	b.n	8001594 <main+0x1d0>

    case FALL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_fall, strlen(prompt_fall), 1000);
 80014b8:	4841      	ldr	r0, [pc, #260]	; (80015c0 <main+0x1fc>)
 80014ba:	f7fe fe61 	bl	8000180 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	493e      	ldr	r1, [pc, #248]	; (80015c0 <main+0x1fc>)
 80014c8:	4839      	ldr	r0, [pc, #228]	; (80015b0 <main+0x1ec>)
 80014ca:	f007 fd97 	bl	8008ffc <HAL_UART_Transmit>

      axe_x_diff = accelero_val.x - old_axe_x;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <main+0x200>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <main+0x204>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <main+0x208>)
 80014da:	6013      	str	r3, [r2, #0]
      axe_y_diff = accelero_val.y - old_axe_y;
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <main+0x200>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <main+0x20c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a3b      	ldr	r2, [pc, #236]	; (80015d4 <main+0x210>)
 80014e8:	6013      	str	r3, [r2, #0]

      if ((axe_x_diff > 700 || axe_x_diff < -700 || axe_y_diff > 700 || axe_y_diff < -700) && trip_period < 500) {
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <main+0x208>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014f2:	dc0e      	bgt.n	8001512 <main+0x14e>
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <main+0x208>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 80014fc:	db09      	blt.n	8001512 <main+0x14e>
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <main+0x210>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001506:	dc04      	bgt.n	8001512 <main+0x14e>
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <main+0x210>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8001510:	da13      	bge.n	800153a <main+0x176>
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <main+0x214>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800151c:	d20d      	bcs.n	800153a <main+0x176>
        motion_status = TRIP_TO_HEAVEN; 
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <main+0x1f4>)
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*) prompt_trip, strlen(prompt_trip), 1000);
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <main+0x218>)
 8001526:	f7fe fe2b 	bl	8000180 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	492a      	ldr	r1, [pc, #168]	; (80015dc <main+0x218>)
 8001534:	481e      	ldr	r0, [pc, #120]	; (80015b0 <main+0x1ec>)
 8001536:	f007 fd61 	bl	8008ffc <HAL_UART_Transmit>
      }

      // Damn I'm dead.
      if (still_timeout_count == 10) {
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <main+0x1f0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b0a      	cmp	r3, #10
 8001542:	d105      	bne.n	8001550 <main+0x18c>
        motion_status = MAYBE_DEAD;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <main+0x1f4>)
 8001546:	2208      	movs	r2, #8
 8001548:	701a      	strb	r2, [r3, #0]
        state = UNCONCIOUS;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <main+0x1e4>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
      }

      // shit I'm alive
      if (motion_status == MAN_FLY) {
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <main+0x1f4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b81      	cmp	r3, #129	; 0x81
 8001558:	d11e      	bne.n	8001598 <main+0x1d4>
        state = NORMAL;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <main+0x1e4>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
        still_timeout_count = 0;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <main+0x1f0>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
        trip_period = 0;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <main+0x214>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
      }

      break;
 800156c:	e014      	b.n	8001598 <main+0x1d4>
    
    case FLY:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_up, strlen(prompt_up), 1000);
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <main+0x21c>)
 8001570:	f7fe fe06 	bl	8000180 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	4918      	ldr	r1, [pc, #96]	; (80015e0 <main+0x21c>)
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <main+0x1ec>)
 8001580:	f007 fd3c 	bl	8008ffc <HAL_UART_Transmit>
      state = NORMAL;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <main+0x1e4>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
      break;
 800158a:	e006      	b.n	800159a <main+0x1d6>

    default:
      break;
 800158c:	bf00      	nop
 800158e:	e72f      	b.n	80013f0 <main+0x2c>
      break;
 8001590:	bf00      	nop
 8001592:	e72d      	b.n	80013f0 <main+0x2c>
      break;
 8001594:	bf00      	nop
 8001596:	e72b      	b.n	80013f0 <main+0x2c>
      break;
 8001598:	bf00      	nop
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800159a:	e729      	b.n	80013f0 <main+0x2c>
 800159c:	20000004 	.word	0x20000004
 80015a0:	20000644 	.word	0x20000644
 80015a4:	20000554 	.word	0x20000554
 80015a8:	20000345 	.word	0x20000345
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000594 	.word	0x20000594
 80015b4:	20000344 	.word	0x20000344
 80015b8:	20000346 	.word	0x20000346
 80015bc:	20000020 	.word	0x20000020
 80015c0:	20000038 	.word	0x20000038
 80015c4:	20000338 	.word	0x20000338
 80015c8:	2000034c 	.word	0x2000034c
 80015cc:	2000035c 	.word	0x2000035c
 80015d0:	20000350 	.word	0x20000350
 80015d4:	20000360 	.word	0x20000360
 80015d8:	20000348 	.word	0x20000348
 80015dc:	20000068 	.word	0x20000068
 80015e0:	20000050 	.word	0x20000050

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0ae      	sub	sp, #184	; 0xb8
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ee:	2248      	movs	r2, #72	; 0x48
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00c fbad 	bl	800dd52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2250      	movs	r2, #80	; 0x50
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00c fb9d 	bl	800dd52 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fea3 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <SystemClock_Config+0xfc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001626:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <SystemClock_Config+0xfc>)
 8001628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <SystemClock_Config+0xfc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800163a:	2307      	movs	r3, #7
 800163c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001642:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fe42 	bl	80072e8 <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800166a:	f000 fa21 	bl	8001ab0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800166e:	236f      	movs	r3, #111	; 0x6f
 8001670:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001672:	2302      	movs	r3, #2
 8001674:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800168a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f006 f987 	bl	80079a4 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800169c:	f000 fa08 	bl	8001ab0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80016a0:	f643 0305 	movw	r3, #14341	; 0x3805
 80016a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80016bc:	2302      	movs	r3, #2
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fda7 	bl	800821a <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80016d2:	f000 f9ed 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016d6:	bf00      	nop
 80016d8:	37b8      	adds	r7, #184	; 0xb8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	58000400 	.word	0x58000400

080016e4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_RTC_Init+0x48>)
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <MX_RTC_Init+0x4c>)
 80016fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_RTC_Init+0x48>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_RTC_Init+0x48>)
 8001706:	220f      	movs	r2, #15
 8001708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_RTC_Init+0x48>)
 800170c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001710:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001712:	480a      	ldr	r0, [pc, #40]	; (800173c <MX_RTC_Init+0x48>)
 8001714:	f007 f807 	bl	8008726 <HAL_RTC_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800171e:	f000 f9c7 	bl	8001ab0 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_RTC_Init+0x48>)
 8001728:	f007 f8ec 	bl	8008904 <HAL_RTCEx_SetWakeUpTimer_IT>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001732:	f000 f9bd 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000620 	.word	0x20000620
 8001740:	40002800 	.word	0x40002800

08001744 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_TIM16_Init+0x48>)
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <MX_TIM16_Init+0x4c>)
 800174c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16001;
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_TIM16_Init+0x48>)
 8001750:	f643 6281 	movw	r2, #16001	; 0x3e81
 8001754:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_TIM16_Init+0x48>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2001;
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_TIM16_Init+0x48>)
 800175e:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001762:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_TIM16_Init+0x48>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_TIM16_Init+0x48>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_TIM16_Init+0x48>)
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM16_Init+0x48>)
 8001778:	f007 f9b0 	bl	8008adc <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001782:	f000 f995 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000644 	.word	0x20000644
 8001790:	40014400 	.word	0x40014400

08001794 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_TIM17_Init+0x44>)
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <MX_TIM17_Init+0x48>)
 800179c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 161;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017a0:	22a1      	movs	r2, #161	; 0xa1
 80017a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2001;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017ac:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80017b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_TIM17_Init+0x44>)
 80017c6:	f007 f989 	bl	8008adc <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80017d0:	f000 f96e 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000554 	.word	0x20000554
 80017dc:	40014800 	.word	0x40014800

080017e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <MX_USART1_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_USART1_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART1_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800182a:	f007 fb97 	bl	8008f5c <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 f93c 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800183c:	f009 f878 	bl	800a930 <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f000 f933 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800184e:	f009 f8ad 	bl	800a9ac <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f000 f92a 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART1_UART_Init+0x90>)
 800185e:	f009 f82e 	bl	800a8be <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f000 f922 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000594 	.word	0x20000594
 8001874:	40013800 	.word	0x40013800

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	2004      	movs	r0, #4
 800188e:	f7ff fd7f 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff fd7c 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fd79 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	2008      	movs	r0, #8
 80018a0:	f7ff fd76 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2123      	movs	r1, #35	; 0x23
 80018a8:	4821      	ldr	r0, [pc, #132]	; (8001930 <MX_GPIO_Init+0xb8>)
 80018aa:	f004 fb47 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 80018ae:	2310      	movs	r3, #16
 80018b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <MX_GPIO_Init+0xbc>)
 80018b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	481e      	ldr	r0, [pc, #120]	; (8001938 <MX_GPIO_Init+0xc0>)
 80018c0:	f004 f8ee 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80018c4:	2323      	movs	r3, #35	; 0x23
 80018c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4815      	ldr	r0, [pc, #84]	; (8001930 <MX_GPIO_Init+0xb8>)
 80018da:	f004 f8e1 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80018f0:	230a      	movs	r3, #10
 80018f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f004 f8d0 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001900:	2303      	movs	r3, #3
 8001902:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <MX_GPIO_Init+0xc4>)
 8001912:	f004 f8c5 	bl	8005aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	200a      	movs	r0, #10
 800191c:	f004 f803 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001920:	200a      	movs	r0, #10
 8001922:	f004 f81a 	bl	800595a <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	48000400 	.word	0x48000400
 8001934:	10210000 	.word	0x10210000
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00

08001940 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* ISR ---------------------------------------------------------------------- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d11f      	bne.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x50>
    
    if (!is_moving(&old_axe_x, &old_axe_y, &old_axe_z)) {
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001954:	4827      	ldr	r0, [pc, #156]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001956:	f000 f85b 	bl	8001a10 <is_moving>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x30>
      still_timeout_count++;
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e002      	b.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x36>
    } else {
      still_timeout_count = 0;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
    }

    old_axe_x = accelero_val.x;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800197c:	6013      	str	r3, [r2, #0]
    old_axe_y = accelero_val.y;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001984:	6013      	str	r3, [r2, #0]
    old_axe_z = accelero_val.z;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 800198c:	6013      	str	r3, [r2, #0]
    if (motion_status == MAN_DOWN) {
      trip_period += 10;
    }
  }

}
 800198e:	e027      	b.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0xa0>
  else if (htim == &htim17) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d123      	bne.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0xa0>
    axe_z_diff = accelero_val.z - old_axe_z;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019a4:	6013      	str	r3, [r2, #0]
    if (axe_z_diff > 700) {
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80019ae:	dd03      	ble.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0x78>
      motion_status = MAN_DOWN;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x88>
    else if (axe_z_diff < -700) {
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 80019c0:	da02      	bge.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x88>
      motion_status = MAN_FLY;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019c4:	2281      	movs	r2, #129	; 0x81
 80019c6:	701a      	strb	r2, [r3, #0]
    if (motion_status == MAN_DOWN) {
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b80      	cmp	r3, #128	; 0x80
 80019d0:	d106      	bne.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0xa0>
      trip_period += 10;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	330a      	adds	r3, #10
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80019de:	801a      	strh	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000644 	.word	0x20000644
 80019ec:	20000354 	.word	0x20000354
 80019f0:	20000350 	.word	0x20000350
 80019f4:	2000034c 	.word	0x2000034c
 80019f8:	20000344 	.word	0x20000344
 80019fc:	20000338 	.word	0x20000338
 8001a00:	20000554 	.word	0x20000554
 8001a04:	20000358 	.word	0x20000358
 8001a08:	20000346 	.word	0x20000346
 8001a0c:	20000348 	.word	0x20000348

08001a10 <is_moving>:


/* USER DEFINED ------------------------------------------------------------- */
code_status is_moving(int32_t* x, int32_t* y, int32_t* z)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint8_t is_really_moving = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	75fb      	strb	r3, [r7, #23]

  if (accelero_val.x - *x > 20 || accelero_val.x - *x < -20) {
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <is_moving+0x98>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b14      	cmp	r3, #20
 8001a2c:	dc07      	bgt.n	8001a3e <is_moving+0x2e>
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <is_moving+0x98>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f113 0f14 	cmn.w	r3, #20
 8001a3c:	da02      	bge.n	8001a44 <is_moving+0x34>
    is_really_moving = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
 8001a42:	e022      	b.n	8001a8a <is_moving+0x7a>
  }
  else if (accelero_val.y - *y > 20 || accelero_val.y - *y < -20) {
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <is_moving+0x98>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b14      	cmp	r3, #20
 8001a50:	dc07      	bgt.n	8001a62 <is_moving+0x52>
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <is_moving+0x98>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f113 0f14 	cmn.w	r3, #20
 8001a60:	da02      	bge.n	8001a68 <is_moving+0x58>
    is_really_moving = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
 8001a66:	e010      	b.n	8001a8a <is_moving+0x7a>
  }
  else if (accelero_val.z - *z > 20 || accelero_val.z - *z < -20) {
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <is_moving+0x98>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b14      	cmp	r3, #20
 8001a74:	dc07      	bgt.n	8001a86 <is_moving+0x76>
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <is_moving+0x98>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f113 0f14 	cmn.w	r3, #20
 8001a84:	da01      	bge.n	8001a8a <is_moving+0x7a>
    is_really_moving = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
  }

  if (is_really_moving) {
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <is_moving+0x8a>
    motion_status = OK;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <is_moving+0x9c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
    return 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <is_moving+0x8c>
  }

  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20000338 	.word	0x20000338
 8001aac:	20000346 	.word	0x20000346

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_AHB2_GRP1_EnableClock>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b7e:	f7ff ffc8 	bl	8001b12 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_RTC_MspInit+0x30>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d109      	bne.n	8001bae <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b9a:	f7ff ff90 	bl	8001abe <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f003 febf 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f003 fed6 	bl	800595a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40002800 	.word	0x40002800

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_TIM_Base_MspInit+0x58>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10c      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bd2:	f7ff ffb7 	bl	8001b44 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2019      	movs	r0, #25
 8001bdc:	f003 fea3 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001be0:	2019      	movs	r0, #25
 8001be2:	f003 feba 	bl	800595a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001be6:	e010      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_TIM_Base_MspInit+0x5c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10b      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bf2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001bf6:	f7ff ffa5 	bl	8001b44 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	201a      	movs	r0, #26
 8001c00:	f003 fe91 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c04:	201a      	movs	r0, #26
 8001c06:	f003 fea8 	bl	800595a <HAL_NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40014400 	.word	0x40014400
 8001c18:	40014800 	.word	0x40014800

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_UART_MspInit+0x68>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d11e      	bne.n	8001c7c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c42:	f7ff ff7f 	bl	8001b44 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7ff ff4a 	bl	8001ae0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <HAL_UART_MspInit+0x6c>)
 8001c68:	f003 ff1a 	bl	8005aa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2024      	movs	r0, #36	; 0x24
 8001c72:	f003 fe58 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c76:	2024      	movs	r0, #36	; 0x24
 8001c78:	f003 fe6f 	bl	800595a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40013800 	.word	0x40013800
 8001c88:	48000400 	.word	0x48000400

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f003 fcbe 	bl	8005660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <RTC_WKUP_IRQHandler+0x14>)
 8001cee:	f006 fec5 	bl	8008a7c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001cf2:	f7fe ffd7 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000620 	.word	0x20000620

08001d00 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d04:	2010      	movs	r0, #16
 8001d06:	f004 f94b 	bl	8005fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d16:	f006 ff37 	bl	8008b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000644 	.word	0x20000644

08001d24 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d2a:	f006 ff2d 	bl	8008b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000554 	.word	0x20000554

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f007 f9f3 	bl	8009128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000594 	.word	0x20000594

08001d4c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001d50:	f00b fc84 	bl	800d65c <HW_IPCC_Tx_Handler>
  return;
 8001d54:	bf00      	nop
}
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001d5c:	f00b fc46 	bl	800d5ec <HW_IPCC_Rx_Handler>
  return;
 8001d60:	bf00      	nop
}
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_APB1_GRP1_EnableClock>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_APB1_GRP1_DisableClock>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dde:	4013      	ands	r3, r2
 8001de0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <BSP_I2C1_Init+0x74>)
 8001dfe:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <BSP_I2C1_Init+0x78>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	4918      	ldr	r1, [pc, #96]	; (8001e68 <BSP_I2C1_Init+0x78>)
 8001e08:	600a      	str	r2, [r1, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d122      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e10:	f004 fbea 	bl	80065e8 <HAL_I2C_GetState>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11c      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001e1a:	4811      	ldr	r0, [pc, #68]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e1c:	f000 f8fe 	bl	800201c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e28:	f000 f8b4 	bl	8001f94 <MX_I2C1_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8001e32:	f06f 0307 	mvn.w	r3, #7
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	e00c      	b.n	8001e54 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <BSP_I2C1_Init+0x70>)
 8001e3e:	f004 fe09 	bl	8006a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8001e48:	f06f 0307 	mvn.w	r3, #7
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	e001      	b.n	8001e54 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000684 	.word	0x20000684
 8001e64:	40005400 	.word	0x40005400
 8001e68:	20000364 	.word	0x20000364

08001e6c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <BSP_I2C1_DeInit+0x48>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <BSP_I2C1_DeInit+0x4c>)
 8001e92:	f000 f8e5 	bl	8002060 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001e96:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <BSP_I2C1_DeInit+0x4c>)
 8001e98:	f004 f934 	bl	8006104 <HAL_I2C_DeInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8001ea2:	f06f 0307 	mvn.w	r3, #7
 8001ea6:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000364 	.word	0x20000364
 8001eb8:	20000684 	.word	0x20000684

08001ebc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af04      	add	r7, sp, #16
 8001ec2:	60ba      	str	r2, [r7, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	81fb      	strh	r3, [r7, #14]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	81bb      	strh	r3, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001ed6:	89ba      	ldrh	r2, [r7, #12]
 8001ed8:	89f9      	ldrh	r1, [r7, #14]
 8001eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	480c      	ldr	r0, [pc, #48]	; (8001f1c <BSP_I2C1_WriteReg+0x60>)
 8001eec:	f004 f94e 	bl	800618c <HAL_I2C_Mem_Write>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001ef6:	4809      	ldr	r0, [pc, #36]	; (8001f1c <BSP_I2C1_WriteReg+0x60>)
 8001ef8:	f004 fb84 	bl	8006604 <HAL_I2C_GetError>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d103      	bne.n	8001f0a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f02:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e002      	b.n	8001f10 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f0a:	f06f 0303 	mvn.w	r3, #3
 8001f0e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001f10:	697b      	ldr	r3, [r7, #20]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000684 	.word	0x20000684

08001f20 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	81fb      	strh	r3, [r7, #14]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	81bb      	strh	r3, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001f3a:	89ba      	ldrh	r2, [r7, #12]
 8001f3c:	89f9      	ldrh	r1, [r7, #14]
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	480c      	ldr	r0, [pc, #48]	; (8001f80 <BSP_I2C1_ReadReg+0x60>)
 8001f50:	f004 fa30 	bl	80063b4 <HAL_I2C_Mem_Read>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <BSP_I2C1_ReadReg+0x60>)
 8001f5c:	f004 fb52 	bl	8006604 <HAL_I2C_GetError>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d103      	bne.n	8001f6e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e002      	b.n	8001f74 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f6e:	f06f 0303 	mvn.w	r3, #3
 8001f72:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001f74:	697b      	ldr	r3, [r7, #20]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000684 	.word	0x20000684

08001f84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001f88:	f003 fb7c 	bl	8005684 <HAL_GetTick>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <MX_I2C1_Init+0x80>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <MX_I2C1_Init+0x84>)
 8001faa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f004 f805 	bl	8005fe6 <HAL_I2C_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f004 fd33 	bl	8006a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f004 fd75 	bl	8006aea <HAL_I2CEx_ConfigDigitalFilter>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40005400 	.word	0x40005400
 8002018:	00707cbb 	.word	0x00707cbb

0800201c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	2002      	movs	r0, #2
 8002026:	f7ff fe9d 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002034:	2301      	movs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203c:	2304      	movs	r3, #4
 800203e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <I2C1_MspInit+0x40>)
 8002048:	f003 fd2a 	bl	8005aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002050:	f7ff fea1 	bl	8001d96 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	48000400 	.word	0x48000400

08002060 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002068:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800206c:	f7ff feac 	bl	8001dc8 <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8002070:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <I2C1_MspDeInit+0x24>)
 8002076:	f003 fe83 	bl	8005d80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	48000400 	.word	0x48000400

08002088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <SystemInit+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <SystemInit+0xa0>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <SystemInit+0xa0>)
 800209a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800209e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80020ba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <SystemInit+0xa4>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d8:	f023 0305 	bic.w	r3, r3, #5
 80020dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <SystemInit+0xa8>)
 80020fa:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <SystemInit+0xa8>)
 8002102:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00
 800212c:	faf6fefb 	.word	0xfaf6fefb
 8002130:	22041000 	.word	0x22041000

08002134 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a47      	ldr	r2, [pc, #284]	; (8002264 <SystemCoreClockUpdate+0x130>)
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d867      	bhi.n	800222c <SystemCoreClockUpdate+0xf8>
 800215c:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <SystemCoreClockUpdate+0x30>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	08002199 	.word	0x08002199
 8002168:	0800222d 	.word	0x0800222d
 800216c:	0800222d 	.word	0x0800222d
 8002170:	0800222d 	.word	0x0800222d
 8002174:	080021a1 	.word	0x080021a1
 8002178:	0800222d 	.word	0x0800222d
 800217c:	0800222d 	.word	0x0800222d
 8002180:	0800222d 	.word	0x0800222d
 8002184:	080021a9 	.word	0x080021a9
 8002188:	0800222d 	.word	0x0800222d
 800218c:	0800222d 	.word	0x0800222d
 8002190:	0800222d 	.word	0x0800222d
 8002194:	080021b1 	.word	0x080021b1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002198:	4a33      	ldr	r2, [pc, #204]	; (8002268 <SystemCoreClockUpdate+0x134>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6013      	str	r3, [r2, #0]
      break;
 800219e:	e049      	b.n	8002234 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80021a0:	4b31      	ldr	r3, [pc, #196]	; (8002268 <SystemCoreClockUpdate+0x134>)
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <SystemCoreClockUpdate+0x138>)
 80021a4:	601a      	str	r2, [r3, #0]
      break;
 80021a6:	e045      	b.n	8002234 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80021a8:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <SystemCoreClockUpdate+0x134>)
 80021aa:	4a31      	ldr	r2, [pc, #196]	; (8002270 <SystemCoreClockUpdate+0x13c>)
 80021ac:	601a      	str	r2, [r3, #0]
      break;
 80021ae:	e041      	b.n	8002234 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	3301      	adds	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d105      	bne.n	80021de <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <SystemCoreClockUpdate+0x138>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00d      	b.n	80021fa <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d105      	bne.n	80021f0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <SystemCoreClockUpdate+0x13c>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e004      	b.n	80021fa <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0f5b      	lsrs	r3, r3, #29
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <SystemCoreClockUpdate+0x134>)
 8002228:	6013      	str	r3, [r2, #0]
      break;
 800222a:	e003      	b.n	8002234 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <SystemCoreClockUpdate+0x134>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6013      	str	r3, [r2, #0]
      break;
 8002232:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <SystemCoreClockUpdate+0x140>)
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <SystemCoreClockUpdate+0x134>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemCoreClockUpdate+0x134>)
 8002254:	6013      	str	r3, [r2, #0]

}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	0800de50 	.word	0x0800de50
 8002268:	2000007c 	.word	0x2000007c
 800226c:	00f42400 	.word	0x00f42400
 8002270:	01e84800 	.word	0x01e84800
 8002274:	0800ddf0 	.word	0x0800ddf0

08002278 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002278:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227c:	3304      	adds	r3, #4

0800227e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002280:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002282:	d3f9      	bcc.n	8002278 <CopyDataInit>
  bx lr
 8002284:	4770      	bx	lr

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002286:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002288:	3004      	adds	r0, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800228a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>
  bx lr
 800228e:	4770      	bx	lr

08002290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <LoopForever+0x8>)
 8002296:	490d      	ldr	r1, [pc, #52]	; (80022cc <LoopForever+0xc>)
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <LoopForever+0x10>)
 800229a:	2300      	movs	r3, #0
 800229c:	f7ff ffef 	bl	800227e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <LoopForever+0x14>)
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <LoopForever+0x18>)
 80022a4:	2300      	movs	r3, #0
 80022a6:	f7ff fff0 	bl	800228a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <LoopForever+0x1c>)
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <LoopForever+0x20>)
 80022ae:	2300      	movs	r3, #0
 80022b0:	f7ff ffeb 	bl	800228a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022b4:	f7ff fee8 	bl	8002088 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80022b8:	f00b fd1c 	bl	800dcf4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80022bc:	f7ff f882 	bl	80013c4 <main>

080022c0 <LoopForever>:

LoopForever:
  b LoopForever
 80022c0:	e7fe      	b.n	80022c0 <LoopForever>
 80022c2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80022c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000174 	.word	0x20000174
 80022d0:	0800dee0 	.word	0x0800dee0
  INIT_BSS _sbss, _ebss
 80022d4:	20000310 	.word	0x20000310
 80022d8:	200006e4 	.word	0x200006e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80022dc:	200301c4 	.word	0x200301c4
 80022e0:	20030a44 	.word	0x20030a44

080022e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_IRQHandler>
	...

080022e8 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e04d      	b.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7b1a      	ldrb	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002340:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002346:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e020      	b.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4798      	blx	r3
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e016      	b.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d112      	bne.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10d      	bne.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002384:	2301      	movs	r3, #1
 8002386:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	461a      	mov	r2, r3
 800238c:	2123      	movs	r1, #35	; 0x23
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fb52 	bl	8002a38 <LSM303AGR_ACC_Write_Reg>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e000      	b.n	80023a2 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80023a0:	68fb      	ldr	r3, [r7, #12]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08003249 	.word	0x08003249
 80023b0:	080032ab 	.word	0x080032ab

080023b4 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	331c      	adds	r3, #28
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f948 	bl	8003658 <lsm303agr_xl_block_data_update_set>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e02c      	b.n	800242e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	331c      	adds	r3, #28
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f001 fa77 	bl	80038ce <lsm303agr_xl_fifo_mode_set>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e020      	b.n	800242e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	331c      	adds	r3, #28
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 f84c 	bl	8003498 <lsm303agr_xl_data_rate_set>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e010      	b.n	800242e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	331c      	adds	r3, #28
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f001 f8c2 	bl	800359c <lsm303agr_xl_full_scale_set>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e004      	b.n	800242e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f87c 	bl	800253c <LSM303AGR_ACC_Disable>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e008      	b.n	8002462 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	331c      	adds	r3, #28
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f001 f9df 	bl	800383e <lsm303agr_xl_device_id_get>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e000      	b.n	800248e <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2210      	movs	r2, #16
 80024c4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80024d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	43c80000 	.word	0x43c80000

080024f4 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e014      	b.n	8002534 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f103 021c 	add.w	r2, r3, #28
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002516:	4619      	mov	r1, r3
 8002518:	4610      	mov	r0, r2
 800251a:	f000 ffbd 	bl	8003498 <lsm303agr_xl_data_rate_set>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	e004      	b.n	8002534 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e01f      	b.n	8002592 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f103 021c 	add.w	r2, r3, #28
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	332a      	adds	r3, #42	; 0x2a
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 ffc0 	bl	80034e4 <lsm303agr_xl_data_rate_get>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e010      	b.n	8002592 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	331c      	adds	r3, #28
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f000 ff8e 	bl	8003498 <lsm303agr_xl_data_rate_set>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e004      	b.n	8002592 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	331c      	adds	r3, #28
 80025ac:	f107 020b 	add.w	r2, r7, #11
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 ff3c 	bl	8003430 <lsm303agr_xl_operating_mode_get>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e02e      	b.n	8002622 <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d00d      	beq.n	80025e6 <LSM303AGR_ACC_GetSensitivity+0x4c>
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d015      	beq.n	80025fa <LSM303AGR_ACC_GetSensitivity+0x60>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11d      	bne.n	800260e <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fca9 	bl	8002f2c <LSM303AGR_ACC_GetSensitivityHR>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01a      	beq.n	8002616 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	e01d      	b.n	8002622 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fce5 	bl	8002fb8 <LSM303AGR_ACC_GetSensitivityNM>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	e013      	b.n	8002622 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fd21 	bl	8003044 <LSM303AGR_ACC_GetSensitivityLP>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	e009      	b.n	8002622 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	60fb      	str	r3, [r7, #12]
      break;
 8002614:	e004      	b.n	8002620 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800261e:	bf00      	nop
  }

  return ret;
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	331c      	adds	r3, #28
 800263e:	f107 020b 	add.w	r2, r7, #11
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fef3 	bl	8003430 <lsm303agr_xl_operating_mode_get>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	e09f      	b.n	8002796 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	331c      	adds	r3, #28
 800265a:	f107 020a 	add.w	r2, r7, #10
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 ff3f 	bl	80034e4 <lsm303agr_xl_data_rate_get>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	e091      	b.n	8002796 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d148      	bne.n	800270a <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8002678:	7abb      	ldrb	r3, [r7, #10]
 800267a:	2b09      	cmp	r3, #9
 800267c:	d840      	bhi.n	8002700 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026ad 	.word	0x080026ad
 8002688:	080026b7 	.word	0x080026b7
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080026c9 	.word	0x080026c9
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026d9 	.word	0x080026d9
 800269c:	080026e1 	.word	0x080026e1
 80026a0:	080026e9 	.word	0x080026e9
 80026a4:	080026f1 	.word	0x080026f1
 80026a8:	080026f9 	.word	0x080026f9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
        break;
 80026b4:	e06e      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026bc:	601a      	str	r2, [r3, #0]
        break;
 80026be:	e069      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80026c4:	601a      	str	r2, [r3, #0]
        break;
 80026c6:	e065      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80026cc:	601a      	str	r2, [r3, #0]
        break;
 80026ce:	e061      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4a35      	ldr	r2, [pc, #212]	; (80027a8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80026d4:	601a      	str	r2, [r3, #0]
        break;
 80026d6:	e05d      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4a34      	ldr	r2, [pc, #208]	; (80027ac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80026dc:	601a      	str	r2, [r3, #0]
        break;
 80026de:	e059      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80026e4:	601a      	str	r2, [r3, #0]
        break;
 80026e6:	e055      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80026ec:	601a      	str	r2, [r3, #0]
        break;
 80026ee:	e051      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4a31      	ldr	r2, [pc, #196]	; (80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80026f4:	601a      	str	r2, [r3, #0]
        break;
 80026f6:	e04d      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4a30      	ldr	r2, [pc, #192]	; (80027bc <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80026fc:	601a      	str	r2, [r3, #0]
        break;
 80026fe:	e049      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	60fb      	str	r3, [r7, #12]
        break;
 8002706:	bf00      	nop
 8002708:	e044      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800270a:	7abb      	ldrb	r3, [r7, #10]
 800270c:	2b09      	cmp	r3, #9
 800270e:	d83d      	bhi.n	800278c <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	08002741 	.word	0x08002741
 800271c:	0800274b 	.word	0x0800274b
 8002720:	08002755 	.word	0x08002755
 8002724:	0800275d 	.word	0x0800275d
 8002728:	08002765 	.word	0x08002765
 800272c:	0800276d 	.word	0x0800276d
 8002730:	08002775 	.word	0x08002775
 8002734:	0800277d 	.word	0x0800277d
 8002738:	0800278d 	.word	0x0800278d
 800273c:	08002785 	.word	0x08002785
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
        break;
 8002748:	e024      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002750:	601a      	str	r2, [r3, #0]
        break;
 8002752:	e01f      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002758:	601a      	str	r2, [r3, #0]
        break;
 800275a:	e01b      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002760:	601a      	str	r2, [r3, #0]
        break;
 8002762:	e017      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002768:	601a      	str	r2, [r3, #0]
        break;
 800276a:	e013      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002770:	601a      	str	r2, [r3, #0]
        break;
 8002772:	e00f      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002778:	601a      	str	r2, [r3, #0]
        break;
 800277a:	e00b      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002780:	601a      	str	r2, [r3, #0]
        break;
 8002782:	e007      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8002788:	601a      	str	r2, [r3, #0]
        break;
 800278a:	e003      	b.n	8002794 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
 8002790:	60fb      	str	r3, [r7, #12]
        break;
 8002792:	bf00      	nop
    }
  }

  return ret;
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	41200000 	.word	0x41200000
 80027a4:	41c80000 	.word	0x41c80000
 80027a8:	42480000 	.word	0x42480000
 80027ac:	42c80000 	.word	0x42c80000
 80027b0:	43480000 	.word	0x43480000
 80027b4:	43c80000 	.word	0x43c80000
 80027b8:	44ca8000 	.word	0x44ca8000
 80027bc:	45a80000 	.word	0x45a80000
 80027c0:	44a80000 	.word	0x44a80000

080027c4 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d106      	bne.n	80027e8 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80027da:	ed97 0a00 	vldr	s0, [r7]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fc76 	bl	80030d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	e005      	b.n	80027f4 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80027e8:	ed97 0a00 	vldr	s0, [r7]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fcd1 	bl	8003194 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80027f2:	4603      	mov	r3, r0
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	331c      	adds	r3, #28
 800280e:	f107 020b 	add.w	r2, r7, #11
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fee7 	bl	80035e8 <lsm303agr_xl_full_scale_get>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
 8002824:	e023      	b.n	800286e <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d81b      	bhi.n	8002864 <LSM303AGR_ACC_GetFullScale+0x68>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <LSM303AGR_ACC_GetFullScale+0x38>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	0800284d 	.word	0x0800284d
 800283c:	08002855 	.word	0x08002855
 8002840:	0800285d 	.word	0x0800285d
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2202      	movs	r2, #2
 8002848:	601a      	str	r2, [r3, #0]
      break;
 800284a:	e00f      	b.n	800286c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	601a      	str	r2, [r3, #0]
      break;
 8002852:	e00b      	b.n	800286c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2208      	movs	r2, #8
 8002858:	601a      	str	r2, [r3, #0]
      break;
 800285a:	e007      	b.n	800286c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2210      	movs	r2, #16
 8002860:	601a      	str	r2, [r3, #0]
      break;
 8002862:	e003      	b.n	800286c <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	60fb      	str	r3, [r7, #12]
      break;
 800286a:	bf00      	nop
  }

  return ret;
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop

08002878 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b02      	cmp	r3, #2
 8002886:	dd0b      	ble.n	80028a0 <LSM303AGR_ACC_SetFullScale+0x28>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b04      	cmp	r3, #4
 800288c:	dd06      	ble.n	800289c <LSM303AGR_ACC_SetFullScale+0x24>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b08      	cmp	r3, #8
 8002892:	dc01      	bgt.n	8002898 <LSM303AGR_ACC_SetFullScale+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e004      	b.n	80028a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002898:	2303      	movs	r3, #3
 800289a:	e002      	b.n	80028a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 80028a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 80028a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	331c      	adds	r3, #28
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe75 	bl	800359c <lsm303agr_xl_full_scale_set>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
 80028bc:	e000      	b.n	80028c0 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	331c      	adds	r3, #28
 80028de:	f107 020f 	add.w	r2, r7, #15
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fda3 	bl	8003430 <lsm303agr_xl_operating_mode_get>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e047      	b.n	8002986 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d006      	beq.n	800290a <LSM303AGR_ACC_GetAxesRaw+0x42>
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d007      	beq.n	8002910 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002904:	2310      	movs	r3, #16
 8002906:	83fb      	strh	r3, [r7, #30]
      break;
 8002908:	e00a      	b.n	8002920 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	83fb      	strh	r3, [r7, #30]
      break;
 800290e:	e007      	b.n	8002920 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002914:	83fb      	strh	r3, [r7, #30]
      break;
 8002916:	e003      	b.n	8002920 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	61bb      	str	r3, [r7, #24]
      break;
 800291e:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d101      	bne.n	800292c <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	e02c      	b.n	8002986 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	331c      	adds	r3, #28
 8002930:	f107 0210 	add.w	r2, r7, #16
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 feb4 	bl	80036a4 <lsm303agr_acceleration_raw_get>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e01e      	b.n	8002986 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002948:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800294c:	461a      	mov	r2, r3
 800294e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002952:	fb92 f3f3 	sdiv	r3, r2, r3
 8002956:	b21a      	sxth	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800295c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002960:	461a      	mov	r2, r3
 8002962:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002966:	fb92 f3f3 	sdiv	r3, r2, r3
 800296a:	b21a      	sxth	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002970:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002974:	461a      	mov	r2, r3
 8002976:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800297a:	fb92 f3f3 	sdiv	r3, r2, r3
 800297e:	b21a      	sxth	r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	809a      	strh	r2, [r3, #4]

  return ret;
 8002984:	69bb      	ldr	r3, [r7, #24]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff8f 	bl	80028c8 <LSM303AGR_ACC_GetAxesRaw>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e03c      	b.n	8002a30 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fdec 	bl	800259a <LSM303AGR_ACC_GetSensitivity>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	e030      	b.n	8002a30 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80029ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029da:	edd7 7a03 	vldr	s15, [r7, #12]
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e6:	ee17 2a90 	vmov	r2, s15
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80029ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a06:	ee17 2a90 	vmov	r2, s15
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a26:	ee17 2a90 	vmov	r2, s15
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
 8002a44:	4613      	mov	r3, r2
 8002a46:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 001c 	add.w	r0, r3, #28
 8002a4e:	1cba      	adds	r2, r7, #2
 8002a50:	78f9      	ldrb	r1, [r7, #3]
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 fcd4 	bl	8003400 <lsm303agr_write_reg>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e000      	b.n	8002a66 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e04b      	b.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	7b1a      	ldrb	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002ac8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002ace:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e01e      	b.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4798      	blx	r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e014      	b.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	331c      	adds	r3, #28
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 ff01 	bl	800391a <lsm303agr_mag_i2c_interface_set>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e000      	b.n	8002b26 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	0800330d 	.word	0x0800330d
 8002b34:	0800336f 	.word	0x0800336f

08002b38 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	331c      	adds	r3, #28
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fe42 	bl	80037d0 <lsm303agr_mag_block_data_update_set>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e028      	b.n	8002baa <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	331c      	adds	r3, #28
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fdb1 	bl	80036c6 <lsm303agr_mag_operating_mode_set>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e01c      	b.n	8002baa <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	331c      	adds	r3, #28
 8002b74:	2103      	movs	r1, #3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fdcb 	bl	8003712 <lsm303agr_mag_data_rate_set>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e010      	b.n	8002baa <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	331c      	adds	r3, #28
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fe77 	bl	8003882 <lsm303agr_mag_self_test_set>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e004      	b.n	8002baa <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f874 	bl	8002ca8 <LSM303AGR_MAG_Disable>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e004      	b.n	8002bd6 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	331c      	adds	r3, #28
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fe36 	bl	8003860 <lsm303agr_mag_device_id_get>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e000      	b.n	8002c02 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2232      	movs	r2, #50	; 0x32
 8002c3e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002c54:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	42c80000 	.word	0x42c80000

08002c68 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e010      	b.n	8002ca0 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	331c      	adds	r3, #28
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fd1e 	bl	80036c6 <lsm303agr_mag_operating_mode_set>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	e004      	b.n	8002ca0 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e010      	b.n	8002ce0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	331c      	adds	r3, #28
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fcfe 	bl	80036c6 <lsm303agr_mag_operating_mode_set>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	e004      	b.n	8002ce0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002cf8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	331c      	adds	r3, #28
 8002d1a:	f107 020b 	add.w	r2, r7, #11
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fd1d 	bl	8003760 <lsm303agr_mag_data_rate_get>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	e023      	b.n	8002d7a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d81b      	bhi.n	8002d70 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d59 	.word	0x08002d59
 8002d48:	08002d61 	.word	0x08002d61
 8002d4c:	08002d69 	.word	0x08002d69
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002d54:	601a      	str	r2, [r3, #0]
      break;
 8002d56:	e00f      	b.n	8002d78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002d5c:	601a      	str	r2, [r3, #0]
      break;
 8002d5e:	e00b      	b.n	8002d78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002d64:	601a      	str	r2, [r3, #0]
      break;
 8002d66:	e007      	b.n	8002d78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002d6c:	601a      	str	r2, [r3, #0]
      break;
 8002d6e:	e003      	b.n	8002d78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	60fb      	str	r3, [r7, #12]
      break;
 8002d76:	bf00      	nop
  }

  return ret;
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	41200000 	.word	0x41200000
 8002d88:	41a00000 	.word	0x41a00000
 8002d8c:	42480000 	.word	0x42480000
 8002d90:	42c80000 	.word	0x42c80000

08002d94 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002da0:	edd7 7a00 	vldr	s15, [r7]
 8002da4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	d801      	bhi.n	8002db6 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002db2:	2300      	movs	r3, #0
 8002db4:	e016      	b.n	8002de4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002db6:	edd7 7a00 	vldr	s15, [r7]
 8002dba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	d801      	bhi.n	8002dcc <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e00b      	b.n	8002de4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002dcc:	edd7 7a00 	vldr	s15, [r7]
 8002dd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e0c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	d801      	bhi.n	8002de2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e000      	b.n	8002de4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002de2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002de4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	331c      	adds	r3, #28
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fc8f 	bl	8003712 <lsm303agr_mag_data_rate_set>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfe:	e000      	b.n	8002e02 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	42480000 	.word	0x42480000

08002e10 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2232      	movs	r2, #50	; 0x32
 8002e1e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	331c      	adds	r3, #28
 8002e54:	f107 0208 	add.w	r2, r7, #8
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fcde 	bl	800381c <lsm303agr_magnetic_raw_get>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e00c      	b.n	8002e86 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002e6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002e74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002e7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	331c      	adds	r3, #28
 8002e9c:	f107 0210 	add.w	r2, r7, #16
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fcba 	bl	800381c <lsm303agr_magnetic_raw_get>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e036      	b.n	8002f22 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff14 	bl	8002ce8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002ec0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	ee17 2a90 	vmov	r2, s15
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef8:	ee17 2a90 	vmov	r2, s15
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002f00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 2a90 	vmov	r2, s15
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	331c      	adds	r3, #28
 8002f3e:	f107 020b 	add.w	r2, r7, #11
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb4f 	bl	80035e8 <lsm303agr_xl_full_scale_get>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	e023      	b.n	8002f9e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d81b      	bhi.n	8002f94 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f85 	.word	0x08002f85
 8002f70:	08002f8d 	.word	0x08002f8d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8002f78:	601a      	str	r2, [r3, #0]
      break;
 8002f7a:	e00f      	b.n	8002f9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8002f80:	601a      	str	r2, [r3, #0]
      break;
 8002f82:	e00b      	b.n	8002f9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8002f88:	601a      	str	r2, [r3, #0]
      break;
 8002f8a:	e007      	b.n	8002f9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8002f90:	601a      	str	r2, [r3, #0]
      break;
 8002f92:	e003      	b.n	8002f9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	60fb      	str	r3, [r7, #12]
      break;
 8002f9a:	bf00      	nop
  }

  return ret;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	3f7ae148 	.word	0x3f7ae148
 8002fac:	3ff9999a 	.word	0x3ff9999a
 8002fb0:	4079999a 	.word	0x4079999a
 8002fb4:	413b851f 	.word	0x413b851f

08002fb8 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	331c      	adds	r3, #28
 8002fca:	f107 020b 	add.w	r2, r7, #11
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fb09 	bl	80035e8 <lsm303agr_xl_full_scale_get>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	e023      	b.n	800302a <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d81b      	bhi.n	8003020 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003009 	.word	0x08003009
 8002ff8:	08003011 	.word	0x08003011
 8002ffc:	08003019 	.word	0x08003019
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003004:	601a      	str	r2, [r3, #0]
      break;
 8003006:	e00f      	b.n	8003028 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 800300c:	601a      	str	r2, [r3, #0]
      break;
 800300e:	e00b      	b.n	8003028 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003014:	601a      	str	r2, [r3, #0]
      break;
 8003016:	e007      	b.n	8003028 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 800301c:	601a      	str	r2, [r3, #0]
      break;
 800301e:	e003      	b.n	8003028 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	60fb      	str	r3, [r7, #12]
      break;
 8003026:	bf00      	nop
  }

  return ret;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	4079999a 	.word	0x4079999a
 8003038:	40fa3d71 	.word	0x40fa3d71
 800303c:	417a147b 	.word	0x417a147b
 8003040:	423b999a 	.word	0x423b999a

08003044 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	331c      	adds	r3, #28
 8003056:	f107 020b 	add.w	r2, r7, #11
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fac3 	bl	80035e8 <lsm303agr_xl_full_scale_get>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	e023      	b.n	80030b6 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d81b      	bhi.n	80030ac <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	0800308d 	.word	0x0800308d
 8003080:	08003095 	.word	0x08003095
 8003084:	0800309d 	.word	0x0800309d
 8003088:	080030a5 	.word	0x080030a5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003090:	601a      	str	r2, [r3, #0]
      break;
 8003092:	e00f      	b.n	80030b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003098:	601a      	str	r2, [r3, #0]
      break;
 800309a:	e00b      	b.n	80030b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80030a0:	601a      	str	r2, [r3, #0]
      break;
 80030a2:	e007      	b.n	80030b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80030a8:	601a      	str	r2, [r3, #0]
      break;
 80030aa:	e003      	b.n	80030b4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	60fb      	str	r3, [r7, #12]
      break;
 80030b2:	bf00      	nop
  }

  return ret;
 80030b4:	68fb      	ldr	r3, [r7, #12]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	417a147b 	.word	0x417a147b
 80030c4:	41fa147b 	.word	0x41fa147b
 80030c8:	427a147b 	.word	0x427a147b
 80030cc:	433b947b 	.word	0x433b947b

080030d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80030dc:	edd7 7a00 	vldr	s15, [r7]
 80030e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	d801      	bhi.n	80030f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e037      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80030f2:	edd7 7a00 	vldr	s15, [r7]
 80030f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	d801      	bhi.n	8003108 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003104:	2302      	movs	r3, #2
 8003106:	e02c      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003108:	edd7 7a00 	vldr	s15, [r7]
 800310c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	d801      	bhi.n	800311e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800311a:	2303      	movs	r3, #3
 800311c:	e021      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800311e:	edd7 7a00 	vldr	s15, [r7]
 8003122:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003188 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	d801      	bhi.n	8003134 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003130:	2304      	movs	r3, #4
 8003132:	e016      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003134:	edd7 7a00 	vldr	s15, [r7]
 8003138:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800318c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800313c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	d801      	bhi.n	800314a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003146:	2305      	movs	r3, #5
 8003148:	e00b      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800314a:	edd7 7a00 	vldr	s15, [r7]
 800314e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003190 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d801      	bhi.n	8003160 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800315c:	2306      	movs	r3, #6
 800315e:	e000      	b.n	8003162 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003160:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003162:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	331c      	adds	r3, #28
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f993 	bl	8003498 <lsm303agr_xl_data_rate_set>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e000      	b.n	8003180 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	42480000 	.word	0x42480000
 800318c:	42c80000 	.word	0x42c80000
 8003190:	43480000 	.word	0x43480000

08003194 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80031a0:	edd7 7a00 	vldr	s15, [r7]
 80031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	d801      	bhi.n	80031b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e037      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031b6:	edd7 7a00 	vldr	s15, [r7]
 80031ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d801      	bhi.n	80031cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e02c      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031cc:	edd7 7a00 	vldr	s15, [r7]
 80031d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d801      	bhi.n	80031e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80031de:	2303      	movs	r3, #3
 80031e0:	e021      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031e2:	edd7 7a00 	vldr	s15, [r7]
 80031e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800323c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d801      	bhi.n	80031f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80031f4:	2304      	movs	r3, #4
 80031f6:	e016      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031f8:	edd7 7a00 	vldr	s15, [r7]
 80031fc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003240 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	d801      	bhi.n	800320e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800320a:	2305      	movs	r3, #5
 800320c:	e00b      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800320e:	edd7 7a00 	vldr	s15, [r7]
 8003212:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003244 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d801      	bhi.n	8003224 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003220:	2306      	movs	r3, #6
 8003222:	e000      	b.n	8003226 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003224:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	42480000 	.word	0x42480000
 8003240:	42c80000 	.word	0x42c80000
 8003244:	43480000 	.word	0x43480000

08003248 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
 8003258:	4613      	mov	r3, r2
 800325a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	695c      	ldr	r4, [r3, #20]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	7b1b      	ldrb	r3, [r3, #12]
 8003270:	b298      	uxth	r0, r3
 8003272:	7afb      	ldrb	r3, [r7, #11]
 8003274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003278:	b2db      	uxtb	r3, r3
 800327a:	b299      	uxth	r1, r3
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	47a0      	blx	r4
 8003282:	4603      	mov	r3, r0
 8003284:	e00d      	b.n	80032a2 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	695c      	ldr	r4, [r3, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	7b1b      	ldrb	r3, [r3, #12]
 800328e:	b298      	uxth	r0, r3
 8003290:	7afb      	ldrb	r3, [r7, #11]
 8003292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003296:	b2db      	uxtb	r3, r3
 8003298:	b299      	uxth	r1, r3
 800329a:	893b      	ldrh	r3, [r7, #8]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	47a0      	blx	r4
 80032a0:	4603      	mov	r3, r0
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}

080032aa <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b087      	sub	sp, #28
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	461a      	mov	r2, r3
 80032b6:	460b      	mov	r3, r1
 80032b8:	72fb      	strb	r3, [r7, #11]
 80032ba:	4613      	mov	r3, r2
 80032bc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	691c      	ldr	r4, [r3, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	7b1b      	ldrb	r3, [r3, #12]
 80032d2:	b298      	uxth	r0, r3
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	b299      	uxth	r1, r3
 80032de:	893b      	ldrh	r3, [r7, #8]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	47a0      	blx	r4
 80032e4:	4603      	mov	r3, r0
 80032e6:	e00d      	b.n	8003304 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	691c      	ldr	r4, [r3, #16]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
 80032f0:	b298      	uxth	r0, r3
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	b299      	uxth	r1, r3
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	47a0      	blx	r4
 8003302:	4603      	mov	r3, r0
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}

0800330c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	460b      	mov	r3, r1
 800331a:	72fb      	strb	r3, [r7, #11]
 800331c:	4613      	mov	r3, r2
 800331e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10e      	bne.n	800334a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	695c      	ldr	r4, [r3, #20]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	7b1b      	ldrb	r3, [r3, #12]
 8003334:	b298      	uxth	r0, r3
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800333c:	b2db      	uxtb	r3, r3
 800333e:	b299      	uxth	r1, r3
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	47a0      	blx	r4
 8003346:	4603      	mov	r3, r0
 8003348:	e00d      	b.n	8003366 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	695c      	ldr	r4, [r3, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	7b1b      	ldrb	r3, [r3, #12]
 8003352:	b298      	uxth	r0, r3
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335a:	b2db      	uxtb	r3, r3
 800335c:	b299      	uxth	r1, r3
 800335e:	893b      	ldrh	r3, [r7, #8]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	47a0      	blx	r4
 8003364:	4603      	mov	r3, r0
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800336e:	b590      	push	{r4, r7, lr}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	461a      	mov	r2, r3
 800337a:	460b      	mov	r3, r1
 800337c:	72fb      	strb	r3, [r7, #11]
 800337e:	4613      	mov	r3, r2
 8003380:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	691c      	ldr	r4, [r3, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	7b1b      	ldrb	r3, [r3, #12]
 8003396:	b298      	uxth	r0, r3
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	b299      	uxth	r1, r3
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	47a0      	blx	r4
 80033a8:	4603      	mov	r3, r0
 80033aa:	e00d      	b.n	80033c8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	691c      	ldr	r4, [r3, #16]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	7b1b      	ldrb	r3, [r3, #12]
 80033b4:	b298      	uxth	r0, r3
 80033b6:	7afb      	ldrb	r3, [r7, #11]
 80033b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	b299      	uxth	r1, r3
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	47a0      	blx	r4
 80033c6:	4603      	mov	r3, r0
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}

080033d0 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	461a      	mov	r2, r3
 80033dc:	460b      	mov	r3, r1
 80033de:	72fb      	strb	r3, [r7, #11]
 80033e0:	4613      	mov	r3, r2
 80033e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685c      	ldr	r4, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6898      	ldr	r0, [r3, #8]
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	7af9      	ldrb	r1, [r7, #11]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	47a0      	blx	r4
 80033f4:	6178      	str	r0, [r7, #20]
  return ret;
 80033f6:	697b      	ldr	r3, [r7, #20]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	461a      	mov	r2, r3
 800340c:	460b      	mov	r3, r1
 800340e:	72fb      	strb	r3, [r7, #11]
 8003410:	4613      	mov	r3, r2
 8003412:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681c      	ldr	r4, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6898      	ldr	r0, [r3, #8]
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	7af9      	ldrb	r1, [r7, #11]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	47a0      	blx	r4
 8003424:	6178      	str	r0, [r7, #20]
  return ret;
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	4618      	mov	r0, r3
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}

08003430 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800343a:	f107 020c 	add.w	r2, r7, #12
 800343e:	2301      	movs	r3, #1
 8003440:	2120      	movs	r1, #32
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffc4 	bl	80033d0 <lsm303agr_read_reg>
 8003448:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003450:	f107 0210 	add.w	r2, r7, #16
 8003454:	2301      	movs	r3, #1
 8003456:	2123      	movs	r1, #35	; 0x23
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffb9 	bl	80033d0 <lsm303agr_read_reg>
 800345e:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8003460:	7b3b      	ldrb	r3, [r7, #12]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e00c      	b.n	800348e <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003474:	7c3b      	ldrb	r3, [r7, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e002      	b.n	800348e <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80034a4:	f107 0208 	add.w	r2, r7, #8
 80034a8:	2301      	movs	r3, #1
 80034aa:	2120      	movs	r1, #32
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff8f 	bl	80033d0 <lsm303agr_read_reg>
 80034b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	7a3b      	ldrb	r3, [r7, #8]
 80034c4:	f362 1307 	bfi	r3, r2, #4, #4
 80034c8:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80034ca:	f107 0208 	add.w	r2, r7, #8
 80034ce:	2301      	movs	r3, #1
 80034d0:	2120      	movs	r1, #32
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff94 	bl	8003400 <lsm303agr_write_reg>
 80034d8:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	2301      	movs	r3, #1
 80034f4:	2120      	movs	r1, #32
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff6a 	bl	80033d0 <lsm303agr_read_reg>
 80034fc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 80034fe:	7a3b      	ldrb	r3, [r7, #8]
 8003500:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b09      	cmp	r3, #9
 8003508:	d83e      	bhi.n	8003588 <lsm303agr_xl_data_rate_get+0xa4>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <lsm303agr_xl_data_rate_get+0x2c>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003549 	.word	0x08003549
 800351c:	08003551 	.word	0x08003551
 8003520:	08003559 	.word	0x08003559
 8003524:	08003561 	.word	0x08003561
 8003528:	08003569 	.word	0x08003569
 800352c:	08003571 	.word	0x08003571
 8003530:	08003579 	.word	0x08003579
 8003534:	08003581 	.word	0x08003581
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
      break;
 800353e:	e027      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
      break;
 8003546:	e023      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
      break;
 800354e:	e01f      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2203      	movs	r2, #3
 8003554:	701a      	strb	r2, [r3, #0]
      break;
 8003556:	e01b      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2204      	movs	r2, #4
 800355c:	701a      	strb	r2, [r3, #0]
      break;
 800355e:	e017      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2205      	movs	r2, #5
 8003564:	701a      	strb	r2, [r3, #0]
      break;
 8003566:	e013      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2206      	movs	r2, #6
 800356c:	701a      	strb	r2, [r3, #0]
      break;
 800356e:	e00f      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2207      	movs	r2, #7
 8003574:	701a      	strb	r2, [r3, #0]
      break;
 8003576:	e00b      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2208      	movs	r2, #8
 800357c:	701a      	strb	r2, [r3, #0]
      break;
 800357e:	e007      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2209      	movs	r2, #9
 8003584:	701a      	strb	r2, [r3, #0]
      break;
 8003586:	e003      	b.n	8003590 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
      break;
 800358e:	bf00      	nop
  }

  return ret;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop

0800359c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035a8:	f107 0208 	add.w	r2, r7, #8
 80035ac:	2301      	movs	r3, #1
 80035ae:	2123      	movs	r1, #35	; 0x23
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff0d 	bl	80033d0 <lsm303agr_read_reg>
 80035b6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	7a3b      	ldrb	r3, [r7, #8]
 80035c8:	f362 1305 	bfi	r3, r2, #4, #2
 80035cc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035ce:	f107 0208 	add.w	r2, r7, #8
 80035d2:	2301      	movs	r3, #1
 80035d4:	2123      	movs	r1, #35	; 0x23
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff12 	bl	8003400 <lsm303agr_write_reg>
 80035dc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035f2:	f107 0208 	add.w	r2, r7, #8
 80035f6:	2301      	movs	r3, #1
 80035f8:	2123      	movs	r1, #35	; 0x23
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fee8 	bl	80033d0 <lsm303agr_read_reg>
 8003600:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8003602:	7a3b      	ldrb	r3, [r7, #8]
 8003604:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d81a      	bhi.n	8003644 <lsm303agr_xl_full_scale_get+0x5c>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <lsm303agr_xl_full_scale_get+0x2c>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003625 	.word	0x08003625
 8003618:	0800362d 	.word	0x0800362d
 800361c:	08003635 	.word	0x08003635
 8003620:	0800363d 	.word	0x0800363d
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
      break;
 800362a:	e00f      	b.n	800364c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e00b      	b.n	800364c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e007      	b.n	800364c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2203      	movs	r2, #3
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e003      	b.n	800364c <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	bf00      	nop
  }
  return ret;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop

08003658 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003664:	f107 0208 	add.w	r2, r7, #8
 8003668:	2301      	movs	r3, #1
 800366a:	2123      	movs	r1, #35	; 0x23
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff feaf 	bl	80033d0 <lsm303agr_read_reg>
 8003672:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	7a3b      	ldrb	r3, [r7, #8]
 8003684:	f362 13c7 	bfi	r3, r2, #7, #1
 8003688:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800368a:	f107 0208 	add.w	r2, r7, #8
 800368e:	2301      	movs	r3, #1
 8003690:	2123      	movs	r1, #35	; 0x23
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff feb4 	bl	8003400 <lsm303agr_write_reg>
 8003698:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80036ae:	2306      	movs	r3, #6
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	2128      	movs	r1, #40	; 0x28
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fe8b 	bl	80033d0 <lsm303agr_read_reg>
 80036ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80036d2:	f107 0208 	add.w	r2, r7, #8
 80036d6:	2301      	movs	r3, #1
 80036d8:	2160      	movs	r1, #96	; 0x60
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fe78 	bl	80033d0 <lsm303agr_read_reg>
 80036e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	7a3b      	ldrb	r3, [r7, #8]
 80036f2:	f362 0301 	bfi	r3, r2, #0, #2
 80036f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80036f8:	f107 0208 	add.w	r2, r7, #8
 80036fc:	2301      	movs	r3, #1
 80036fe:	2160      	movs	r1, #96	; 0x60
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fe7d 	bl	8003400 <lsm303agr_write_reg>
 8003706:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003708:	68fb      	ldr	r3, [r7, #12]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800371e:	f107 0208 	add.w	r2, r7, #8
 8003722:	2301      	movs	r3, #1
 8003724:	2160      	movs	r1, #96	; 0x60
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fe52 	bl	80033d0 <lsm303agr_read_reg>
 800372c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	7a3b      	ldrb	r3, [r7, #8]
 800373e:	f362 0383 	bfi	r3, r2, #2, #2
 8003742:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003744:	f107 0208 	add.w	r2, r7, #8
 8003748:	2301      	movs	r3, #1
 800374a:	2160      	movs	r1, #96	; 0x60
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fe57 	bl	8003400 <lsm303agr_write_reg>
 8003752:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003754:	68fb      	ldr	r3, [r7, #12]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800376a:	f107 0208 	add.w	r2, r7, #8
 800376e:	2301      	movs	r3, #1
 8003770:	2160      	movs	r1, #96	; 0x60
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe2c 	bl	80033d0 <lsm303agr_read_reg>
 8003778:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 800377a:	7a3b      	ldrb	r3, [r7, #8]
 800377c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b03      	cmp	r3, #3
 8003784:	d81a      	bhi.n	80037bc <lsm303agr_mag_data_rate_get+0x5c>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <lsm303agr_mag_data_rate_get+0x2c>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037ad 	.word	0x080037ad
 8003798:	080037b5 	.word	0x080037b5
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	e00f      	b.n	80037c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
      break;
 80037aa:	e00b      	b.n	80037c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2202      	movs	r2, #2
 80037b0:	701a      	strb	r2, [r3, #0]
      break;
 80037b2:	e007      	b.n	80037c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2203      	movs	r2, #3
 80037b8:	701a      	strb	r2, [r3, #0]
      break;
 80037ba:	e003      	b.n	80037c4 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
      break;
 80037c2:	bf00      	nop
  }
  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80037dc:	f107 0208 	add.w	r2, r7, #8
 80037e0:	2301      	movs	r3, #1
 80037e2:	2162      	movs	r1, #98	; 0x62
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fdf3 	bl	80033d0 <lsm303agr_read_reg>
 80037ea:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	7a3b      	ldrb	r3, [r7, #8]
 80037fc:	f362 1304 	bfi	r3, r2, #4, #1
 8003800:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003802:	f107 0208 	add.w	r2, r7, #8
 8003806:	2301      	movs	r3, #1
 8003808:	2162      	movs	r1, #98	; 0x62
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdf8 	bl	8003400 <lsm303agr_write_reg>
 8003810:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003826:	2306      	movs	r3, #6
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	2168      	movs	r1, #104	; 0x68
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fdcf 	bl	80033d0 <lsm303agr_read_reg>
 8003832:	60f8      	str	r0, [r7, #12]
  return ret;
 8003834:	68fb      	ldr	r3, [r7, #12]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003848:	2301      	movs	r3, #1
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	210f      	movs	r1, #15
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fdbe 	bl	80033d0 <lsm303agr_read_reg>
 8003854:	60f8      	str	r0, [r7, #12]
  return ret;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800386a:	2301      	movs	r3, #1
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	214f      	movs	r1, #79	; 0x4f
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fdad 	bl	80033d0 <lsm303agr_read_reg>
 8003876:	60f8      	str	r0, [r7, #12]
  return ret;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800388e:	f107 0208 	add.w	r2, r7, #8
 8003892:	2301      	movs	r3, #1
 8003894:	2162      	movs	r1, #98	; 0x62
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fd9a 	bl	80033d0 <lsm303agr_read_reg>
 800389c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10f      	bne.n	80038c4 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	7a3b      	ldrb	r3, [r7, #8]
 80038ae:	f362 0341 	bfi	r3, r2, #1, #1
 80038b2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80038b4:	f107 0208 	add.w	r2, r7, #8
 80038b8:	2301      	movs	r3, #1
 80038ba:	2162      	movs	r1, #98	; 0x62
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fd9f 	bl	8003400 <lsm303agr_write_reg>
 80038c2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80038c4:	68fb      	ldr	r3, [r7, #12]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80038da:	f107 0208 	add.w	r2, r7, #8
 80038de:	2301      	movs	r3, #1
 80038e0:	212e      	movs	r1, #46	; 0x2e
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fd74 	bl	80033d0 <lsm303agr_read_reg>
 80038e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10f      	bne.n	8003910 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	7a3b      	ldrb	r3, [r7, #8]
 80038fa:	f362 1387 	bfi	r3, r2, #6, #2
 80038fe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003900:	f107 0208 	add.w	r2, r7, #8
 8003904:	2301      	movs	r3, #1
 8003906:	212e      	movs	r1, #46	; 0x2e
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fd79 	bl	8003400 <lsm303agr_write_reg>
 800390e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003926:	f107 0208 	add.w	r2, r7, #8
 800392a:	2301      	movs	r3, #1
 800392c:	2162      	movs	r1, #98	; 0x62
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fd4e 	bl	80033d0 <lsm303agr_read_reg>
 8003934:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10f      	bne.n	800395c <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	7a3b      	ldrb	r3, [r7, #8]
 8003946:	f362 1345 	bfi	r3, r2, #5, #1
 800394a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800394c:	f107 0208 	add.w	r2, r7, #8
 8003950:	2301      	movs	r3, #1
 8003952:	2162      	movs	r1, #98	; 0x62
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fd53 	bl	8003400 <lsm303agr_write_reg>
 800395a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 800395c:	68fb      	ldr	r3, [r7, #12]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e04d      	b.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	7b1a      	ldrb	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <LSM6DSL_RegisterBusIO+0xc4>)
 80039c0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <LSM6DSL_RegisterBusIO+0xc8>)
 80039c6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e020      	b.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4798      	blx	r3
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e016      	b.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d112      	bne.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003a04:	230c      	movs	r3, #12
 8003a06:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2112      	movs	r1, #18
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fd2d 	bl	800446e <LSM6DSL_Write_Reg>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	080048dd 	.word	0x080048dd
 8003a30:	08004913 	.word	0x08004913

08003a34 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	331c      	adds	r3, #28
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f9e5 	bl	8004e12 <lsm6dsl_auto_increment_set>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e054      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	331c      	adds	r3, #28
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f980 	bl	8004d60 <lsm6dsl_block_data_update_set>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e048      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	331c      	adds	r3, #28
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f9f3 	bl	8004e5e <lsm6dsl_fifo_mode_set>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e03c      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	331c      	adds	r3, #28
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 ffe6 	bl	8004a64 <lsm6dsl_xl_data_rate_set>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e02c      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	331c      	adds	r3, #28
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff7c 	bl	80049a8 <lsm6dsl_xl_full_scale_set>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	e020      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	331c      	adds	r3, #28
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f8c0 	bl	8004c50 <lsm6dsl_gy_data_rate_set>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e010      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	331c      	adds	r3, #28
 8003ae0:	2106      	movs	r1, #6
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f84c 	bl	8004b80 <lsm6dsl_gy_full_scale_set>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	e004      	b.n	8003afe <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f888 	bl	8003c24 <LSM6DSL_ACC_Disable>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e015      	b.n	8003b4c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa9a 	bl	800405a <LSM6DSL_GYRO_Disable>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	e00c      	b.n	8003b4c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	331c      	adds	r3, #28
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 f943 	bl	8004df0 <lsm6dsl_device_id_get>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	e000      	b.n	8003b78 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ba8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2210      	movs	r2, #16
 8003bae:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <LSM6DSL_GetCapabilities+0x58>)
 8003bba:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <LSM6DSL_GetCapabilities+0x58>)
 8003bc0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	45d02000 	.word	0x45d02000

08003bdc <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e014      	b.n	8003c1c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f103 021c 	add.w	r2, r3, #28
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 ff2f 	bl	8004a64 <lsm6dsl_xl_data_rate_set>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c10:	e004      	b.n	8003c1c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e01f      	b.n	8003c7a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f103 021c 	add.w	r2, r3, #28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	332b      	adds	r3, #43	; 0x2b
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 ff32 	bl	8004ab0 <lsm6dsl_xl_data_rate_get>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	e010      	b.n	8003c7a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff00 	bl	8004a64 <lsm6dsl_xl_data_rate_set>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e004      	b.n	8003c7a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	331c      	adds	r3, #28
 8003c96:	f107 020b 	add.w	r2, r7, #11
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fea9 	bl	80049f4 <lsm6dsl_xl_full_scale_get>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e023      	b.n	8003cf6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d81b      	bhi.n	8003cec <LSM6DSL_ACC_GetSensitivity+0x68>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003ccd 	.word	0x08003ccd
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003cdd 	.word	0x08003cdd
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003cd0:	601a      	str	r2, [r3, #0]
      break;
 8003cd2:	e00f      	b.n	8003cf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003cd8:	601a      	str	r2, [r3, #0]
      break;
 8003cda:	e00b      	b.n	8003cf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003ce0:	601a      	str	r2, [r3, #0]
      break;
 8003ce2:	e007      	b.n	8003cf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003ce8:	601a      	str	r2, [r3, #0]
      break;
 8003cea:	e003      	b.n	8003cf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	60fb      	str	r3, [r7, #12]
      break;
 8003cf2:	bf00      	nop
  }

  return ret;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	3d79db23 	.word	0x3d79db23
 8003d04:	3df9db23 	.word	0x3df9db23
 8003d08:	3e79db23 	.word	0x3e79db23
 8003d0c:	3ef9db23 	.word	0x3ef9db23

08003d10 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	331c      	adds	r3, #28
 8003d22:	f107 020b 	add.w	r2, r7, #11
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fec1 	bl	8004ab0 <lsm6dsl_xl_data_rate_get>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	e054      	b.n	8003de4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	2b0b      	cmp	r3, #11
 8003d3e:	d84c      	bhi.n	8003dda <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d8b 	.word	0x08003d8b
 8003d50:	08003d93 	.word	0x08003d93
 8003d54:	08003d9b 	.word	0x08003d9b
 8003d58:	08003da3 	.word	0x08003da3
 8003d5c:	08003dab 	.word	0x08003dab
 8003d60:	08003db3 	.word	0x08003db3
 8003d64:	08003dbb 	.word	0x08003dbb
 8003d68:	08003dc3 	.word	0x08003dc3
 8003d6c:	08003dcb 	.word	0x08003dcb
 8003d70:	08003dd3 	.word	0x08003dd3
 8003d74:	08003d83 	.word	0x08003d83
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
      break;
 8003d80:	e02f      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003d86:	601a      	str	r2, [r3, #0]
      break;
 8003d88:	e02b      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003d8e:	601a      	str	r2, [r3, #0]
      break;
 8003d90:	e027      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003d96:	601a      	str	r2, [r3, #0]
      break;
 8003d98:	e023      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003d9e:	601a      	str	r2, [r3, #0]
      break;
 8003da0:	e01f      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003da6:	601a      	str	r2, [r3, #0]
      break;
 8003da8:	e01b      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003dae:	601a      	str	r2, [r3, #0]
      break;
 8003db0:	e017      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003db6:	601a      	str	r2, [r3, #0]
      break;
 8003db8:	e013      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003dbe:	601a      	str	r2, [r3, #0]
      break;
 8003dc0:	e00f      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003dc6:	601a      	str	r2, [r3, #0]
      break;
 8003dc8:	e00b      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003dce:	601a      	str	r2, [r3, #0]
      break;
 8003dd0:	e007      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003dd6:	601a      	str	r2, [r3, #0]
      break;
 8003dd8:	e003      	b.n	8003de2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	60fb      	str	r3, [r7, #12]
      break;
 8003de0:	bf00      	nop
  }

  return ret;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	3fcccccd 	.word	0x3fcccccd
 8003df0:	41480000 	.word	0x41480000
 8003df4:	41d00000 	.word	0x41d00000
 8003df8:	42500000 	.word	0x42500000
 8003dfc:	42d00000 	.word	0x42d00000
 8003e00:	43500000 	.word	0x43500000
 8003e04:	43d00000 	.word	0x43d00000
 8003e08:	44504000 	.word	0x44504000
 8003e0c:	44cf8000 	.word	0x44cf8000
 8003e10:	45502000 	.word	0x45502000
 8003e14:	45d02000 	.word	0x45d02000

08003e18 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d106      	bne.n	8003e3c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003e2e:	ed97 0a00 	vldr	s0, [r7]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fb36 	bl	80044a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	e005      	b.n	8003e48 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003e3c:	ed97 0a00 	vldr	s0, [r7]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fbbb 	bl	80045bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003e46:	4603      	mov	r3, r0
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	331c      	adds	r3, #28
 8003e62:	f107 020b 	add.w	r2, r7, #11
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fdc3 	bl	80049f4 <lsm6dsl_xl_full_scale_get>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	e023      	b.n	8003ec2 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d81b      	bhi.n	8003eb8 <LSM6DSL_ACC_GetFullScale+0x68>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <LSM6DSL_ACC_GetFullScale+0x38>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ea9 	.word	0x08003ea9
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	601a      	str	r2, [r3, #0]
      break;
 8003e9e:	e00f      	b.n	8003ec0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	601a      	str	r2, [r3, #0]
      break;
 8003ea6:	e00b      	b.n	8003ec0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	601a      	str	r2, [r3, #0]
      break;
 8003eae:	e007      	b.n	8003ec0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	601a      	str	r2, [r3, #0]
      break;
 8003eb6:	e003      	b.n	8003ec0 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	60fb      	str	r3, [r7, #12]
      break;
 8003ebe:	bf00      	nop
  }

  return ret;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop

08003ecc <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	dd0b      	ble.n	8003ef4 <LSM6DSL_ACC_SetFullScale+0x28>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	dd06      	ble.n	8003ef0 <LSM6DSL_ACC_SetFullScale+0x24>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	dc01      	bgt.n	8003eec <LSM6DSL_ACC_SetFullScale+0x20>
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e004      	b.n	8003ef6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e002      	b.n	8003ef6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e000      	b.n	8003ef6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003ef4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003ef6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	331c      	adds	r3, #28
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fd51 	bl	80049a8 <lsm6dsl_xl_full_scale_set>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	e000      	b.n	8003f14 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	331c      	adds	r3, #28
 8003f2a:	f107 0208 	add.w	r2, r7, #8
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ff4c 	bl	8004dce <lsm6dsl_acceleration_raw_get>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	e00c      	b.n	8003f5c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003f42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003f4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003f52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	331c      	adds	r3, #28
 8003f78:	f107 0210 	add.w	r2, r7, #16
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ff25 	bl	8004dce <lsm6dsl_acceleration_raw_get>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e03c      	b.n	800400a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fe74 	bl	8003c84 <LSM6DSL_ACC_GetSensitivity>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	e030      	b.n	800400a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003fa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc0:	ee17 2a90 	vmov	r2, s15
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003fc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe0:	ee17 2a90 	vmov	r2, s15
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003fe8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004000:	ee17 2a90 	vmov	r2, s15
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e014      	b.n	8004052 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f103 021c 	add.w	r2, r3, #28
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fe0a 	bl	8004c50 <lsm6dsl_gy_data_rate_set>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e004      	b.n	8004052 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e01f      	b.n	80040b0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f103 021c 	add.w	r2, r3, #28
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	332c      	adds	r3, #44	; 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f000 fe0d 	bl	8004c9c <lsm6dsl_gy_data_rate_get>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295
 800408c:	e010      	b.n	80040b0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	331c      	adds	r3, #28
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fddb 	bl	8004c50 <lsm6dsl_gy_data_rate_set>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	e004      	b.n	80040b0 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	331c      	adds	r3, #28
 80040ca:	f107 020b 	add.w	r2, r7, #11
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fd7b 	bl	8004bcc <lsm6dsl_gy_full_scale_get>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	e02d      	b.n	800413e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d825      	bhi.n	8004134 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004115 	.word	0x08004115
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004135 	.word	0x08004135
 8004100:	08004125 	.word	0x08004125
 8004104:	08004135 	.word	0x08004135
 8004108:	0800412d 	.word	0x0800412d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004110:	601a      	str	r2, [r3, #0]
      break;
 8004112:	e013      	b.n	800413c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4a0d      	ldr	r2, [pc, #52]	; (800414c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004118:	601a      	str	r2, [r3, #0]
      break;
 800411a:	e00f      	b.n	800413c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004120:	601a      	str	r2, [r3, #0]
      break;
 8004122:	e00b      	b.n	800413c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004128:	601a      	str	r2, [r3, #0]
      break;
 800412a:	e007      	b.n	800413c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004130:	601a      	str	r2, [r3, #0]
      break;
 8004132:	e003      	b.n	800413c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004134:	f04f 33ff 	mov.w	r3, #4294967295
 8004138:	60fb      	str	r3, [r7, #12]
      break;
 800413a:	bf00      	nop
  }

  return ret;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	408c0000 	.word	0x408c0000
 800414c:	410c0000 	.word	0x410c0000
 8004150:	418c0000 	.word	0x418c0000
 8004154:	420c0000 	.word	0x420c0000
 8004158:	428c0000 	.word	0x428c0000

0800415c <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	331c      	adds	r3, #28
 800416e:	f107 020b 	add.w	r2, r7, #11
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fd91 	bl	8004c9c <lsm6dsl_gy_data_rate_get>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	e04e      	b.n	8004224 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	2b0a      	cmp	r3, #10
 800418a:	d846      	bhi.n	800421a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041c1 	.word	0x080041c1
 8004198:	080041cb 	.word	0x080041cb
 800419c:	080041d3 	.word	0x080041d3
 80041a0:	080041db 	.word	0x080041db
 80041a4:	080041e3 	.word	0x080041e3
 80041a8:	080041eb 	.word	0x080041eb
 80041ac:	080041f3 	.word	0x080041f3
 80041b0:	080041fb 	.word	0x080041fb
 80041b4:	08004203 	.word	0x08004203
 80041b8:	0800420b 	.word	0x0800420b
 80041bc:	08004213 	.word	0x08004213
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
      break;
 80041c8:	e02b      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80041ce:	601a      	str	r2, [r3, #0]
      break;
 80041d0:	e027      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80041d6:	601a      	str	r2, [r3, #0]
      break;
 80041d8:	e023      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80041de:	601a      	str	r2, [r3, #0]
      break;
 80041e0:	e01f      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80041e6:	601a      	str	r2, [r3, #0]
      break;
 80041e8:	e01b      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	; (800423c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80041ee:	601a      	str	r2, [r3, #0]
      break;
 80041f0:	e017      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80041f6:	601a      	str	r2, [r3, #0]
      break;
 80041f8:	e013      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	4a11      	ldr	r2, [pc, #68]	; (8004244 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80041fe:	601a      	str	r2, [r3, #0]
      break;
 8004200:	e00f      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004206:	601a      	str	r2, [r3, #0]
      break;
 8004208:	e00b      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800420e:	601a      	str	r2, [r3, #0]
      break;
 8004210:	e007      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004216:	601a      	str	r2, [r3, #0]
      break;
 8004218:	e003      	b.n	8004222 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	60fb      	str	r3, [r7, #12]
      break;
 8004220:	bf00      	nop
  }

  return ret;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	41480000 	.word	0x41480000
 8004230:	41d00000 	.word	0x41d00000
 8004234:	42500000 	.word	0x42500000
 8004238:	42d00000 	.word	0x42d00000
 800423c:	43500000 	.word	0x43500000
 8004240:	43d00000 	.word	0x43d00000
 8004244:	44504000 	.word	0x44504000
 8004248:	44cf8000 	.word	0x44cf8000
 800424c:	45502000 	.word	0x45502000
 8004250:	45d02000 	.word	0x45d02000

08004254 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004266:	2b01      	cmp	r3, #1
 8004268:	d106      	bne.n	8004278 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800426a:	ed97 0a00 	vldr	s0, [r7]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa26 	bl	80046c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004274:	4603      	mov	r3, r0
 8004276:	e005      	b.n	8004284 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004278:	ed97 0a00 	vldr	s0, [r7]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 faab 	bl	80047d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004282:	4603      	mov	r3, r0
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	331c      	adds	r3, #28
 800429e:	f107 020b 	add.w	r2, r7, #11
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fc91 	bl	8004bcc <lsm6dsl_gy_full_scale_get>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e030      	b.n	8004318 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d828      	bhi.n	800430e <LSM6DSL_GYRO_GetFullScale+0x82>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042e1 	.word	0x080042e1
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042fb 	.word	0x080042fb
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	08004305 	.word	0x08004305
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	227d      	movs	r2, #125	; 0x7d
 80042e4:	601a      	str	r2, [r3, #0]
      break;
 80042e6:	e016      	b.n	8004316 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	22fa      	movs	r2, #250	; 0xfa
 80042ec:	601a      	str	r2, [r3, #0]
      break;
 80042ee:	e012      	b.n	8004316 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042f6:	601a      	str	r2, [r3, #0]
      break;
 80042f8:	e00d      	b.n	8004316 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004300:	601a      	str	r2, [r3, #0]
      break;
 8004302:	e008      	b.n	8004316 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800430a:	601a      	str	r2, [r3, #0]
      break;
 800430c:	e003      	b.n	8004316 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	60fb      	str	r3, [r7, #12]
      break;
 8004314:	bf00      	nop
  }

  return ret;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b7d      	cmp	r3, #125	; 0x7d
 800432e:	dd12      	ble.n	8004356 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2bfa      	cmp	r3, #250	; 0xfa
 8004334:	dd0d      	ble.n	8004352 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800433c:	dd07      	ble.n	800434e <LSM6DSL_GYRO_SetFullScale+0x2e>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004344:	dc01      	bgt.n	800434a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004346:	2304      	movs	r3, #4
 8004348:	e006      	b.n	8004358 <LSM6DSL_GYRO_SetFullScale+0x38>
 800434a:	2306      	movs	r3, #6
 800434c:	e004      	b.n	8004358 <LSM6DSL_GYRO_SetFullScale+0x38>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004356:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004358:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	331c      	adds	r3, #28
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fc0c 	bl	8004b80 <lsm6dsl_gy_full_scale_set>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e000      	b.n	8004376 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	331c      	adds	r3, #28
 800438c:	f107 0208 	add.w	r2, r7, #8
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fd0a 	bl	8004dac <lsm6dsl_angular_rate_raw_get>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e00c      	b.n	80043be <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80043a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80043ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80043b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	331c      	adds	r3, #28
 80043d4:	f107 0210 	add.w	r2, r7, #16
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fce6 	bl	8004dac <lsm6dsl_angular_rate_raw_get>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	e03c      	b.n	8004466 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fe60 	bl	80040b8 <LSM6DSL_GYRO_GetSensitivity>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	e030      	b.n	8004466 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004404:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004410:	edd7 7a03 	vldr	s15, [r7, #12]
 8004414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441c:	ee17 2a90 	vmov	r2, s15
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004430:	edd7 7a03 	vldr	s15, [r7, #12]
 8004434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443c:	ee17 2a90 	vmov	r2, s15
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004444:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004450:	edd7 7a03 	vldr	s15, [r7, #12]
 8004454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800445c:	ee17 2a90 	vmov	r2, s15
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
 800447a:	4613      	mov	r3, r2
 800447c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f103 001c 	add.w	r0, r3, #28
 8004484:	1cba      	adds	r2, r7, #2
 8004486:	78f9      	ldrb	r1, [r7, #3]
 8004488:	2301      	movs	r3, #1
 800448a:	f000 fa75 	bl	8004978 <lsm6dsl_write_reg>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	e000      	b.n	800449c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80044b0:	edd7 7a00 	vldr	s15, [r7]
 80044b4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c0:	d801      	bhi.n	80044c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e058      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80044c6:	edd7 7a00 	vldr	s15, [r7]
 80044ca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d801      	bhi.n	80044dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80044d8:	2302      	movs	r3, #2
 80044da:	e04d      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80044dc:	edd7 7a00 	vldr	s15, [r7]
 80044e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80045a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80044e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	d801      	bhi.n	80044f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e042      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80044f2:	edd7 7a00 	vldr	s15, [r7]
 80044f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80045a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80044fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	d801      	bhi.n	8004508 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004504:	2304      	movs	r3, #4
 8004506:	e037      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004508:	edd7 7a00 	vldr	s15, [r7]
 800450c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80045a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	d801      	bhi.n	800451e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800451a:	2305      	movs	r3, #5
 800451c:	e02c      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800451e:	edd7 7a00 	vldr	s15, [r7]
 8004522:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80045ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	d801      	bhi.n	8004534 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004530:	2306      	movs	r3, #6
 8004532:	e021      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004534:	edd7 7a00 	vldr	s15, [r7]
 8004538:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80045b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800453c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	d801      	bhi.n	800454a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004546:	2307      	movs	r3, #7
 8004548:	e016      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800454a:	edd7 7a00 	vldr	s15, [r7]
 800454e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80045b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d801      	bhi.n	8004560 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800455c:	2308      	movs	r3, #8
 800455e:	e00b      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004560:	edd7 7a00 	vldr	s15, [r7]
 8004564:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d801      	bhi.n	8004576 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004572:	2309      	movs	r3, #9
 8004574:	e000      	b.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004576:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004578:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	331c      	adds	r3, #28
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa6e 	bl	8004a64 <lsm6dsl_xl_data_rate_set>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	e000      	b.n	8004596 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	42500000 	.word	0x42500000
 80045a4:	42d00000 	.word	0x42d00000
 80045a8:	43500000 	.word	0x43500000
 80045ac:	43d00000 	.word	0x43d00000
 80045b0:	44504000 	.word	0x44504000
 80045b4:	44cf8000 	.word	0x44cf8000
 80045b8:	45502000 	.word	0x45502000

080045bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80045c8:	edd7 7a00 	vldr	s15, [r7]
 80045cc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d8:	d801      	bhi.n	80045de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80045da:	2301      	movs	r3, #1
 80045dc:	e058      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80045de:	edd7 7a00 	vldr	s15, [r7]
 80045e2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ee:	d801      	bhi.n	80045f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e04d      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80045f4:	edd7 7a00 	vldr	s15, [r7]
 80045f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80046a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80045fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	d801      	bhi.n	800460a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004606:	2303      	movs	r3, #3
 8004608:	e042      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800460a:	edd7 7a00 	vldr	s15, [r7]
 800460e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461a:	d801      	bhi.n	8004620 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800461c:	2304      	movs	r3, #4
 800461e:	e037      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004620:	edd7 7a00 	vldr	s15, [r7]
 8004624:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80046ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	d801      	bhi.n	8004636 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004632:	2305      	movs	r3, #5
 8004634:	e02c      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004636:	edd7 7a00 	vldr	s15, [r7]
 800463a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800463e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	d801      	bhi.n	800464c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004648:	2306      	movs	r3, #6
 800464a:	e021      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800464c:	edd7 7a00 	vldr	s15, [r7]
 8004650:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d801      	bhi.n	8004662 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800465e:	2307      	movs	r3, #7
 8004660:	e016      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004662:	edd7 7a00 	vldr	s15, [r7]
 8004666:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800466a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d801      	bhi.n	8004678 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004674:	2308      	movs	r3, #8
 8004676:	e00b      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004678:	edd7 7a00 	vldr	s15, [r7]
 800467c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80046bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d801      	bhi.n	800468e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800468a:	2309      	movs	r3, #9
 800468c:	e000      	b.n	8004690 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800468e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	42500000 	.word	0x42500000
 80046a8:	42d00000 	.word	0x42d00000
 80046ac:	43500000 	.word	0x43500000
 80046b0:	43d00000 	.word	0x43d00000
 80046b4:	44504000 	.word	0x44504000
 80046b8:	44cf8000 	.word	0x44cf8000
 80046bc:	45502000 	.word	0x45502000

080046c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80046cc:	edd7 7a00 	vldr	s15, [r7]
 80046d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80046d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	d801      	bhi.n	80046e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80046de:	2301      	movs	r3, #1
 80046e0:	e058      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80046e2:	edd7 7a00 	vldr	s15, [r7]
 80046e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80046ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f2:	d801      	bhi.n	80046f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e04d      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80046f8:	edd7 7a00 	vldr	s15, [r7]
 80046fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80047bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004708:	d801      	bhi.n	800470e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800470a:	2303      	movs	r3, #3
 800470c:	e042      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800470e:	edd7 7a00 	vldr	s15, [r7]
 8004712:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80047c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471e:	d801      	bhi.n	8004724 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004720:	2304      	movs	r3, #4
 8004722:	e037      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004724:	edd7 7a00 	vldr	s15, [r7]
 8004728:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80047c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800472c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	d801      	bhi.n	800473a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004736:	2305      	movs	r3, #5
 8004738:	e02c      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800473a:	edd7 7a00 	vldr	s15, [r7]
 800473e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80047c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	d801      	bhi.n	8004750 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800474c:	2306      	movs	r3, #6
 800474e:	e021      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004750:	edd7 7a00 	vldr	s15, [r7]
 8004754:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004760:	d801      	bhi.n	8004766 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004762:	2307      	movs	r3, #7
 8004764:	e016      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004766:	edd7 7a00 	vldr	s15, [r7]
 800476a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80047d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800476e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004776:	d801      	bhi.n	800477c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004778:	2308      	movs	r3, #8
 800477a:	e00b      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800477c:	edd7 7a00 	vldr	s15, [r7]
 8004780:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80047d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	d801      	bhi.n	8004792 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800478e:	2309      	movs	r3, #9
 8004790:	e000      	b.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004792:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004794:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	331c      	adds	r3, #28
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fa56 	bl	8004c50 <lsm6dsl_gy_data_rate_set>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e000      	b.n	80047b2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	42500000 	.word	0x42500000
 80047c0:	42d00000 	.word	0x42d00000
 80047c4:	43500000 	.word	0x43500000
 80047c8:	43d00000 	.word	0x43d00000
 80047cc:	44504000 	.word	0x44504000
 80047d0:	44cf8000 	.word	0x44cf8000
 80047d4:	45502000 	.word	0x45502000

080047d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80047e4:	edd7 7a00 	vldr	s15, [r7]
 80047e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80047ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f4:	d801      	bhi.n	80047fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e058      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80047fa:	edd7 7a00 	vldr	s15, [r7]
 80047fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	d801      	bhi.n	8004810 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800480c:	2302      	movs	r3, #2
 800480e:	e04d      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004810:	edd7 7a00 	vldr	s15, [r7]
 8004814:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80048c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004820:	d801      	bhi.n	8004826 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004822:	2303      	movs	r3, #3
 8004824:	e042      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004826:	edd7 7a00 	vldr	s15, [r7]
 800482a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80048c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800482e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d801      	bhi.n	800483c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004838:	2304      	movs	r3, #4
 800483a:	e037      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800483c:	edd7 7a00 	vldr	s15, [r7]
 8004840:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80048c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	d801      	bhi.n	8004852 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800484e:	2305      	movs	r3, #5
 8004850:	e02c      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004852:	edd7 7a00 	vldr	s15, [r7]
 8004856:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80048cc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800485a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004862:	d801      	bhi.n	8004868 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004864:	2306      	movs	r3, #6
 8004866:	e021      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004868:	edd7 7a00 	vldr	s15, [r7]
 800486c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004878:	d801      	bhi.n	800487e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800487a:	2307      	movs	r3, #7
 800487c:	e016      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800487e:	edd7 7a00 	vldr	s15, [r7]
 8004882:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80048d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	d801      	bhi.n	8004894 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004890:	2308      	movs	r3, #8
 8004892:	e00b      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004894:	edd7 7a00 	vldr	s15, [r7]
 8004898:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80048d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800489c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	d801      	bhi.n	80048aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80048a6:	2309      	movs	r3, #9
 80048a8:	e000      	b.n	80048ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048aa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	42500000 	.word	0x42500000
 80048c4:	42d00000 	.word	0x42d00000
 80048c8:	43500000 	.word	0x43500000
 80048cc:	43d00000 	.word	0x43d00000
 80048d0:	44504000 	.word	0x44504000
 80048d4:	44cf8000 	.word	0x44cf8000
 80048d8:	45502000 	.word	0x45502000

080048dc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	460b      	mov	r3, r1
 80048ea:	72fb      	strb	r3, [r7, #11]
 80048ec:	4613      	mov	r3, r2
 80048ee:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	695c      	ldr	r4, [r3, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	7b1b      	ldrb	r3, [r3, #12]
 80048fc:	b298      	uxth	r0, r3
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	b299      	uxth	r1, r3
 8004902:	893b      	ldrh	r3, [r7, #8]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	47a0      	blx	r4
 8004908:	4603      	mov	r3, r0
}
 800490a:	4618      	mov	r0, r3
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}

08004912 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004912:	b590      	push	{r4, r7, lr}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	460b      	mov	r3, r1
 8004920:	72fb      	strb	r3, [r7, #11]
 8004922:	4613      	mov	r3, r2
 8004924:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	691c      	ldr	r4, [r3, #16]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	7b1b      	ldrb	r3, [r3, #12]
 8004932:	b298      	uxth	r0, r3
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	b299      	uxth	r1, r3
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	47a0      	blx	r4
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}

08004948 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	460b      	mov	r3, r1
 8004956:	72fb      	strb	r3, [r7, #11]
 8004958:	4613      	mov	r3, r2
 800495a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685c      	ldr	r4, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6898      	ldr	r0, [r3, #8]
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	7af9      	ldrb	r1, [r7, #11]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	47a0      	blx	r4
 800496c:	6178      	str	r0, [r7, #20]
  return ret;
 800496e:	697b      	ldr	r3, [r7, #20]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}

08004978 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	461a      	mov	r2, r3
 8004984:	460b      	mov	r3, r1
 8004986:	72fb      	strb	r3, [r7, #11]
 8004988:	4613      	mov	r3, r2
 800498a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681c      	ldr	r4, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6898      	ldr	r0, [r3, #8]
 8004994:	893b      	ldrh	r3, [r7, #8]
 8004996:	7af9      	ldrb	r1, [r7, #11]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	47a0      	blx	r4
 800499c:	6178      	str	r0, [r7, #20]
  return ret;
 800499e:	697b      	ldr	r3, [r7, #20]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd90      	pop	{r4, r7, pc}

080049a8 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049b4:	f107 0208 	add.w	r2, r7, #8
 80049b8:	2301      	movs	r3, #1
 80049ba:	2110      	movs	r1, #16
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ffc3 	bl	8004948 <lsm6dsl_read_reg>
 80049c2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	7a3b      	ldrb	r3, [r7, #8]
 80049d4:	f362 0383 	bfi	r3, r2, #2, #2
 80049d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049da:	f107 0208 	add.w	r2, r7, #8
 80049de:	2301      	movs	r3, #1
 80049e0:	2110      	movs	r1, #16
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ffc8 	bl	8004978 <lsm6dsl_write_reg>
 80049e8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049fe:	f107 0208 	add.w	r2, r7, #8
 8004a02:	2301      	movs	r3, #1
 8004a04:	2110      	movs	r1, #16
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ff9e 	bl	8004948 <lsm6dsl_read_reg>
 8004a0c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8004a0e:	7a3b      	ldrb	r3, [r7, #8]
 8004a10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d81a      	bhi.n	8004a50 <lsm6dsl_xl_full_scale_get+0x5c>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a39 	.word	0x08004a39
 8004a28:	08004a41 	.word	0x08004a41
 8004a2c:	08004a49 	.word	0x08004a49
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
      break;
 8004a36:	e00f      	b.n	8004a58 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
      break;
 8004a3e:	e00b      	b.n	8004a58 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2202      	movs	r2, #2
 8004a44:	701a      	strb	r2, [r3, #0]
      break;
 8004a46:	e007      	b.n	8004a58 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	701a      	strb	r2, [r3, #0]
      break;
 8004a4e:	e003      	b.n	8004a58 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2204      	movs	r2, #4
 8004a54:	701a      	strb	r2, [r3, #0]
      break;
 8004a56:	bf00      	nop
  }

  return ret;
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop

08004a64 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004a70:	f107 0208 	add.w	r2, r7, #8
 8004a74:	2301      	movs	r3, #1
 8004a76:	2110      	movs	r1, #16
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff65 	bl	8004948 <lsm6dsl_read_reg>
 8004a7e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	7a3b      	ldrb	r3, [r7, #8]
 8004a90:	f362 1307 	bfi	r3, r2, #4, #4
 8004a94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004a96:	f107 0208 	add.w	r2, r7, #8
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ff6a 	bl	8004978 <lsm6dsl_write_reg>
 8004aa4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff40 	bl	8004948 <lsm6dsl_read_reg>
 8004ac8:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8004aca:	7a3b      	ldrb	r3, [r7, #8]
 8004acc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b0b      	cmp	r3, #11
 8004ad4:	d84a      	bhi.n	8004b6c <lsm6dsl_xl_data_rate_get+0xbc>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <lsm6dsl_xl_data_rate_get+0x2c>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b0d 	.word	0x08004b0d
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b1d 	.word	0x08004b1d
 8004ae8:	08004b25 	.word	0x08004b25
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b35 	.word	0x08004b35
 8004af4:	08004b3d 	.word	0x08004b3d
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b55 	.word	0x08004b55
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b65 	.word	0x08004b65
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
      break;
 8004b12:	e02f      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	e02b      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	701a      	strb	r2, [r3, #0]
      break;
 8004b22:	e027      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2203      	movs	r2, #3
 8004b28:	701a      	strb	r2, [r3, #0]
      break;
 8004b2a:	e023      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	701a      	strb	r2, [r3, #0]
      break;
 8004b32:	e01f      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2205      	movs	r2, #5
 8004b38:	701a      	strb	r2, [r3, #0]
      break;
 8004b3a:	e01b      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2206      	movs	r2, #6
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	e017      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2207      	movs	r2, #7
 8004b48:	701a      	strb	r2, [r3, #0]
      break;
 8004b4a:	e013      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	701a      	strb	r2, [r3, #0]
      break;
 8004b52:	e00f      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2209      	movs	r2, #9
 8004b58:	701a      	strb	r2, [r3, #0]
      break;
 8004b5a:	e00b      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	220a      	movs	r2, #10
 8004b60:	701a      	strb	r2, [r3, #0]
      break;
 8004b62:	e007      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	220b      	movs	r2, #11
 8004b68:	701a      	strb	r2, [r3, #0]
      break;
 8004b6a:	e003      	b.n	8004b74 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	220c      	movs	r2, #12
 8004b70:	701a      	strb	r2, [r3, #0]
      break;
 8004b72:	bf00      	nop
  }

  return ret;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop

08004b80 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004b8c:	f107 0208 	add.w	r2, r7, #8
 8004b90:	2301      	movs	r3, #1
 8004b92:	2111      	movs	r1, #17
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fed7 	bl	8004948 <lsm6dsl_read_reg>
 8004b9a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	7a3b      	ldrb	r3, [r7, #8]
 8004bac:	f362 0343 	bfi	r3, r2, #1, #3
 8004bb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bb2:	f107 0208 	add.w	r2, r7, #8
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	2111      	movs	r1, #17
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fedc 	bl	8004978 <lsm6dsl_write_reg>
 8004bc0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bd6:	f107 0208 	add.w	r2, r7, #8
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2111      	movs	r1, #17
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff feb2 	bl	8004948 <lsm6dsl_read_reg>
 8004be4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8004be6:	7a3b      	ldrb	r3, [r7, #8]
 8004be8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d824      	bhi.n	8004c3c <lsm6dsl_gy_full_scale_get+0x70>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c15 	.word	0x08004c15
 8004bfc:	08004c1d 	.word	0x08004c1d
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c35 	.word	0x08004c35
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e013      	b.n	8004c44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	e00f      	b.n	8004c44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e00b      	b.n	8004c44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2204      	movs	r2, #4
 8004c30:	701a      	strb	r2, [r3, #0]
      break;
 8004c32:	e007      	b.n	8004c44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2206      	movs	r2, #6
 8004c38:	701a      	strb	r2, [r3, #0]
      break;
 8004c3a:	e003      	b.n	8004c44 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2207      	movs	r2, #7
 8004c40:	701a      	strb	r2, [r3, #0]
      break;
 8004c42:	bf00      	nop
  }

  return ret;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop

08004c50 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004c5c:	f107 0208 	add.w	r2, r7, #8
 8004c60:	2301      	movs	r3, #1
 8004c62:	2111      	movs	r1, #17
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fe6f 	bl	8004948 <lsm6dsl_read_reg>
 8004c6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	7a3b      	ldrb	r3, [r7, #8]
 8004c7c:	f362 1307 	bfi	r3, r2, #4, #4
 8004c80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004c82:	f107 0208 	add.w	r2, r7, #8
 8004c86:	2301      	movs	r3, #1
 8004c88:	2111      	movs	r1, #17
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fe74 	bl	8004978 <lsm6dsl_write_reg>
 8004c90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ca6:	f107 0208 	add.w	r2, r7, #8
 8004caa:	2301      	movs	r3, #1
 8004cac:	2111      	movs	r1, #17
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fe4a 	bl	8004948 <lsm6dsl_read_reg>
 8004cb4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8004cb6:	7a3b      	ldrb	r3, [r7, #8]
 8004cb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b0a      	cmp	r3, #10
 8004cc0:	d844      	bhi.n	8004d4c <lsm6dsl_gy_data_rate_get+0xb0>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004cfd 	.word	0x08004cfd
 8004cd0:	08004d05 	.word	0x08004d05
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d1d 	.word	0x08004d1d
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d2d 	.word	0x08004d2d
 8004ce8:	08004d35 	.word	0x08004d35
 8004cec:	08004d3d 	.word	0x08004d3d
 8004cf0:	08004d45 	.word	0x08004d45
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e02b      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e027      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e023      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	701a      	strb	r2, [r3, #0]
      break;
 8004d12:	e01f      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2204      	movs	r2, #4
 8004d18:	701a      	strb	r2, [r3, #0]
      break;
 8004d1a:	e01b      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2205      	movs	r2, #5
 8004d20:	701a      	strb	r2, [r3, #0]
      break;
 8004d22:	e017      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2206      	movs	r2, #6
 8004d28:	701a      	strb	r2, [r3, #0]
      break;
 8004d2a:	e013      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2207      	movs	r2, #7
 8004d30:	701a      	strb	r2, [r3, #0]
      break;
 8004d32:	e00f      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2208      	movs	r2, #8
 8004d38:	701a      	strb	r2, [r3, #0]
      break;
 8004d3a:	e00b      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2209      	movs	r2, #9
 8004d40:	701a      	strb	r2, [r3, #0]
      break;
 8004d42:	e007      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	220a      	movs	r2, #10
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e003      	b.n	8004d54 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	220b      	movs	r2, #11
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	bf00      	nop
  }

  return ret;
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d6c:	f107 0208 	add.w	r2, r7, #8
 8004d70:	2301      	movs	r3, #1
 8004d72:	2112      	movs	r1, #18
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fde7 	bl	8004948 <lsm6dsl_read_reg>
 8004d7a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	7a3b      	ldrb	r3, [r7, #8]
 8004d8c:	f362 1386 	bfi	r3, r2, #6, #1
 8004d90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d92:	f107 0208 	add.w	r2, r7, #8
 8004d96:	2301      	movs	r3, #1
 8004d98:	2112      	movs	r1, #18
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fdec 	bl	8004978 <lsm6dsl_write_reg>
 8004da0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004db6:	2306      	movs	r3, #6
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	2122      	movs	r1, #34	; 0x22
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fdc3 	bl	8004948 <lsm6dsl_read_reg>
 8004dc2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004dd8:	2306      	movs	r3, #6
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	2128      	movs	r1, #40	; 0x28
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fdb2 	bl	8004948 <lsm6dsl_read_reg>
 8004de4:	60f8      	str	r0, [r7, #12]
  return ret;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	210f      	movs	r1, #15
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fda1 	bl	8004948 <lsm6dsl_read_reg>
 8004e06:	60f8      	str	r0, [r7, #12]
  return ret;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e1e:	f107 0208 	add.w	r2, r7, #8
 8004e22:	2301      	movs	r3, #1
 8004e24:	2112      	movs	r1, #18
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fd8e 	bl	8004948 <lsm6dsl_read_reg>
 8004e2c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	7a3b      	ldrb	r3, [r7, #8]
 8004e3e:	f362 0382 	bfi	r3, r2, #2, #1
 8004e42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e44:	f107 0208 	add.w	r2, r7, #8
 8004e48:	2301      	movs	r3, #1
 8004e4a:	2112      	movs	r1, #18
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fd93 	bl	8004978 <lsm6dsl_write_reg>
 8004e52:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e54:	68fb      	ldr	r3, [r7, #12]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004e6a:	f107 0208 	add.w	r2, r7, #8
 8004e6e:	2301      	movs	r3, #1
 8004e70:	210a      	movs	r1, #10
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fd68 	bl	8004948 <lsm6dsl_read_reg>
 8004e78:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	7a3b      	ldrb	r3, [r7, #8]
 8004e8a:	f362 0302 	bfi	r3, r2, #0, #3
 8004e8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	2301      	movs	r3, #1
 8004e96:	210a      	movs	r1, #10
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff fd6d 	bl	8004978 <lsm6dsl_write_reg>
 8004e9e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	; 0x38
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d036      	beq.n	8004f36 <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d302      	bcc.n	8004ed2 <IKS01A2_MOTION_SENSOR_Init+0x26>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d064      	beq.n	8004f9a <IKS01A2_MOTION_SENSOR_Init+0xee>
 8004ed0:	e095      	b.n	8004ffe <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004ed2:	6838      	ldr	r0, [r7, #0]
 8004ed4:	f000 f966 	bl	80051a4 <LSM6DSL_0_Probe>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e0cc      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004ee4:	4a68      	ldr	r2, [pc, #416]	; (8005088 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	4967      	ldr	r1, [pc, #412]	; (800508c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ef6:	f107 010c 	add.w	r1, r7, #12
 8004efa:	4610      	mov	r0, r2
 8004efc:	4798      	blx	r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f04:	f06f 0306 	mvn.w	r3, #6
 8004f08:	e0b9      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004f0a:	7b3b      	ldrb	r3, [r7, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d103      	bne.n	8004f18 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	f043 0302 	orr.w	r3, r3, #2
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004f18:	7b7b      	ldrb	r3, [r7, #13]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d103      	bne.n	8004f26 <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d16c      	bne.n	8005006 <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004f34:	e067      	b.n	8005006 <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f000 f9f0 	bl	800531c <LSM303AGR_ACC_0_Probe>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	e09a      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004f48:	4a4f      	ldr	r2, [pc, #316]	; (8005088 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	494e      	ldr	r1, [pc, #312]	; (800508c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f5a:	f107 010c 	add.w	r1, r7, #12
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4798      	blx	r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f68:	f06f 0306 	mvn.w	r3, #6
 8004f6c:	e087      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004f6e:	7b3b      	ldrb	r3, [r7, #12]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d103      	bne.n	8004f7c <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004f7c:	7b7b      	ldrb	r3, [r7, #13]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d103      	bne.n	8004f8a <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d13c      	bne.n	800500a <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	f043 0304 	orr.w	r3, r3, #4
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004f98:	e037      	b.n	800500a <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f000 fa62 	bl	8005464 <LSM303AGR_MAG_0_Probe>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	e068      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004fac:	4a36      	ldr	r2, [pc, #216]	; (8005088 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4935      	ldr	r1, [pc, #212]	; (800508c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fbe:	f107 010c 	add.w	r1, r7, #12
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4798      	blx	r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004fcc:	f06f 0306 	mvn.w	r3, #6
 8004fd0:	e055      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004fd2:	7b3b      	ldrb	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d103      	bne.n	8004fe0 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004fe0:	7b7b      	ldrb	r3, [r7, #13]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d103      	bne.n	8004fee <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004fee:	7bbb      	ldrb	r3, [r7, #14]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10c      	bne.n	800500e <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004ffc:	e007      	b.n	800500e <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004ffe:	f06f 0301 	mvn.w	r3, #1
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005004:	e004      	b.n	8005010 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800500e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	e031      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501e:	e02a      	b.n	8005076 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	4013      	ands	r3, r2
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	429a      	cmp	r2, r3
 800502a:	d11e      	bne.n	800506a <IKS01A2_MOTION_SENSOR_Init+0x1be>
 800502c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	4013      	ands	r3, r2
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	429a      	cmp	r2, r3
 8005036:	d118      	bne.n	800506a <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005038:	4a15      	ldr	r2, [pc, #84]	; (8005090 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005040:	4814      	ldr	r0, [pc, #80]	; (8005094 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	440b      	add	r3, r1
 800504c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	490e      	ldr	r1, [pc, #56]	; (800508c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800505a:	4610      	mov	r0, r2
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005064:	f06f 0304 	mvn.w	r3, #4
 8005068:	e009      	b.n	800507e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	3301      	adds	r3, #1
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	2b02      	cmp	r3, #2
 800507a:	d9d1      	bls.n	8005020 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800507e:	4618      	mov	r0, r3
 8005080:	3738      	adds	r7, #56	; 0x38
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	2000038c 	.word	0x2000038c
 800508c:	200006d0 	.word	0x200006d0
 8005090:	20000140 	.word	0x20000140
 8005094:	20000368 	.word	0x20000368

08005098 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d903      	bls.n	80050b0 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050a8:	f06f 0301 	mvn.w	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e028      	b.n	8005102 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80050b0:	4a16      	ldr	r2, [pc, #88]	; (800510c <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4013      	ands	r3, r2
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d11c      	bne.n	80050fc <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050ca:	4812      	ldr	r0, [pc, #72]	; (8005114 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	440b      	add	r3, r1
 80050d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	490e      	ldr	r1, [pc, #56]	; (8005118 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050ee:	f06f 0304 	mvn.w	r3, #4
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e005      	b.n	8005102 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e002      	b.n	8005102 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80050fc:	f06f 0301 	mvn.w	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000398 	.word	0x20000398
 8005110:	20000140 	.word	0x20000140
 8005114:	20000368 	.word	0x20000368
 8005118:	200006d0 	.word	0x200006d0

0800511c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d903      	bls.n	8005136 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800512e:	f06f 0301 	mvn.w	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e029      	b.n	800518a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005136:	4a17      	ldr	r2, [pc, #92]	; (8005194 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d11d      	bne.n	8005184 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005148:	4a13      	ldr	r2, [pc, #76]	; (8005198 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005150:	4812      	ldr	r0, [pc, #72]	; (800519c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4413      	add	r3, r2
 800515a:	440b      	add	r3, r1
 800515c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	490f      	ldr	r1, [pc, #60]	; (80051a0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005176:	f06f 0304 	mvn.w	r3, #4
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e005      	b.n	800518a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e002      	b.n	800518a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005184:	f06f 0301 	mvn.w	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000398 	.word	0x20000398
 8005198:	20000140 	.word	0x20000140
 800519c:	20000368 	.word	0x20000368
 80051a0:	200006d0 	.word	0x200006d0

080051a4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b092      	sub	sp, #72	; 0x48
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80051b0:	2300      	movs	r3, #0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80051b4:	23d7      	movs	r3, #215	; 0xd7
 80051b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80051ba:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <LSM6DSL_0_Probe+0x140>)
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <LSM6DSL_0_Probe+0x144>)
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80051c2:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <LSM6DSL_0_Probe+0x148>)
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <LSM6DSL_0_Probe+0x14c>)
 80051c8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <LSM6DSL_0_Probe+0x150>)
 80051cc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80051ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051d2:	4619      	mov	r1, r3
 80051d4:	4848      	ldr	r0, [pc, #288]	; (80052f8 <LSM6DSL_0_Probe+0x154>)
 80051d6:	f7fe fbc7 	bl	8003968 <LSM6DSL_RegisterBusIO>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051e0:	f06f 0306 	mvn.w	r3, #6
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
 80051e6:	e077      	b.n	80052d8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 80051e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80051ec:	4619      	mov	r1, r3
 80051ee:	4842      	ldr	r0, [pc, #264]	; (80052f8 <LSM6DSL_0_Probe+0x154>)
 80051f0:	f7fe fcb0 	bl	8003b54 <LSM6DSL_ReadID>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051fa:	f06f 0306 	mvn.w	r3, #6
 80051fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005200:	e06a      	b.n	80052d8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005206:	2b6a      	cmp	r3, #106	; 0x6a
 8005208:	d003      	beq.n	8005212 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800520a:	f06f 0306 	mvn.w	r3, #6
 800520e:	647b      	str	r3, [r7, #68]	; 0x44
 8005210:	e062      	b.n	80052d8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4619      	mov	r1, r3
 8005218:	4837      	ldr	r0, [pc, #220]	; (80052f8 <LSM6DSL_0_Probe+0x154>)
 800521a:	f7fe fcb1 	bl	8003b80 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800521e:	7a7b      	ldrb	r3, [r7, #9]
 8005220:	461a      	mov	r2, r3
 8005222:	7a3b      	ldrb	r3, [r7, #8]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	431a      	orrs	r2, r3
 8005228:	7abb      	ldrb	r3, [r7, #10]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4313      	orrs	r3, r2
 800522e:	4a33      	ldr	r2, [pc, #204]	; (80052fc <LSM6DSL_0_Probe+0x158>)
 8005230:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005232:	4b33      	ldr	r3, [pc, #204]	; (8005300 <LSM6DSL_0_Probe+0x15c>)
 8005234:	4a30      	ldr	r2, [pc, #192]	; (80052f8 <LSM6DSL_0_Probe+0x154>)
 8005236:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005238:	4b32      	ldr	r3, [pc, #200]	; (8005304 <LSM6DSL_0_Probe+0x160>)
 800523a:	4a33      	ldr	r2, [pc, #204]	; (8005308 <LSM6DSL_0_Probe+0x164>)
 800523c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11d      	bne.n	8005280 <LSM6DSL_0_Probe+0xdc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <LSM6DSL_0_Probe+0xdc>
 800524e:	7a7b      	ldrb	r3, [r7, #9]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d115      	bne.n	8005280 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005254:	4b2d      	ldr	r3, [pc, #180]	; (800530c <LSM6DSL_0_Probe+0x168>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a2d      	ldr	r2, [pc, #180]	; (8005310 <LSM6DSL_0_Probe+0x16c>)
 800525a:	492e      	ldr	r1, [pc, #184]	; (8005314 <LSM6DSL_0_Probe+0x170>)
 800525c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <LSM6DSL_0_Probe+0x160>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a26      	ldr	r2, [pc, #152]	; (8005300 <LSM6DSL_0_Probe+0x15c>)
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	4610      	mov	r0, r2
 800526c:	4798      	blx	r3
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005274:	f06f 0304 	mvn.w	r3, #4
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
 800527a:	e001      	b.n	8005280 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <LSM6DSL_0_Probe+0x11e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <LSM6DSL_0_Probe+0x11e>
 8005290:	7a3b      	ldrb	r3, [r7, #8]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d115      	bne.n	80052c2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <LSM6DSL_0_Probe+0x168>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <LSM6DSL_0_Probe+0x16c>)
 800529c:	491e      	ldr	r1, [pc, #120]	; (8005318 <LSM6DSL_0_Probe+0x174>)
 800529e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <LSM6DSL_0_Probe+0x160>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <LSM6DSL_0_Probe+0x15c>)
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052b6:	f06f 0304 	mvn.w	r3, #4
 80052ba:	647b      	str	r3, [r7, #68]	; 0x44
 80052bc:	e001      	b.n	80052c2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <LSM6DSL_0_Probe+0x134>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052d2:	f06f 0304 	mvn.w	r3, #4
 80052d6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80052d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3748      	adds	r7, #72	; 0x48
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	08001df1 	.word	0x08001df1
 80052e8:	08001e6d 	.word	0x08001e6d
 80052ec:	08001f21 	.word	0x08001f21
 80052f0:	08001ebd 	.word	0x08001ebd
 80052f4:	08001f85 	.word	0x08001f85
 80052f8:	200003a4 	.word	0x200003a4
 80052fc:	20000398 	.word	0x20000398
 8005300:	200006d0 	.word	0x200006d0
 8005304:	2000038c 	.word	0x2000038c
 8005308:	200000e8 	.word	0x200000e8
 800530c:	20000140 	.word	0x20000140
 8005310:	20000368 	.word	0x20000368
 8005314:	2000011c 	.word	0x2000011c
 8005318:	200000f8 	.word	0x200000f8

0800531c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b092      	sub	sp, #72	; 0x48
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005324:	2300      	movs	r3, #0
 8005326:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005328:	2300      	movs	r3, #0
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800532c:	2333      	movs	r3, #51	; 0x33
 800532e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005332:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <LSM303AGR_ACC_0_Probe+0x114>)
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005336:	4b3f      	ldr	r3, [pc, #252]	; (8005434 <LSM303AGR_ACC_0_Probe+0x118>)
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <LSM303AGR_ACC_0_Probe+0x11c>)
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <LSM303AGR_ACC_0_Probe+0x120>)
 8005340:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <LSM303AGR_ACC_0_Probe+0x124>)
 8005344:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800534a:	4619      	mov	r1, r3
 800534c:	483d      	ldr	r0, [pc, #244]	; (8005444 <LSM303AGR_ACC_0_Probe+0x128>)
 800534e:	f7fc ffcb 	bl	80022e8 <LSM303AGR_ACC_RegisterBusIO>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005358:	f06f 0306 	mvn.w	r3, #6
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
 800535e:	e062      	b.n	8005426 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005360:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005364:	4619      	mov	r1, r3
 8005366:	4837      	ldr	r0, [pc, #220]	; (8005444 <LSM303AGR_ACC_0_Probe+0x128>)
 8005368:	f7fd f87f 	bl	800246a <LSM303AGR_ACC_ReadID>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005372:	f06f 0306 	mvn.w	r3, #6
 8005376:	647b      	str	r3, [r7, #68]	; 0x44
 8005378:	e055      	b.n	8005426 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800537a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800537e:	2b33      	cmp	r3, #51	; 0x33
 8005380:	d003      	beq.n	800538a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005382:	f06f 0306 	mvn.w	r3, #6
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
 8005388:	e04d      	b.n	8005426 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4619      	mov	r1, r3
 8005390:	482c      	ldr	r0, [pc, #176]	; (8005444 <LSM303AGR_ACC_0_Probe+0x128>)
 8005392:	f7fd f881 	bl	8002498 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005396:	7a7b      	ldrb	r3, [r7, #9]
 8005398:	461a      	mov	r2, r3
 800539a:	7a3b      	ldrb	r3, [r7, #8]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80053a0:	7abb      	ldrb	r3, [r7, #10]
 80053a2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80053a4:	4313      	orrs	r3, r2
 80053a6:	4a28      	ldr	r2, [pc, #160]	; (8005448 <LSM303AGR_ACC_0_Probe+0x12c>)
 80053a8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80053aa:	4b28      	ldr	r3, [pc, #160]	; (800544c <LSM303AGR_ACC_0_Probe+0x130>)
 80053ac:	4a25      	ldr	r2, [pc, #148]	; (8005444 <LSM303AGR_ACC_0_Probe+0x128>)
 80053ae:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <LSM303AGR_ACC_0_Probe+0x134>)
 80053b2:	4a28      	ldr	r2, [pc, #160]	; (8005454 <LSM303AGR_ACC_0_Probe+0x138>)
 80053b4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11e      	bne.n	80053fa <LSM303AGR_ACC_0_Probe+0xde>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d019      	beq.n	80053fa <LSM303AGR_ACC_0_Probe+0xde>
 80053c6:	7a3b      	ldrb	r3, [r7, #8]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d116      	bne.n	80053fa <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <LSM303AGR_ACC_0_Probe+0x13c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <LSM303AGR_ACC_0_Probe+0x140>)
 80053d2:	3303      	adds	r3, #3
 80053d4:	4922      	ldr	r1, [pc, #136]	; (8005460 <LSM303AGR_ACC_0_Probe+0x144>)
 80053d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <LSM303AGR_ACC_0_Probe+0x134>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	; (800544c <LSM303AGR_ACC_0_Probe+0x130>)
 80053e2:	6852      	ldr	r2, [r2, #4]
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ee:	f06f 0304 	mvn.w	r3, #4
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
 80053f4:	e001      	b.n	80053fa <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <LSM303AGR_ACC_0_Probe+0xf4>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800540a:	f06f 0304 	mvn.w	r3, #4
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <LSM303AGR_ACC_0_Probe+0x10a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005420:	f06f 0304 	mvn.w	r3, #4
 8005424:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005428:	4618      	mov	r0, r3
 800542a:	3748      	adds	r7, #72	; 0x48
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08001df1 	.word	0x08001df1
 8005434:	08001e6d 	.word	0x08001e6d
 8005438:	08001f21 	.word	0x08001f21
 800543c:	08001ebd 	.word	0x08001ebd
 8005440:	08001f85 	.word	0x08001f85
 8005444:	200003d4 	.word	0x200003d4
 8005448:	20000398 	.word	0x20000398
 800544c:	200006d0 	.word	0x200006d0
 8005450:	2000038c 	.word	0x2000038c
 8005454:	20000080 	.word	0x20000080
 8005458:	20000140 	.word	0x20000140
 800545c:	20000368 	.word	0x20000368
 8005460:	20000090 	.word	0x20000090

08005464 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b092      	sub	sp, #72	; 0x48
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800546c:	2300      	movs	r3, #0
 800546e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005470:	2300      	movs	r3, #0
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005474:	233d      	movs	r3, #61	; 0x3d
 8005476:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800547a:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <LSM303AGR_MAG_0_Probe+0x114>)
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800547e:	4b3f      	ldr	r3, [pc, #252]	; (800557c <LSM303AGR_MAG_0_Probe+0x118>)
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005482:	4b3f      	ldr	r3, [pc, #252]	; (8005580 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005486:	4b3f      	ldr	r3, [pc, #252]	; (8005584 <LSM303AGR_MAG_0_Probe+0x120>)
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800548a:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <LSM303AGR_MAG_0_Probe+0x124>)
 800548c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800548e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005492:	4619      	mov	r1, r3
 8005494:	483d      	ldr	r0, [pc, #244]	; (800558c <LSM303AGR_MAG_0_Probe+0x128>)
 8005496:	f7fd faeb 	bl	8002a70 <LSM303AGR_MAG_RegisterBusIO>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054a0:	f06f 0306 	mvn.w	r3, #6
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	e062      	b.n	800556e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80054a8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80054ac:	4619      	mov	r1, r3
 80054ae:	4837      	ldr	r0, [pc, #220]	; (800558c <LSM303AGR_MAG_0_Probe+0x128>)
 80054b0:	f7fd fb95 	bl	8002bde <LSM303AGR_MAG_ReadID>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054ba:	f06f 0306 	mvn.w	r3, #6
 80054be:	647b      	str	r3, [r7, #68]	; 0x44
 80054c0:	e055      	b.n	800556e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d003      	beq.n	80054d2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054ca:	f06f 0306 	mvn.w	r3, #6
 80054ce:	647b      	str	r3, [r7, #68]	; 0x44
 80054d0:	e04d      	b.n	800556e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	4619      	mov	r1, r3
 80054d8:	482c      	ldr	r0, [pc, #176]	; (800558c <LSM303AGR_MAG_0_Probe+0x128>)
 80054da:	f7fd fb97 	bl	8002c0c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80054de:	7a7b      	ldrb	r3, [r7, #9]
 80054e0:	461a      	mov	r2, r3
 80054e2:	7a3b      	ldrb	r3, [r7, #8]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80054e8:	7abb      	ldrb	r3, [r7, #10]
 80054ea:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80054ec:	4313      	orrs	r3, r2
 80054ee:	4a28      	ldr	r2, [pc, #160]	; (8005590 <LSM303AGR_MAG_0_Probe+0x12c>)
 80054f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <LSM303AGR_MAG_0_Probe+0x130>)
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <LSM303AGR_MAG_0_Probe+0x128>)
 80054f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80054f8:	4b27      	ldr	r3, [pc, #156]	; (8005598 <LSM303AGR_MAG_0_Probe+0x134>)
 80054fa:	4a28      	ldr	r2, [pc, #160]	; (800559c <LSM303AGR_MAG_0_Probe+0x138>)
 80054fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80054fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11e      	bne.n	8005542 <LSM303AGR_MAG_0_Probe+0xde>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d019      	beq.n	8005542 <LSM303AGR_MAG_0_Probe+0xde>
 800550e:	7abb      	ldrb	r3, [r7, #10]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d116      	bne.n	8005542 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005514:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	4a22      	ldr	r2, [pc, #136]	; (80055a4 <LSM303AGR_MAG_0_Probe+0x140>)
 800551a:	3306      	adds	r3, #6
 800551c:	4922      	ldr	r1, [pc, #136]	; (80055a8 <LSM303AGR_MAG_0_Probe+0x144>)
 800551e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005522:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <LSM303AGR_MAG_0_Probe+0x134>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <LSM303AGR_MAG_0_Probe+0x130>)
 800552a:	6892      	ldr	r2, [r2, #8]
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005536:	f06f 0304 	mvn.w	r3, #4
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	e001      	b.n	8005542 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800553e:	2300      	movs	r3, #0
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <LSM303AGR_MAG_0_Probe+0xf4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005552:	f06f 0304 	mvn.w	r3, #4
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <LSM303AGR_MAG_0_Probe+0x10a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005568:	f06f 0304 	mvn.w	r3, #4
 800556c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005570:	4618      	mov	r0, r3
 8005572:	3748      	adds	r7, #72	; 0x48
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	08001df1 	.word	0x08001df1
 800557c:	08001e6d 	.word	0x08001e6d
 8005580:	08001f21 	.word	0x08001f21
 8005584:	08001ebd 	.word	0x08001ebd
 8005588:	08001f85 	.word	0x08001f85
 800558c:	20000400 	.word	0x20000400
 8005590:	20000398 	.word	0x20000398
 8005594:	200006d0 	.word	0x200006d0
 8005598:	2000038c 	.word	0x2000038c
 800559c:	200000b4 	.word	0x200000b4
 80055a0:	20000140 	.word	0x20000140
 80055a4:	20000368 	.word	0x20000368
 80055a8:	200000c4 	.word	0x200000c4

080055ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_Init+0x3c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <HAL_Init+0x3c>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055c2:	2003      	movs	r0, #3
 80055c4:	f000 f9a4 	bl	8005910 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055c8:	2000      	movs	r0, #0
 80055ca:	f000 f80f 	bl	80055ec <HAL_InitTick>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	71fb      	strb	r3, [r7, #7]
 80055d8:	e001      	b.n	80055de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055da:	f7fc facc 	bl	8001b76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80055de:	79fb      	ldrb	r3, [r7, #7]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	58004000 	.word	0x58004000

080055ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80055f8:	4b17      	ldr	r3, [pc, #92]	; (8005658 <HAL_InitTick+0x6c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d023      	beq.n	8005648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8005600:	f002 fb76 	bl	8007cf0 <HAL_RCC_GetHCLKFreq>
 8005604:	4601      	mov	r1, r0
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_InitTick+0x6c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	fbb1 f3f3 	udiv	r3, r1, r3
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f9bb 	bl	8005992 <HAL_SYSTICK_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10f      	bne.n	8005642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d809      	bhi.n	800563c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005628:	2200      	movs	r2, #0
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	f000 f979 	bl	8005926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005634:	4a09      	ldr	r2, [pc, #36]	; (800565c <HAL_InitTick+0x70>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e007      	b.n	800564c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	e004      	b.n	800564c <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
 8005646:	e001      	b.n	800564c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000158 	.word	0x20000158
 800565c:	20000154 	.word	0x20000154

08005660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_IncTick+0x1c>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_IncTick+0x20>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4413      	add	r3, r2
 800566e:	4a03      	ldr	r2, [pc, #12]	; (800567c <HAL_IncTick+0x1c>)
 8005670:	6013      	str	r3, [r2, #0]
}
 8005672:	bf00      	nop
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	200006dc 	.word	0x200006dc
 8005680:	20000158 	.word	0x20000158

08005684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return uwTick;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_GetTick+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200006dc 	.word	0x200006dc

0800569c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_GetTickPrio+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000154 	.word	0x20000154

080056b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <__NVIC_SetPriorityGrouping+0x44>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056d0:	4013      	ands	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056e6:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <__NVIC_SetPriorityGrouping+0x44>)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	60d3      	str	r3, [r2, #12]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	e000ed00 	.word	0xe000ed00

080056fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <__NVIC_GetPriorityGrouping+0x18>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	f003 0307 	and.w	r3, r3, #7
}
 800570a:	4618      	mov	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	2b00      	cmp	r3, #0
 8005728:	db0b      	blt.n	8005742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	f003 021f 	and.w	r2, r3, #31
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <__NVIC_EnableIRQ+0x38>)
 8005732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	2001      	movs	r0, #1
 800573a:	fa00 f202 	lsl.w	r2, r0, r2
 800573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	e000e100 	.word	0xe000e100

08005754 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db10      	blt.n	8005788 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	f003 021f 	and.w	r2, r3, #31
 800576c:	4909      	ldr	r1, [pc, #36]	; (8005794 <__NVIC_DisableIRQ+0x40>)
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2001      	movs	r0, #1
 8005776:	fa00 f202 	lsl.w	r2, r0, r2
 800577a:	3320      	adds	r3, #32
 800577c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005784:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000e100 	.word	0xe000e100

08005798 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db0c      	blt.n	80057c4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	f003 021f 	and.w	r2, r3, #31
 80057b0:	4907      	ldr	r1, [pc, #28]	; (80057d0 <__NVIC_SetPendingIRQ+0x38>)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2001      	movs	r0, #1
 80057ba:	fa00 f202 	lsl.w	r2, r0, r2
 80057be:	3340      	adds	r3, #64	; 0x40
 80057c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000e100 	.word	0xe000e100

080057d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db0c      	blt.n	8005800 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	4907      	ldr	r1, [pc, #28]	; (800580c <__NVIC_ClearPendingIRQ+0x38>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2001      	movs	r0, #1
 80057f6:	fa00 f202 	lsl.w	r2, r0, r2
 80057fa:	3360      	adds	r3, #96	; 0x60
 80057fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	; (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
         );
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058dc:	d301      	bcc.n	80058e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058de:	2301      	movs	r3, #1
 80058e0:	e00f      	b.n	8005902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <SysTick_Config+0x40>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ea:	210f      	movs	r1, #15
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f7ff ff8e 	bl	8005810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <SysTick_Config+0x40>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fa:	4b04      	ldr	r3, [pc, #16]	; (800590c <SysTick_Config+0x40>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010

08005910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fecb 	bl	80056b4 <__NVIC_SetPriorityGrouping>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b086      	sub	sp, #24
 800592a:	af00      	add	r7, sp, #0
 800592c:	4603      	mov	r3, r0
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005934:	f7ff fee2 	bl	80056fc <__NVIC_GetPriorityGrouping>
 8005938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ff90 	bl	8005864 <NVIC_EncodePriority>
 8005944:	4602      	mov	r2, r0
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff5f 	bl	8005810 <__NVIC_SetPriority>
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	4603      	mov	r3, r0
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fed5 	bl	8005718 <__NVIC_EnableIRQ>
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	4603      	mov	r3, r0
 800597e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fee5 	bl	8005754 <__NVIC_DisableIRQ>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff96 	bl	80058cc <SysTick_Config>
 80059a0:	4603      	mov	r3, r0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	4603      	mov	r3, r0
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80059b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff feed 	bl	8005798 <__NVIC_SetPendingIRQ>
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	4603      	mov	r3, r0
 80059ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80059d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fefd 	bl	80057d4 <__NVIC_ClearPendingIRQ>
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d005      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2204      	movs	r2, #4
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	e047      	b.n	8005a96 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 020e 	bic.w	r2, r2, #14
 8005a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f003 021c 	and.w	r2, r3, #28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
    }
  }
  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005aae:	e14c      	b.n	8005d4a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 813e 	beq.w	8005d44 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d003      	beq.n	8005ad8 <HAL_GPIO_Init+0x38>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b12      	cmp	r3, #18
 8005ad6:	d123      	bne.n	8005b20 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	08da      	lsrs	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3208      	adds	r2, #8
 8005ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	220f      	movs	r2, #15
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	08da      	lsrs	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3208      	adds	r2, #8
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4013      	ands	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 0203 	and.w	r2, r3, #3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d00b      	beq.n	8005b74 <HAL_GPIO_Init+0xd4>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d007      	beq.n	8005b74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b68:	2b11      	cmp	r3, #17
 8005b6a:	d003      	beq.n	8005b74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b12      	cmp	r3, #18
 8005b72:	d130      	bne.n	8005bd6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	2203      	movs	r2, #3
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005baa:	2201      	movs	r2, #1
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0201 	and.w	r2, r3, #1
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	2203      	movs	r2, #3
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8098 	beq.w	8005d44 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005c14:	4a54      	ldr	r2, [pc, #336]	; (8005d68 <HAL_GPIO_Init+0x2c8>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	220f      	movs	r2, #15
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4013      	ands	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c3e:	d019      	beq.n	8005c74 <HAL_GPIO_Init+0x1d4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a4a      	ldr	r2, [pc, #296]	; (8005d6c <HAL_GPIO_Init+0x2cc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_GPIO_Init+0x1d0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a49      	ldr	r2, [pc, #292]	; (8005d70 <HAL_GPIO_Init+0x2d0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00d      	beq.n	8005c6c <HAL_GPIO_Init+0x1cc>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a48      	ldr	r2, [pc, #288]	; (8005d74 <HAL_GPIO_Init+0x2d4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <HAL_GPIO_Init+0x1c8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a47      	ldr	r2, [pc, #284]	; (8005d78 <HAL_GPIO_Init+0x2d8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d101      	bne.n	8005c64 <HAL_GPIO_Init+0x1c4>
 8005c60:	2304      	movs	r3, #4
 8005c62:	e008      	b.n	8005c76 <HAL_GPIO_Init+0x1d6>
 8005c64:	2307      	movs	r3, #7
 8005c66:	e006      	b.n	8005c76 <HAL_GPIO_Init+0x1d6>
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e004      	b.n	8005c76 <HAL_GPIO_Init+0x1d6>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e002      	b.n	8005c76 <HAL_GPIO_Init+0x1d6>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_GPIO_Init+0x1d6>
 8005c74:	2300      	movs	r3, #0
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	f002 0203 	and.w	r2, r2, #3
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	4093      	lsls	r3, r2
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c86:	4938      	ldr	r1, [pc, #224]	; (8005d68 <HAL_GPIO_Init+0x2c8>)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c94:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cba:	4a30      	ldr	r2, [pc, #192]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cf0:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d14:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d3e:	4a0f      	ldr	r2, [pc, #60]	; (8005d7c <HAL_GPIO_Init+0x2dc>)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3301      	adds	r3, #1
 8005d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f aeab 	bne.w	8005ab0 <HAL_GPIO_Init+0x10>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	48000400 	.word	0x48000400
 8005d70:	48000800 	.word	0x48000800
 8005d74:	48000c00 	.word	0x48000c00
 8005d78:	48001000 	.word	0x48001000
 8005d7c:	58000800 	.word	0x58000800

08005d80 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005d8e:	e0bb      	b.n	8005f08 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d90:	2201      	movs	r2, #1
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80ae 	beq.w	8005f02 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005da6:	4a5f      	ldr	r2, [pc, #380]	; (8005f24 <HAL_GPIO_DeInit+0x1a4>)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	3302      	adds	r3, #2
 8005dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	220f      	movs	r2, #15
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dce:	d019      	beq.n	8005e04 <HAL_GPIO_DeInit+0x84>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a55      	ldr	r2, [pc, #340]	; (8005f28 <HAL_GPIO_DeInit+0x1a8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_GPIO_DeInit+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a54      	ldr	r2, [pc, #336]	; (8005f2c <HAL_GPIO_DeInit+0x1ac>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00d      	beq.n	8005dfc <HAL_GPIO_DeInit+0x7c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a53      	ldr	r2, [pc, #332]	; (8005f30 <HAL_GPIO_DeInit+0x1b0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <HAL_GPIO_DeInit+0x78>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a52      	ldr	r2, [pc, #328]	; (8005f34 <HAL_GPIO_DeInit+0x1b4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <HAL_GPIO_DeInit+0x74>
 8005df0:	2304      	movs	r3, #4
 8005df2:	e008      	b.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005df4:	2307      	movs	r3, #7
 8005df6:	e006      	b.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e004      	b.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e002      	b.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005e04:	2300      	movs	r3, #0
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	f002 0203 	and.w	r2, r2, #3
 8005e0c:	0092      	lsls	r2, r2, #2
 8005e0e:	4093      	lsls	r3, r2
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d136      	bne.n	8005e84 <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	220f      	movs	r2, #15
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005e26:	4a3f      	ldr	r2, [pc, #252]	; (8005f24 <HAL_GPIO_DeInit+0x1a4>)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	089b      	lsrs	r3, r3, #2
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	43da      	mvns	r2, r3
 8005e36:	483b      	ldr	r0, [pc, #236]	; (8005f24 <HAL_GPIO_DeInit+0x1a4>)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	400a      	ands	r2, r1
 8005e3e:	3302      	adds	r3, #2
 8005e40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005e44:	4b3c      	ldr	r3, [pc, #240]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	493a      	ldr	r1, [pc, #232]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005e56:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	4935      	ldr	r1, [pc, #212]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005e68:	4b33      	ldr	r3, [pc, #204]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	4931      	ldr	r1, [pc, #196]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005e76:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	492e      	ldr	r1, [pc, #184]	; (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	2103      	movs	r1, #3
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	08da      	lsrs	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3208      	adds	r2, #8
 8005ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	220f      	movs	r2, #15
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	08d2      	lsrs	r2, r2, #3
 8005eb8:	4019      	ands	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3208      	adds	r2, #8
 8005ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	2103      	movs	r1, #3
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	2101      	movs	r1, #1
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	2103      	movs	r1, #3
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	401a      	ands	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	3301      	adds	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f af3d 	bne.w	8005d90 <HAL_GPIO_DeInit+0x10>
  }
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	48000400 	.word	0x48000400
 8005f2c:	48000800 	.word	0x48000800
 8005f30:	48000c00 	.word	0x48000c00
 8005f34:	48001000 	.word	0x48001000
 8005f38:	58000800 	.word	0x58000800

08005f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	807b      	strh	r3, [r7, #2]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f4c:	787b      	ldrb	r3, [r7, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f58:	e002      	b.n	8005f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f5a:	887a      	ldrh	r2, [r7, #2]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f84:	887a      	ldrh	r2, [r7, #2]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005f8a:	e002      	b.n	8005f92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	619a      	str	r2, [r3, #24]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d006      	beq.n	8005fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fb6:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f806 	bl	8005fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58000800 	.word	0x58000800

08005fd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e081      	b.n	80060fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8a8 	bl	8006162 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2224      	movs	r2, #36	; 0x24
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006036:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006046:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800605c:	609a      	str	r2, [r3, #8]
 800605e:	e006      	b.n	800606e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800606c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d104      	bne.n	8006080 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800607e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006092:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	ea42 0103 	orr.w	r1, r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	021a      	lsls	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69d9      	ldr	r1, [r3, #28]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e021      	b.n	800615a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2224      	movs	r2, #36	; 0x24
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0201 	bic.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f821 	bl	8006176 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	4603      	mov	r3, r0
 800619c:	817b      	strh	r3, [r7, #10]
 800619e:	460b      	mov	r3, r1
 80061a0:	813b      	strh	r3, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	f040 80f9 	bne.w	80063a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x34>
 80061ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0ed      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_I2C_Mem_Write+0x4e>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e0e6      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061e2:	f7ff fa4f 	bl	8005684 <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	2319      	movs	r3, #25
 80061ee:	2201      	movs	r2, #1
 80061f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fadd 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0d1      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2221      	movs	r2, #33	; 0x21
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2240      	movs	r2, #64	; 0x40
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800622c:	88f8      	ldrh	r0, [r7, #6]
 800622e:	893a      	ldrh	r2, [r7, #8]
 8006230:	8979      	ldrh	r1, [r7, #10]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4603      	mov	r3, r0
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f9ed 	bl	800661c <I2C_RequestMemoryWrite>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0a9      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2bff      	cmp	r3, #255	; 0xff
 800625c:	d90e      	bls.n	800627c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	22ff      	movs	r2, #255	; 0xff
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006268:	b2da      	uxtb	r2, r3
 800626a:	8979      	ldrh	r1, [r7, #10]
 800626c:	2300      	movs	r3, #0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fbbf 	bl	80069f8 <I2C_TransferConfig>
 800627a:	e00f      	b.n	800629c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	b2da      	uxtb	r2, r3
 800628c:	8979      	ldrh	r1, [r7, #10]
 800628e:	2300      	movs	r3, #0
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fbae 	bl	80069f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fac7 	bl	8006834 <I2C_WaitOnTXISFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e07b      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d034      	beq.n	8006354 <HAL_I2C_Mem_Write+0x1c8>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d130      	bne.n	8006354 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2200      	movs	r2, #0
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fa59 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e04d      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2bff      	cmp	r3, #255	; 0xff
 8006314:	d90e      	bls.n	8006334 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	b2da      	uxtb	r2, r3
 8006322:	8979      	ldrh	r1, [r7, #10]
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fb63 	bl	80069f8 <I2C_TransferConfig>
 8006332:	e00f      	b.n	8006354 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006342:	b2da      	uxtb	r2, r3
 8006344:	8979      	ldrh	r1, [r7, #10]
 8006346:	2300      	movs	r3, #0
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fb52 	bl	80069f8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d19e      	bne.n	800629c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 faa6 	bl	80068b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e01a      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2220      	movs	r2, #32
 8006378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <HAL_I2C_Mem_Write+0x224>)
 8006386:	400b      	ands	r3, r1
 8006388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	fe00e800 	.word	0xfe00e800

080063b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	460b      	mov	r3, r1
 80063c8:	813b      	strh	r3, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	f040 80fd 	bne.w	80065d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_I2C_Mem_Read+0x34>
 80063e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0f1      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_I2C_Mem_Read+0x4e>
 80063fe:	2302      	movs	r3, #2
 8006400:	e0ea      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800640a:	f7ff f93b 	bl	8005684 <HAL_GetTick>
 800640e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	2319      	movs	r3, #25
 8006416:	2201      	movs	r2, #1
 8006418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f9c9 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0d5      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	; 0x22
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800644c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006454:	88f8      	ldrh	r0, [r7, #6]
 8006456:	893a      	ldrh	r2, [r7, #8]
 8006458:	8979      	ldrh	r1, [r7, #10]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4603      	mov	r3, r0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f92d 	bl	80066c4 <I2C_RequestMemoryRead>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0ad      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2bff      	cmp	r3, #255	; 0xff
 8006484:	d90e      	bls.n	80064a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	22ff      	movs	r2, #255	; 0xff
 800648a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	b2da      	uxtb	r2, r3
 8006492:	8979      	ldrh	r1, [r7, #10]
 8006494:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <HAL_I2C_Mem_Read+0x22c>)
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 faab 	bl	80069f8 <I2C_TransferConfig>
 80064a2:	e00f      	b.n	80064c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	8979      	ldrh	r1, [r7, #10]
 80064b6:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <HAL_I2C_Mem_Read+0x22c>)
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fa9a 	bl	80069f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2200      	movs	r2, #0
 80064cc:	2104      	movs	r1, #4
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f970 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e07c      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d034      	beq.n	8006584 <HAL_I2C_Mem_Read+0x1d0>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d130      	bne.n	8006584 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2200      	movs	r2, #0
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f941 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e04d      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2bff      	cmp	r3, #255	; 0xff
 8006544:	d90e      	bls.n	8006564 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006550:	b2da      	uxtb	r2, r3
 8006552:	8979      	ldrh	r1, [r7, #10]
 8006554:	2300      	movs	r3, #0
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fa4b 	bl	80069f8 <I2C_TransferConfig>
 8006562:	e00f      	b.n	8006584 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	b2da      	uxtb	r2, r3
 8006574:	8979      	ldrh	r1, [r7, #10]
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fa3a 	bl	80069f8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d19a      	bne.n	80064c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f98e 	bl	80068b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e01a      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2220      	movs	r2, #32
 80065a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <HAL_I2C_Mem_Read+0x230>)
 80065b6:	400b      	ands	r3, r1
 80065b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	e000      	b.n	80065d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	80002400 	.word	0x80002400
 80065e4:	fe00e800 	.word	0xfe00e800

080065e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065f6:	b2db      	uxtb	r3, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	461a      	mov	r2, r3
 800662a:	4603      	mov	r3, r0
 800662c:	817b      	strh	r3, [r7, #10]
 800662e:	460b      	mov	r3, r1
 8006630:	813b      	strh	r3, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	8979      	ldrh	r1, [r7, #10]
 800663c:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <I2C_RequestMemoryWrite+0xa4>)
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f9d7 	bl	80069f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f8f0 	bl	8006834 <I2C_WaitOnTXISFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e02c      	b.n	80066b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006664:	893b      	ldrh	r3, [r7, #8]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	629a      	str	r2, [r3, #40]	; 0x28
 800666e:	e015      	b.n	800669c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	b29b      	uxth	r3, r3
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f8d6 	bl	8006834 <I2C_WaitOnTXISFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e012      	b.n	80066b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006692:	893b      	ldrh	r3, [r7, #8]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2200      	movs	r2, #0
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f884 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	80002000 	.word	0x80002000

080066c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	817b      	strh	r3, [r7, #10]
 80066d6:	460b      	mov	r3, r1
 80066d8:	813b      	strh	r3, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	8979      	ldrh	r1, [r7, #10]
 80066e4:	4b20      	ldr	r3, [pc, #128]	; (8006768 <I2C_RequestMemoryRead+0xa4>)
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	2300      	movs	r3, #0
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f984 	bl	80069f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	69b9      	ldr	r1, [r7, #24]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f89d 	bl	8006834 <I2C_WaitOnTXISFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e02c      	b.n	800675e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d105      	bne.n	8006716 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
 8006714:	e015      	b.n	8006742 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	b29b      	uxth	r3, r3
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	69b9      	ldr	r1, [r7, #24]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f883 	bl	8006834 <I2C_WaitOnTXISFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e012      	b.n	800675e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006738:	893b      	ldrh	r3, [r7, #8]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2200      	movs	r2, #0
 800674a:	2140      	movs	r1, #64	; 0x40
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f831 	bl	80067b4 <I2C_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	80002000 	.word	0x80002000

0800676c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b02      	cmp	r3, #2
 8006780:	d103      	bne.n	800678a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b01      	cmp	r3, #1
 8006796:	d007      	beq.n	80067a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	619a      	str	r2, [r3, #24]
  }
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c4:	e022      	b.n	800680c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d01e      	beq.n	800680c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7fe ff59 	bl	8005684 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d113      	bne.n	800680c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e00f      	b.n	800682c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	429a      	cmp	r2, r3
 8006828:	d0cd      	beq.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006840:	e02c      	b.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f870 	bl	800692c <I2C_IsAcknowledgeFailed>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e02a      	b.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d01e      	beq.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fe ff11 	bl	8005684 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d113      	bne.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e007      	b.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d1cb      	bne.n	8006842 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c0:	e028      	b.n	8006914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f830 	bl	800692c <I2C_IsAcknowledgeFailed>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e026      	b.n	8006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fe fed5 	bl	8005684 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d113      	bne.n	8006914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b20      	cmp	r3, #32
 8006920:	d1cf      	bne.n	80068c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b10      	cmp	r3, #16
 8006944:	d151      	bne.n	80069ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006946:	e022      	b.n	800698e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d01e      	beq.n	800698e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006950:	f7fe fe98 	bl	8005684 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <I2C_IsAcknowledgeFailed+0x3a>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d113      	bne.n	800698e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e02e      	b.n	80069ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b20      	cmp	r3, #32
 800699a:	d1d5      	bne.n	8006948 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2210      	movs	r2, #16
 80069a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2220      	movs	r2, #32
 80069aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fedd 	bl	800676c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6859      	ldr	r1, [r3, #4]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80069be:	400b      	ands	r3, r1
 80069c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	fe00e800 	.word	0xfe00e800

080069f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	817b      	strh	r3, [r7, #10]
 8006a06:	4613      	mov	r3, r2
 8006a08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	0d5b      	lsrs	r3, r3, #21
 8006a14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <I2C_TransferConfig+0x58>)
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	ea02 0103 	and.w	r1, r2, r3
 8006a22:	897b      	ldrh	r3, [r7, #10]
 8006a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a28:	7a7b      	ldrb	r3, [r7, #9]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	03ff63ff 	.word	0x03ff63ff

08006a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d138      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e032      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d139      	bne.n	8006b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e033      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e000      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6013      	str	r3, [r2, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	58000400 	.word	0x58000400

08006ba4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	58000400 	.word	0x58000400

08006bc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd2:	d101      	bne.n	8006bd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_RCC_HSE_EnableBypass>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf6:	6013      	str	r3, [r2, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <LL_RCC_HSE_DisableBypass>:
{
 8006c02:	b480      	push	{r7}
 8006c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
}
 8006c16:	bf00      	nop
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_HSE_Enable>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <LL_RCC_HSE_Disable>:
{
 8006c3e:	b480      	push	{r7}
 8006c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_RCC_HSE_IsReady>:
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6e:	d101      	bne.n	8006c74 <LL_RCC_HSE_IsReady+0x18>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <LL_RCC_HSE_IsReady+0x1a>
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <LL_RCC_HSI_Enable>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c92:	6013      	str	r3, [r2, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <LL_RCC_HSI_Disable>:
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <LL_RCC_HSI_IsReady>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cce:	d101      	bne.n	8006cd4 <LL_RCC_HSI_IsReady+0x18>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <LL_RCC_HSI_IsReady+0x1a>
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	061b      	lsls	r3, r3, #24
 8006cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_RCC_HSI48_Enable>:
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <LL_RCC_HSI48_Disable>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_RCC_HSI48_IsReady>:
{
 8006d4e:	b480      	push	{r7}
 8006d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d101      	bne.n	8006d66 <LL_RCC_HSI48_IsReady+0x18>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <LL_RCC_HSI48_IsReady+0x1a>
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <LL_RCC_LSE_Enable>:
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d8a:	bf00      	nop
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <LL_RCC_LSE_Disable>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_RCC_LSE_EnableBypass>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc6:	f043 0304 	orr.w	r3, r3, #4
 8006dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_RCC_LSE_DisableBypass>:
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006de8:	f023 0304 	bic.w	r3, r3, #4
 8006dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_RCC_LSE_IsReady>:
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d101      	bne.n	8006e12 <LL_RCC_LSE_IsReady+0x18>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <LL_RCC_LSE_IsReady+0x1a>
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <LL_RCC_LSI1_Enable>:
{
 8006e1e:	b480      	push	{r7}
 8006e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <LL_RCC_LSI1_Disable>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_RCC_LSI1_IsReady>:
{
 8006e62:	b480      	push	{r7}
 8006e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d101      	bne.n	8006e7a <LL_RCC_LSI1_IsReady+0x18>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <LL_RCC_LSI1_IsReady+0x1a>
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <LL_RCC_LSI2_Enable>:
{
 8006e86:	b480      	push	{r7}
 8006e88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e96:	f043 0304 	orr.w	r3, r3, #4
 8006e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <LL_RCC_LSI2_Disable>:
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eb8:	f023 0304 	bic.w	r3, r3, #4
 8006ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <LL_RCC_LSI2_IsReady>:
{
 8006eca:	b480      	push	{r7}
 8006ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d101      	bne.n	8006ee2 <LL_RCC_LSI2_IsReady+0x18>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <LL_RCC_LSI2_IsReady+0x1a>
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <LL_RCC_LSI2_SetTrimming>:
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006efe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <LL_RCC_MSI_Enable>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	6013      	str	r3, [r2, #0]
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <LL_RCC_MSI_Disable>:
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	6013      	str	r3, [r2, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <LL_RCC_MSI_IsReady>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d101      	bne.n	8006f6e <LL_RCC_MSI_IsReady+0x16>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <LL_RCC_MSI_IsReady+0x18>
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <LL_RCC_MSI_SetRange>:
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <LL_RCC_MSI_GetRange>:
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2bb0      	cmp	r3, #176	; 0xb0
 8006fb8:	d901      	bls.n	8006fbe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006fba:	23b0      	movs	r3, #176	; 0xb0
 8006fbc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006fbe:	687b      	ldr	r3, [r7, #4]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <LL_RCC_MSI_SetCalibTrimming>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	604b      	str	r3, [r1, #4]
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <LL_RCC_SetSysClkSource>:
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f023 0203 	bic.w	r2, r3, #3
 8007008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <LL_RCC_GetSysClkSource>:
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 030c 	and.w	r3, r3, #12
}
 800702c:	4618      	mov	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_RCC_SetAHBPrescaler>:
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800703e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <LL_C2_RCC_SetAHBPrescaler>:
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800706e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_SetAHB4Prescaler>:
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007096:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800709a:	f023 020f 	bic.w	r2, r3, #15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_RCC_SetAPB1Prescaler>:
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80070c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	608b      	str	r3, [r1, #8]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <LL_RCC_SetAPB2Prescaler>:
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80070e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	608b      	str	r3, [r1, #8]
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <LL_RCC_GetAHBPrescaler>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_RCC_GetAHB4Prescaler>:
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007128:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007132:	4618      	mov	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <LL_RCC_GetAPB1Prescaler>:
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_RCC_GetAPB2Prescaler>:
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007162:	4618      	mov	r0, r3
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]
}
 8007180:	bf00      	nop
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800718a:	b480      	push	{r7}
 800718c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800718e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007198:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80071ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ba:	d101      	bne.n	80071c0 <LL_RCC_PLL_IsReady+0x18>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <LL_RCC_PLL_IsReady+0x1a>
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80071dc:	4618      	mov	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80071e6:	b480      	push	{r7}
 80071e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80071fe:	b480      	push	{r7}
 8007200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800720c:	4618      	mov	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007216:	b480      	push	{r7}
 8007218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800721a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0303 	and.w	r3, r3, #3
}
 8007224:	4618      	mov	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800722e:	b480      	push	{r7}
 8007230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800723c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007240:	d101      	bne.n	8007246 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007252:	b480      	push	{r7}
 8007254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800725a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007266:	d101      	bne.n	800726c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800727c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007280:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728c:	d101      	bne.n	8007292 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80072a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072b0:	d101      	bne.n	80072b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072d4:	d101      	bne.n	80072da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b08b      	sub	sp, #44	; 0x2c
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e34b      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 808f 	beq.w	8007426 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007308:	f7ff fe89 	bl	800701e <LL_RCC_GetSysClkSource>
 800730c:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800730e:	f7ff ff82 	bl	8007216 <LL_RCC_PLL_GetMainSource>
 8007312:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_RCC_OscConfig+0x3e>
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	2b0c      	cmp	r3, #12
 800731e:	d149      	bne.n	80073b4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d146      	bne.n	80073b4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007326:	f7ff fe17 	bl	8006f58 <LL_RCC_MSI_IsReady>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCC_OscConfig+0x54>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e32a      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007340:	f7ff fe2f 	bl	8006fa2 <LL_RCC_MSI_GetRange>
 8007344:	4603      	mov	r3, r0
 8007346:	429c      	cmp	r4, r3
 8007348:	d914      	bls.n	8007374 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd0e 	bl	8007d70 <RCC_SetFlashLatencyFromMSIRange>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e319      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fe09 	bl	8006f7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fe2d 	bl	8006fcc <LL_RCC_MSI_SetCalibTrimming>
 8007372:	e013      	b.n	800739c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fdfe 	bl	8006f7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fe22 	bl	8006fcc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fcef 	bl	8007d70 <RCC_SetFlashLatencyFromMSIRange>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e2fa      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800739c:	f7fa feca 	bl	8002134 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073a0:	4bb4      	ldr	r3, [pc, #720]	; (8007674 <HAL_RCC_OscConfig+0x38c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe f921 	bl	80055ec <HAL_InitTick>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d039      	beq.n	8007424 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e2ee      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01e      	beq.n	80073fa <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073bc:	f7ff fdae 	bl	8006f1c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073c0:	f7fe f960 	bl	8005684 <HAL_GetTick>
 80073c4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073c8:	f7fe f95c 	bl	8005684 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e2db      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80073da:	f7ff fdbd 	bl	8006f58 <LL_RCC_MSI_IsReady>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f1      	beq.n	80073c8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fdc6 	bl	8006f7a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fdea 	bl	8006fcc <LL_RCC_MSI_SetCalibTrimming>
 80073f8:	e015      	b.n	8007426 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073fa:	f7ff fd9e 	bl	8006f3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073fe:	f7fe f941 	bl	8005684 <HAL_GetTick>
 8007402:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007406:	f7fe f93d 	bl	8005684 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e2bc      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007418:	f7ff fd9e 	bl	8006f58 <LL_RCC_MSI_IsReady>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f1      	bne.n	8007406 <HAL_RCC_OscConfig+0x11e>
 8007422:	e000      	b.n	8007426 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007424:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d05a      	beq.n	80074e8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007432:	f7ff fdf4 	bl	800701e <LL_RCC_GetSysClkSource>
 8007436:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007438:	f7ff feed 	bl	8007216 <LL_RCC_PLL_GetMainSource>
 800743c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d005      	beq.n	8007450 <HAL_RCC_OscConfig+0x168>
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b0c      	cmp	r3, #12
 8007448:	d10d      	bne.n	8007466 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d10a      	bne.n	8007466 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007450:	f7ff fc04 	bl	8006c5c <LL_RCC_HSE_IsReady>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d045      	beq.n	80074e6 <HAL_RCC_OscConfig+0x1fe>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d141      	bne.n	80074e6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e295      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d102      	bne.n	8007476 <HAL_RCC_OscConfig+0x18e>
 8007470:	f7ff fbd6 	bl	8006c20 <LL_RCC_HSE_Enable>
 8007474:	e00d      	b.n	8007492 <HAL_RCC_OscConfig+0x1aa>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800747e:	d104      	bne.n	800748a <HAL_RCC_OscConfig+0x1a2>
 8007480:	f7ff fbb0 	bl	8006be4 <LL_RCC_HSE_EnableBypass>
 8007484:	f7ff fbcc 	bl	8006c20 <LL_RCC_HSE_Enable>
 8007488:	e003      	b.n	8007492 <HAL_RCC_OscConfig+0x1aa>
 800748a:	f7ff fbd8 	bl	8006c3e <LL_RCC_HSE_Disable>
 800748e:	f7ff fbb8 	bl	8006c02 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7fe f8f3 	bl	8005684 <HAL_GetTick>
 800749e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a2:	f7fe f8ef 	bl	8005684 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b64      	cmp	r3, #100	; 0x64
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e26e      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80074b4:	f7ff fbd2 	bl	8006c5c <LL_RCC_HSE_IsReady>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f1      	beq.n	80074a2 <HAL_RCC_OscConfig+0x1ba>
 80074be:	e013      	b.n	80074e8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c0:	f7fe f8e0 	bl	8005684 <HAL_GetTick>
 80074c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074c8:	f7fe f8dc 	bl	8005684 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b64      	cmp	r3, #100	; 0x64
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e25b      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80074da:	f7ff fbbf 	bl	8006c5c <LL_RCC_HSE_IsReady>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f1      	bne.n	80074c8 <HAL_RCC_OscConfig+0x1e0>
 80074e4:	e000      	b.n	80074e8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d051      	beq.n	8007598 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f4:	f7ff fd93 	bl	800701e <LL_RCC_GetSysClkSource>
 80074f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074fa:	f7ff fe8c 	bl	8007216 <LL_RCC_PLL_GetMainSource>
 80074fe:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d005      	beq.n	8007512 <HAL_RCC_OscConfig+0x22a>
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b0c      	cmp	r3, #12
 800750a:	d113      	bne.n	8007534 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d110      	bne.n	8007534 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007512:	f7ff fbd3 	bl	8006cbc <LL_RCC_HSI_IsReady>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_OscConfig+0x240>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e234      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fbd7 	bl	8006ce0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007532:	e031      	b.n	8007598 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d019      	beq.n	8007570 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800753c:	f7ff fba0 	bl	8006c80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007540:	f7fe f8a0 	bl	8005684 <HAL_GetTick>
 8007544:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007548:	f7fe f89c 	bl	8005684 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e21b      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800755a:	f7ff fbaf 	bl	8006cbc <LL_RCC_HSI_IsReady>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f1      	beq.n	8007548 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fbb9 	bl	8006ce0 <LL_RCC_HSI_SetCalibTrimming>
 800756e:	e013      	b.n	8007598 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007570:	f7ff fb95 	bl	8006c9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007574:	f7fe f886 	bl	8005684 <HAL_GetTick>
 8007578:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757c:	f7fe f882 	bl	8005684 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e201      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800758e:	f7ff fb95 	bl	8006cbc <LL_RCC_HSI_IsReady>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f1      	bne.n	800757c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80a2 	beq.w	80076f6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d075      	beq.n	80076a6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d046      	beq.n	8007654 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80075c6:	f7ff fc4c 	bl	8006e62 <LL_RCC_LSI1_IsReady>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d113      	bne.n	80075f8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80075d0:	f7ff fc25 	bl	8006e1e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075d4:	f7fe f856 	bl	8005684 <HAL_GetTick>
 80075d8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80075dc:	f7fe f852 	bl	8005684 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e1d1      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80075ee:	f7ff fc38 	bl	8006e62 <LL_RCC_LSI1_IsReady>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f1      	beq.n	80075dc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80075f8:	f7ff fc45 	bl	8006e86 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fc:	f7fe f842 	bl	8005684 <HAL_GetTick>
 8007600:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007604:	f7fe f83e 	bl	8005684 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e1bd      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007616:	f7ff fc58 	bl	8006eca <LL_RCC_LSI2_IsReady>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0f1      	beq.n	8007604 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fc62 	bl	8006eee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800762a:	f7ff fc09 	bl	8006e40 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762e:	f7fe f829 	bl	8005684 <HAL_GetTick>
 8007632:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007634:	e008      	b.n	8007648 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007636:	f7fe f825 	bl	8005684 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e1a4      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007648:	f7ff fc0b 	bl	8006e62 <LL_RCC_LSI1_IsReady>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f1      	bne.n	8007636 <HAL_RCC_OscConfig+0x34e>
 8007652:	e050      	b.n	80076f6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007654:	f7ff fbe3 	bl	8006e1e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fe f814 	bl	8005684 <HAL_GetTick>
 800765c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800765e:	e00b      	b.n	8007678 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007660:	f7fe f810 	bl	8005684 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d904      	bls.n	8007678 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e18f      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
 8007672:	bf00      	nop
 8007674:	20000154 	.word	0x20000154
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007678:	f7ff fbf3 	bl	8006e62 <LL_RCC_LSI1_IsReady>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0ee      	beq.n	8007660 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007682:	f7ff fc11 	bl	8006ea8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007688:	f7fd fffc 	bl	8005684 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b03      	cmp	r3, #3
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e17b      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800769a:	f7ff fc16 	bl	8006eca <LL_RCC_LSI2_IsReady>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f1      	bne.n	8007688 <HAL_RCC_OscConfig+0x3a0>
 80076a4:	e027      	b.n	80076f6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80076a6:	f7ff fbff 	bl	8006ea8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076aa:	f7fd ffeb 	bl	8005684 <HAL_GetTick>
 80076ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80076b2:	f7fd ffe7 	bl	8005684 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e166      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80076c4:	f7ff fc01 	bl	8006eca <LL_RCC_LSI2_IsReady>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f1      	bne.n	80076b2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80076ce:	f7ff fbb7 	bl	8006e40 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d2:	f7fd ffd7 	bl	8005684 <HAL_GetTick>
 80076d6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80076da:	f7fd ffd3 	bl	8005684 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e152      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80076ec:	f7ff fbb9 	bl	8006e62 <LL_RCC_LSI1_IsReady>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f1      	bne.n	80076da <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d05b      	beq.n	80077ba <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007702:	4ba6      	ldr	r3, [pc, #664]	; (800799c <HAL_RCC_OscConfig+0x6b4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770a:	2b00      	cmp	r3, #0
 800770c:	d114      	bne.n	8007738 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800770e:	f7ff fa39 	bl	8006b84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007712:	f7fd ffb7 	bl	8005684 <HAL_GetTick>
 8007716:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771a:	f7fd ffb3 	bl	8005684 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e132      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800772c:	4b9b      	ldr	r3, [pc, #620]	; (800799c <HAL_RCC_OscConfig+0x6b4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d102      	bne.n	8007746 <HAL_RCC_OscConfig+0x45e>
 8007740:	f7ff fb17 	bl	8006d72 <LL_RCC_LSE_Enable>
 8007744:	e00c      	b.n	8007760 <HAL_RCC_OscConfig+0x478>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b05      	cmp	r3, #5
 800774c:	d104      	bne.n	8007758 <HAL_RCC_OscConfig+0x470>
 800774e:	f7ff fb32 	bl	8006db6 <LL_RCC_LSE_EnableBypass>
 8007752:	f7ff fb0e 	bl	8006d72 <LL_RCC_LSE_Enable>
 8007756:	e003      	b.n	8007760 <HAL_RCC_OscConfig+0x478>
 8007758:	f7ff fb1c 	bl	8006d94 <LL_RCC_LSE_Disable>
 800775c:	f7ff fb3c 	bl	8006dd8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d014      	beq.n	8007792 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007768:	f7fd ff8c 	bl	8005684 <HAL_GetTick>
 800776c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800776e:	e00a      	b.n	8007786 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007770:	f7fd ff88 	bl	8005684 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f241 3288 	movw	r2, #5000	; 0x1388
 800777e:	4293      	cmp	r3, r2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e105      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007786:	f7ff fb38 	bl	8006dfa <LL_RCC_LSE_IsReady>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0ef      	beq.n	8007770 <HAL_RCC_OscConfig+0x488>
 8007790:	e013      	b.n	80077ba <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fd ff77 	bl	8005684 <HAL_GetTick>
 8007796:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007798:	e00a      	b.n	80077b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779a:	f7fd ff73 	bl	8005684 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e0f0      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80077b0:	f7ff fb23 	bl	8006dfa <LL_RCC_LSE_IsReady>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1ef      	bne.n	800779a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02c      	beq.n	8007820 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d014      	beq.n	80077f8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077ce:	f7ff fa9c 	bl	8006d0a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d2:	f7fd ff57 	bl	8005684 <HAL_GetTick>
 80077d6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077da:	f7fd ff53 	bl	8005684 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e0d2      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80077ec:	f7ff faaf 	bl	8006d4e <LL_RCC_HSI48_IsReady>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f1      	beq.n	80077da <HAL_RCC_OscConfig+0x4f2>
 80077f6:	e013      	b.n	8007820 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077f8:	f7ff fa98 	bl	8006d2c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077fc:	f7fd ff42 	bl	8005684 <HAL_GetTick>
 8007800:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007804:	f7fd ff3e 	bl	8005684 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e0bd      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007816:	f7ff fa9a 	bl	8006d4e <LL_RCC_HSI48_IsReady>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f1      	bne.n	8007804 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80b3 	beq.w	8007990 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800782a:	f7ff fbf8 	bl	800701e <LL_RCC_GetSysClkSource>
 800782e:	4603      	mov	r3, r0
 8007830:	2b0c      	cmp	r3, #12
 8007832:	d076      	beq.n	8007922 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d14b      	bne.n	80078d4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800783c:	f7ff fca5 	bl	800718a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007840:	f7fd ff20 	bl	8005684 <HAL_GetTick>
 8007844:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007848:	f7fd ff1c 	bl	8005684 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e09b      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800785a:	f7ff fca5 	bl	80071a8 <LL_RCC_PLL_IsReady>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f1      	bne.n	8007848 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	4b4d      	ldr	r3, [pc, #308]	; (80079a0 <HAL_RCC_OscConfig+0x6b8>)
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007876:	4311      	orrs	r1, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800787c:	0212      	lsls	r2, r2, #8
 800787e:	4311      	orrs	r1, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007890:	430a      	orrs	r2, r1
 8007892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007896:	4313      	orrs	r3, r2
 8007898:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800789a:	f7ff fc67 	bl	800716c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800789e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fd fee9 	bl	8005684 <HAL_GetTick>
 80078b2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b6:	f7fd fee5 	bl	8005684 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e064      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80078c8:	f7ff fc6e 	bl	80071a8 <LL_RCC_PLL_IsReady>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f1      	beq.n	80078b6 <HAL_RCC_OscConfig+0x5ce>
 80078d2:	e05d      	b.n	8007990 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d4:	f7ff fc59 	bl	800718a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80078d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fa:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fd fec2 	bl	8005684 <HAL_GetTick>
 8007900:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007904:	f7fd febe 	bl	8005684 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e03d      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007916:	f7ff fc47 	bl	80071a8 <LL_RCC_PLL_IsReady>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f1      	bne.n	8007904 <HAL_RCC_OscConfig+0x61c>
 8007920:	e036      	b.n	8007990 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e031      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800792e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 0203 	and.w	r2, r3, #3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	429a      	cmp	r2, r3
 8007942:	d123      	bne.n	800798c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794e:	429a      	cmp	r2, r3
 8007950:	d11c      	bne.n	800798c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0a1b      	lsrs	r3, r3, #8
 8007956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800795e:	429a      	cmp	r2, r3
 8007960:	d114      	bne.n	800798c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d10d      	bne.n	800798c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800797a:	429a      	cmp	r2, r3
 800797c:	d106      	bne.n	800798c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007988:	429a      	cmp	r2, r3
 800798a:	d001      	beq.n	8007990 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	372c      	adds	r7, #44	; 0x2c
 8007996:	46bd      	mov	sp, r7
 8007998:	bd90      	pop	{r4, r7, pc}
 800799a:	bf00      	nop
 800799c:	58000400 	.word	0x58000400
 80079a0:	11c1808c 	.word	0x11c1808c

080079a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e12a      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079b8:	4b97      	ldr	r3, [pc, #604]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d91b      	bls.n	80079fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079c6:	4b94      	ldr	r3, [pc, #592]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f023 0207 	bic.w	r2, r3, #7
 80079ce:	4992      	ldr	r1, [pc, #584]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d6:	f7fd fe55 	bl	8005684 <HAL_GetTick>
 80079da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079de:	f7fd fe51 	bl	8005684 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e10e      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f0:	4b89      	ldr	r3, [pc, #548]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d1ef      	bne.n	80079de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fb11 	bl	8007036 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a14:	f7fd fe36 	bl	8005684 <HAL_GetTick>
 8007a18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a1c:	f7fd fe32 	bl	8005684 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e0ef      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a2e:	f7ff fbfe 	bl	800722e <LL_RCC_IsActiveFlag_HPRE>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f1      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d016      	beq.n	8007a72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fb08 	bl	800705e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a4e:	f7fd fe19 	bl	8005684 <HAL_GetTick>
 8007a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a56:	f7fd fe15 	bl	8005684 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e0d2      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007a68:	f7ff fbf3 	bl	8007252 <LL_RCC_IsActiveFlag_C2HPRE>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f1      	beq.n	8007a56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d016      	beq.n	8007aac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fb01 	bl	800708a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a88:	f7fd fdfc 	bl	8005684 <HAL_GetTick>
 8007a8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a90:	f7fd fdf8 	bl	8005684 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e0b5      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007aa2:	f7ff fbe9 	bl	8007278 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f1      	beq.n	8007a90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d016      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff fafb 	bl	80070b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ac2:	f7fd fddf 	bl	8005684 <HAL_GetTick>
 8007ac6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007aca:	f7fd fddb 	bl	8005684 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e098      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007adc:	f7ff fbdf 	bl	800729e <LL_RCC_IsActiveFlag_PPRE1>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f1      	beq.n	8007aca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d017      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff faf1 	bl	80070e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007afe:	f7fd fdc1 	bl	8005684 <HAL_GetTick>
 8007b02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b06:	f7fd fdbd 	bl	8005684 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e07a      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b18:	f7ff fbd3 	bl	80072c2 <LL_RCC_IsActiveFlag_PPRE2>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f1      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d043      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d106      	bne.n	8007b44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007b36:	f7ff f891 	bl	8006c5c <LL_RCC_HSE_IsReady>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11e      	bne.n	8007b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e064      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d106      	bne.n	8007b5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007b4c:	f7ff fb2c 	bl	80071a8 <LL_RCC_PLL_IsReady>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d113      	bne.n	8007b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e059      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007b62:	f7ff f9f9 	bl	8006f58 <LL_RCC_MSI_IsReady>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e04e      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007b70:	f7ff f8a4 	bl	8006cbc <LL_RCC_HSI_IsReady>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e047      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fa37 	bl	8006ff6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b88:	f7fd fd7c 	bl	8005684 <HAL_GetTick>
 8007b8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b8e:	e00a      	b.n	8007ba6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b90:	f7fd fd78 	bl	8005684 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e033      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba6:	f7ff fa3a 	bl	800701e <LL_RCC_GetSysClkSource>
 8007baa:	4602      	mov	r2, r0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d1ec      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb6:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d21b      	bcs.n	8007bfc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bc4:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f023 0207 	bic.w	r2, r3, #7
 8007bcc:	4912      	ldr	r1, [pc, #72]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd4:	f7fd fd56 	bl	8005684 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bdc:	f7fd fd52 	bl	8005684 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e00f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bee:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <HAL_RCC_ClockConfig+0x274>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d1ef      	bne.n	8007bdc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007bfc:	f7fa fa9a 	bl	8002134 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007c00:	f7fd fd4c 	bl	800569c <HAL_GetTickPrio>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd fcf0 	bl	80055ec <HAL_InitTick>
 8007c0c:	4603      	mov	r3, r0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	58004000 	.word	0x58004000

08007c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c1c:	b590      	push	{r4, r7, lr}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c22:	f7ff f9fc 	bl	800701e <LL_RCC_GetSysClkSource>
 8007c26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007c2e:	f7ff f9b8 	bl	8006fa2 <LL_RCC_MSI_GetRange>
 8007c32:	4603      	mov	r3, r0
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	e04a      	b.n	8007cda <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d102      	bne.n	8007c50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c4a:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e044      	b.n	8007cda <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d10a      	bne.n	8007c6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c56:	f7fe ffb3 	bl	8006bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e039      	b.n	8007cda <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007c66:	4b21      	ldr	r3, [pc, #132]	; (8007cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	e036      	b.n	8007cda <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007c6c:	f7ff fad3 	bl	8007216 <LL_RCC_PLL_GetMainSource>
 8007c70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d002      	beq.n	8007c7e <HAL_RCC_GetSysClockFreq+0x62>
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d003      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0x68>
 8007c7c:	e00d      	b.n	8007c9a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c80:	60bb      	str	r3, [r7, #8]
        break;
 8007c82:	e015      	b.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c84:	f7fe ff9c 	bl	8006bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007c8e:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c90:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007c92:	e00d      	b.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007c96:	60bb      	str	r3, [r7, #8]
        break;
 8007c98:	e00a      	b.n	8007cb0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007c9a:	f7ff f982 	bl	8006fa2 <LL_RCC_MSI_GetRange>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	4a0f      	ldr	r2, [pc, #60]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cac:	60bb      	str	r3, [r7, #8]
        break;
 8007cae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007cb0:	f7ff fa8c 	bl	80071cc <LL_RCC_PLL_GetN>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	fb03 f402 	mul.w	r4, r3, r2
 8007cbc:	f7ff fa9f 	bl	80071fe <LL_RCC_PLL_GetDivider>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	fbb4 f4f3 	udiv	r4, r4, r3
 8007cca:	f7ff fa8c 	bl	80071e6 <LL_RCC_PLL_GetR>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	0f5b      	lsrs	r3, r3, #29
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	fbb4 f3f3 	udiv	r3, r4, r3
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd90      	pop	{r4, r7, pc}
 8007ce4:	0800de50 	.word	0x0800de50
 8007ce8:	00f42400 	.word	0x00f42400
 8007cec:	01e84800 	.word	0x01e84800

08007cf0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cf0:	b598      	push	{r3, r4, r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007cf4:	f7ff ff92 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	f7ff fa05 	bl	8007108 <LL_RCC_GetAHBPrescaler>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	4a03      	ldr	r2, [pc, #12]	; (8007d14 <HAL_RCC_GetHCLKFreq+0x24>)
 8007d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	bd98      	pop	{r3, r4, r7, pc}
 8007d14:	0800ddf0 	.word	0x0800ddf0

08007d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d18:	b598      	push	{r3, r4, r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007d1c:	f7ff ffe8 	bl	8007cf0 <HAL_RCC_GetHCLKFreq>
 8007d20:	4604      	mov	r4, r0
 8007d22:	f7ff fa0b 	bl	800713c <LL_RCC_GetAPB1Prescaler>
 8007d26:	4603      	mov	r3, r0
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	4a04      	ldr	r2, [pc, #16]	; (8007d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	bd98      	pop	{r3, r4, r7, pc}
 8007d40:	0800de30 	.word	0x0800de30

08007d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d44:	b598      	push	{r3, r4, r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007d48:	f7ff ffd2 	bl	8007cf0 <HAL_RCC_GetHCLKFreq>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	f7ff fa01 	bl	8007154 <LL_RCC_GetAPB2Prescaler>
 8007d52:	4603      	mov	r3, r0
 8007d54:	0adb      	lsrs	r3, r3, #11
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d60:	f003 031f 	and.w	r3, r3, #31
 8007d64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	bd98      	pop	{r3, r4, r7, pc}
 8007d6c:	0800de30 	.word	0x0800de30

08007d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2bb0      	cmp	r3, #176	; 0xb0
 8007d7c:	d903      	bls.n	8007d86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007d7e:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e007      	b.n	8007d96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007d96:	f7ff f9c3 	bl	8007120 <LL_RCC_GetAHB4Prescaler>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	091b      	lsrs	r3, r3, #4
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	4a0d      	ldr	r2, [pc, #52]	; (8007dd8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007db4:	fba2 2303 	umull	r2, r3, r2, r3
 8007db8:	0c9c      	lsrs	r4, r3, #18
 8007dba:	f7fe fef3 	bl	8006ba4 <HAL_PWREx_GetVoltageRange>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f80c 	bl	8007de0 <RCC_SetFlashLatency>
 8007dc8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd90      	pop	{r4, r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	0800de50 	.word	0x0800de50
 8007dd8:	0800ddf0 	.word	0x0800ddf0
 8007ddc:	431bde83 	.word	0x431bde83

08007de0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b093      	sub	sp, #76	; 0x4c
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007dea:	4b39      	ldr	r3, [pc, #228]	; (8007ed0 <RCC_SetFlashLatency+0xf0>)
 8007dec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007df6:	4a37      	ldr	r2, [pc, #220]	; (8007ed4 <RCC_SetFlashLatency+0xf4>)
 8007df8:	f107 031c 	add.w	r3, r7, #28
 8007dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007e02:	4b35      	ldr	r3, [pc, #212]	; (8007ed8 <RCC_SetFlashLatency+0xf8>)
 8007e04:	f107 040c 	add.w	r4, r7, #12
 8007e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007e0e:	2300      	movs	r3, #0
 8007e10:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e18:	d11c      	bne.n	8007e54 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e1e:	e015      	b.n	8007e4c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e28:	4413      	add	r3, r2
 8007e2a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d808      	bhi.n	8007e46 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007e44:	e022      	b.n	8007e8c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e48:	3301      	adds	r3, #1
 8007e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d9e6      	bls.n	8007e20 <RCC_SetFlashLatency+0x40>
 8007e52:	e01b      	b.n	8007e8c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e54:	2300      	movs	r3, #0
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e58:	e015      	b.n	8007e86 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e62:	4413      	add	r3, r2
 8007e64:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d808      	bhi.n	8007e80 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e76:	4413      	add	r3, r2
 8007e78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007e7c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007e7e:	e005      	b.n	8007e8c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e82:	3301      	adds	r3, #1
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d9e6      	bls.n	8007e5a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007e8c:	4b13      	ldr	r3, [pc, #76]	; (8007edc <RCC_SetFlashLatency+0xfc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 0207 	bic.w	r2, r3, #7
 8007e94:	4911      	ldr	r1, [pc, #68]	; (8007edc <RCC_SetFlashLatency+0xfc>)
 8007e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e9c:	f7fd fbf2 	bl	8005684 <HAL_GetTick>
 8007ea0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ea2:	e008      	b.n	8007eb6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ea4:	f7fd fbee 	bl	8005684 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e007      	b.n	8007ec6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <RCC_SetFlashLatency+0xfc>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d1ef      	bne.n	8007ea4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	374c      	adds	r7, #76	; 0x4c
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd90      	pop	{r4, r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800dd7c 	.word	0x0800dd7c
 8007ed4:	0800dd8c 	.word	0x0800dd8c
 8007ed8:	0800dd98 	.word	0x0800dd98
 8007edc:	58004000 	.word	0x58004000

08007ee0 <LL_RCC_LSE_IsEnabled>:
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <LL_RCC_LSE_IsEnabled+0x18>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <LL_RCC_LSE_IsEnabled+0x1a>
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <LL_RCC_LSE_IsReady>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d101      	bne.n	8007f1c <LL_RCC_LSE_IsReady+0x18>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <LL_RCC_LSE_IsReady+0x1a>
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <LL_RCC_SetRFWKPClockSource>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <LL_RCC_SetSMPSClockSource>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	f023 0203 	bic.w	r2, r3, #3
 8007f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <LL_RCC_SetSMPSPrescaler>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <LL_RCC_SetUSARTClockSource>:
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	f023 0203 	bic.w	r2, r3, #3
 8007fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <LL_RCC_SetLPUARTClockSource>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <LL_RCC_SetI2CClockSource>:
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008008:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	091b      	lsrs	r3, r3, #4
 8008010:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008014:	43db      	mvns	r3, r3
 8008016:	401a      	ands	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008024:	4313      	orrs	r3, r2
 8008026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <LL_RCC_SetLPTIMClockSource>:
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800803e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	43db      	mvns	r3, r3
 800804e:	401a      	ands	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <LL_RCC_SetSAIClockSource>:
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800807e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <LL_RCC_SetRNGClockSource>:
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <LL_RCC_SetCLK48ClockSource>:
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80080ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <LL_RCC_SetUSBClockSource>:
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff ffe3 	bl	80080c2 <LL_RCC_SetCLK48ClockSource>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <LL_RCC_SetADCClockSource>:
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800810c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008114:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <LL_RCC_SetRTCClockSource>:
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <LL_RCC_GetRTCClockSource>:
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008168:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800816c:	4618      	mov	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_RCC_ForceBackupDomainReset>:
{
 8008176:	b480      	push	{r7}
 8008178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800817a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800818a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800818e:	bf00      	nop
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800819c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <LL_RCC_PLLSAI1_Enable>:
{
 80081ba:	b480      	push	{r7}
 80081bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80081be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081cc:	6013      	str	r3, [r2, #0]
}
 80081ce:	bf00      	nop
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <LL_RCC_PLLSAI1_Disable>:
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80081dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081ea:	6013      	str	r3, [r2, #0]
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <LL_RCC_PLLSAI1_IsReady>:
{
 80081f6:	b480      	push	{r7}
 80081f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008208:	d101      	bne.n	800820e <LL_RCC_PLLSAI1_IsReady+0x18>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b088      	sub	sp, #32
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008222:	2300      	movs	r3, #0
 8008224:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008226:	2300      	movs	r3, #0
 8008228:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d033      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800823e:	d00c      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008244:	d802      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d010      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800824a:	e017      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800824c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008250:	d017      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008256:	d016      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008258:	e010      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800825a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008268:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800826a:	e00d      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f947 	bl	8008504 <RCCEx_PLLSAI1_ConfigNP>
 8008276:	4603      	mov	r3, r0
 8008278:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800827a:	e005      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	77fb      	strb	r3, [r7, #31]
        break;
 8008280:	e002      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008288:	7ffb      	ldrb	r3, [r7, #31]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fee9 	bl	800806a <LL_RCC_SetSAIClockSource>
 8008298:	e001      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d046      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80082aa:	f7ff ff57 	bl	800815c <LL_RCC_GetRTCClockSource>
 80082ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d03c      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80082ba:	f7fe fc63 	bl	8006b84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff ff31 	bl	8008130 <LL_RCC_SetRTCClockSource>
 80082ce:	e02e      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80082da:	f7ff ff4c 	bl	8008176 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80082de:	f7ff ff5b 	bl	8008198 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80082f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80082fa:	f7ff fdf1 	bl	8007ee0 <LL_RCC_LSE_IsEnabled>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b01      	cmp	r3, #1
 8008302:	d114      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008304:	f7fd f9be 	bl	8005684 <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800830a:	e00b      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800830c:	f7fd f9ba 	bl	8005684 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	f241 3288 	movw	r2, #5000	; 0x1388
 800831a:	4293      	cmp	r3, r2
 800831c:	d902      	bls.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	77fb      	strb	r3, [r7, #31]
              break;
 8008322:	e004      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008324:	f7ff fdee 	bl	8007f04 <LL_RCC_LSE_IsReady>
 8008328:	4603      	mov	r3, r0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d1ee      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800832e:	7ffb      	ldrb	r3, [r7, #31]
 8008330:	77bb      	strb	r3, [r7, #30]
 8008332:	e001      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008334:	7ffb      	ldrb	r3, [r7, #31]
 8008336:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fe2b 	bl	8007fa4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fe36 	bl	8007fd0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fe5e 	bl	8008036 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fe53 	bl	8008036 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fe2b 	bl	8007ffc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fe20 	bl	8007ffc <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d022      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fe8e 	bl	80080ee <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083da:	d107      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80083dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083ea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f4:	d10b      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f8dd 	bl	80085ba <RCCEx_PLLSAI1_ConfigNQ>
 8008400:	4603      	mov	r3, r0
 8008402:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008404:	7ffb      	ldrb	r3, [r7, #31]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800840a:	7ffb      	ldrb	r3, [r7, #31]
 800840c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02b      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008422:	d008      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842c:	d003      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fe2b 	bl	8008096 <LL_RCC_SetRNGClockSource>
 8008440:	e00a      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	2000      	movs	r0, #0
 800844e:	f7ff fe22 	bl	8008096 <LL_RCC_SetRNGClockSource>
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fe35 	bl	80080c2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008460:	d107      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800846c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008470:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847a:	2b00      	cmp	r3, #0
 800847c:	d022      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fe3e 	bl	8008104 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008490:	d107      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800849c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084aa:	d10b      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f8dd 	bl	8008670 <RCCEx_PLLSAI1_ConfigNR>
 80084b6:	4603      	mov	r3, r0
 80084b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80084ba:	7ffb      	ldrb	r3, [r7, #31]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 80084c0:	7ffb      	ldrb	r3, [r7, #31]
 80084c2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff fd27 	bl	8007f28 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fd46 	bl	8007f7c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fd2d 	bl	8007f54 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80084fa:	7fbb      	ldrb	r3, [r7, #30]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3720      	adds	r7, #32
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008510:	f7ff fe62 	bl	80081d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008514:	f7fd f8b6 	bl	8005684 <HAL_GetTick>
 8008518:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800851a:	e009      	b.n	8008530 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800851c:	f7fd f8b2 	bl	8005684 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d902      	bls.n	8008530 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	73fb      	strb	r3, [r7, #15]
      break;
 800852e:	e004      	b.n	800853a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008530:	f7ff fe61 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1f0      	bne.n	800851c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d137      	bne.n	80085b0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008554:	4313      	orrs	r3, r2
 8008556:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800856a:	4313      	orrs	r3, r2
 800856c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800856e:	f7ff fe24 	bl	80081ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008572:	f7fd f887 	bl	8005684 <HAL_GetTick>
 8008576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008578:	e009      	b.n	800858e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800857a:	f7fd f883 	bl	8005684 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d902      	bls.n	800858e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	73fb      	strb	r3, [r7, #15]
        break;
 800858c:	e004      	b.n	8008598 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800858e:	f7ff fe32 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 8008592:	4603      	mov	r3, r0
 8008594:	2b01      	cmp	r3, #1
 8008596:	d1f0      	bne.n	800857a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800859e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085ac:	4313      	orrs	r3, r2
 80085ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80085c6:	f7ff fe07 	bl	80081d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085ca:	f7fd f85b 	bl	8005684 <HAL_GetTick>
 80085ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80085d0:	e009      	b.n	80085e6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085d2:	f7fd f857 	bl	8005684 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d902      	bls.n	80085e6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	73fb      	strb	r3, [r7, #15]
      break;
 80085e4:	e004      	b.n	80085f0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80085e6:	f7ff fe06 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f0      	bne.n	80085d2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d137      	bne.n	8008666 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80085f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800860a:	4313      	orrs	r3, r2
 800860c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800860e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008620:	4313      	orrs	r3, r2
 8008622:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008624:	f7ff fdc9 	bl	80081ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008628:	f7fd f82c 	bl	8005684 <HAL_GetTick>
 800862c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800862e:	e009      	b.n	8008644 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008630:	f7fd f828 	bl	8005684 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d902      	bls.n	8008644 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	73fb      	strb	r3, [r7, #15]
        break;
 8008642:	e004      	b.n	800864e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008644:	f7ff fdd7 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 8008648:	4603      	mov	r3, r0
 800864a:	2b01      	cmp	r3, #1
 800864c:	d1f0      	bne.n	8008630 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d108      	bne.n	8008666 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008658:	691a      	ldr	r2, [r3, #16]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008662:	4313      	orrs	r3, r2
 8008664:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800867c:	f7ff fdac 	bl	80081d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008680:	f7fd f800 	bl	8005684 <HAL_GetTick>
 8008684:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008686:	e009      	b.n	800869c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008688:	f7fc fffc 	bl	8005684 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d902      	bls.n	800869c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	73fb      	strb	r3, [r7, #15]
      break;
 800869a:	e004      	b.n	80086a6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800869c:	f7ff fdab 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f0      	bne.n	8008688 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d137      	bne.n	800871c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80086ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086c0:	4313      	orrs	r3, r2
 80086c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80086c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086d6:	4313      	orrs	r3, r2
 80086d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80086da:	f7ff fd6e 	bl	80081ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086de:	f7fc ffd1 	bl	8005684 <HAL_GetTick>
 80086e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80086e4:	e009      	b.n	80086fa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086e6:	f7fc ffcd 	bl	8005684 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d902      	bls.n	80086fa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	73fb      	strb	r3, [r7, #15]
        break;
 80086f8:	e004      	b.n	8008704 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80086fa:	f7ff fd7c 	bl	80081f6 <LL_RCC_PLLSAI1_IsReady>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b01      	cmp	r3, #1
 8008702:	d1f0      	bne.n	80086e6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d108      	bne.n	800871c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800870a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008718:	4313      	orrs	r3, r2
 800871a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e090      	b.n	800885a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7f9 fa1b 	bl	8001b88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	22ca      	movs	r2, #202	; 0xca
 8008760:	625a      	str	r2, [r3, #36]	; 0x24
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2253      	movs	r2, #83	; 0x53
 8008768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f89f 	bl	80088ae <RTC_EnterInitMode>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2204      	movs	r2, #4
 8008782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e067      	b.n	800885a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800879c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6899      	ldr	r1, [r3, #8]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68d2      	ldr	r2, [r2, #12]
 80087c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6919      	ldr	r1, [r3, #16]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	041a      	lsls	r2, r3, #16
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087e8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0203 	bic.w	r2, r2, #3
 80087f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d113      	bne.n	8008848 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f81e 	bl	8008862 <HAL_RTC_WaitForSynchro>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	22ff      	movs	r2, #255	; 0xff
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e008      	b.n	800885a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	22ff      	movs	r2, #255	; 0xff
 800884e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008858:	2300      	movs	r3, #0
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008878:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800887a:	f7fc ff03 	bl	8005684 <HAL_GetTick>
 800887e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008880:	e009      	b.n	8008896 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008882:	f7fc feff 	bl	8005684 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008890:	d901      	bls.n	8008896 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e007      	b.n	80088a6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ee      	beq.n	8008882 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d119      	bne.n	80088f8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80088ce:	f7fc fed9 	bl	8005684 <HAL_GetTick>
 80088d2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088d4:	e009      	b.n	80088ea <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80088d6:	f7fc fed5 	bl	8005684 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088e4:	d901      	bls.n	80088ea <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e007      	b.n	80088fa <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0ee      	beq.n	80088d6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d101      	bne.n	800891e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800891a:	2302      	movs	r3, #2
 800891c:	e0a8      	b.n	8008a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	22ca      	movs	r2, #202	; 0xca
 8008934:	625a      	str	r2, [r3, #36]	; 0x24
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2253      	movs	r2, #83	; 0x53
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008948:	2b00      	cmp	r3, #0
 800894a:	d020      	beq.n	800898e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 800894c:	f7fc fe9a 	bl	8005684 <HAL_GetTick>
 8008950:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008952:	e015      	b.n	8008980 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008954:	f7fc fe96 	bl	8005684 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008962:	d90d      	bls.n	8008980 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2203      	movs	r2, #3
 8008970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e077      	b.n	8008a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e2      	bne.n	8008954 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800899c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80089ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80089b0:	f7fc fe68 	bl	8005684 <HAL_GetTick>
 80089b4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80089b6:	e015      	b.n	80089e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089b8:	f7fc fe64 	bl	8005684 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089c6:	d90d      	bls.n	80089e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	22ff      	movs	r2, #255	; 0xff
 80089ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2203      	movs	r2, #3
 80089d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e045      	b.n	8008a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0e2      	beq.n	80089b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0207 	bic.w	r2, r2, #7
 8008a08:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6899      	ldr	r1, [r3, #8]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a20:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a34:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a44:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a54:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	22ff      	movs	r2, #255	; 0xff
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	58000800 	.word	0x58000800

08008a7c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00b      	beq.n	8008aaa <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f818 	bl	8008ac8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008aa8:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008aac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ab0:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	58000800 	.word	0x58000800

08008ac8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e01d      	b.n	8008b2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f9 f85a 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f000 f97c 	bl	8008e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <HAL_TIM_Base_Start_IT+0x50>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b06      	cmp	r3, #6
 8008b5c:	d00b      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x42>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b64:	d007      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0201 	orr.w	r2, r2, #1
 8008b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	00010007 	.word	0x00010007

08008b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d122      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d11b      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0202 	mvn.w	r2, #2
 8008bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f905 	bl	8008dda <HAL_TIM_IC_CaptureCallback>
 8008bd0:	e005      	b.n	8008bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f8f7 	bl	8008dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f908 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0304 	and.w	r3, r3, #4
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d122      	bne.n	8008c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d11b      	bne.n	8008c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0204 	mvn.w	r2, #4
 8008c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f8db 	bl	8008dda <HAL_TIM_IC_CaptureCallback>
 8008c24:	e005      	b.n	8008c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f8cd 	bl	8008dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8de 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d122      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d11b      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0208 	mvn.w	r2, #8
 8008c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2204      	movs	r2, #4
 8008c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f8b1 	bl	8008dda <HAL_TIM_IC_CaptureCallback>
 8008c78:	e005      	b.n	8008c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8a3 	bl	8008dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f8b4 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d122      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d11b      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0210 	mvn.w	r2, #16
 8008cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f887 	bl	8008dda <HAL_TIM_IC_CaptureCallback>
 8008ccc:	e005      	b.n	8008cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f879 	bl	8008dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f88a 	bl	8008dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d10e      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d107      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f06f 0201 	mvn.w	r2, #1
 8008d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7f8 fe1a 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d16:	2b80      	cmp	r3, #128	; 0x80
 8008d18:	d10e      	bne.n	8008d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d24:	2b80      	cmp	r3, #128	; 0x80
 8008d26:	d107      	bne.n	8008d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8de 	bl	8008ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d46:	d10e      	bne.n	8008d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d107      	bne.n	8008d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f8d1 	bl	8008f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	d10e      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7e:	2b40      	cmp	r3, #64	; 0x40
 8008d80:	d107      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f838 	bl	8008e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d10e      	bne.n	8008dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d107      	bne.n	8008dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f06f 0220 	mvn.w	r2, #32
 8008db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f891 	bl	8008ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ed4 <TIM_Base_SetConfig+0xbc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x20>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d108      	bne.n	8008e4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a21      	ldr	r2, [pc, #132]	; (8008ed4 <TIM_Base_SetConfig+0xbc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00b      	beq.n	8008e6a <TIM_Base_SetConfig+0x52>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d007      	beq.n	8008e6a <TIM_Base_SetConfig+0x52>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <TIM_Base_SetConfig+0xc0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_Base_SetConfig+0x52>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <TIM_Base_SetConfig+0xc4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d108      	bne.n	8008e7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <TIM_Base_SetConfig+0xbc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d007      	beq.n	8008eb8 <TIM_Base_SetConfig+0xa0>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a0b      	ldr	r2, [pc, #44]	; (8008ed8 <TIM_Base_SetConfig+0xc0>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_Base_SetConfig+0xa0>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <TIM_Base_SetConfig+0xc4>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d103      	bne.n	8008ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	615a      	str	r2, [r3, #20]
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	40014400 	.word	0x40014400
 8008edc:	40014800 	.word	0x40014800

08008ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <LL_RCC_GetUSARTClockSource>:
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4013      	ands	r3, r2
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <LL_RCC_GetLPUARTClockSource>:
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4013      	ands	r3, r2
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e042      	b.n	8008ff4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7f8 fe4b 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2224      	movs	r2, #36	; 0x24
 8008f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa4e 	bl	8009440 <UART_SetConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e022      	b.n	8008ff4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 faa6 	bl	800a508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fb2d 	bl	800a64c <UART_CheckIdleState>
 8008ff2:	4603      	mov	r3, r0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	; 0x28
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009012:	2b20      	cmp	r3, #32
 8009014:	f040 8083 	bne.w	800911e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_UART_Transmit+0x28>
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e07b      	b.n	8009120 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_UART_Transmit+0x3a>
 8009032:	2302      	movs	r3, #2
 8009034:	e074      	b.n	8009120 <HAL_UART_Transmit+0x124>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2221      	movs	r2, #33	; 0x21
 800904a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800904e:	f7fc fb19 	bl	8005684 <HAL_GetTick>
 8009052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906c:	d108      	bne.n	8009080 <HAL_UART_Transmit+0x84>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	61bb      	str	r3, [r7, #24]
 800907e:	e003      	b.n	8009088 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009090:	e02c      	b.n	80090ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2200      	movs	r2, #0
 800909a:	2180      	movs	r1, #128	; 0x80
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f001 fb1d 	bl	800a6dc <UART_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e039      	b.n	8009120 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10b      	bne.n	80090ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	3302      	adds	r3, #2
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	e007      	b.n	80090da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	781a      	ldrb	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3301      	adds	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1cc      	bne.n	8009092 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2200      	movs	r2, #0
 8009100:	2140      	movs	r1, #64	; 0x40
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f001 faea 	bl	800a6dc <UART_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e006      	b.n	8009120 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3720      	adds	r7, #32
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	f640 030f 	movw	r3, #2063	; 0x80f
 800914e:	4013      	ands	r3, r2
 8009150:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d118      	bne.n	800918a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d013      	beq.n	800918a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 8145 	beq.w	800940a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
      }
      return;
 8009188:	e13f      	b.n	800940a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80e8 	beq.w	8009362 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4ba1      	ldr	r3, [pc, #644]	; (800941c <HAL_UART_IRQHandler+0x2f4>)
 8009196:	4013      	ands	r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d105      	bne.n	80091a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	4ba0      	ldr	r3, [pc, #640]	; (8009420 <HAL_UART_IRQHandler+0x2f8>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80dd 	beq.w	8009362 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d010      	beq.n	80091d4 <HAL_UART_IRQHandler+0xac>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2201      	movs	r2, #1
 80091c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ca:	f043 0201 	orr.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d010      	beq.n	8009200 <HAL_UART_IRQHandler+0xd8>
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2202      	movs	r2, #2
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f6:	f043 0204 	orr.w	r2, r3, #4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d010      	beq.n	800922c <HAL_UART_IRQHandler+0x104>
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2204      	movs	r2, #4
 800921a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009222:	f043 0202 	orr.w	r2, r3, #2
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b00      	cmp	r3, #0
 8009234:	d015      	beq.n	8009262 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f003 0320 	and.w	r3, r3, #32
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	4b76      	ldr	r3, [pc, #472]	; (800941c <HAL_UART_IRQHandler+0x2f4>)
 8009244:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00b      	beq.n	8009262 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2208      	movs	r2, #8
 8009250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009258:	f043 0208 	orr.w	r2, r3, #8
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009268:	2b00      	cmp	r3, #0
 800926a:	d011      	beq.n	8009290 <HAL_UART_IRQHandler+0x168>
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00c      	beq.n	8009290 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800927e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 80b9 	beq.w	800940e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d011      	beq.n	80092ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b40      	cmp	r3, #64	; 0x40
 80092de:	d004      	beq.n	80092ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d031      	beq.n	800934e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 fa76 	bl	800a7dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b40      	cmp	r3, #64	; 0x40
 80092fc:	d123      	bne.n	8009346 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009312:	2b00      	cmp	r3, #0
 8009314:	d013      	beq.n	800933e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800931a:	4a42      	ldr	r2, [pc, #264]	; (8009424 <HAL_UART_IRQHandler+0x2fc>)
 800931c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009322:	4618      	mov	r0, r3
 8009324:	f7fc fb5d 	bl	80059e2 <HAL_DMA_Abort_IT>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d017      	beq.n	800935e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933c:	e00f      	b.n	800935e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f872 	bl	8009428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	e00b      	b.n	800935e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f86e 	bl	8009428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	e007      	b.n	800935e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f86a 	bl	8009428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800935c:	e057      	b.n	800940e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935e:	bf00      	nop
    return;
 8009360:	e055      	b.n	800940e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00d      	beq.n	8009388 <HAL_UART_IRQHandler+0x260>
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800937e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 fa7e 	bl	800a882 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009386:	e045      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b00      	cmp	r3, #0
 8009390:	d012      	beq.n	80093b8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d031      	beq.n	8009412 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	4798      	blx	r3
    }
    return;
 80093b6:	e02c      	b.n	8009412 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <HAL_UART_IRQHandler+0x2ac>
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fa3e 	bl	800a84e <UART_EndTransmit_IT>
    return;
 80093d2:	e01f      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <HAL_UART_IRQHandler+0x2c8>
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fa5e 	bl	800a8aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093ee:	e011      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00c      	beq.n	8009414 <HAL_UART_IRQHandler+0x2ec>
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	da09      	bge.n	8009414 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fa48 	bl	800a896 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009406:	bf00      	nop
 8009408:	e004      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
      return;
 800940a:	bf00      	nop
 800940c:	e002      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
    return;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009412:	bf00      	nop
  }
}
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	10000001 	.word	0x10000001
 8009420:	04000120 	.word	0x04000120
 8009424:	0800a823 	.word	0x0800a823

08009428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	0000      	movs	r0, r0
	...

08009440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009440:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009444:	b08a      	sub	sp, #40	; 0x28
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	431a      	orrs	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	4313      	orrs	r3, r2
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009474:	4313      	orrs	r3, r2
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4ba4      	ldr	r3, [pc, #656]	; (8009710 <UART_SetConfig+0x2d0>)
 8009480:	4013      	ands	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009488:	430b      	orrs	r3, r1
 800948a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a99      	ldr	r2, [pc, #612]	; (8009714 <UART_SetConfig+0x2d4>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d004      	beq.n	80094bc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b8:	4313      	orrs	r3, r2
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80094c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	6812      	ldr	r2, [r2, #0]
 80094ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094d0:	430b      	orrs	r3, r1
 80094d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	f023 010f 	bic.w	r1, r3, #15
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a8a      	ldr	r2, [pc, #552]	; (8009718 <UART_SetConfig+0x2d8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d126      	bne.n	8009542 <UART_SetConfig+0x102>
 80094f4:	2003      	movs	r0, #3
 80094f6:	f7ff fd11 	bl	8008f1c <LL_RCC_GetUSARTClockSource>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d81b      	bhi.n	8009538 <UART_SetConfig+0xf8>
 8009500:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <UART_SetConfig+0xc8>)
 8009502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009506:	bf00      	nop
 8009508:	08009519 	.word	0x08009519
 800950c:	08009529 	.word	0x08009529
 8009510:	08009521 	.word	0x08009521
 8009514:	08009531 	.word	0x08009531
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800951e:	e042      	b.n	80095a6 <UART_SetConfig+0x166>
 8009520:	2302      	movs	r3, #2
 8009522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009526:	e03e      	b.n	80095a6 <UART_SetConfig+0x166>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800952e:	e03a      	b.n	80095a6 <UART_SetConfig+0x166>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009536:	e036      	b.n	80095a6 <UART_SetConfig+0x166>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953e:	bf00      	nop
 8009540:	e031      	b.n	80095a6 <UART_SetConfig+0x166>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a73      	ldr	r2, [pc, #460]	; (8009714 <UART_SetConfig+0x2d4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d129      	bne.n	80095a0 <UART_SetConfig+0x160>
 800954c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009550:	f7ff fcf4 	bl	8008f3c <LL_RCC_GetLPUARTClockSource>
 8009554:	4603      	mov	r3, r0
 8009556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955a:	d014      	beq.n	8009586 <UART_SetConfig+0x146>
 800955c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009560:	d802      	bhi.n	8009568 <UART_SetConfig+0x128>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d007      	beq.n	8009576 <UART_SetConfig+0x136>
 8009566:	e016      	b.n	8009596 <UART_SetConfig+0x156>
 8009568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800956c:	d007      	beq.n	800957e <UART_SetConfig+0x13e>
 800956e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009572:	d00c      	beq.n	800958e <UART_SetConfig+0x14e>
 8009574:	e00f      	b.n	8009596 <UART_SetConfig+0x156>
 8009576:	2300      	movs	r3, #0
 8009578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957c:	e013      	b.n	80095a6 <UART_SetConfig+0x166>
 800957e:	2302      	movs	r3, #2
 8009580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009584:	e00f      	b.n	80095a6 <UART_SetConfig+0x166>
 8009586:	2304      	movs	r3, #4
 8009588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958c:	e00b      	b.n	80095a6 <UART_SetConfig+0x166>
 800958e:	2308      	movs	r3, #8
 8009590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009594:	e007      	b.n	80095a6 <UART_SetConfig+0x166>
 8009596:	2310      	movs	r3, #16
 8009598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959c:	bf00      	nop
 800959e:	e002      	b.n	80095a6 <UART_SetConfig+0x166>
 80095a0:	2310      	movs	r3, #16
 80095a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a5a      	ldr	r2, [pc, #360]	; (8009714 <UART_SetConfig+0x2d4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	f040 8428 	bne.w	8009e02 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	f200 8171 	bhi.w	800989e <UART_SetConfig+0x45e>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <UART_SetConfig+0x184>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	0800989f 	.word	0x0800989f
 80095cc:	0800968b 	.word	0x0800968b
 80095d0:	0800989f 	.word	0x0800989f
 80095d4:	0800974f 	.word	0x0800974f
 80095d8:	0800989f 	.word	0x0800989f
 80095dc:	0800989f 	.word	0x0800989f
 80095e0:	0800989f 	.word	0x0800989f
 80095e4:	080097f1 	.word	0x080097f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095e8:	f7fe fb96 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 80095ec:	4602      	mov	r2, r0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d044      	beq.n	8009680 <UART_SetConfig+0x240>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d03e      	beq.n	800967c <UART_SetConfig+0x23c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b02      	cmp	r3, #2
 8009604:	d038      	beq.n	8009678 <UART_SetConfig+0x238>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b03      	cmp	r3, #3
 800960c:	d032      	beq.n	8009674 <UART_SetConfig+0x234>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	2b04      	cmp	r3, #4
 8009614:	d02c      	beq.n	8009670 <UART_SetConfig+0x230>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	2b05      	cmp	r3, #5
 800961c:	d026      	beq.n	800966c <UART_SetConfig+0x22c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	2b06      	cmp	r3, #6
 8009624:	d020      	beq.n	8009668 <UART_SetConfig+0x228>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	2b07      	cmp	r3, #7
 800962c:	d01a      	beq.n	8009664 <UART_SetConfig+0x224>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	2b08      	cmp	r3, #8
 8009634:	d014      	beq.n	8009660 <UART_SetConfig+0x220>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	2b09      	cmp	r3, #9
 800963c:	d00e      	beq.n	800965c <UART_SetConfig+0x21c>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	2b0a      	cmp	r3, #10
 8009644:	d008      	beq.n	8009658 <UART_SetConfig+0x218>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	2b0b      	cmp	r3, #11
 800964c:	d102      	bne.n	8009654 <UART_SetConfig+0x214>
 800964e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009652:	e016      	b.n	8009682 <UART_SetConfig+0x242>
 8009654:	2301      	movs	r3, #1
 8009656:	e014      	b.n	8009682 <UART_SetConfig+0x242>
 8009658:	2380      	movs	r3, #128	; 0x80
 800965a:	e012      	b.n	8009682 <UART_SetConfig+0x242>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	e010      	b.n	8009682 <UART_SetConfig+0x242>
 8009660:	2320      	movs	r3, #32
 8009662:	e00e      	b.n	8009682 <UART_SetConfig+0x242>
 8009664:	2310      	movs	r3, #16
 8009666:	e00c      	b.n	8009682 <UART_SetConfig+0x242>
 8009668:	230c      	movs	r3, #12
 800966a:	e00a      	b.n	8009682 <UART_SetConfig+0x242>
 800966c:	230a      	movs	r3, #10
 800966e:	e008      	b.n	8009682 <UART_SetConfig+0x242>
 8009670:	2308      	movs	r3, #8
 8009672:	e006      	b.n	8009682 <UART_SetConfig+0x242>
 8009674:	2306      	movs	r3, #6
 8009676:	e004      	b.n	8009682 <UART_SetConfig+0x242>
 8009678:	2304      	movs	r3, #4
 800967a:	e002      	b.n	8009682 <UART_SetConfig+0x242>
 800967c:	2302      	movs	r3, #2
 800967e:	e000      	b.n	8009682 <UART_SetConfig+0x242>
 8009680:	2301      	movs	r3, #1
 8009682:	fbb2 f3f3 	udiv	r3, r2, r3
 8009686:	617b      	str	r3, [r7, #20]
        break;
 8009688:	e10c      	b.n	80098a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b00      	cmp	r3, #0
 8009690:	d05a      	beq.n	8009748 <UART_SetConfig+0x308>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b01      	cmp	r3, #1
 8009698:	d054      	beq.n	8009744 <UART_SetConfig+0x304>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d04e      	beq.n	8009740 <UART_SetConfig+0x300>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d048      	beq.n	800973c <UART_SetConfig+0x2fc>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d02c      	beq.n	800970c <UART_SetConfig+0x2cc>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d026      	beq.n	8009708 <UART_SetConfig+0x2c8>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b06      	cmp	r3, #6
 80096c0:	d020      	beq.n	8009704 <UART_SetConfig+0x2c4>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b07      	cmp	r3, #7
 80096c8:	d01a      	beq.n	8009700 <UART_SetConfig+0x2c0>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b08      	cmp	r3, #8
 80096d0:	d014      	beq.n	80096fc <UART_SetConfig+0x2bc>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	d00e      	beq.n	80096f8 <UART_SetConfig+0x2b8>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b0a      	cmp	r3, #10
 80096e0:	d008      	beq.n	80096f4 <UART_SetConfig+0x2b4>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2b0b      	cmp	r3, #11
 80096e8:	d102      	bne.n	80096f0 <UART_SetConfig+0x2b0>
 80096ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80096ee:	e02c      	b.n	800974a <UART_SetConfig+0x30a>
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <UART_SetConfig+0x2dc>)
 80096f2:	e02a      	b.n	800974a <UART_SetConfig+0x30a>
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <UART_SetConfig+0x2e0>)
 80096f6:	e028      	b.n	800974a <UART_SetConfig+0x30a>
 80096f8:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <UART_SetConfig+0x2e4>)
 80096fa:	e026      	b.n	800974a <UART_SetConfig+0x30a>
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <UART_SetConfig+0x2e8>)
 80096fe:	e024      	b.n	800974a <UART_SetConfig+0x30a>
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <UART_SetConfig+0x2ec>)
 8009702:	e022      	b.n	800974a <UART_SetConfig+0x30a>
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <UART_SetConfig+0x2f0>)
 8009706:	e020      	b.n	800974a <UART_SetConfig+0x30a>
 8009708:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <UART_SetConfig+0x2f4>)
 800970a:	e01e      	b.n	800974a <UART_SetConfig+0x30a>
 800970c:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <UART_SetConfig+0x2f8>)
 800970e:	e01c      	b.n	800974a <UART_SetConfig+0x30a>
 8009710:	cfff69f3 	.word	0xcfff69f3
 8009714:	40008000 	.word	0x40008000
 8009718:	40013800 	.word	0x40013800
 800971c:	00f42400 	.word	0x00f42400
 8009720:	0001e848 	.word	0x0001e848
 8009724:	0003d090 	.word	0x0003d090
 8009728:	0007a120 	.word	0x0007a120
 800972c:	000f4240 	.word	0x000f4240
 8009730:	00145855 	.word	0x00145855
 8009734:	00186a00 	.word	0x00186a00
 8009738:	001e8480 	.word	0x001e8480
 800973c:	4ba6      	ldr	r3, [pc, #664]	; (80099d8 <UART_SetConfig+0x598>)
 800973e:	e004      	b.n	800974a <UART_SetConfig+0x30a>
 8009740:	4ba6      	ldr	r3, [pc, #664]	; (80099dc <UART_SetConfig+0x59c>)
 8009742:	e002      	b.n	800974a <UART_SetConfig+0x30a>
 8009744:	4ba6      	ldr	r3, [pc, #664]	; (80099e0 <UART_SetConfig+0x5a0>)
 8009746:	e000      	b.n	800974a <UART_SetConfig+0x30a>
 8009748:	4ba6      	ldr	r3, [pc, #664]	; (80099e4 <UART_SetConfig+0x5a4>)
 800974a:	617b      	str	r3, [r7, #20]
        break;
 800974c:	e0aa      	b.n	80098a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800974e:	f7fe fa65 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 8009752:	4602      	mov	r2, r0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d044      	beq.n	80097e6 <UART_SetConfig+0x3a6>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	2b01      	cmp	r3, #1
 8009762:	d03e      	beq.n	80097e2 <UART_SetConfig+0x3a2>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	2b02      	cmp	r3, #2
 800976a:	d038      	beq.n	80097de <UART_SetConfig+0x39e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	2b03      	cmp	r3, #3
 8009772:	d032      	beq.n	80097da <UART_SetConfig+0x39a>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	2b04      	cmp	r3, #4
 800977a:	d02c      	beq.n	80097d6 <UART_SetConfig+0x396>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	2b05      	cmp	r3, #5
 8009782:	d026      	beq.n	80097d2 <UART_SetConfig+0x392>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	2b06      	cmp	r3, #6
 800978a:	d020      	beq.n	80097ce <UART_SetConfig+0x38e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	2b07      	cmp	r3, #7
 8009792:	d01a      	beq.n	80097ca <UART_SetConfig+0x38a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	2b08      	cmp	r3, #8
 800979a:	d014      	beq.n	80097c6 <UART_SetConfig+0x386>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	d00e      	beq.n	80097c2 <UART_SetConfig+0x382>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b0a      	cmp	r3, #10
 80097aa:	d008      	beq.n	80097be <UART_SetConfig+0x37e>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	2b0b      	cmp	r3, #11
 80097b2:	d102      	bne.n	80097ba <UART_SetConfig+0x37a>
 80097b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b8:	e016      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e014      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097be:	2380      	movs	r3, #128	; 0x80
 80097c0:	e012      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	e010      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097c6:	2320      	movs	r3, #32
 80097c8:	e00e      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097ca:	2310      	movs	r3, #16
 80097cc:	e00c      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097ce:	230c      	movs	r3, #12
 80097d0:	e00a      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097d2:	230a      	movs	r3, #10
 80097d4:	e008      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097d6:	2308      	movs	r3, #8
 80097d8:	e006      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097da:	2306      	movs	r3, #6
 80097dc:	e004      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097de:	2304      	movs	r3, #4
 80097e0:	e002      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097e2:	2302      	movs	r3, #2
 80097e4:	e000      	b.n	80097e8 <UART_SetConfig+0x3a8>
 80097e6:	2301      	movs	r3, #1
 80097e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ec:	617b      	str	r3, [r7, #20]
        break;
 80097ee:	e059      	b.n	80098a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d04e      	beq.n	8009896 <UART_SetConfig+0x456>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d047      	beq.n	8009890 <UART_SetConfig+0x450>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b02      	cmp	r3, #2
 8009806:	d040      	beq.n	800988a <UART_SetConfig+0x44a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b03      	cmp	r3, #3
 800980e:	d039      	beq.n	8009884 <UART_SetConfig+0x444>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b04      	cmp	r3, #4
 8009816:	d032      	beq.n	800987e <UART_SetConfig+0x43e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2b05      	cmp	r3, #5
 800981e:	d02b      	beq.n	8009878 <UART_SetConfig+0x438>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b06      	cmp	r3, #6
 8009826:	d024      	beq.n	8009872 <UART_SetConfig+0x432>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	2b07      	cmp	r3, #7
 800982e:	d01d      	beq.n	800986c <UART_SetConfig+0x42c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b08      	cmp	r3, #8
 8009836:	d016      	beq.n	8009866 <UART_SetConfig+0x426>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b09      	cmp	r3, #9
 800983e:	d00f      	beq.n	8009860 <UART_SetConfig+0x420>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b0a      	cmp	r3, #10
 8009846:	d008      	beq.n	800985a <UART_SetConfig+0x41a>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d101      	bne.n	8009854 <UART_SetConfig+0x414>
 8009850:	2380      	movs	r3, #128	; 0x80
 8009852:	e022      	b.n	800989a <UART_SetConfig+0x45a>
 8009854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009858:	e01f      	b.n	800989a <UART_SetConfig+0x45a>
 800985a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985e:	e01c      	b.n	800989a <UART_SetConfig+0x45a>
 8009860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009864:	e019      	b.n	800989a <UART_SetConfig+0x45a>
 8009866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800986a:	e016      	b.n	800989a <UART_SetConfig+0x45a>
 800986c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009870:	e013      	b.n	800989a <UART_SetConfig+0x45a>
 8009872:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009876:	e010      	b.n	800989a <UART_SetConfig+0x45a>
 8009878:	f640 43cc 	movw	r3, #3276	; 0xccc
 800987c:	e00d      	b.n	800989a <UART_SetConfig+0x45a>
 800987e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009882:	e00a      	b.n	800989a <UART_SetConfig+0x45a>
 8009884:	f241 5355 	movw	r3, #5461	; 0x1555
 8009888:	e007      	b.n	800989a <UART_SetConfig+0x45a>
 800988a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800988e:	e004      	b.n	800989a <UART_SetConfig+0x45a>
 8009890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009894:	e001      	b.n	800989a <UART_SetConfig+0x45a>
 8009896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989a:	617b      	str	r3, [r7, #20]
        break;
 800989c:	e002      	b.n	80098a4 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	76fb      	strb	r3, [r7, #27]
        break;
 80098a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 8604 	beq.w	800a4b4 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	005b      	lsls	r3, r3, #1
 80098b4:	4413      	add	r3, r2
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d305      	bcc.n	80098c8 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d903      	bls.n	80098d0 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	76fb      	strb	r3, [r7, #27]
 80098cc:	f000 bdf2 	b.w	800a4b4 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80098d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	f200 8281 	bhi.w	8009ddc <UART_SetConfig+0x99c>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0x4a0>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009905 	.word	0x08009905
 80098e4:	08009ddd 	.word	0x08009ddd
 80098e8:	08009a55 	.word	0x08009a55
 80098ec:	08009ddd 	.word	0x08009ddd
 80098f0:	08009b4b 	.word	0x08009b4b
 80098f4:	08009ddd 	.word	0x08009ddd
 80098f8:	08009ddd 	.word	0x08009ddd
 80098fc:	08009ddd 	.word	0x08009ddd
 8009900:	08009c89 	.word	0x08009c89
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009904:	f7fe fa08 	bl	8007d18 <HAL_RCC_GetPCLK1Freq>
 8009908:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4618      	mov	r0, r3
 800990e:	f04f 0100 	mov.w	r1, #0
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	2b00      	cmp	r3, #0
 8009918:	d070      	beq.n	80099fc <UART_SetConfig+0x5bc>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	2b01      	cmp	r3, #1
 8009920:	d067      	beq.n	80099f2 <UART_SetConfig+0x5b2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2b02      	cmp	r3, #2
 8009928:	d05e      	beq.n	80099e8 <UART_SetConfig+0x5a8>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	2b03      	cmp	r3, #3
 8009930:	d04c      	beq.n	80099cc <UART_SetConfig+0x58c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b04      	cmp	r3, #4
 8009938:	d043      	beq.n	80099c2 <UART_SetConfig+0x582>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	2b05      	cmp	r3, #5
 8009940:	d03a      	beq.n	80099b8 <UART_SetConfig+0x578>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	2b06      	cmp	r3, #6
 8009948:	d031      	beq.n	80099ae <UART_SetConfig+0x56e>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	2b07      	cmp	r3, #7
 8009950:	d028      	beq.n	80099a4 <UART_SetConfig+0x564>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b08      	cmp	r3, #8
 8009958:	d01f      	beq.n	800999a <UART_SetConfig+0x55a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b09      	cmp	r3, #9
 8009960:	d016      	beq.n	8009990 <UART_SetConfig+0x550>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b0a      	cmp	r3, #10
 8009968:	d00d      	beq.n	8009986 <UART_SetConfig+0x546>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b0b      	cmp	r3, #11
 8009970:	d104      	bne.n	800997c <UART_SetConfig+0x53c>
 8009972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009976:	f04f 0400 	mov.w	r4, #0
 800997a:	e043      	b.n	8009a04 <UART_SetConfig+0x5c4>
 800997c:	f04f 0301 	mov.w	r3, #1
 8009980:	f04f 0400 	mov.w	r4, #0
 8009984:	e03e      	b.n	8009a04 <UART_SetConfig+0x5c4>
 8009986:	f04f 0380 	mov.w	r3, #128	; 0x80
 800998a:	f04f 0400 	mov.w	r4, #0
 800998e:	e039      	b.n	8009a04 <UART_SetConfig+0x5c4>
 8009990:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009994:	f04f 0400 	mov.w	r4, #0
 8009998:	e034      	b.n	8009a04 <UART_SetConfig+0x5c4>
 800999a:	f04f 0320 	mov.w	r3, #32
 800999e:	f04f 0400 	mov.w	r4, #0
 80099a2:	e02f      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099a4:	f04f 0310 	mov.w	r3, #16
 80099a8:	f04f 0400 	mov.w	r4, #0
 80099ac:	e02a      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099ae:	f04f 030c 	mov.w	r3, #12
 80099b2:	f04f 0400 	mov.w	r4, #0
 80099b6:	e025      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099b8:	f04f 030a 	mov.w	r3, #10
 80099bc:	f04f 0400 	mov.w	r4, #0
 80099c0:	e020      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099c2:	f04f 0308 	mov.w	r3, #8
 80099c6:	f04f 0400 	mov.w	r4, #0
 80099ca:	e01b      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099cc:	f04f 0306 	mov.w	r3, #6
 80099d0:	f04f 0400 	mov.w	r4, #0
 80099d4:	e016      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099d6:	bf00      	nop
 80099d8:	0028b0aa 	.word	0x0028b0aa
 80099dc:	003d0900 	.word	0x003d0900
 80099e0:	007a1200 	.word	0x007a1200
 80099e4:	00f42400 	.word	0x00f42400
 80099e8:	f04f 0304 	mov.w	r3, #4
 80099ec:	f04f 0400 	mov.w	r4, #0
 80099f0:	e008      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099f2:	f04f 0302 	mov.w	r3, #2
 80099f6:	f04f 0400 	mov.w	r4, #0
 80099fa:	e003      	b.n	8009a04 <UART_SetConfig+0x5c4>
 80099fc:	f04f 0301 	mov.w	r3, #1
 8009a00:	f04f 0400 	mov.w	r4, #0
 8009a04:	461a      	mov	r2, r3
 8009a06:	4623      	mov	r3, r4
 8009a08:	f7f6 fbc2 	bl	8000190 <__aeabi_uldivmod>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4619      	mov	r1, r3
 8009a12:	4622      	mov	r2, r4
 8009a14:	f04f 0300 	mov.w	r3, #0
 8009a18:	f04f 0400 	mov.w	r4, #0
 8009a1c:	0214      	lsls	r4, r2, #8
 8009a1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a22:	020b      	lsls	r3, r1, #8
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6852      	ldr	r2, [r2, #4]
 8009a28:	0852      	lsrs	r2, r2, #1
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	eb13 0b01 	adds.w	fp, r3, r1
 8009a34:	eb44 0c02 	adc.w	ip, r4, r2
 8009a38:	4658      	mov	r0, fp
 8009a3a:	4661      	mov	r1, ip
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f04f 0400 	mov.w	r4, #0
 8009a44:	461a      	mov	r2, r3
 8009a46:	4623      	mov	r3, r4
 8009a48:	f7f6 fba2 	bl	8000190 <__aeabi_uldivmod>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	61fb      	str	r3, [r7, #28]
            break;
 8009a52:	e1c6      	b.n	8009de2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05b      	beq.n	8009b14 <UART_SetConfig+0x6d4>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d053      	beq.n	8009b0c <UART_SetConfig+0x6cc>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d04b      	beq.n	8009b04 <UART_SetConfig+0x6c4>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d043      	beq.n	8009afc <UART_SetConfig+0x6bc>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b04      	cmp	r3, #4
 8009a7a:	d03b      	beq.n	8009af4 <UART_SetConfig+0x6b4>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	d033      	beq.n	8009aec <UART_SetConfig+0x6ac>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d02b      	beq.n	8009ae4 <UART_SetConfig+0x6a4>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b07      	cmp	r3, #7
 8009a92:	d023      	beq.n	8009adc <UART_SetConfig+0x69c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d01b      	beq.n	8009ad4 <UART_SetConfig+0x694>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b09      	cmp	r3, #9
 8009aa2:	d013      	beq.n	8009acc <UART_SetConfig+0x68c>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b0a      	cmp	r3, #10
 8009aaa:	d00b      	beq.n	8009ac4 <UART_SetConfig+0x684>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b0b      	cmp	r3, #11
 8009ab2:	d103      	bne.n	8009abc <UART_SetConfig+0x67c>
 8009ab4:	4bae      	ldr	r3, [pc, #696]	; (8009d70 <UART_SetConfig+0x930>)
 8009ab6:	f04f 0400 	mov.w	r4, #0
 8009aba:	e02e      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009abc:	4bad      	ldr	r3, [pc, #692]	; (8009d74 <UART_SetConfig+0x934>)
 8009abe:	f04f 0400 	mov.w	r4, #0
 8009ac2:	e02a      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009ac4:	4bac      	ldr	r3, [pc, #688]	; (8009d78 <UART_SetConfig+0x938>)
 8009ac6:	f04f 0400 	mov.w	r4, #0
 8009aca:	e026      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009acc:	4bab      	ldr	r3, [pc, #684]	; (8009d7c <UART_SetConfig+0x93c>)
 8009ace:	f04f 0400 	mov.w	r4, #0
 8009ad2:	e022      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009ad4:	4baa      	ldr	r3, [pc, #680]	; (8009d80 <UART_SetConfig+0x940>)
 8009ad6:	f04f 0400 	mov.w	r4, #0
 8009ada:	e01e      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009adc:	4ba9      	ldr	r3, [pc, #676]	; (8009d84 <UART_SetConfig+0x944>)
 8009ade:	f04f 0400 	mov.w	r4, #0
 8009ae2:	e01a      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009ae4:	a49e      	add	r4, pc, #632	; (adr r4, 8009d60 <UART_SetConfig+0x920>)
 8009ae6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009aea:	e016      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009aec:	4ba6      	ldr	r3, [pc, #664]	; (8009d88 <UART_SetConfig+0x948>)
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	e012      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009af4:	4ba5      	ldr	r3, [pc, #660]	; (8009d8c <UART_SetConfig+0x94c>)
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	e00e      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009afc:	a49a      	add	r4, pc, #616	; (adr r4, 8009d68 <UART_SetConfig+0x928>)
 8009afe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b02:	e00a      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009b04:	4ba2      	ldr	r3, [pc, #648]	; (8009d90 <UART_SetConfig+0x950>)
 8009b06:	f04f 0400 	mov.w	r4, #0
 8009b0a:	e006      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009b0c:	4ba1      	ldr	r3, [pc, #644]	; (8009d94 <UART_SetConfig+0x954>)
 8009b0e:	f04f 0400 	mov.w	r4, #0
 8009b12:	e002      	b.n	8009b1a <UART_SetConfig+0x6da>
 8009b14:	4b97      	ldr	r3, [pc, #604]	; (8009d74 <UART_SetConfig+0x934>)
 8009b16:	f04f 0400 	mov.w	r4, #0
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6852      	ldr	r2, [r2, #4]
 8009b1e:	0852      	lsrs	r2, r2, #1
 8009b20:	4611      	mov	r1, r2
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	eb13 0b01 	adds.w	fp, r3, r1
 8009b2a:	eb44 0c02 	adc.w	ip, r4, r2
 8009b2e:	4658      	mov	r0, fp
 8009b30:	4661      	mov	r1, ip
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f04f 0400 	mov.w	r4, #0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	4623      	mov	r3, r4
 8009b3e:	f7f6 fb27 	bl	8000190 <__aeabi_uldivmod>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	61fb      	str	r3, [r7, #28]
            break;
 8009b48:	e14b      	b.n	8009de2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009b4a:	f7fe f867 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 8009b4e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f04f 0100 	mov.w	r1, #0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d067      	beq.n	8009c30 <UART_SetConfig+0x7f0>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d05e      	beq.n	8009c26 <UART_SetConfig+0x7e6>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d055      	beq.n	8009c1c <UART_SetConfig+0x7dc>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d04c      	beq.n	8009c12 <UART_SetConfig+0x7d2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d043      	beq.n	8009c08 <UART_SetConfig+0x7c8>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d03a      	beq.n	8009bfe <UART_SetConfig+0x7be>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b06      	cmp	r3, #6
 8009b8e:	d031      	beq.n	8009bf4 <UART_SetConfig+0x7b4>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b07      	cmp	r3, #7
 8009b96:	d028      	beq.n	8009bea <UART_SetConfig+0x7aa>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d01f      	beq.n	8009be0 <UART_SetConfig+0x7a0>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	d016      	beq.n	8009bd6 <UART_SetConfig+0x796>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b0a      	cmp	r3, #10
 8009bae:	d00d      	beq.n	8009bcc <UART_SetConfig+0x78c>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	2b0b      	cmp	r3, #11
 8009bb6:	d104      	bne.n	8009bc2 <UART_SetConfig+0x782>
 8009bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bbc:	f04f 0400 	mov.w	r4, #0
 8009bc0:	e03a      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bc2:	f04f 0301 	mov.w	r3, #1
 8009bc6:	f04f 0400 	mov.w	r4, #0
 8009bca:	e035      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009bd0:	f04f 0400 	mov.w	r4, #0
 8009bd4:	e030      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bd6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009bda:	f04f 0400 	mov.w	r4, #0
 8009bde:	e02b      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009be0:	f04f 0320 	mov.w	r3, #32
 8009be4:	f04f 0400 	mov.w	r4, #0
 8009be8:	e026      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bea:	f04f 0310 	mov.w	r3, #16
 8009bee:	f04f 0400 	mov.w	r4, #0
 8009bf2:	e021      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bf4:	f04f 030c 	mov.w	r3, #12
 8009bf8:	f04f 0400 	mov.w	r4, #0
 8009bfc:	e01c      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009bfe:	f04f 030a 	mov.w	r3, #10
 8009c02:	f04f 0400 	mov.w	r4, #0
 8009c06:	e017      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009c08:	f04f 0308 	mov.w	r3, #8
 8009c0c:	f04f 0400 	mov.w	r4, #0
 8009c10:	e012      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009c12:	f04f 0306 	mov.w	r3, #6
 8009c16:	f04f 0400 	mov.w	r4, #0
 8009c1a:	e00d      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009c1c:	f04f 0304 	mov.w	r3, #4
 8009c20:	f04f 0400 	mov.w	r4, #0
 8009c24:	e008      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009c26:	f04f 0302 	mov.w	r3, #2
 8009c2a:	f04f 0400 	mov.w	r4, #0
 8009c2e:	e003      	b.n	8009c38 <UART_SetConfig+0x7f8>
 8009c30:	f04f 0301 	mov.w	r3, #1
 8009c34:	f04f 0400 	mov.w	r4, #0
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	f7f6 faa8 	bl	8000190 <__aeabi_uldivmod>
 8009c40:	4603      	mov	r3, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	4619      	mov	r1, r3
 8009c46:	4622      	mov	r2, r4
 8009c48:	f04f 0300 	mov.w	r3, #0
 8009c4c:	f04f 0400 	mov.w	r4, #0
 8009c50:	0214      	lsls	r4, r2, #8
 8009c52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009c56:	020b      	lsls	r3, r1, #8
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6852      	ldr	r2, [r2, #4]
 8009c5c:	0852      	lsrs	r2, r2, #1
 8009c5e:	4611      	mov	r1, r2
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	eb13 0b01 	adds.w	fp, r3, r1
 8009c68:	eb44 0c02 	adc.w	ip, r4, r2
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	4661      	mov	r1, ip
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f04f 0400 	mov.w	r4, #0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	f7f6 fa88 	bl	8000190 <__aeabi_uldivmod>
 8009c80:	4603      	mov	r3, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	61fb      	str	r3, [r7, #28]
            break;
 8009c86:	e0ac      	b.n	8009de2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 8089 	beq.w	8009da4 <UART_SetConfig+0x964>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d05b      	beq.n	8009d52 <UART_SetConfig+0x912>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d052      	beq.n	8009d48 <UART_SetConfig+0x908>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d04a      	beq.n	8009d40 <UART_SetConfig+0x900>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d041      	beq.n	8009d36 <UART_SetConfig+0x8f6>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d039      	beq.n	8009d2e <UART_SetConfig+0x8ee>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	2b06      	cmp	r3, #6
 8009cc0:	d031      	beq.n	8009d26 <UART_SetConfig+0x8e6>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	2b07      	cmp	r3, #7
 8009cc8:	d028      	beq.n	8009d1c <UART_SetConfig+0x8dc>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d01f      	beq.n	8009d12 <UART_SetConfig+0x8d2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	d016      	beq.n	8009d08 <UART_SetConfig+0x8c8>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b0a      	cmp	r3, #10
 8009ce0:	d00d      	beq.n	8009cfe <UART_SetConfig+0x8be>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	2b0b      	cmp	r3, #11
 8009ce8:	d104      	bne.n	8009cf4 <UART_SetConfig+0x8b4>
 8009cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cee:	f04f 0400 	mov.w	r4, #0
 8009cf2:	e05b      	b.n	8009dac <UART_SetConfig+0x96c>
 8009cf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009cf8:	f04f 0400 	mov.w	r4, #0
 8009cfc:	e056      	b.n	8009dac <UART_SetConfig+0x96c>
 8009cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d02:	f04f 0400 	mov.w	r4, #0
 8009d06:	e051      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d0c:	f04f 0400 	mov.w	r4, #0
 8009d10:	e04c      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d16:	f04f 0400 	mov.w	r4, #0
 8009d1a:	e047      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d20:	f04f 0400 	mov.w	r4, #0
 8009d24:	e042      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <UART_SetConfig+0x958>)
 8009d28:	f04f 0400 	mov.w	r4, #0
 8009d2c:	e03e      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d2e:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <UART_SetConfig+0x95c>)
 8009d30:	f04f 0400 	mov.w	r4, #0
 8009d34:	e03a      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d3a:	f04f 0400 	mov.w	r4, #0
 8009d3e:	e035      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d40:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <UART_SetConfig+0x960>)
 8009d42:	f04f 0400 	mov.w	r4, #0
 8009d46:	e031      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d4c:	f04f 0400 	mov.w	r4, #0
 8009d50:	e02c      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d56:	f04f 0400 	mov.w	r4, #0
 8009d5a:	e027      	b.n	8009dac <UART_SetConfig+0x96c>
 8009d5c:	f3af 8000 	nop.w
 8009d60:	14585500 	.word	0x14585500
 8009d64:	00000000 	.word	0x00000000
 8009d68:	28b0aa00 	.word	0x28b0aa00
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	00f42400 	.word	0x00f42400
 8009d74:	f4240000 	.word	0xf4240000
 8009d78:	01e84800 	.word	0x01e84800
 8009d7c:	03d09000 	.word	0x03d09000
 8009d80:	07a12000 	.word	0x07a12000
 8009d84:	0f424000 	.word	0x0f424000
 8009d88:	186a0000 	.word	0x186a0000
 8009d8c:	1e848000 	.word	0x1e848000
 8009d90:	3d090000 	.word	0x3d090000
 8009d94:	7a120000 	.word	0x7a120000
 8009d98:	000aaa00 	.word	0x000aaa00
 8009d9c:	000ccc00 	.word	0x000ccc00
 8009da0:	00155500 	.word	0x00155500
 8009da4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009da8:	f04f 0400 	mov.w	r4, #0
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6852      	ldr	r2, [r2, #4]
 8009db0:	0852      	lsrs	r2, r2, #1
 8009db2:	4611      	mov	r1, r2
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	eb13 0b01 	adds.w	fp, r3, r1
 8009dbc:	eb44 0c02 	adc.w	ip, r4, r2
 8009dc0:	4658      	mov	r0, fp
 8009dc2:	4661      	mov	r1, ip
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f04f 0400 	mov.w	r4, #0
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4623      	mov	r3, r4
 8009dd0:	f7f6 f9de 	bl	8000190 <__aeabi_uldivmod>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	61fb      	str	r3, [r7, #28]
            break;
 8009dda:	e002      	b.n	8009de2 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	76fb      	strb	r3, [r7, #27]
            break;
 8009de0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009de8:	d308      	bcc.n	8009dfc <UART_SetConfig+0x9bc>
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df0:	d204      	bcs.n	8009dfc <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	60da      	str	r2, [r3, #12]
 8009dfa:	e35b      	b.n	800a4b4 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	76fb      	strb	r3, [r7, #27]
 8009e00:	e358      	b.n	800a4b4 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e0a:	f040 81a6 	bne.w	800a15a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e12:	3b01      	subs	r3, #1
 8009e14:	2b07      	cmp	r3, #7
 8009e16:	f200 8180 	bhi.w	800a11a <UART_SetConfig+0xcda>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <UART_SetConfig+0x9e0>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009ef9 	.word	0x08009ef9
 8009e28:	0800a11b 	.word	0x0800a11b
 8009e2c:	08009fa1 	.word	0x08009fa1
 8009e30:	0800a11b 	.word	0x0800a11b
 8009e34:	0800a11b 	.word	0x0800a11b
 8009e38:	0800a11b 	.word	0x0800a11b
 8009e3c:	0800a059 	.word	0x0800a059
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e40:	f7fd ff80 	bl	8007d44 <HAL_RCC_GetPCLK2Freq>
 8009e44:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d044      	beq.n	8009ed8 <UART_SetConfig+0xa98>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d03e      	beq.n	8009ed4 <UART_SetConfig+0xa94>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d038      	beq.n	8009ed0 <UART_SetConfig+0xa90>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d032      	beq.n	8009ecc <UART_SetConfig+0xa8c>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d02c      	beq.n	8009ec8 <UART_SetConfig+0xa88>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	d026      	beq.n	8009ec4 <UART_SetConfig+0xa84>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b06      	cmp	r3, #6
 8009e7c:	d020      	beq.n	8009ec0 <UART_SetConfig+0xa80>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b07      	cmp	r3, #7
 8009e84:	d01a      	beq.n	8009ebc <UART_SetConfig+0xa7c>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d014      	beq.n	8009eb8 <UART_SetConfig+0xa78>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b09      	cmp	r3, #9
 8009e94:	d00e      	beq.n	8009eb4 <UART_SetConfig+0xa74>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b0a      	cmp	r3, #10
 8009e9c:	d008      	beq.n	8009eb0 <UART_SetConfig+0xa70>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b0b      	cmp	r3, #11
 8009ea4:	d102      	bne.n	8009eac <UART_SetConfig+0xa6c>
 8009ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eaa:	e016      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e014      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	e012      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	e010      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009eb8:	2320      	movs	r3, #32
 8009eba:	e00e      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	e00c      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	e00a      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ec4:	230a      	movs	r3, #10
 8009ec6:	e008      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ec8:	2308      	movs	r3, #8
 8009eca:	e006      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ecc:	2306      	movs	r3, #6
 8009ece:	e004      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	e002      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e000      	b.n	8009eda <UART_SetConfig+0xa9a>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee0:	005a      	lsls	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	441a      	add	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	61fb      	str	r3, [r7, #28]
        break;
 8009ef6:	e113      	b.n	800a120 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d043      	beq.n	8009f88 <UART_SetConfig+0xb48>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d03d      	beq.n	8009f84 <UART_SetConfig+0xb44>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d037      	beq.n	8009f80 <UART_SetConfig+0xb40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d031      	beq.n	8009f7c <UART_SetConfig+0xb3c>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d02b      	beq.n	8009f78 <UART_SetConfig+0xb38>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b05      	cmp	r3, #5
 8009f26:	d025      	beq.n	8009f74 <UART_SetConfig+0xb34>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b06      	cmp	r3, #6
 8009f2e:	d01f      	beq.n	8009f70 <UART_SetConfig+0xb30>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b07      	cmp	r3, #7
 8009f36:	d019      	beq.n	8009f6c <UART_SetConfig+0xb2c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d013      	beq.n	8009f68 <UART_SetConfig+0xb28>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d00d      	beq.n	8009f64 <UART_SetConfig+0xb24>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	2b0a      	cmp	r3, #10
 8009f4e:	d007      	beq.n	8009f60 <UART_SetConfig+0xb20>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b0b      	cmp	r3, #11
 8009f56:	d101      	bne.n	8009f5c <UART_SetConfig+0xb1c>
 8009f58:	4b8c      	ldr	r3, [pc, #560]	; (800a18c <UART_SetConfig+0xd4c>)
 8009f5a:	e016      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f5c:	4b8c      	ldr	r3, [pc, #560]	; (800a190 <UART_SetConfig+0xd50>)
 8009f5e:	e014      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f60:	4b8c      	ldr	r3, [pc, #560]	; (800a194 <UART_SetConfig+0xd54>)
 8009f62:	e012      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f64:	4b8c      	ldr	r3, [pc, #560]	; (800a198 <UART_SetConfig+0xd58>)
 8009f66:	e010      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f68:	4b8c      	ldr	r3, [pc, #560]	; (800a19c <UART_SetConfig+0xd5c>)
 8009f6a:	e00e      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f6c:	4b8c      	ldr	r3, [pc, #560]	; (800a1a0 <UART_SetConfig+0xd60>)
 8009f6e:	e00c      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f70:	4b8c      	ldr	r3, [pc, #560]	; (800a1a4 <UART_SetConfig+0xd64>)
 8009f72:	e00a      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f74:	4b8c      	ldr	r3, [pc, #560]	; (800a1a8 <UART_SetConfig+0xd68>)
 8009f76:	e008      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f78:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <UART_SetConfig+0xd6c>)
 8009f7a:	e006      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f7c:	4b8c      	ldr	r3, [pc, #560]	; (800a1b0 <UART_SetConfig+0xd70>)
 8009f7e:	e004      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f80:	4b8c      	ldr	r3, [pc, #560]	; (800a1b4 <UART_SetConfig+0xd74>)
 8009f82:	e002      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f84:	4b8c      	ldr	r3, [pc, #560]	; (800a1b8 <UART_SetConfig+0xd78>)
 8009f86:	e000      	b.n	8009f8a <UART_SetConfig+0xb4a>
 8009f88:	4b81      	ldr	r3, [pc, #516]	; (800a190 <UART_SetConfig+0xd50>)
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	6852      	ldr	r2, [r2, #4]
 8009f8e:	0852      	lsrs	r2, r2, #1
 8009f90:	441a      	add	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	61fb      	str	r3, [r7, #28]
        break;
 8009f9e:	e0bf      	b.n	800a120 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fa0:	f7fd fe3c 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 8009fa4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d044      	beq.n	800a038 <UART_SetConfig+0xbf8>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d03e      	beq.n	800a034 <UART_SetConfig+0xbf4>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d038      	beq.n	800a030 <UART_SetConfig+0xbf0>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d032      	beq.n	800a02c <UART_SetConfig+0xbec>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d02c      	beq.n	800a028 <UART_SetConfig+0xbe8>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d026      	beq.n	800a024 <UART_SetConfig+0xbe4>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	2b06      	cmp	r3, #6
 8009fdc:	d020      	beq.n	800a020 <UART_SetConfig+0xbe0>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b07      	cmp	r3, #7
 8009fe4:	d01a      	beq.n	800a01c <UART_SetConfig+0xbdc>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d014      	beq.n	800a018 <UART_SetConfig+0xbd8>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b09      	cmp	r3, #9
 8009ff4:	d00e      	beq.n	800a014 <UART_SetConfig+0xbd4>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	2b0a      	cmp	r3, #10
 8009ffc:	d008      	beq.n	800a010 <UART_SetConfig+0xbd0>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b0b      	cmp	r3, #11
 800a004:	d102      	bne.n	800a00c <UART_SetConfig+0xbcc>
 800a006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a00a:	e016      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e014      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a010:	2380      	movs	r3, #128	; 0x80
 800a012:	e012      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a014:	2340      	movs	r3, #64	; 0x40
 800a016:	e010      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a018:	2320      	movs	r3, #32
 800a01a:	e00e      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a01c:	2310      	movs	r3, #16
 800a01e:	e00c      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a020:	230c      	movs	r3, #12
 800a022:	e00a      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a024:	230a      	movs	r3, #10
 800a026:	e008      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a028:	2308      	movs	r3, #8
 800a02a:	e006      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a02c:	2306      	movs	r3, #6
 800a02e:	e004      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a030:	2304      	movs	r3, #4
 800a032:	e002      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a034:	2302      	movs	r3, #2
 800a036:	e000      	b.n	800a03a <UART_SetConfig+0xbfa>
 800a038:	2301      	movs	r3, #1
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a040:	005a      	lsls	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	441a      	add	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	61fb      	str	r3, [r7, #28]
        break;
 800a056:	e063      	b.n	800a120 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d04f      	beq.n	800a100 <UART_SetConfig+0xcc0>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b01      	cmp	r3, #1
 800a066:	d048      	beq.n	800a0fa <UART_SetConfig+0xcba>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d041      	beq.n	800a0f4 <UART_SetConfig+0xcb4>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b03      	cmp	r3, #3
 800a076:	d03a      	beq.n	800a0ee <UART_SetConfig+0xcae>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d033      	beq.n	800a0e8 <UART_SetConfig+0xca8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b05      	cmp	r3, #5
 800a086:	d02c      	beq.n	800a0e2 <UART_SetConfig+0xca2>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d025      	beq.n	800a0dc <UART_SetConfig+0xc9c>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b07      	cmp	r3, #7
 800a096:	d01e      	beq.n	800a0d6 <UART_SetConfig+0xc96>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d017      	beq.n	800a0d0 <UART_SetConfig+0xc90>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b09      	cmp	r3, #9
 800a0a6:	d010      	beq.n	800a0ca <UART_SetConfig+0xc8a>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b0a      	cmp	r3, #10
 800a0ae:	d009      	beq.n	800a0c4 <UART_SetConfig+0xc84>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b0b      	cmp	r3, #11
 800a0b6:	d102      	bne.n	800a0be <UART_SetConfig+0xc7e>
 800a0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0bc:	e022      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0c2:	e01f      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0c8:	e01c      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ce:	e019      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d4:	e016      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0da:	e013      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0dc:	f241 5354 	movw	r3, #5460	; 0x1554
 800a0e0:	e010      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0e2:	f641 1398 	movw	r3, #6552	; 0x1998
 800a0e6:	e00d      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0ec:	e00a      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0ee:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a0f2:	e007      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0f8:	e004      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a0fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fe:	e001      	b.n	800a104 <UART_SetConfig+0xcc4>
 800a100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	0852      	lsrs	r2, r2, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	b29b      	uxth	r3, r3
 800a116:	61fb      	str	r3, [r7, #28]
        break;
 800a118:	e002      	b.n	800a120 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	76fb      	strb	r3, [r7, #27]
        break;
 800a11e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	2b0f      	cmp	r3, #15
 800a124:	d916      	bls.n	800a154 <UART_SetConfig+0xd14>
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12c:	d212      	bcs.n	800a154 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	b29b      	uxth	r3, r3
 800a132:	f023 030f 	bic.w	r3, r3, #15
 800a136:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f003 0307 	and.w	r3, r3, #7
 800a142:	b29a      	uxth	r2, r3
 800a144:	89fb      	ldrh	r3, [r7, #14]
 800a146:	4313      	orrs	r3, r2
 800a148:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	89fa      	ldrh	r2, [r7, #14]
 800a150:	60da      	str	r2, [r3, #12]
 800a152:	e1af      	b.n	800a4b4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	76fb      	strb	r3, [r7, #27]
 800a158:	e1ac      	b.n	800a4b4 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800a15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a15e:	3b01      	subs	r3, #1
 800a160:	2b07      	cmp	r3, #7
 800a162:	f200 8196 	bhi.w	800a492 <UART_SetConfig+0x1052>
 800a166:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <UART_SetConfig+0xd2c>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a1bd 	.word	0x0800a1bd
 800a170:	0800a273 	.word	0x0800a273
 800a174:	0800a493 	.word	0x0800a493
 800a178:	0800a31d 	.word	0x0800a31d
 800a17c:	0800a493 	.word	0x0800a493
 800a180:	0800a493 	.word	0x0800a493
 800a184:	0800a493 	.word	0x0800a493
 800a188:	0800a3d3 	.word	0x0800a3d3
 800a18c:	0001e848 	.word	0x0001e848
 800a190:	01e84800 	.word	0x01e84800
 800a194:	0003d090 	.word	0x0003d090
 800a198:	0007a120 	.word	0x0007a120
 800a19c:	000f4240 	.word	0x000f4240
 800a1a0:	001e8480 	.word	0x001e8480
 800a1a4:	0028b0aa 	.word	0x0028b0aa
 800a1a8:	0030d400 	.word	0x0030d400
 800a1ac:	003d0900 	.word	0x003d0900
 800a1b0:	00516154 	.word	0x00516154
 800a1b4:	007a1200 	.word	0x007a1200
 800a1b8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1bc:	f7fd fdc2 	bl	8007d44 <HAL_RCC_GetPCLK2Freq>
 800a1c0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d044      	beq.n	800a254 <UART_SetConfig+0xe14>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d03e      	beq.n	800a250 <UART_SetConfig+0xe10>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d038      	beq.n	800a24c <UART_SetConfig+0xe0c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d032      	beq.n	800a248 <UART_SetConfig+0xe08>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d02c      	beq.n	800a244 <UART_SetConfig+0xe04>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	d026      	beq.n	800a240 <UART_SetConfig+0xe00>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	d020      	beq.n	800a23c <UART_SetConfig+0xdfc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b07      	cmp	r3, #7
 800a200:	d01a      	beq.n	800a238 <UART_SetConfig+0xdf8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b08      	cmp	r3, #8
 800a208:	d014      	beq.n	800a234 <UART_SetConfig+0xdf4>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d00e      	beq.n	800a230 <UART_SetConfig+0xdf0>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b0a      	cmp	r3, #10
 800a218:	d008      	beq.n	800a22c <UART_SetConfig+0xdec>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	2b0b      	cmp	r3, #11
 800a220:	d102      	bne.n	800a228 <UART_SetConfig+0xde8>
 800a222:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a226:	e016      	b.n	800a256 <UART_SetConfig+0xe16>
 800a228:	2301      	movs	r3, #1
 800a22a:	e014      	b.n	800a256 <UART_SetConfig+0xe16>
 800a22c:	2380      	movs	r3, #128	; 0x80
 800a22e:	e012      	b.n	800a256 <UART_SetConfig+0xe16>
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	e010      	b.n	800a256 <UART_SetConfig+0xe16>
 800a234:	2320      	movs	r3, #32
 800a236:	e00e      	b.n	800a256 <UART_SetConfig+0xe16>
 800a238:	2310      	movs	r3, #16
 800a23a:	e00c      	b.n	800a256 <UART_SetConfig+0xe16>
 800a23c:	230c      	movs	r3, #12
 800a23e:	e00a      	b.n	800a256 <UART_SetConfig+0xe16>
 800a240:	230a      	movs	r3, #10
 800a242:	e008      	b.n	800a256 <UART_SetConfig+0xe16>
 800a244:	2308      	movs	r3, #8
 800a246:	e006      	b.n	800a256 <UART_SetConfig+0xe16>
 800a248:	2306      	movs	r3, #6
 800a24a:	e004      	b.n	800a256 <UART_SetConfig+0xe16>
 800a24c:	2304      	movs	r3, #4
 800a24e:	e002      	b.n	800a256 <UART_SetConfig+0xe16>
 800a250:	2302      	movs	r3, #2
 800a252:	e000      	b.n	800a256 <UART_SetConfig+0xe16>
 800a254:	2301      	movs	r3, #1
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	fbb2 f2f3 	udiv	r2, r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	085b      	lsrs	r3, r3, #1
 800a262:	441a      	add	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	61fb      	str	r3, [r7, #28]
        break;
 800a270:	e112      	b.n	800a498 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	d044      	beq.n	800a304 <UART_SetConfig+0xec4>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d03e      	beq.n	800a300 <UART_SetConfig+0xec0>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b02      	cmp	r3, #2
 800a288:	d038      	beq.n	800a2fc <UART_SetConfig+0xebc>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d032      	beq.n	800a2f8 <UART_SetConfig+0xeb8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b04      	cmp	r3, #4
 800a298:	d02c      	beq.n	800a2f4 <UART_SetConfig+0xeb4>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d026      	beq.n	800a2f0 <UART_SetConfig+0xeb0>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	2b06      	cmp	r3, #6
 800a2a8:	d020      	beq.n	800a2ec <UART_SetConfig+0xeac>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b07      	cmp	r3, #7
 800a2b0:	d01a      	beq.n	800a2e8 <UART_SetConfig+0xea8>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b08      	cmp	r3, #8
 800a2b8:	d014      	beq.n	800a2e4 <UART_SetConfig+0xea4>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d00e      	beq.n	800a2e0 <UART_SetConfig+0xea0>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b0a      	cmp	r3, #10
 800a2c8:	d008      	beq.n	800a2dc <UART_SetConfig+0xe9c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b0b      	cmp	r3, #11
 800a2d0:	d102      	bne.n	800a2d8 <UART_SetConfig+0xe98>
 800a2d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a2d6:	e016      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2d8:	4b80      	ldr	r3, [pc, #512]	; (800a4dc <UART_SetConfig+0x109c>)
 800a2da:	e014      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2dc:	4b80      	ldr	r3, [pc, #512]	; (800a4e0 <UART_SetConfig+0x10a0>)
 800a2de:	e012      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2e0:	4b80      	ldr	r3, [pc, #512]	; (800a4e4 <UART_SetConfig+0x10a4>)
 800a2e2:	e010      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2e4:	4b80      	ldr	r3, [pc, #512]	; (800a4e8 <UART_SetConfig+0x10a8>)
 800a2e6:	e00e      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2e8:	4b80      	ldr	r3, [pc, #512]	; (800a4ec <UART_SetConfig+0x10ac>)
 800a2ea:	e00c      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2ec:	4b80      	ldr	r3, [pc, #512]	; (800a4f0 <UART_SetConfig+0x10b0>)
 800a2ee:	e00a      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2f0:	4b80      	ldr	r3, [pc, #512]	; (800a4f4 <UART_SetConfig+0x10b4>)
 800a2f2:	e008      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2f4:	4b80      	ldr	r3, [pc, #512]	; (800a4f8 <UART_SetConfig+0x10b8>)
 800a2f6:	e006      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2f8:	4b80      	ldr	r3, [pc, #512]	; (800a4fc <UART_SetConfig+0x10bc>)
 800a2fa:	e004      	b.n	800a306 <UART_SetConfig+0xec6>
 800a2fc:	4b80      	ldr	r3, [pc, #512]	; (800a500 <UART_SetConfig+0x10c0>)
 800a2fe:	e002      	b.n	800a306 <UART_SetConfig+0xec6>
 800a300:	4b80      	ldr	r3, [pc, #512]	; (800a504 <UART_SetConfig+0x10c4>)
 800a302:	e000      	b.n	800a306 <UART_SetConfig+0xec6>
 800a304:	4b75      	ldr	r3, [pc, #468]	; (800a4dc <UART_SetConfig+0x109c>)
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6852      	ldr	r2, [r2, #4]
 800a30a:	0852      	lsrs	r2, r2, #1
 800a30c:	441a      	add	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	fbb2 f3f3 	udiv	r3, r2, r3
 800a316:	b29b      	uxth	r3, r3
 800a318:	61fb      	str	r3, [r7, #28]
        break;
 800a31a:	e0bd      	b.n	800a498 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a31c:	f7fd fc7e 	bl	8007c1c <HAL_RCC_GetSysClockFreq>
 800a320:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	d044      	beq.n	800a3b4 <UART_SetConfig+0xf74>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d03e      	beq.n	800a3b0 <UART_SetConfig+0xf70>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b02      	cmp	r3, #2
 800a338:	d038      	beq.n	800a3ac <UART_SetConfig+0xf6c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d032      	beq.n	800a3a8 <UART_SetConfig+0xf68>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b04      	cmp	r3, #4
 800a348:	d02c      	beq.n	800a3a4 <UART_SetConfig+0xf64>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b05      	cmp	r3, #5
 800a350:	d026      	beq.n	800a3a0 <UART_SetConfig+0xf60>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b06      	cmp	r3, #6
 800a358:	d020      	beq.n	800a39c <UART_SetConfig+0xf5c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b07      	cmp	r3, #7
 800a360:	d01a      	beq.n	800a398 <UART_SetConfig+0xf58>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b08      	cmp	r3, #8
 800a368:	d014      	beq.n	800a394 <UART_SetConfig+0xf54>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d00e      	beq.n	800a390 <UART_SetConfig+0xf50>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b0a      	cmp	r3, #10
 800a378:	d008      	beq.n	800a38c <UART_SetConfig+0xf4c>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2b0b      	cmp	r3, #11
 800a380:	d102      	bne.n	800a388 <UART_SetConfig+0xf48>
 800a382:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a386:	e016      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a388:	2301      	movs	r3, #1
 800a38a:	e014      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	e012      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	e010      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a394:	2320      	movs	r3, #32
 800a396:	e00e      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a398:	2310      	movs	r3, #16
 800a39a:	e00c      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a39c:	230c      	movs	r3, #12
 800a39e:	e00a      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3a0:	230a      	movs	r3, #10
 800a3a2:	e008      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	e006      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3a8:	2306      	movs	r3, #6
 800a3aa:	e004      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	e002      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e000      	b.n	800a3b6 <UART_SetConfig+0xf76>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	085b      	lsrs	r3, r3, #1
 800a3c2:	441a      	add	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	61fb      	str	r3, [r7, #28]
        break;
 800a3d0:	e062      	b.n	800a498 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d04e      	beq.n	800a478 <UART_SetConfig+0x1038>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d047      	beq.n	800a472 <UART_SetConfig+0x1032>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d040      	beq.n	800a46c <UART_SetConfig+0x102c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d039      	beq.n	800a466 <UART_SetConfig+0x1026>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d032      	beq.n	800a460 <UART_SetConfig+0x1020>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b05      	cmp	r3, #5
 800a400:	d02b      	beq.n	800a45a <UART_SetConfig+0x101a>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b06      	cmp	r3, #6
 800a408:	d024      	beq.n	800a454 <UART_SetConfig+0x1014>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b07      	cmp	r3, #7
 800a410:	d01d      	beq.n	800a44e <UART_SetConfig+0x100e>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b08      	cmp	r3, #8
 800a418:	d016      	beq.n	800a448 <UART_SetConfig+0x1008>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	2b09      	cmp	r3, #9
 800a420:	d00f      	beq.n	800a442 <UART_SetConfig+0x1002>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	2b0a      	cmp	r3, #10
 800a428:	d008      	beq.n	800a43c <UART_SetConfig+0xffc>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b0b      	cmp	r3, #11
 800a430:	d101      	bne.n	800a436 <UART_SetConfig+0xff6>
 800a432:	2380      	movs	r3, #128	; 0x80
 800a434:	e022      	b.n	800a47c <UART_SetConfig+0x103c>
 800a436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43a:	e01f      	b.n	800a47c <UART_SetConfig+0x103c>
 800a43c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a440:	e01c      	b.n	800a47c <UART_SetConfig+0x103c>
 800a442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a446:	e019      	b.n	800a47c <UART_SetConfig+0x103c>
 800a448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a44c:	e016      	b.n	800a47c <UART_SetConfig+0x103c>
 800a44e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a452:	e013      	b.n	800a47c <UART_SetConfig+0x103c>
 800a454:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a458:	e010      	b.n	800a47c <UART_SetConfig+0x103c>
 800a45a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a45e:	e00d      	b.n	800a47c <UART_SetConfig+0x103c>
 800a460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a464:	e00a      	b.n	800a47c <UART_SetConfig+0x103c>
 800a466:	f241 5355 	movw	r3, #5461	; 0x1555
 800a46a:	e007      	b.n	800a47c <UART_SetConfig+0x103c>
 800a46c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a470:	e004      	b.n	800a47c <UART_SetConfig+0x103c>
 800a472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a476:	e001      	b.n	800a47c <UART_SetConfig+0x103c>
 800a478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6852      	ldr	r2, [r2, #4]
 800a480:	0852      	lsrs	r2, r2, #1
 800a482:	441a      	add	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	61fb      	str	r3, [r7, #28]
        break;
 800a490:	e002      	b.n	800a498 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	76fb      	strb	r3, [r7, #27]
        break;
 800a496:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d908      	bls.n	800a4b0 <UART_SetConfig+0x1070>
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a4:	d204      	bcs.n	800a4b0 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	60da      	str	r2, [r3, #12]
 800a4ae:	e001      	b.n	800a4b4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a4d0:	7efb      	ldrb	r3, [r7, #27]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3728      	adds	r7, #40	; 0x28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a4dc:	00f42400 	.word	0x00f42400
 800a4e0:	0001e848 	.word	0x0001e848
 800a4e4:	0003d090 	.word	0x0003d090
 800a4e8:	0007a120 	.word	0x0007a120
 800a4ec:	000f4240 	.word	0x000f4240
 800a4f0:	00145855 	.word	0x00145855
 800a4f4:	00186a00 	.word	0x00186a00
 800a4f8:	001e8480 	.word	0x001e8480
 800a4fc:	0028b0aa 	.word	0x0028b0aa
 800a500:	003d0900 	.word	0x003d0900
 800a504:	007a1200 	.word	0x007a1200

0800a508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00a      	beq.n	800a532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00a      	beq.n	800a576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59c:	f003 0310 	and.w	r3, r3, #16
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00a      	beq.n	800a5ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01a      	beq.n	800a61e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a606:	d10a      	bne.n	800a61e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	605a      	str	r2, [r3, #4]
  }
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af02      	add	r7, sp, #8
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a65c:	f7fb f812 	bl	8005684 <HAL_GetTick>
 800a660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0308 	and.w	r3, r3, #8
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d10e      	bne.n	800a68e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f82c 	bl	800a6dc <UART_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e022      	b.n	800a6d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d10e      	bne.n	800a6ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a69c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f816 	bl	800a6dc <UART_WaitOnFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e00c      	b.n	800a6d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ec:	e062      	b.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d05e      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f6:	f7fa ffc5 	bl	8005684 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	429a      	cmp	r2, r3
 800a704:	d302      	bcc.n	800a70c <UART_WaitOnFlagUntilTimeout+0x30>
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d11d      	bne.n	800a748 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a71a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2220      	movs	r2, #32
 800a730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e045      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	2b00      	cmp	r3, #0
 800a754:	d02e      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a764:	d126      	bne.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a76e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a77e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689a      	ldr	r2, [r3, #8]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 0201 	bic.w	r2, r2, #1
 800a78e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e00f      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69da      	ldr	r2, [r3, #28]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d08d      	beq.n	800a6ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a802:	f023 0301 	bic.w	r3, r3, #1
 800a806:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7fe fdf1 	bl	8009428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a864:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7f6 fd59 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b083      	sub	sp, #12
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e027      	b.n	800a924 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2224      	movs	r2, #36	; 0x24
 800a8e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0201 	bic.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a902:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a940:	2b01      	cmp	r3, #1
 800a942:	d101      	bne.n	800a948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a944:	2302      	movs	r3, #2
 800a946:	e02d      	b.n	800a9a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2224      	movs	r2, #36	; 0x24
 800a954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0201 	bic.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f84f 	bl	800aa28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e02d      	b.n	800aa20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2224      	movs	r2, #36	; 0x24
 800a9d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 0201 	bic.w	r2, r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f811 	bl	800aa28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aa30:	4a2f      	ldr	r2, [pc, #188]	; (800aaf0 <UARTEx_SetNbDataToProcess+0xc8>)
 800aa32:	f107 0314 	add.w	r3, r7, #20
 800aa36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa3a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aa3e:	4a2d      	ldr	r2, [pc, #180]	; (800aaf4 <UARTEx_SetNbDataToProcess+0xcc>)
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa48:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d108      	bne.n	800aa66 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa64:	e03d      	b.n	800aae2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa66:	2308      	movs	r3, #8
 800aa68:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa6a:	2308      	movs	r3, #8
 800aa6c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	0e5b      	lsrs	r3, r3, #25
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	0f5b      	lsrs	r3, r3, #29
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa8e:	7fbb      	ldrb	r3, [r7, #30]
 800aa90:	7f3a      	ldrb	r2, [r7, #28]
 800aa92:	f107 0120 	add.w	r1, r7, #32
 800aa96:	440a      	add	r2, r1
 800aa98:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa9c:	fb02 f303 	mul.w	r3, r2, r3
 800aaa0:	7f3a      	ldrb	r2, [r7, #28]
 800aaa2:	f107 0120 	add.w	r1, r7, #32
 800aaa6:	440a      	add	r2, r1
 800aaa8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aaac:	fb93 f3f2 	sdiv	r3, r3, r2
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aab8:	7ffb      	ldrb	r3, [r7, #31]
 800aaba:	7f7a      	ldrb	r2, [r7, #29]
 800aabc:	f107 0120 	add.w	r1, r7, #32
 800aac0:	440a      	add	r2, r1
 800aac2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aac6:	fb02 f303 	mul.w	r3, r2, r3
 800aaca:	7f7a      	ldrb	r2, [r7, #29]
 800aacc:	f107 0120 	add.w	r1, r7, #32
 800aad0:	440a      	add	r2, r1
 800aad2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aad6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aae2:	bf00      	nop
 800aae4:	3724      	adds	r7, #36	; 0x24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	0800dda8 	.word	0x0800dda8
 800aaf4:	0800ddb0 	.word	0x0800ddb0

0800aaf8 <MX_MEMS_Init>:
#include "iks01a2_motion_sensors.h"

extern IKS01A2_MOTION_SENSOR_Axes_t accelero_val;

void MX_MEMS_Init(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800aafc:	2102      	movs	r1, #2
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7fa f9d4 	bl	8004eac <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800ab04:	2102      	movs	r1, #2
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7fa fac6 	bl	8005098 <IKS01A2_MOTION_SENSOR_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800ab0c:	bf00      	nop
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelero_val);
 800ab14:	4a03      	ldr	r2, [pc, #12]	; (800ab24 <MX_MEMS_Process+0x14>)
 800ab16:	2102      	movs	r1, #2
 800ab18:	2000      	movs	r0, #0
 800ab1a:	f7fa faff 	bl	800511c <IKS01A2_MOTION_SENSOR_GetAxes>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800ab1e:	bf00      	nop
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	20000338 	.word	0x20000338

0800ab28 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	2218      	movs	r2, #24
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 ff98 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab40:	233f      	movs	r3, #63	; 0x3f
 800ab42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ab44:	2381      	movs	r3, #129	; 0x81
 800ab46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ab48:	1dfb      	adds	r3, r7, #7
 800ab4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ab50:	f107 0308 	add.w	r3, r7, #8
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 fb58 	bl	800c20c <hci_send_req>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	da01      	bge.n	800ab66 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ab62:	23ff      	movs	r3, #255	; 0xff
 800ab64:	e005      	b.n	800ab72 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	e000      	b.n	800ab72 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800ab7a:	b5b0      	push	{r4, r5, r7, lr}
 800ab7c:	b0ce      	sub	sp, #312	; 0x138
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	4605      	mov	r5, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	4610      	mov	r0, r2
 800ab86:	4619      	mov	r1, r3
 800ab88:	1dfb      	adds	r3, r7, #7
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	1d3b      	adds	r3, r7, #4
 800ab90:	4622      	mov	r2, r4
 800ab92:	801a      	strh	r2, [r3, #0]
 800ab94:	1cbb      	adds	r3, r7, #2
 800ab96:	4602      	mov	r2, r0
 800ab98:	801a      	strh	r2, [r3, #0]
 800ab9a:	1dbb      	adds	r3, r7, #6
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800aba0:	f107 0310 	add.w	r3, r7, #16
 800aba4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800aba8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800abac:	3308      	adds	r3, #8
 800abae:	f107 0210 	add.w	r2, r7, #16
 800abb2:	4413      	add	r3, r2
 800abb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800abb8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800abbc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800abc0:	4413      	add	r3, r2
 800abc2:	3309      	adds	r3, #9
 800abc4:	f107 0210 	add.w	r2, r7, #16
 800abc8:	4413      	add	r3, r2
 800abca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abce:	f107 030f 	add.w	r3, r7, #15
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800abdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abe0:	1dfa      	adds	r2, r7, #7
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abea:	3301      	adds	r3, #1
 800abec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800abf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abf4:	1d3a      	adds	r2, r7, #4
 800abf6:	8812      	ldrh	r2, [r2, #0]
 800abf8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800abfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac00:	3302      	adds	r3, #2
 800ac02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800ac06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac0a:	1cba      	adds	r2, r7, #2
 800ac0c:	8812      	ldrh	r2, [r2, #0]
 800ac0e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ac12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac16:	3302      	adds	r3, #2
 800ac18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800ac1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac20:	1dba      	adds	r2, r7, #6
 800ac22:	7812      	ldrb	r2, [r2, #0]
 800ac24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ac26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800ac30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac34:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ac38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ac3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac3e:	3301      	adds	r3, #1
 800ac40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800ac44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac48:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ac4c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ac4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac52:	3301      	adds	r3, #1
 800ac54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800ac58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ac62:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 fef2 	bl	800ba50 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ac6c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ac70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ac74:	4413      	add	r3, r2
 800ac76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800ac7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac7e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ac82:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ac84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800ac8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac92:	3301      	adds	r3, #1
 800ac94:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ac98:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fed7 	bl	800ba50 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800aca2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aca6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800acaa:	4413      	add	r3, r2
 800acac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800acb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800acb8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800acba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acbe:	3302      	adds	r3, #2
 800acc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800acc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acc8:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800accc:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800acce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acd2:	3302      	adds	r3, #2
 800acd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800acd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acdc:	2218      	movs	r2, #24
 800acde:	2100      	movs	r1, #0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fec5 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ace6:	233f      	movs	r3, #63	; 0x3f
 800ace8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800acec:	2383      	movs	r3, #131	; 0x83
 800acee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acf2:	f107 0310 	add.w	r3, r7, #16
 800acf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad02:	f107 030f 	add.w	r3, r7, #15
 800ad06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ad10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad14:	2100      	movs	r1, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 fa78 	bl	800c20c <hci_send_req>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	da01      	bge.n	800ad26 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800ad22:	23ff      	movs	r3, #255	; 0xff
 800ad24:	e009      	b.n	800ad3a <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800ad26:	f107 030f 	add.w	r3, r7, #15
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800ad30:	f107 030f 	add.w	r3, r7, #15
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	e000      	b.n	800ad3a <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bdb0      	pop	{r4, r5, r7, pc}

0800ad44 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b0cc      	sub	sp, #304	; 0x130
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	1dfb      	adds	r3, r7, #7
 800ad4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ad50:	f107 0310 	add.w	r3, r7, #16
 800ad54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad58:	f107 030f 	add.w	r3, r7, #15
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800ad66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad6a:	1dfa      	adds	r2, r7, #7
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad74:	3301      	adds	r3, #1
 800ad76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad7e:	2218      	movs	r2, #24
 800ad80:	2100      	movs	r1, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fe74 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad88:	233f      	movs	r3, #63	; 0x3f
 800ad8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ad8e:	2385      	movs	r3, #133	; 0x85
 800ad90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad94:	f107 0310 	add.w	r3, r7, #16
 800ad98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ada4:	f107 030f 	add.w	r3, r7, #15
 800ada8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800adac:	2301      	movs	r3, #1
 800adae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800adb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adb6:	2100      	movs	r1, #0
 800adb8:	4618      	mov	r0, r3
 800adba:	f001 fa27 	bl	800c20c <hci_send_req>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da01      	bge.n	800adc8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800adc4:	23ff      	movs	r3, #255	; 0xff
 800adc6:	e009      	b.n	800addc <aci_gap_set_io_capability+0x98>
  if (status) 
 800adc8:	f107 030f 	add.w	r3, r7, #15
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <aci_gap_set_io_capability+0x96>
  {
    return status;
 800add2:	f107 030f 	add.w	r3, r7, #15
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	e000      	b.n	800addc <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800ade6:	b5b0      	push	{r4, r5, r7, lr}
 800ade8:	b0cc      	sub	sp, #304	; 0x130
 800adea:	af00      	add	r7, sp, #0
 800adec:	4605      	mov	r5, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	4610      	mov	r0, r2
 800adf2:	4619      	mov	r1, r3
 800adf4:	1dfb      	adds	r3, r7, #7
 800adf6:	462a      	mov	r2, r5
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	1dbb      	adds	r3, r7, #6
 800adfc:	4622      	mov	r2, r4
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	1d7b      	adds	r3, r7, #5
 800ae02:	4602      	mov	r2, r0
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	460a      	mov	r2, r1
 800ae0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ae0c:	f107 0310 	add.w	r3, r7, #16
 800ae10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae14:	f107 030f 	add.w	r3, r7, #15
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800ae22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae26:	1dfa      	adds	r2, r7, #7
 800ae28:	7812      	ldrb	r2, [r2, #0]
 800ae2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae30:	3301      	adds	r3, #1
 800ae32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ae36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae3a:	1dba      	adds	r2, r7, #6
 800ae3c:	7812      	ldrb	r2, [r2, #0]
 800ae3e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ae40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae44:	3301      	adds	r3, #1
 800ae46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ae4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae4e:	1d7a      	adds	r2, r7, #5
 800ae50:	7812      	ldrb	r2, [r2, #0]
 800ae52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ae54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae58:	3301      	adds	r3, #1
 800ae5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ae5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae62:	1d3a      	adds	r2, r7, #4
 800ae64:	7812      	ldrb	r2, [r2, #0]
 800ae66:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ae68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ae72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae76:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ae7a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ae7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae80:	3301      	adds	r3, #1
 800ae82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ae86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae8a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ae8e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ae90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae94:	3301      	adds	r3, #1
 800ae96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ae9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae9e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aea2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aea8:	3301      	adds	r3, #1
 800aeaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800aeae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeb2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800aeb6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800aeba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aebe:	3304      	adds	r3, #4
 800aec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800aec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aec8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aecc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800aece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aed2:	3301      	adds	r3, #1
 800aed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aedc:	2218      	movs	r2, #24
 800aede:	2100      	movs	r1, #0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fdc5 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aee6:	233f      	movs	r3, #63	; 0x3f
 800aee8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800aeec:	2386      	movs	r3, #134	; 0x86
 800aeee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aef2:	f107 0310 	add.w	r3, r7, #16
 800aef6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aefa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aefe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af02:	f107 030f 	add.w	r3, r7, #15
 800af06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af0a:	2301      	movs	r3, #1
 800af0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af14:	2100      	movs	r1, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f001 f978 	bl	800c20c <hci_send_req>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da01      	bge.n	800af26 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800af22:	23ff      	movs	r3, #255	; 0xff
 800af24:	e009      	b.n	800af3a <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800af26:	f107 030f 	add.w	r3, r7, #15
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800af30:	f107 030f 	add.w	r3, r7, #15
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	e000      	b.n	800af3a <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af40:	46bd      	mov	sp, r7
 800af42:	bdb0      	pop	{r4, r5, r7, pc}

0800af44 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800af44:	b590      	push	{r4, r7, lr}
 800af46:	b0cd      	sub	sp, #308	; 0x134
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	463a      	mov	r2, r7
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	1dfb      	adds	r3, r7, #7
 800af56:	4622      	mov	r2, r4
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	1dbb      	adds	r3, r7, #6
 800af5c:	4602      	mov	r2, r0
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	1d7b      	adds	r3, r7, #5
 800af62:	460a      	mov	r2, r1
 800af64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800af66:	f107 0310 	add.w	r3, r7, #16
 800af6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800af6e:	f107 0308 	add.w	r3, r7, #8
 800af72:	2207      	movs	r2, #7
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fd7a 	bl	800ba70 <Osal_MemSet>
  int index_input = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800af82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af86:	1dfa      	adds	r2, r7, #7
 800af88:	7812      	ldrb	r2, [r2, #0]
 800af8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af90:	3301      	adds	r3, #1
 800af92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800af96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af9a:	1dba      	adds	r2, r7, #6
 800af9c:	7812      	ldrb	r2, [r2, #0]
 800af9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800afa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afa4:	3301      	adds	r3, #1
 800afa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800afaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afae:	1d7a      	adds	r2, r7, #5
 800afb0:	7812      	ldrb	r2, [r2, #0]
 800afb2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800afb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afb8:	3301      	adds	r3, #1
 800afba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afc2:	2218      	movs	r2, #24
 800afc4:	2100      	movs	r1, #0
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fd52 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afcc:	233f      	movs	r3, #63	; 0x3f
 800afce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800afd2:	238a      	movs	r3, #138	; 0x8a
 800afd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800afd8:	f107 0310 	add.w	r3, r7, #16
 800afdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800afe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800aff0:	2307      	movs	r3, #7
 800aff2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f001 f905 	bl	800c20c <hci_send_req>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	da01      	bge.n	800b00c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800b008:	23ff      	movs	r3, #255	; 0xff
 800b00a:	e021      	b.n	800b050 <aci_gap_init+0x10c>
  if (resp.Status) 
 800b00c:	f107 0308 	add.w	r3, r7, #8
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <aci_gap_init+0xda>
  {
    return resp.Status;
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	e018      	b.n	800b050 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b026:	b29a      	uxth	r2, r3
 800b028:	463b      	mov	r3, r7
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800b02e:	f107 0308 	add.w	r3, r7, #8
 800b032:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b036:	b29a      	uxth	r2, r3
 800b038:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b03c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800b03e:	f107 0308 	add.w	r3, r7, #8
 800b042:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b046:	b29a      	uxth	r2, r3
 800b048:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b04c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b056:	46bd      	mov	sp, r7
 800b058:	bd90      	pop	{r4, r7, pc}

0800b05a <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b0cc      	sub	sp, #304	; 0x130
 800b05e:	af00      	add	r7, sp, #0
 800b060:	4602      	mov	r2, r0
 800b062:	463b      	mov	r3, r7
 800b064:	6019      	str	r1, [r3, #0]
 800b066:	1dfb      	adds	r3, r7, #7
 800b068:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b06a:	f107 0310 	add.w	r3, r7, #16
 800b06e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b072:	f107 030f 	add.w	r3, r7, #15
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800b080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b084:	1dfa      	adds	r2, r7, #7
 800b086:	7812      	ldrb	r2, [r2, #0]
 800b088:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b08a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b08e:	3301      	adds	r3, #1
 800b090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800b094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b098:	1c58      	adds	r0, r3, #1
 800b09a:	1dfb      	adds	r3, r7, #7
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	463b      	mov	r3, r7
 800b0a0:	6819      	ldr	r1, [r3, #0]
 800b0a2:	f000 fcd5 	bl	800ba50 <Osal_MemCpy>
  index_input += AdvDataLen;
 800b0a6:	1dfb      	adds	r3, r7, #7
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0b8:	2218      	movs	r2, #24
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fcd7 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0c2:	233f      	movs	r3, #63	; 0x3f
 800b0c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b0c8:	238e      	movs	r3, #142	; 0x8e
 800b0ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0ce:	f107 0310 	add.w	r3, r7, #16
 800b0d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b0de:	f107 030f 	add.w	r3, r7, #15
 800b0e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b0ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f001 f88a 	bl	800c20c <hci_send_req>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	da01      	bge.n	800b102 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800b0fe:	23ff      	movs	r3, #255	; 0xff
 800b100:	e009      	b.n	800b116 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800b102:	f107 030f 	add.w	r3, r7, #15
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <aci_gap_update_adv_data+0xba>
  {
    return status;
 800b10c:	f107 030f 	add.w	r3, r7, #15
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	e000      	b.n	800b116 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b12a:	f107 0308 	add.w	r3, r7, #8
 800b12e:	2218      	movs	r2, #24
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fc9c 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b138:	233f      	movs	r3, #63	; 0x3f
 800b13a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b13c:	2392      	movs	r3, #146	; 0x92
 800b13e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b140:	1dfb      	adds	r3, r7, #7
 800b142:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b144:	2301      	movs	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b148:	f107 0308 	add.w	r3, r7, #8
 800b14c:	2100      	movs	r1, #0
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 f85c 	bl	800c20c <hci_send_req>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	da01      	bge.n	800b15e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b15a:	23ff      	movs	r3, #255	; 0xff
 800b15c:	e005      	b.n	800b16a <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800b15e:	79fb      	ldrb	r3, [r7, #7]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	e000      	b.n	800b16a <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b17c:	f107 0308 	add.w	r3, r7, #8
 800b180:	2218      	movs	r2, #24
 800b182:	2100      	movs	r1, #0
 800b184:	4618      	mov	r0, r3
 800b186:	f000 fc73 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b18a:	233f      	movs	r3, #63	; 0x3f
 800b18c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b18e:	f240 1301 	movw	r3, #257	; 0x101
 800b192:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b194:	1dfb      	adds	r3, r7, #7
 800b196:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f001 f832 	bl	800c20c <hci_send_req>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da01      	bge.n	800b1b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b1ae:	23ff      	movs	r3, #255	; 0xff
 800b1b0:	e005      	b.n	800b1be <aci_gatt_init+0x4c>
  if (status) 
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <aci_gatt_init+0x4a>
  {
    return status;
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	e000      	b.n	800b1be <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800b1c6:	b590      	push	{r4, r7, lr}
 800b1c8:	b0cf      	sub	sp, #316	; 0x13c
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	6001      	str	r1, [r0, #0]
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	1dfb      	adds	r3, r7, #7
 800b1d8:	4622      	mov	r2, r4
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	1dbb      	adds	r3, r7, #6
 800b1de:	4602      	mov	r2, r0
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	1d7b      	adds	r3, r7, #5
 800b1e4:	460a      	mov	r2, r1
 800b1e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b1e8:	f107 0310 	add.w	r3, r7, #16
 800b1ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b1f0:	1dfb      	adds	r3, r7, #7
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d007      	beq.n	800b208 <aci_gatt_add_service+0x42>
 800b1f8:	1dfb      	adds	r3, r7, #7
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d101      	bne.n	800b204 <aci_gatt_add_service+0x3e>
 800b200:	2311      	movs	r3, #17
 800b202:	e002      	b.n	800b20a <aci_gatt_add_service+0x44>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <aci_gatt_add_service+0x44>
 800b208:	2303      	movs	r3, #3
 800b20a:	f107 0210 	add.w	r2, r7, #16
 800b20e:	4413      	add	r3, r2
 800b210:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	2203      	movs	r2, #3
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fc27 	bl	800ba70 <Osal_MemSet>
  int index_input = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800b228:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b22c:	1dfa      	adds	r2, r7, #7
 800b22e:	7812      	ldrb	r2, [r2, #0]
 800b230:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b236:	3301      	adds	r3, #1
 800b238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800b23c:	1dfb      	adds	r3, r7, #7
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d002      	beq.n	800b24a <aci_gatt_add_service+0x84>
 800b244:	2b02      	cmp	r3, #2
 800b246:	d004      	beq.n	800b252 <aci_gatt_add_service+0x8c>
 800b248:	e007      	b.n	800b25a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800b24a:	2302      	movs	r3, #2
 800b24c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b250:	e005      	b.n	800b25e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b252:	2310      	movs	r3, #16
 800b254:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b258:	e001      	b.n	800b25e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b25a:	2347      	movs	r3, #71	; 0x47
 800b25c:	e05d      	b.n	800b31a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800b25e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b262:	1c58      	adds	r0, r3, #1
 800b264:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b268:	463b      	mov	r3, r7
 800b26a:	6819      	ldr	r1, [r3, #0]
 800b26c:	f000 fbf0 	bl	800ba50 <Osal_MemCpy>
    index_input += size;
 800b270:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b274:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b278:	4413      	add	r3, r2
 800b27a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800b27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b282:	1dba      	adds	r2, r7, #6
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b288:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b28c:	3301      	adds	r3, #1
 800b28e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800b292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b296:	1d7a      	adds	r2, r7, #5
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b2a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2aa:	2218      	movs	r2, #24
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fbde 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2b4:	233f      	movs	r3, #63	; 0x3f
 800b2b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b2ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b2be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b2c2:	f107 0310 	add.w	r3, r7, #16
 800b2c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b2d2:	f107 030c 	add.w	r3, r7, #12
 800b2d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b2da:	2303      	movs	r3, #3
 800b2dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b2e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 ff90 	bl	800c20c <hci_send_req>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	da01      	bge.n	800b2f6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b2f2:	23ff      	movs	r3, #255	; 0xff
 800b2f4:	e011      	b.n	800b31a <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800b2f6:	f107 030c 	add.w	r3, r7, #12
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800b300:	f107 030c 	add.w	r3, r7, #12
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	e008      	b.n	800b31a <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b308:	f107 030c 	add.w	r3, r7, #12
 800b30c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b310:	b29a      	uxth	r2, r3
 800b312:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b316:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b320:	46bd      	mov	sp, r7
 800b322:	bd90      	pop	{r4, r7, pc}

0800b324 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b0d1      	sub	sp, #324	; 0x144
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	f107 0108 	add.w	r1, r7, #8
 800b332:	600a      	str	r2, [r1, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	f107 030e 	add.w	r3, r7, #14
 800b33a:	4622      	mov	r2, r4
 800b33c:	801a      	strh	r2, [r3, #0]
 800b33e:	f107 030d 	add.w	r3, r7, #13
 800b342:	4602      	mov	r2, r0
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	1dbb      	adds	r3, r7, #6
 800b348:	460a      	mov	r2, r1
 800b34a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b34c:	f107 0318 	add.w	r3, r7, #24
 800b350:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b354:	f107 030d 	add.w	r3, r7, #13
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d008      	beq.n	800b370 <aci_gatt_add_char+0x4c>
 800b35e:	f107 030d 	add.w	r3, r7, #13
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d101      	bne.n	800b36c <aci_gatt_add_char+0x48>
 800b368:	2313      	movs	r3, #19
 800b36a:	e002      	b.n	800b372 <aci_gatt_add_char+0x4e>
 800b36c:	2303      	movs	r3, #3
 800b36e:	e000      	b.n	800b372 <aci_gatt_add_char+0x4e>
 800b370:	2305      	movs	r3, #5
 800b372:	f107 0218 	add.w	r2, r7, #24
 800b376:	4413      	add	r3, r2
 800b378:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	2203      	movs	r2, #3
 800b382:	2100      	movs	r1, #0
 800b384:	4618      	mov	r0, r3
 800b386:	f000 fb73 	bl	800ba70 <Osal_MemSet>
  int index_input = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b390:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b394:	f107 020e 	add.w	r2, r7, #14
 800b398:	8812      	ldrh	r2, [r2, #0]
 800b39a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b39c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3a0:	3302      	adds	r3, #2
 800b3a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800b3a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b3aa:	f107 020d 	add.w	r2, r7, #13
 800b3ae:	7812      	ldrb	r2, [r2, #0]
 800b3b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b3b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800b3bc:	f107 030d 	add.w	r3, r7, #13
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d002      	beq.n	800b3cc <aci_gatt_add_char+0xa8>
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d004      	beq.n	800b3d4 <aci_gatt_add_char+0xb0>
 800b3ca:	e007      	b.n	800b3dc <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b3d2:	e005      	b.n	800b3e0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b3da:	e001      	b.n	800b3e0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b3dc:	2347      	movs	r3, #71	; 0x47
 800b3de:	e086      	b.n	800b4ee <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800b3e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b3e4:	1cd8      	adds	r0, r3, #3
 800b3e6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b3ea:	f107 0308 	add.w	r3, r7, #8
 800b3ee:	6819      	ldr	r1, [r3, #0]
 800b3f0:	f000 fb2e 	bl	800ba50 <Osal_MemCpy>
    index_input += size;
 800b3f4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b3f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800b402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b406:	1dba      	adds	r2, r7, #6
 800b408:	8812      	ldrh	r2, [r2, #0]
 800b40a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b40c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b410:	3302      	adds	r3, #2
 800b412:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800b416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b41a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b41e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b424:	3301      	adds	r3, #1
 800b426:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800b42a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b42e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b432:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b434:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b438:	3301      	adds	r3, #1
 800b43a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800b43e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b442:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b446:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b44c:	3301      	adds	r3, #1
 800b44e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800b452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b456:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b45a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b45c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b460:	3301      	adds	r3, #1
 800b462:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800b466:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b46a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b46e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b470:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b474:	3301      	adds	r3, #1
 800b476:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b47a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b47e:	2218      	movs	r2, #24
 800b480:	2100      	movs	r1, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f000 faf4 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b488:	233f      	movs	r3, #63	; 0x3f
 800b48a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b48e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b492:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b496:	f107 0318 	add.w	r3, r7, #24
 800b49a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b49e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b4a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b4a6:	f107 0314 	add.w	r3, r7, #20
 800b4aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b4b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 fea6 	bl	800c20c <hci_send_req>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	da01      	bge.n	800b4ca <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800b4c6:	23ff      	movs	r3, #255	; 0xff
 800b4c8:	e011      	b.n	800b4ee <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b4ca:	f107 0314 	add.w	r3, r7, #20
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b4d4:	f107 0314 	add.w	r3, r7, #20
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	e008      	b.n	800b4ee <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b4dc:	f107 0314 	add.w	r3, r7, #20
 800b4e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b4ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd90      	pop	{r4, r7, pc}

0800b4f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b4f8:	b5b0      	push	{r4, r5, r7, lr}
 800b4fa:	b0cc      	sub	sp, #304	; 0x130
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4605      	mov	r5, r0
 800b500:	460c      	mov	r4, r1
 800b502:	4610      	mov	r0, r2
 800b504:	4619      	mov	r1, r3
 800b506:	1dbb      	adds	r3, r7, #6
 800b508:	462a      	mov	r2, r5
 800b50a:	801a      	strh	r2, [r3, #0]
 800b50c:	1d3b      	adds	r3, r7, #4
 800b50e:	4622      	mov	r2, r4
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	1cfb      	adds	r3, r7, #3
 800b514:	4602      	mov	r2, r0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	1cbb      	adds	r3, r7, #2
 800b51a:	460a      	mov	r2, r1
 800b51c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b51e:	f107 0310 	add.w	r3, r7, #16
 800b522:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b526:	f107 030f 	add.w	r3, r7, #15
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b538:	1dba      	adds	r2, r7, #6
 800b53a:	8812      	ldrh	r2, [r2, #0]
 800b53c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b53e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b542:	3302      	adds	r3, #2
 800b544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b54c:	1d3a      	adds	r2, r7, #4
 800b54e:	8812      	ldrh	r2, [r2, #0]
 800b550:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b556:	3302      	adds	r3, #2
 800b558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b55c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b560:	1cfa      	adds	r2, r7, #3
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b56a:	3301      	adds	r3, #1
 800b56c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b574:	1cba      	adds	r2, r7, #2
 800b576:	7812      	ldrb	r2, [r2, #0]
 800b578:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b57a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b57e:	3301      	adds	r3, #1
 800b580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b588:	1d98      	adds	r0, r3, #6
 800b58a:	1cbb      	adds	r3, r7, #2
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b594:	f000 fa5c 	bl	800ba50 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b598:	1cbb      	adds	r3, r7, #2
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b5a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5aa:	2218      	movs	r2, #24
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fa5e 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5b4:	233f      	movs	r3, #63	; 0x3f
 800b5b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b5ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b5be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b5c2:	f107 0310 	add.w	r3, r7, #16
 800b5c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5d2:	f107 030f 	add.w	r3, r7, #15
 800b5d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fe10 	bl	800c20c <hci_send_req>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	da01      	bge.n	800b5f6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b5f2:	23ff      	movs	r3, #255	; 0xff
 800b5f4:	e009      	b.n	800b60a <aci_gatt_update_char_value+0x112>
  if (status) 
 800b5f6:	f107 030f 	add.w	r3, r7, #15
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b600:	f107 030f 	add.w	r3, r7, #15
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	e000      	b.n	800b60a <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b610:	46bd      	mov	sp, r7
 800b612:	bdb0      	pop	{r4, r5, r7, pc}

0800b614 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b0cc      	sub	sp, #304	; 0x130
 800b618:	af00      	add	r7, sp, #0
 800b61a:	463b      	mov	r3, r7
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	1dfb      	adds	r3, r7, #7
 800b620:	4602      	mov	r2, r0
 800b622:	701a      	strb	r2, [r3, #0]
 800b624:	1dbb      	adds	r3, r7, #6
 800b626:	460a      	mov	r2, r1
 800b628:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b62a:	f107 0310 	add.w	r3, r7, #16
 800b62e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b632:	f107 030f 	add.w	r3, r7, #15
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b644:	1dfa      	adds	r2, r7, #7
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b64a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b64e:	3301      	adds	r3, #1
 800b650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b658:	1dba      	adds	r2, r7, #6
 800b65a:	7812      	ldrb	r2, [r2, #0]
 800b65c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b662:	3301      	adds	r3, #1
 800b664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b66c:	1c98      	adds	r0, r3, #2
 800b66e:	1dbb      	adds	r3, r7, #6
 800b670:	781a      	ldrb	r2, [r3, #0]
 800b672:	463b      	mov	r3, r7
 800b674:	6819      	ldr	r1, [r3, #0]
 800b676:	f000 f9eb 	bl	800ba50 <Osal_MemCpy>
  index_input += Length;
 800b67a:	1dbb      	adds	r3, r7, #6
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b682:	4413      	add	r3, r2
 800b684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b68c:	2218      	movs	r2, #24
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f9ed 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b696:	233f      	movs	r3, #63	; 0x3f
 800b698:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b69c:	230c      	movs	r3, #12
 800b69e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6a2:	f107 0310 	add.w	r3, r7, #16
 800b6a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b6b2:	f107 030f 	add.w	r3, r7, #15
 800b6b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 fda0 	bl	800c20c <hci_send_req>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da01      	bge.n	800b6d6 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b6d2:	23ff      	movs	r3, #255	; 0xff
 800b6d4:	e009      	b.n	800b6ea <aci_hal_write_config_data+0xd6>
  if (status) 
 800b6d6:	f107 030f 	add.w	r3, r7, #15
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b6e0:	f107 030f 	add.w	r3, r7, #15
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	e000      	b.n	800b6ea <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b0cc      	sub	sp, #304	; 0x130
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	1dfb      	adds	r3, r7, #7
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	1dbb      	adds	r3, r7, #6
 800b702:	460a      	mov	r2, r1
 800b704:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b706:	f107 0310 	add.w	r3, r7, #16
 800b70a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b70e:	f107 030f 	add.w	r3, r7, #15
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b71c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b720:	1dfa      	adds	r2, r7, #7
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b72a:	3301      	adds	r3, #1
 800b72c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b734:	1dba      	adds	r2, r7, #6
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b73a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b73e:	3301      	adds	r3, #1
 800b740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b748:	2218      	movs	r2, #24
 800b74a:	2100      	movs	r1, #0
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f98f 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b752:	233f      	movs	r3, #63	; 0x3f
 800b754:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b758:	230f      	movs	r3, #15
 800b75a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b75e:	f107 0310 	add.w	r3, r7, #16
 800b762:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b76a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b76e:	f107 030f 	add.w	r3, r7, #15
 800b772:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b776:	2301      	movs	r3, #1
 800b778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b77c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b780:	2100      	movs	r1, #0
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fd42 	bl	800c20c <hci_send_req>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	da01      	bge.n	800b792 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b78e:	23ff      	movs	r3, #255	; 0xff
 800b790:	e009      	b.n	800b7a6 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b792:	f107 030f 	add.w	r3, r7, #15
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b79c:	f107 030f 	add.w	r3, r7, #15
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	e000      	b.n	800b7a6 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b0cc      	sub	sp, #304	; 0x130
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	1dbb      	adds	r3, r7, #6
 800b7ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b7bc:	f107 0310 	add.w	r3, r7, #16
 800b7c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b7c4:	f107 030f 	add.w	r3, r7, #15
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b7d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7d6:	1dba      	adds	r2, r7, #6
 800b7d8:	8812      	ldrh	r2, [r2, #0]
 800b7da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7e0:	3302      	adds	r3, #2
 800b7e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b7e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7ea:	2218      	movs	r2, #24
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 f93e 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b7f4:	233f      	movs	r3, #63	; 0x3f
 800b7f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b7fa:	2318      	movs	r3, #24
 800b7fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b800:	f107 0310 	add.w	r3, r7, #16
 800b804:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b80c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b810:	f107 030f 	add.w	r3, r7, #15
 800b814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b818:	2301      	movs	r3, #1
 800b81a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b81e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fcf1 	bl	800c20c <hci_send_req>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	da01      	bge.n	800b834 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b830:	23ff      	movs	r3, #255	; 0xff
 800b832:	e009      	b.n	800b848 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b834:	f107 030f 	add.w	r3, r7, #15
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b83e:	f107 030f 	add.w	r3, r7, #15
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	e000      	b.n	800b848 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b85c:	f107 0308 	add.w	r3, r7, #8
 800b860:	2218      	movs	r2, #24
 800b862:	2100      	movs	r1, #0
 800b864:	4618      	mov	r0, r3
 800b866:	f000 f903 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x03;
 800b86a:	2303      	movs	r3, #3
 800b86c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b86e:	2303      	movs	r3, #3
 800b870:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b872:	1dfb      	adds	r3, r7, #7
 800b874:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b876:	2301      	movs	r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b87a:	f107 0308 	add.w	r3, r7, #8
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f000 fcc3 	bl	800c20c <hci_send_req>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	da01      	bge.n	800b890 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b88c:	23ff      	movs	r3, #255	; 0xff
 800b88e:	e005      	b.n	800b89c <hci_reset+0x4a>
  if (status) 
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <hci_reset+0x48>
  {
    return status;
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	e000      	b.n	800b89c <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b0ce      	sub	sp, #312	; 0x138
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	f107 0308 	add.w	r3, r7, #8
 800b8ae:	6019      	str	r1, [r3, #0]
 800b8b0:	1d3b      	adds	r3, r7, #4
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	f107 030e 	add.w	r3, r7, #14
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b8bc:	f107 0318 	add.w	r3, r7, #24
 800b8c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b8c4:	f107 0310 	add.w	r3, r7, #16
 800b8c8:	2205      	movs	r2, #5
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f8cf 	bl	800ba70 <Osal_MemSet>
  int index_input = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b8d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8dc:	f107 020e 	add.w	r2, r7, #14
 800b8e0:	8812      	ldrh	r2, [r2, #0]
 800b8e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b8e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8e8:	3302      	adds	r3, #2
 800b8ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b8ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b8f2:	2218      	movs	r2, #24
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f8ba 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x08;
 800b8fc:	2308      	movs	r3, #8
 800b8fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b902:	2330      	movs	r3, #48	; 0x30
 800b904:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b908:	f107 0318 	add.w	r3, r7, #24
 800b90c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b910:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b914:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b920:	2305      	movs	r3, #5
 800b922:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fc6d 	bl	800c20c <hci_send_req>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	da01      	bge.n	800b93c <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b938:	23ff      	movs	r3, #255	; 0xff
 800b93a:	e016      	b.n	800b96a <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800b946:	f107 0310 	add.w	r3, r7, #16
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	e00d      	b.n	800b96a <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800b94e:	f107 0310 	add.w	r3, r7, #16
 800b952:	78da      	ldrb	r2, [r3, #3]
 800b954:	f107 0308 	add.w	r3, r7, #8
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800b95c:	f107 0310 	add.w	r3, r7, #16
 800b960:	791a      	ldrb	r2, [r3, #4]
 800b962:	1d3b      	adds	r3, r7, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b0cd      	sub	sp, #308	; 0x134
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	4611      	mov	r1, r2
 800b980:	1dfb      	adds	r3, r7, #7
 800b982:	4622      	mov	r2, r4
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	1dbb      	adds	r3, r7, #6
 800b988:	4602      	mov	r2, r0
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	1d7b      	adds	r3, r7, #5
 800b98e:	460a      	mov	r2, r1
 800b990:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b992:	f107 0310 	add.w	r3, r7, #16
 800b996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b99a:	f107 030f 	add.w	r3, r7, #15
 800b99e:	2200      	movs	r2, #0
 800b9a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800b9a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9ac:	1dfa      	adds	r2, r7, #7
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b9b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800b9bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9c0:	1dba      	adds	r2, r7, #6
 800b9c2:	7812      	ldrb	r2, [r2, #0]
 800b9c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b9c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800b9d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9d4:	1d7a      	adds	r2, r7, #5
 800b9d6:	7812      	ldrb	r2, [r2, #0]
 800b9d8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b9da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9de:	3301      	adds	r3, #1
 800b9e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b9e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9e8:	2218      	movs	r2, #24
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f83f 	bl	800ba70 <Osal_MemSet>
  rq.ogf = 0x08;
 800b9f2:	2308      	movs	r3, #8
 800b9f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b9f8:	2331      	movs	r3, #49	; 0x31
 800b9fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ba06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ba0e:	f107 030f 	add.w	r3, r7, #15
 800ba12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ba1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba20:	2100      	movs	r1, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 fbf2 	bl	800c20c <hci_send_req>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da01      	bge.n	800ba32 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800ba2e:	23ff      	movs	r3, #255	; 0xff
 800ba30:	e009      	b.n	800ba46 <hci_le_set_default_phy+0xd2>
  if (status) 
 800ba32:	f107 030f 	add.w	r3, r7, #15
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800ba3c:	f107 030f 	add.w	r3, r7, #15
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	e000      	b.n	800ba46 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd90      	pop	{r4, r7, pc}

0800ba50 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	68b9      	ldr	r1, [r7, #8]
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f002 f96b 	bl	800dd3c <memcpy>
 800ba66:	4603      	mov	r3, r0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f002 f966 	bl	800dd52 <memset>
 800ba86:	4603      	mov	r3, r0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3301      	adds	r3, #1
 800baa2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2bff      	cmp	r3, #255	; 0xff
 800baaa:	d000      	beq.n	800baae <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800baac:	e04a      	b.n	800bb44 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	3302      	adds	r3, #2
 800bab2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	461a      	mov	r2, r3
 800babc:	f640 4301 	movw	r3, #3073	; 0xc01
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d000      	beq.n	800bac6 <PeerToPeer_Event_Handler+0x36>
          break;
 800bac4:	e03d      	b.n	800bb42 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	3302      	adds	r3, #2
 800baca:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	885b      	ldrh	r3, [r3, #2]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	461a      	mov	r2, r3
 800bad4:	4b1e      	ldr	r3, [pc, #120]	; (800bb50 <PeerToPeer_Event_Handler+0xc0>)
 800bad6:	889b      	ldrh	r3, [r3, #4]
 800bad8:	3302      	adds	r3, #2
 800bada:	429a      	cmp	r2, r3
 800badc:	d118      	bne.n	800bb10 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bade:	2301      	movs	r3, #1
 800bae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	7a1b      	ldrb	r3, [r3, #8]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800baf0:	2300      	movs	r3, #0
 800baf2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800baf4:	f107 0308 	add.w	r3, r7, #8
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 fbd5 	bl	800d2a8 <P2PS_STM_App_Notification>
        break;
 800bafe:	e01f      	b.n	800bb40 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800bb00:	2301      	movs	r3, #1
 800bb02:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800bb04:	f107 0308 	add.w	r3, r7, #8
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f001 fbcd 	bl	800d2a8 <P2PS_STM_App_Notification>
        break;
 800bb0e:	e017      	b.n	800bb40 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	885b      	ldrh	r3, [r3, #2]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	461a      	mov	r2, r3
 800bb18:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <PeerToPeer_Event_Handler+0xc0>)
 800bb1a:	885b      	ldrh	r3, [r3, #2]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d10e      	bne.n	800bb40 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	88db      	ldrh	r3, [r3, #6]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	3308      	adds	r3, #8
 800bb34:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800bb36:	f107 0308 	add.w	r3, r7, #8
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 fbb4 	bl	800d2a8 <P2PS_STM_App_Notification>
        break;
 800bb40:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bb42:	bf00      	nop
  }

  return(return_value);
 800bb44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3728      	adds	r7, #40	; 0x28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000210 	.word	0x20000210

0800bb54 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08a      	sub	sp, #40	; 0x28
 800bb58:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800bb5a:	484a      	ldr	r0, [pc, #296]	; (800bc84 <P2PS_STM_Init+0x130>)
 800bb5c:	f000 f930 	bl	800bdc0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800bb60:	238f      	movs	r3, #143	; 0x8f
 800bb62:	703b      	strb	r3, [r7, #0]
 800bb64:	23e5      	movs	r3, #229	; 0xe5
 800bb66:	707b      	strb	r3, [r7, #1]
 800bb68:	23b3      	movs	r3, #179	; 0xb3
 800bb6a:	70bb      	strb	r3, [r7, #2]
 800bb6c:	23d5      	movs	r3, #213	; 0xd5
 800bb6e:	70fb      	strb	r3, [r7, #3]
 800bb70:	232e      	movs	r3, #46	; 0x2e
 800bb72:	713b      	strb	r3, [r7, #4]
 800bb74:	237f      	movs	r3, #127	; 0x7f
 800bb76:	717b      	strb	r3, [r7, #5]
 800bb78:	234a      	movs	r3, #74	; 0x4a
 800bb7a:	71bb      	strb	r3, [r7, #6]
 800bb7c:	2398      	movs	r3, #152	; 0x98
 800bb7e:	71fb      	strb	r3, [r7, #7]
 800bb80:	232a      	movs	r3, #42	; 0x2a
 800bb82:	723b      	strb	r3, [r7, #8]
 800bb84:	2348      	movs	r3, #72	; 0x48
 800bb86:	727b      	strb	r3, [r7, #9]
 800bb88:	237a      	movs	r3, #122	; 0x7a
 800bb8a:	72bb      	strb	r3, [r7, #10]
 800bb8c:	23cc      	movs	r3, #204	; 0xcc
 800bb8e:	72fb      	strb	r3, [r7, #11]
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	733b      	strb	r3, [r7, #12]
 800bb94:	23fe      	movs	r3, #254	; 0xfe
 800bb96:	737b      	strb	r3, [r7, #13]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73bb      	strb	r3, [r7, #14]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800bba0:	4639      	mov	r1, r7
 800bba2:	4b39      	ldr	r3, [pc, #228]	; (800bc88 <P2PS_STM_Init+0x134>)
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2308      	movs	r3, #8
 800bba8:	2201      	movs	r2, #1
 800bbaa:	2002      	movs	r0, #2
 800bbac:	f7ff fb0b 	bl	800b1c6 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800bbb0:	2319      	movs	r3, #25
 800bbb2:	703b      	strb	r3, [r7, #0]
 800bbb4:	23ed      	movs	r3, #237	; 0xed
 800bbb6:	707b      	strb	r3, [r7, #1]
 800bbb8:	2382      	movs	r3, #130	; 0x82
 800bbba:	70bb      	strb	r3, [r7, #2]
 800bbbc:	23ae      	movs	r3, #174	; 0xae
 800bbbe:	70fb      	strb	r3, [r7, #3]
 800bbc0:	23ed      	movs	r3, #237	; 0xed
 800bbc2:	713b      	strb	r3, [r7, #4]
 800bbc4:	2321      	movs	r3, #33	; 0x21
 800bbc6:	717b      	strb	r3, [r7, #5]
 800bbc8:	234c      	movs	r3, #76	; 0x4c
 800bbca:	71bb      	strb	r3, [r7, #6]
 800bbcc:	239d      	movs	r3, #157	; 0x9d
 800bbce:	71fb      	strb	r3, [r7, #7]
 800bbd0:	2341      	movs	r3, #65	; 0x41
 800bbd2:	723b      	strb	r3, [r7, #8]
 800bbd4:	2345      	movs	r3, #69	; 0x45
 800bbd6:	727b      	strb	r3, [r7, #9]
 800bbd8:	2322      	movs	r3, #34	; 0x22
 800bbda:	72bb      	strb	r3, [r7, #10]
 800bbdc:	238e      	movs	r3, #142	; 0x8e
 800bbde:	72fb      	strb	r3, [r7, #11]
 800bbe0:	2341      	movs	r3, #65	; 0x41
 800bbe2:	733b      	strb	r3, [r7, #12]
 800bbe4:	23fe      	movs	r3, #254	; 0xfe
 800bbe6:	737b      	strb	r3, [r7, #13]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73bb      	strb	r3, [r7, #14]
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <P2PS_STM_Init+0x134>)
 800bbf2:	8818      	ldrh	r0, [r3, #0]
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4b25      	ldr	r3, [pc, #148]	; (800bc8c <P2PS_STM_Init+0x138>)
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	230a      	movs	r3, #10
 800bc00:	9303      	str	r3, [sp, #12]
 800bc02:	2301      	movs	r3, #1
 800bc04:	9302      	str	r3, [sp, #8]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	2306      	movs	r3, #6
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	2302      	movs	r3, #2
 800bc10:	2102      	movs	r1, #2
 800bc12:	f7ff fb87 	bl	800b324 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800bc16:	2319      	movs	r3, #25
 800bc18:	703b      	strb	r3, [r7, #0]
 800bc1a:	23ed      	movs	r3, #237	; 0xed
 800bc1c:	707b      	strb	r3, [r7, #1]
 800bc1e:	2382      	movs	r3, #130	; 0x82
 800bc20:	70bb      	strb	r3, [r7, #2]
 800bc22:	23ae      	movs	r3, #174	; 0xae
 800bc24:	70fb      	strb	r3, [r7, #3]
 800bc26:	23ed      	movs	r3, #237	; 0xed
 800bc28:	713b      	strb	r3, [r7, #4]
 800bc2a:	2321      	movs	r3, #33	; 0x21
 800bc2c:	717b      	strb	r3, [r7, #5]
 800bc2e:	234c      	movs	r3, #76	; 0x4c
 800bc30:	71bb      	strb	r3, [r7, #6]
 800bc32:	239d      	movs	r3, #157	; 0x9d
 800bc34:	71fb      	strb	r3, [r7, #7]
 800bc36:	2341      	movs	r3, #65	; 0x41
 800bc38:	723b      	strb	r3, [r7, #8]
 800bc3a:	2345      	movs	r3, #69	; 0x45
 800bc3c:	727b      	strb	r3, [r7, #9]
 800bc3e:	2322      	movs	r3, #34	; 0x22
 800bc40:	72bb      	strb	r3, [r7, #10]
 800bc42:	238e      	movs	r3, #142	; 0x8e
 800bc44:	72fb      	strb	r3, [r7, #11]
 800bc46:	2342      	movs	r3, #66	; 0x42
 800bc48:	733b      	strb	r3, [r7, #12]
 800bc4a:	23fe      	movs	r3, #254	; 0xfe
 800bc4c:	737b      	strb	r3, [r7, #13]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73bb      	strb	r3, [r7, #14]
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bc56:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <P2PS_STM_Init+0x134>)
 800bc58:	8818      	ldrh	r0, [r3, #0]
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <P2PS_STM_Init+0x13c>)
 800bc5e:	9305      	str	r3, [sp, #20]
 800bc60:	2301      	movs	r3, #1
 800bc62:	9304      	str	r3, [sp, #16]
 800bc64:	230a      	movs	r3, #10
 800bc66:	9303      	str	r3, [sp, #12]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	9302      	str	r3, [sp, #8]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	2310      	movs	r3, #16
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	2302      	movs	r3, #2
 800bc76:	2102      	movs	r1, #2
 800bc78:	f7ff fb54 	bl	800b324 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800bc7c:	bf00      	nop
}
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	0800ba91 	.word	0x0800ba91
 800bc88:	20000210 	.word	0x20000210
 800bc8c:	20000212 	.word	0x20000212
 800bc90:	20000214 	.word	0x20000214

0800bc94 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
  return;
 800bc98:	bf00      	nop
}
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bca2:	b480      	push	{r7}
 800bca4:	af00      	add	r7, sp, #0
  return;
 800bca6:	bf00      	nop
}
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <DIS_Init>:
__weak void DIS_Init( void )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	af00      	add	r7, sp, #0
  return;
 800bcb4:	bf00      	nop
}
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	af00      	add	r7, sp, #0
  return;
 800bcc2:	bf00      	nop
}
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
  return;
 800bcd0:	bf00      	nop
}
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <HRS_Init>:
__weak void HRS_Init( void )
{
 800bcda:	b480      	push	{r7}
 800bcdc:	af00      	add	r7, sp, #0
  return;
 800bcde:	bf00      	nop
}
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HTS_Init>:
__weak void HTS_Init( void )
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
  return;
 800bcec:	bf00      	nop
}
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	af00      	add	r7, sp, #0
  return;
 800bcfa:	bf00      	nop
}
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
  return;
 800bd08:	bf00      	nop
}
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bd12:	b480      	push	{r7}
 800bd14:	af00      	add	r7, sp, #0
  return;
 800bd16:	bf00      	nop
}
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bd20:	b480      	push	{r7}
 800bd22:	af00      	add	r7, sp, #0
  return;
 800bd24:	bf00      	nop
}
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bd2e:	b480      	push	{r7}
 800bd30:	af00      	add	r7, sp, #0
  return;
 800bd32:	bf00      	nop
}
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <MESH_Init>:
__weak void MESH_Init( void )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
  return;
 800bd40:	bf00      	nop
}
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	af00      	add	r7, sp, #0
  return;
 800bd4e:	bf00      	nop
}
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bd5c:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <SVCCTL_Init+0x18>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bd62:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <SVCCTL_Init+0x1c>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bd68:	f000 f806 	bl	800bd78 <SVCCTL_SvcInit>

  return;
 800bd6c:	bf00      	nop
}
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20000218 	.word	0x20000218
 800bd74:	20000238 	.word	0x20000238

0800bd78 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
  BLS_Init();
 800bd7c:	f7ff ff8a 	bl	800bc94 <BLS_Init>

  CRS_STM_Init();
 800bd80:	f7ff ff8f 	bl	800bca2 <CRS_STM_Init>

  DIS_Init();
 800bd84:	f7ff ff94 	bl	800bcb0 <DIS_Init>

  EDS_STM_Init();
 800bd88:	f7ff ff99 	bl	800bcbe <EDS_STM_Init>

  HIDS_Init();
 800bd8c:	f7ff ff9e 	bl	800bccc <HIDS_Init>

  HRS_Init();
 800bd90:	f7ff ffa3 	bl	800bcda <HRS_Init>

  HTS_Init();
 800bd94:	f7ff ffa8 	bl	800bce8 <HTS_Init>

  IAS_Init();
 800bd98:	f7ff ffad 	bl	800bcf6 <IAS_Init>

  LLS_Init();
 800bd9c:	f7ff ffb2 	bl	800bd04 <LLS_Init>

  TPS_Init();
 800bda0:	f7ff ffb7 	bl	800bd12 <TPS_Init>

  MOTENV_STM_Init();
 800bda4:	f7ff ffbc 	bl	800bd20 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bda8:	f7ff fed4 	bl	800bb54 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bdac:	f7ff ffbf 	bl	800bd2e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bdb0:	f7ff ffcb 	bl	800bd4a <BVOPUS_STM_Init>

  MESH_Init();
 800bdb4:	f7ff ffc2 	bl	800bd3c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bdb8:	f000 f8ea 	bl	800bf90 <SVCCTL_InitCustomSvc>
  
  return;
 800bdbc:	bf00      	nop
}
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bdc8:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bdca:	7f1b      	ldrb	r3, [r3, #28]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4a08      	ldr	r2, [pc, #32]	; (800bdf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bdd6:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bdd8:	7f1b      	ldrb	r3, [r3, #28]
 800bdda:	3301      	adds	r3, #1
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	4b04      	ldr	r3, [pc, #16]	; (800bdf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bde0:	771a      	strb	r2, [r3, #28]

  return;
 800bde2:	bf00      	nop
}
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	20000218 	.word	0x20000218

0800bdf4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3301      	adds	r3, #1
 800be00:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2bff      	cmp	r3, #255	; 0xff
 800be0c:	d000      	beq.n	800be10 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800be0e:	e025      	b.n	800be5c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	3302      	adds	r3, #2
 800be14:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be24:	d000      	beq.n	800be28 <SVCCTL_UserEvtRx+0x34>
          break;
 800be26:	e018      	b.n	800be5a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800be28:	2300      	movs	r3, #0
 800be2a:	757b      	strb	r3, [r7, #21]
 800be2c:	e00d      	b.n	800be4a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800be2e:	7d7b      	ldrb	r3, [r7, #21]
 800be30:	4a18      	ldr	r2, [pc, #96]	; (800be94 <SVCCTL_UserEvtRx+0xa0>)
 800be32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	4798      	blx	r3
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d108      	bne.n	800be56 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800be44:	7d7b      	ldrb	r3, [r7, #21]
 800be46:	3301      	adds	r3, #1
 800be48:	757b      	strb	r3, [r7, #21]
 800be4a:	4b12      	ldr	r3, [pc, #72]	; (800be94 <SVCCTL_UserEvtRx+0xa0>)
 800be4c:	7f1b      	ldrb	r3, [r3, #28]
 800be4e:	7d7a      	ldrb	r2, [r7, #21]
 800be50:	429a      	cmp	r2, r3
 800be52:	d3ec      	bcc.n	800be2e <SVCCTL_UserEvtRx+0x3a>
          break;
 800be54:	e000      	b.n	800be58 <SVCCTL_UserEvtRx+0x64>
              break;
 800be56:	bf00      	nop
          break;
 800be58:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800be5a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d009      	beq.n	800be76 <SVCCTL_UserEvtRx+0x82>
 800be62:	2b02      	cmp	r3, #2
 800be64:	d00a      	beq.n	800be7c <SVCCTL_UserEvtRx+0x88>
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 ff4e 	bl	800cd0c <SVCCTL_App_Notification>
 800be70:	4603      	mov	r3, r0
 800be72:	75bb      	strb	r3, [r7, #22]
      break;
 800be74:	e008      	b.n	800be88 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800be76:	2301      	movs	r3, #1
 800be78:	75bb      	strb	r3, [r7, #22]
      break;
 800be7a:	e005      	b.n	800be88 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800be7c:	2300      	movs	r3, #0
 800be7e:	75bb      	strb	r3, [r7, #22]
      break;
 800be80:	e002      	b.n	800be88 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800be82:	2301      	movs	r3, #1
 800be84:	75bb      	strb	r3, [r7, #22]
      break;
 800be86:	bf00      	nop
  }

  return (return_status);
 800be88:	7dbb      	ldrb	r3, [r7, #22]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20000218 	.word	0x20000218

0800be98 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3301      	adds	r3, #1
 800beaa:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2bff      	cmp	r3, #255	; 0xff
 800beb2:	d000      	beq.n	800beb6 <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800beb4:	e063      	b.n	800bf7e <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	3302      	adds	r3, #2
 800beba:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	461a      	mov	r2, r3
 800bec4:	f640 4301 	movw	r3, #3073	; 0xc01
 800bec8:	429a      	cmp	r2, r3
 800beca:	d000      	beq.n	800bece <Template_Event_Handler+0x36>
          break;
 800becc:	e056      	b.n	800bf7c <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	3302      	adds	r3, #2
 800bed2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	885b      	ldrh	r3, [r3, #2]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	4b2b      	ldr	r3, [pc, #172]	; (800bf8c <Template_Event_Handler+0xf4>)
 800bede:	889b      	ldrh	r3, [r3, #4]
 800bee0:	3302      	adds	r3, #2
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d118      	bne.n	800bf18 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	7a1b      	ldrb	r3, [r3, #8]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d007      	beq.n	800bf08 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800bef8:	2300      	movs	r3, #0
 800befa:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800befc:	f107 0308 	add.w	r3, r7, #8
 800bf00:	4618      	mov	r0, r3
 800bf02:	f001 fa0d 	bl	800d320 <TEMPLATE_STM_App_Notification>
        break;
 800bf06:	e038      	b.n	800bf7a <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4618      	mov	r0, r3
 800bf12:	f001 fa05 	bl	800d320 <TEMPLATE_STM_App_Notification>
        break;
 800bf16:	e030      	b.n	800bf7a <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	885b      	ldrh	r3, [r3, #2]
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4b1a      	ldr	r3, [pc, #104]	; (800bf8c <Template_Event_Handler+0xf4>)
 800bf22:	885b      	ldrh	r3, [r3, #2]
 800bf24:	3301      	adds	r3, #1
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d10f      	bne.n	800bf4a <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	88db      	ldrh	r3, [r3, #6]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800bf3e:	f107 0308 	add.w	r3, r7, #8
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 f9ec 	bl	800d320 <TEMPLATE_STM_App_Notification>
        break;
 800bf48:	e017      	b.n	800bf7a <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	885b      	ldrh	r3, [r3, #2]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	461a      	mov	r2, r3
 800bf52:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <Template_Event_Handler+0xf4>)
 800bf54:	88db      	ldrh	r3, [r3, #6]
 800bf56:	3301      	adds	r3, #1
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d10e      	bne.n	800bf7a <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800bf5c:	2304      	movs	r3, #4
 800bf5e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	88db      	ldrh	r3, [r3, #6]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800bf70:	f107 0308 	add.w	r3, r7, #8
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 f9d3 	bl	800d320 <TEMPLATE_STM_App_Notification>
        break;
 800bf7a:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bf7c:	bf00      	nop
  }

  return(return_value);
 800bf7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800bf82:	4618      	mov	r0, r3
 800bf84:	3728      	adds	r7, #40	; 0x28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	2000023c 	.word	0x2000023c

0800bf90 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	; 0x28
 800bf94:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800bf96:	484a      	ldr	r0, [pc, #296]	; (800c0c0 <SVCCTL_InitCustomSvc+0x130>)
 800bf98:	f7ff ff12 	bl	800bdc0 <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800bf9c:	231b      	movs	r3, #27
 800bf9e:	703b      	strb	r3, [r7, #0]
 800bfa0:	23c5      	movs	r3, #197	; 0xc5
 800bfa2:	707b      	strb	r3, [r7, #1]
 800bfa4:	23d5      	movs	r3, #213	; 0xd5
 800bfa6:	70bb      	strb	r3, [r7, #2]
 800bfa8:	23a5      	movs	r3, #165	; 0xa5
 800bfaa:	70fb      	strb	r3, [r7, #3]
 800bfac:	2302      	movs	r3, #2
 800bfae:	713b      	strb	r3, [r7, #4]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	717b      	strb	r3, [r7, #5]
 800bfb4:	23b4      	movs	r3, #180	; 0xb4
 800bfb6:	71bb      	strb	r3, [r7, #6]
 800bfb8:	239a      	movs	r3, #154	; 0x9a
 800bfba:	71fb      	strb	r3, [r7, #7]
 800bfbc:	23e1      	movs	r3, #225	; 0xe1
 800bfbe:	723b      	strb	r3, [r7, #8]
 800bfc0:	2311      	movs	r3, #17
 800bfc2:	727b      	strb	r3, [r7, #9]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	72bb      	strb	r3, [r7, #10]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	72fb      	strb	r3, [r7, #11]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	733b      	strb	r3, [r7, #12]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	737b      	strb	r3, [r7, #13]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73bb      	strb	r3, [r7, #14]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800bfdc:	4639      	mov	r1, r7
 800bfde:	4b39      	ldr	r3, [pc, #228]	; (800c0c4 <SVCCTL_InitCustomSvc+0x134>)
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	2002      	movs	r0, #2
 800bfe8:	f7ff f8ed 	bl	800b1c6 <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800bfec:	2319      	movs	r3, #25
 800bfee:	703b      	strb	r3, [r7, #0]
 800bff0:	23ed      	movs	r3, #237	; 0xed
 800bff2:	707b      	strb	r3, [r7, #1]
 800bff4:	2382      	movs	r3, #130	; 0x82
 800bff6:	70bb      	strb	r3, [r7, #2]
 800bff8:	23ae      	movs	r3, #174	; 0xae
 800bffa:	70fb      	strb	r3, [r7, #3]
 800bffc:	23ed      	movs	r3, #237	; 0xed
 800bffe:	713b      	strb	r3, [r7, #4]
 800c000:	2321      	movs	r3, #33	; 0x21
 800c002:	717b      	strb	r3, [r7, #5]
 800c004:	234c      	movs	r3, #76	; 0x4c
 800c006:	71bb      	strb	r3, [r7, #6]
 800c008:	239d      	movs	r3, #157	; 0x9d
 800c00a:	71fb      	strb	r3, [r7, #7]
 800c00c:	2341      	movs	r3, #65	; 0x41
 800c00e:	723b      	strb	r3, [r7, #8]
 800c010:	2345      	movs	r3, #69	; 0x45
 800c012:	727b      	strb	r3, [r7, #9]
 800c014:	2322      	movs	r3, #34	; 0x22
 800c016:	72bb      	strb	r3, [r7, #10]
 800c018:	238e      	movs	r3, #142	; 0x8e
 800c01a:	72fb      	strb	r3, [r7, #11]
 800c01c:	23cc      	movs	r3, #204	; 0xcc
 800c01e:	733b      	strb	r3, [r7, #12]
 800c020:	23aa      	movs	r3, #170	; 0xaa
 800c022:	737b      	strb	r3, [r7, #13]
 800c024:	2300      	movs	r3, #0
 800c026:	73bb      	strb	r3, [r7, #14]
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800c02c:	4b25      	ldr	r3, [pc, #148]	; (800c0c4 <SVCCTL_InitCustomSvc+0x134>)
 800c02e:	8818      	ldrh	r0, [r3, #0]
 800c030:	463a      	mov	r2, r7
 800c032:	4b25      	ldr	r3, [pc, #148]	; (800c0c8 <SVCCTL_InitCustomSvc+0x138>)
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	2301      	movs	r3, #1
 800c038:	9304      	str	r3, [sp, #16]
 800c03a:	230a      	movs	r3, #10
 800c03c:	9303      	str	r3, [sp, #12]
 800c03e:	2301      	movs	r3, #1
 800c040:	9302      	str	r3, [sp, #8]
 800c042:	2300      	movs	r3, #0
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	2306      	movs	r3, #6
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	2302      	movs	r3, #2
 800c04c:	2102      	movs	r1, #2
 800c04e:	f7ff f969 	bl	800b324 <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800c052:	231b      	movs	r3, #27
 800c054:	703b      	strb	r3, [r7, #0]
 800c056:	23c5      	movs	r3, #197	; 0xc5
 800c058:	707b      	strb	r3, [r7, #1]
 800c05a:	23d5      	movs	r3, #213	; 0xd5
 800c05c:	70bb      	strb	r3, [r7, #2]
 800c05e:	23a5      	movs	r3, #165	; 0xa5
 800c060:	70fb      	strb	r3, [r7, #3]
 800c062:	2302      	movs	r3, #2
 800c064:	713b      	strb	r3, [r7, #4]
 800c066:	2300      	movs	r3, #0
 800c068:	717b      	strb	r3, [r7, #5]
 800c06a:	2336      	movs	r3, #54	; 0x36
 800c06c:	71bb      	strb	r3, [r7, #6]
 800c06e:	23ac      	movs	r3, #172	; 0xac
 800c070:	71fb      	strb	r3, [r7, #7]
 800c072:	23e1      	movs	r3, #225	; 0xe1
 800c074:	723b      	strb	r3, [r7, #8]
 800c076:	2311      	movs	r3, #17
 800c078:	727b      	strb	r3, [r7, #9]
 800c07a:	2301      	movs	r3, #1
 800c07c:	72bb      	strb	r3, [r7, #10]
 800c07e:	2300      	movs	r3, #0
 800c080:	72fb      	strb	r3, [r7, #11]
 800c082:	2300      	movs	r3, #0
 800c084:	733b      	strb	r3, [r7, #12]
 800c086:	2300      	movs	r3, #0
 800c088:	737b      	strb	r3, [r7, #13]
 800c08a:	2304      	movs	r3, #4
 800c08c:	73bb      	strb	r3, [r7, #14]
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800c092:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <SVCCTL_InitCustomSvc+0x134>)
 800c094:	8818      	ldrh	r0, [r3, #0]
 800c096:	463a      	mov	r2, r7
 800c098:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <SVCCTL_InitCustomSvc+0x13c>)
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	2301      	movs	r3, #1
 800c09e:	9304      	str	r3, [sp, #16]
 800c0a0:	230a      	movs	r3, #10
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	2310      	movs	r3, #16
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	2102      	movs	r1, #2
 800c0b4:	f7ff f936 	bl	800b324 <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800c0b8:	bf00      	nop
}
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	0800be99 	.word	0x0800be99
 800c0c4:	2000023c 	.word	0x2000023c
 800c0c8:	2000023e 	.word	0x2000023e
 800c0cc:	20000240 	.word	0x20000240

0800c0d0 <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800c0dc:	2342      	movs	r3, #66	; 0x42
 800c0de:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d000      	beq.n	800c0e8 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800c0e6:	e00c      	b.n	800c102 <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800c0e8:	4b08      	ldr	r3, [pc, #32]	; (800c10c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800c0ea:	8818      	ldrh	r0, [r3, #0]
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800c0ee:	8899      	ldrh	r1, [r3, #4]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f7ff f9fe 	bl	800b4f8 <aci_gatt_update_char_value>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c100:	bf00      	nop
  }

  return result;
 800c102:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	2000023c 	.word	0x2000023c

0800c110 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	2121      	movs	r1, #33	; 0x21
 800c128:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800c12c:	f000 fa00 	bl	800c530 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	330b      	adds	r3, #11
 800c134:	78db      	ldrb	r3, [r3, #3]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3720      	adds	r7, #32
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	4a08      	ldr	r2, [pc, #32]	; (800c170 <hci_init+0x30>)
 800c150:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c152:	4a08      	ldr	r2, [pc, #32]	; (800c174 <hci_init+0x34>)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c158:	4806      	ldr	r0, [pc, #24]	; (800c174 <hci_init+0x34>)
 800c15a:	f000 f96f 	bl	800c43c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4618      	mov	r0, r3
 800c164:	f000 f8d0 	bl	800c308 <TlInit>

  return;
 800c168:	bf00      	nop
}
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20000454 	.word	0x20000454
 800c174:	2000042c 	.word	0x2000042c

0800c178 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c17e:	4820      	ldr	r0, [pc, #128]	; (800c200 <hci_user_evt_proc+0x88>)
 800c180:	f000 fc92 	bl	800caa8 <LST_is_empty>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d128      	bne.n	800c1dc <hci_user_evt_proc+0x64>
 800c18a:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <hci_user_evt_proc+0x8c>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d024      	beq.n	800c1dc <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c192:	f107 030c 	add.w	r3, r7, #12
 800c196:	4619      	mov	r1, r3
 800c198:	4819      	ldr	r0, [pc, #100]	; (800c200 <hci_user_evt_proc+0x88>)
 800c19a:	f000 fd0c 	bl	800cbb6 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c19e:	4b19      	ldr	r3, [pc, #100]	; (800c204 <hci_user_evt_proc+0x8c>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800c1a4:	4b18      	ldr	r3, [pc, #96]	; (800c208 <hci_user_evt_proc+0x90>)
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d009      	beq.n	800c1c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c1b0:	4b15      	ldr	r3, [pc, #84]	; (800c208 <hci_user_evt_proc+0x90>)
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	1d3a      	adds	r2, r7, #4
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c1ba:	793a      	ldrb	r2, [r7, #4]
 800c1bc:	4b11      	ldr	r3, [pc, #68]	; (800c204 <hci_user_evt_proc+0x8c>)
 800c1be:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c1c0:	4b10      	ldr	r3, [pc, #64]	; (800c204 <hci_user_evt_proc+0x8c>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fbca 	bl	800c964 <TL_MM_EvtDone>
 800c1d0:	e004      	b.n	800c1dc <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	480a      	ldr	r0, [pc, #40]	; (800c200 <hci_user_evt_proc+0x88>)
 800c1d8:	f000 fc86 	bl	800cae8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c1dc:	4808      	ldr	r0, [pc, #32]	; (800c200 <hci_user_evt_proc+0x88>)
 800c1de:	f000 fc63 	bl	800caa8 <LST_is_empty>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d107      	bne.n	800c1f8 <hci_user_evt_proc+0x80>
 800c1e8:	4b06      	ldr	r3, [pc, #24]	; (800c204 <hci_user_evt_proc+0x8c>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c1f0:	4803      	ldr	r0, [pc, #12]	; (800c200 <hci_user_evt_proc+0x88>)
 800c1f2:	f001 f800 	bl	800d1f6 <hci_notify_asynch_evt>
  }


  return;
 800c1f6:	bf00      	nop
 800c1f8:	bf00      	nop
}
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20000248 	.word	0x20000248
 800c204:	20000254 	.word	0x20000254
 800c208:	2000042c 	.word	0x2000042c

0800c20c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c218:	2000      	movs	r0, #0
 800c21a:	f000 f8cb 	bl	800c3b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c21e:	2300      	movs	r3, #0
 800c220:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	b21b      	sxth	r3, r3
 800c228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c22c:	b21a      	sxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	029b      	lsls	r3, r3, #10
 800c234:	b21b      	sxth	r3, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	b21b      	sxth	r3, r3
 800c23a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	b2d9      	uxtb	r1, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	8bbb      	ldrh	r3, [r7, #28]
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 f88d 	bl	800c368 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c24e:	e04e      	b.n	800c2ee <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c250:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c254:	f000 ffe6 	bl	800d224 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c258:	e043      	b.n	800c2e2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c25a:	f107 030c 	add.w	r3, r7, #12
 800c25e:	4619      	mov	r1, r3
 800c260:	4828      	ldr	r0, [pc, #160]	; (800c304 <hci_send_req+0xf8>)
 800c262:	f000 fca8 	bl	800cbb6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	7a5b      	ldrb	r3, [r3, #9]
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	d114      	bne.n	800c298 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	330b      	adds	r3, #11
 800c272:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	8bba      	ldrh	r2, [r7, #28]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d104      	bne.n	800c28a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	7812      	ldrb	r2, [r2, #0]
 800c288:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	785b      	ldrb	r3, [r3, #1]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d027      	beq.n	800c2e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c292:	2301      	movs	r3, #1
 800c294:	77fb      	strb	r3, [r7, #31]
 800c296:	e024      	b.n	800c2e2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	330b      	adds	r3, #11
 800c29c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	8bba      	ldrh	r2, [r7, #28]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d114      	bne.n	800c2d6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	7a9b      	ldrb	r3, [r3, #10]
 800c2b0:	3b03      	subs	r3, #3
 800c2b2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	695a      	ldr	r2, [r3, #20]
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	bfa8      	it	ge
 800c2be:	461a      	movge	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6918      	ldr	r0, [r3, #16]
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	1cd9      	adds	r1, r3, #3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	f001 fd33 	bl	800dd3c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c2e2:	4808      	ldr	r0, [pc, #32]	; (800c304 <hci_send_req+0xf8>)
 800c2e4:	f000 fbe0 	bl	800caa8 <LST_is_empty>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0b5      	beq.n	800c25a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c2ee:	7ffb      	ldrb	r3, [r7, #31]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d0ad      	beq.n	800c250 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	f000 f85d 	bl	800c3b4 <NotifyCmdStatus>

  return 0;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	2000044c 	.word	0x2000044c

0800c308 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c310:	480f      	ldr	r0, [pc, #60]	; (800c350 <TlInit+0x48>)
 800c312:	f000 fbb9 	bl	800ca88 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c316:	4a0f      	ldr	r2, [pc, #60]	; (800c354 <TlInit+0x4c>)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c31c:	480e      	ldr	r0, [pc, #56]	; (800c358 <TlInit+0x50>)
 800c31e:	f000 fbb3 	bl	800ca88 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c322:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <TlInit+0x54>)
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c328:	4b0d      	ldr	r3, [pc, #52]	; (800c360 <TlInit+0x58>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00a      	beq.n	800c346 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c334:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <TlInit+0x5c>)
 800c336:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c338:	4b09      	ldr	r3, [pc, #36]	; (800c360 <TlInit+0x58>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f107 0208 	add.w	r2, r7, #8
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
  }

  return;
 800c344:	bf00      	nop
 800c346:	bf00      	nop
}
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	2000044c 	.word	0x2000044c
 800c354:	20000250 	.word	0x20000250
 800c358:	20000248 	.word	0x20000248
 800c35c:	20000254 	.word	0x20000254
 800c360:	2000042c 	.word	0x2000042c
 800c364:	0800c3f5 	.word	0x0800c3f5

0800c368 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	603a      	str	r2, [r7, #0]
 800c372:	80fb      	strh	r3, [r7, #6]
 800c374:	460b      	mov	r3, r1
 800c376:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c378:	4b0c      	ldr	r3, [pc, #48]	; (800c3ac <SendCmd+0x44>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	88fa      	ldrh	r2, [r7, #6]
 800c37e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c382:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <SendCmd+0x44>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	797a      	ldrb	r2, [r7, #5]
 800c388:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c38a:	4b08      	ldr	r3, [pc, #32]	; (800c3ac <SendCmd+0x44>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	330c      	adds	r3, #12
 800c390:	797a      	ldrb	r2, [r7, #5]
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f001 fcd1 	bl	800dd3c <memcpy>

  hciContext.io.Send(0,0);
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <SendCmd+0x48>)
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	2100      	movs	r1, #0
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	4798      	blx	r3

  return;
 800c3a4:	bf00      	nop
}
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000250 	.word	0x20000250
 800c3b0:	2000042c 	.word	0x2000042c

0800c3b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d108      	bne.n	800c3d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	; (800c3f0 <NotifyCmdStatus+0x3c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00d      	beq.n	800c3e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <NotifyCmdStatus+0x3c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c3d4:	e008      	b.n	800c3e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c3d6:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <NotifyCmdStatus+0x3c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d004      	beq.n	800c3e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c3de:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <NotifyCmdStatus+0x3c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	4798      	blx	r3
  return;
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
}
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20000454 	.word	0x20000454

0800c3f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7a5b      	ldrb	r3, [r3, #9]
 800c400:	2b0f      	cmp	r3, #15
 800c402:	d003      	beq.n	800c40c <TlEvtReceived+0x18>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7a5b      	ldrb	r3, [r3, #9]
 800c408:	2b0e      	cmp	r3, #14
 800c40a:	d107      	bne.n	800c41c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4809      	ldr	r0, [pc, #36]	; (800c434 <TlEvtReceived+0x40>)
 800c410:	f000 fb8e 	bl	800cb30 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c414:	2000      	movs	r0, #0
 800c416:	f000 fefa 	bl	800d20e <hci_cmd_resp_release>
 800c41a:	e006      	b.n	800c42a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c41c:	6879      	ldr	r1, [r7, #4]
 800c41e:	4806      	ldr	r0, [pc, #24]	; (800c438 <TlEvtReceived+0x44>)
 800c420:	f000 fb86 	bl	800cb30 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c424:	4804      	ldr	r0, [pc, #16]	; (800c438 <TlEvtReceived+0x44>)
 800c426:	f000 fee6 	bl	800d1f6 <hci_notify_asynch_evt>
  }

  return;
 800c42a:	bf00      	nop
}
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	2000044c 	.word	0x2000044c
 800c438:	20000248 	.word	0x20000248

0800c43c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a05      	ldr	r2, [pc, #20]	; (800c45c <hci_register_io_bus+0x20>)
 800c448:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a04      	ldr	r2, [pc, #16]	; (800c460 <hci_register_io_bus+0x24>)
 800c44e:	611a      	str	r2, [r3, #16]

  return;
 800c450:	bf00      	nop
}
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	0800c73d 	.word	0x0800c73d
 800c460:	0800c7a5 	.word	0x0800c7a5

0800c464 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	4a08      	ldr	r2, [pc, #32]	; (800c494 <shci_init+0x30>)
 800c474:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c476:	4a08      	ldr	r2, [pc, #32]	; (800c498 <shci_init+0x34>)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c47c:	4806      	ldr	r0, [pc, #24]	; (800c498 <shci_init+0x34>)
 800c47e:	f000 f90d 	bl	800c69c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f890 	bl	800c5ac <TlInit>

  return;
 800c48c:	bf00      	nop
}
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20000478 	.word	0x20000478
 800c498:	20000458 	.word	0x20000458

0800c49c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c4a2:	4820      	ldr	r0, [pc, #128]	; (800c524 <shci_user_evt_proc+0x88>)
 800c4a4:	f000 fb00 	bl	800caa8 <LST_is_empty>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d128      	bne.n	800c500 <shci_user_evt_proc+0x64>
 800c4ae:	4b1e      	ldr	r3, [pc, #120]	; (800c528 <shci_user_evt_proc+0x8c>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d024      	beq.n	800c500 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c4b6:	f107 030c 	add.w	r3, r7, #12
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4819      	ldr	r0, [pc, #100]	; (800c524 <shci_user_evt_proc+0x88>)
 800c4be:	f000 fb7a 	bl	800cbb6 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c4c2:	4b19      	ldr	r3, [pc, #100]	; (800c528 <shci_user_evt_proc+0x8c>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c4c8:	4b18      	ldr	r3, [pc, #96]	; (800c52c <shci_user_evt_proc+0x90>)
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c4d4:	4b15      	ldr	r3, [pc, #84]	; (800c52c <shci_user_evt_proc+0x90>)
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	1d3a      	adds	r2, r7, #4
 800c4da:	4610      	mov	r0, r2
 800c4dc:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c4de:	793a      	ldrb	r2, [r7, #4]
 800c4e0:	4b11      	ldr	r3, [pc, #68]	; (800c528 <shci_user_evt_proc+0x8c>)
 800c4e2:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c4e4:	4b10      	ldr	r3, [pc, #64]	; (800c528 <shci_user_evt_proc+0x8c>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d004      	beq.n	800c4f6 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fa38 	bl	800c964 <TL_MM_EvtDone>
 800c4f4:	e004      	b.n	800c500 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	480a      	ldr	r0, [pc, #40]	; (800c524 <shci_user_evt_proc+0x88>)
 800c4fc:	f000 faf4 	bl	800cae8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c500:	4808      	ldr	r0, [pc, #32]	; (800c524 <shci_user_evt_proc+0x88>)
 800c502:	f000 fad1 	bl	800caa8 <LST_is_empty>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d107      	bne.n	800c51c <shci_user_evt_proc+0x80>
 800c50c:	4b06      	ldr	r3, [pc, #24]	; (800c528 <shci_user_evt_proc+0x8c>)
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c514:	4803      	ldr	r0, [pc, #12]	; (800c524 <shci_user_evt_proc+0x88>)
 800c516:	f7f4 f84c 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
}
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20000258 	.word	0x20000258
 800c528:	20000268 	.word	0x20000268
 800c52c:	20000458 	.word	0x20000458

0800c530 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	60ba      	str	r2, [r7, #8]
 800c538:	607b      	str	r3, [r7, #4]
 800c53a:	4603      	mov	r3, r0
 800c53c:	81fb      	strh	r3, [r7, #14]
 800c53e:	460b      	mov	r3, r1
 800c540:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c542:	2000      	movs	r0, #0
 800c544:	f000 f864 	bl	800c610 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c548:	4b16      	ldr	r3, [pc, #88]	; (800c5a4 <shci_send+0x74>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	89fa      	ldrh	r2, [r7, #14]
 800c54e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c552:	4b14      	ldr	r3, [pc, #80]	; (800c5a4 <shci_send+0x74>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	7b7a      	ldrb	r2, [r7, #13]
 800c558:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c55a:	4b12      	ldr	r3, [pc, #72]	; (800c5a4 <shci_send+0x74>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	330c      	adds	r3, #12
 800c560:	7b7a      	ldrb	r2, [r7, #13]
 800c562:	68b9      	ldr	r1, [r7, #8]
 800c564:	4618      	mov	r0, r3
 800c566:	f001 fbe9 	bl	800dd3c <memcpy>

  shciContext.io.Send(0,0);
 800c56a:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <shci_send+0x78>)
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2100      	movs	r1, #0
 800c570:	2000      	movs	r0, #0
 800c572:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c574:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c578:	f7f4 f832 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f103 0008 	add.w	r0, r3, #8
 800c582:	4b08      	ldr	r3, [pc, #32]	; (800c5a4 <shci_send+0x74>)
 800c584:	6819      	ldr	r1, [r3, #0]
 800c586:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <shci_send+0x74>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	789b      	ldrb	r3, [r3, #2]
 800c58c:	3303      	adds	r3, #3
 800c58e:	461a      	mov	r2, r3
 800c590:	f001 fbd4 	bl	800dd3c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c594:	2001      	movs	r0, #1
 800c596:	f000 f83b 	bl	800c610 <Cmd_SetStatus>

  return;
 800c59a:	bf00      	nop
}
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000264 	.word	0x20000264
 800c5a8:	20000458 	.word	0x20000458

0800c5ac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c5b4:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <TlInit+0x4c>)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c5ba:	4810      	ldr	r0, [pc, #64]	; (800c5fc <TlInit+0x50>)
 800c5bc:	f000 fa64 	bl	800ca88 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	f000 f825 	bl	800c610 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	; (800c600 <TlInit+0x54>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <TlInit+0x58>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00c      	beq.n	800c5ee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c5d8:	4b0b      	ldr	r3, [pc, #44]	; (800c608 <TlInit+0x5c>)
 800c5da:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c5dc:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <TlInit+0x60>)
 800c5de:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c5e0:	4b08      	ldr	r3, [pc, #32]	; (800c604 <TlInit+0x58>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f107 020c 	add.w	r2, r7, #12
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	4798      	blx	r3
  }

  return;
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
}
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000264 	.word	0x20000264
 800c5fc:	20000258 	.word	0x20000258
 800c600:	20000268 	.word	0x20000268
 800c604:	20000458 	.word	0x20000458
 800c608:	0800c661 	.word	0x0800c661
 800c60c:	0800c679 	.word	0x0800c679

0800c610 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10b      	bne.n	800c638 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c620:	4b0d      	ldr	r3, [pc, #52]	; (800c658 <Cmd_SetStatus+0x48>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c628:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <Cmd_SetStatus+0x48>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2000      	movs	r0, #0
 800c62e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c630:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <Cmd_SetStatus+0x4c>)
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c636:	e00b      	b.n	800c650 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c638:	4b08      	ldr	r3, [pc, #32]	; (800c65c <Cmd_SetStatus+0x4c>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c63e:	4b06      	ldr	r3, [pc, #24]	; (800c658 <Cmd_SetStatus+0x48>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c646:	4b04      	ldr	r3, [pc, #16]	; (800c658 <Cmd_SetStatus+0x48>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2001      	movs	r0, #1
 800c64c:	4798      	blx	r3
  return;
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
}
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20000478 	.word	0x20000478
 800c65c:	20000260 	.word	0x20000260

0800c660 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c668:	2000      	movs	r0, #0
 800c66a:	f7f3 ffae 	bl	80005ca <shci_cmd_resp_release>

  return;
 800c66e:	bf00      	nop
}
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
	...

0800c678 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c680:	6879      	ldr	r1, [r7, #4]
 800c682:	4805      	ldr	r0, [pc, #20]	; (800c698 <TlUserEvtReceived+0x20>)
 800c684:	f000 fa54 	bl	800cb30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c688:	4803      	ldr	r0, [pc, #12]	; (800c698 <TlUserEvtReceived+0x20>)
 800c68a:	f7f3 ff92 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800c68e:	bf00      	nop
}
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20000258 	.word	0x20000258

0800c69c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a05      	ldr	r2, [pc, #20]	; (800c6bc <shci_register_io_bus+0x20>)
 800c6a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a04      	ldr	r2, [pc, #16]	; (800c6c0 <shci_register_io_bus+0x24>)
 800c6ae:	611a      	str	r2, [r3, #16]

  return;
 800c6b0:	bf00      	nop
}
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	0800c819 	.word	0x0800c819
 800c6c0:	0800c86d 	.word	0x0800c86d

0800c6c4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c6c8:	f001 f812 	bl	800d6f0 <HW_IPCC_Enable>

  return;
 800c6cc:	bf00      	nop
}
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <TL_Init>:


void TL_Init( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c6d4:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <TL_Init+0x44>)
 800c6d6:	4a10      	ldr	r2, [pc, #64]	; (800c718 <TL_Init+0x48>)
 800c6d8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c6da:	4b0e      	ldr	r3, [pc, #56]	; (800c714 <TL_Init+0x44>)
 800c6dc:	4a0f      	ldr	r2, [pc, #60]	; (800c71c <TL_Init+0x4c>)
 800c6de:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c6e0:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <TL_Init+0x44>)
 800c6e2:	4a0f      	ldr	r2, [pc, #60]	; (800c720 <TL_Init+0x50>)
 800c6e4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c6e6:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <TL_Init+0x44>)
 800c6e8:	4a0e      	ldr	r2, [pc, #56]	; (800c724 <TL_Init+0x54>)
 800c6ea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c6ec:	4b09      	ldr	r3, [pc, #36]	; (800c714 <TL_Init+0x44>)
 800c6ee:	4a0e      	ldr	r2, [pc, #56]	; (800c728 <TL_Init+0x58>)
 800c6f0:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c6f2:	4b08      	ldr	r3, [pc, #32]	; (800c714 <TL_Init+0x44>)
 800c6f4:	4a0d      	ldr	r2, [pc, #52]	; (800c72c <TL_Init+0x5c>)
 800c6f6:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c6f8:	4b06      	ldr	r3, [pc, #24]	; (800c714 <TL_Init+0x44>)
 800c6fa:	4a0d      	ldr	r2, [pc, #52]	; (800c730 <TL_Init+0x60>)
 800c6fc:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c6fe:	4b05      	ldr	r3, [pc, #20]	; (800c714 <TL_Init+0x44>)
 800c700:	4a0c      	ldr	r2, [pc, #48]	; (800c734 <TL_Init+0x64>)
 800c702:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c704:	4b03      	ldr	r3, [pc, #12]	; (800c714 <TL_Init+0x44>)
 800c706:	4a0c      	ldr	r2, [pc, #48]	; (800c738 <TL_Init+0x68>)
 800c708:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c70a:	f000 fff9 	bl	800d700 <HW_IPCC_Init>

  return;
 800c70e:	bf00      	nop
}
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20030000 	.word	0x20030000
 800c718:	20030024 	.word	0x20030024
 800c71c:	20030044 	.word	0x20030044
 800c720:	20030054 	.word	0x20030054
 800c724:	20030060 	.word	0x20030060
 800c728:	20030068 	.word	0x20030068
 800c72c:	20030070 	.word	0x20030070
 800c730:	2003008c 	.word	0x2003008c
 800c734:	20030090 	.word	0x20030090
 800c738:	2003009c 	.word	0x2003009c

0800c73c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c748:	4811      	ldr	r0, [pc, #68]	; (800c790 <TL_BLE_Init+0x54>)
 800c74a:	f000 f99d 	bl	800ca88 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c74e:	4b11      	ldr	r3, [pc, #68]	; (800c794 <TL_BLE_Init+0x58>)
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	689a      	ldr	r2, [r3, #8]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68da      	ldr	r2, [r3, #12]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	4a0c      	ldr	r2, [pc, #48]	; (800c798 <TL_BLE_Init+0x5c>)
 800c768:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	4a08      	ldr	r2, [pc, #32]	; (800c790 <TL_BLE_Init+0x54>)
 800c76e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c770:	f000 ffdc 	bl	800d72c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a08      	ldr	r2, [pc, #32]	; (800c79c <TL_BLE_Init+0x60>)
 800c77a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4a07      	ldr	r2, [pc, #28]	; (800c7a0 <TL_BLE_Init+0x64>)
 800c782:	6013      	str	r3, [r2, #0]

  return 0;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20030a34 	.word	0x20030a34
 800c794:	20030000 	.word	0x20030000
 800c798:	20030a24 	.word	0x20030a24
 800c79c:	20000484 	.word	0x20000484
 800c7a0:	20000488 	.word	0x20000488

0800c7a4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <TL_BLE_SendCmd+0x24>)
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c7ba:	f000 ffc1 	bl	800d740 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20030000 	.word	0x20030000

0800c7cc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c7d2:	e009      	b.n	800c7e8 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c7d4:	1d3b      	adds	r3, r7, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4808      	ldr	r0, [pc, #32]	; (800c7fc <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c7da:	f000 f9ec 	bl	800cbb6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c7de:	4b08      	ldr	r3, [pc, #32]	; (800c800 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c7e8:	4804      	ldr	r0, [pc, #16]	; (800c7fc <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c7ea:	f000 f95d 	bl	800caa8 <LST_is_empty>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0ef      	beq.n	800c7d4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c7f4:	bf00      	nop
}
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20030a34 	.word	0x20030a34
 800c800:	20000484 	.word	0x20000484

0800c804 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c808:	4b02      	ldr	r3, [pc, #8]	; (800c814 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4798      	blx	r3

  return;
 800c80e:	bf00      	nop
}
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000488 	.word	0x20000488

0800c818 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c824:	480d      	ldr	r0, [pc, #52]	; (800c85c <TL_SYS_Init+0x44>)
 800c826:	f000 f92f 	bl	800ca88 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c82a:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <TL_SYS_Init+0x48>)
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	689a      	ldr	r2, [r3, #8]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4a08      	ldr	r2, [pc, #32]	; (800c85c <TL_SYS_Init+0x44>)
 800c83c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c83e:	f000 ffa1 	bl	800d784 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a07      	ldr	r2, [pc, #28]	; (800c864 <TL_SYS_Init+0x4c>)
 800c848:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	4a06      	ldr	r2, [pc, #24]	; (800c868 <TL_SYS_Init+0x50>)
 800c850:	6013      	str	r3, [r2, #0]

  return 0;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20030a3c 	.word	0x20030a3c
 800c860:	20030000 	.word	0x20030000
 800c864:	2000048c 	.word	0x2000048c
 800c868:	20000490 	.word	0x20000490

0800c86c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <TL_SYS_SendCmd+0x24>)
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2210      	movs	r2, #16
 800c880:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c882:	f000 ff89 	bl	800d798 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20030000 	.word	0x20030000

0800c894 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c898:	4b04      	ldr	r3, [pc, #16]	; (800c8ac <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a04      	ldr	r2, [pc, #16]	; (800c8b0 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c89e:	68d2      	ldr	r2, [r2, #12]
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	4798      	blx	r3

  return;
 800c8a6:	bf00      	nop
}
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	2000048c 	.word	0x2000048c
 800c8b0:	20030000 	.word	0x20030000

0800c8b4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c8ba:	e009      	b.n	800c8d0 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c8bc:	1d3b      	adds	r3, r7, #4
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4808      	ldr	r0, [pc, #32]	; (800c8e4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c8c2:	f000 f978 	bl	800cbb6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c8c6:	4b08      	ldr	r3, [pc, #32]	; (800c8e8 <HW_IPCC_SYS_EvtNot+0x34>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c8d0:	4804      	ldr	r0, [pc, #16]	; (800c8e4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c8d2:	f000 f8e9 	bl	800caa8 <LST_is_empty>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0ef      	beq.n	800c8bc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c8dc:	bf00      	nop
}
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	20030a3c 	.word	0x20030a3c
 800c8e8:	20000490 	.word	0x20000490

0800c8ec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c8f4:	4817      	ldr	r0, [pc, #92]	; (800c954 <TL_MM_Init+0x68>)
 800c8f6:	f000 f8c7 	bl	800ca88 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c8fa:	4817      	ldr	r0, [pc, #92]	; (800c958 <TL_MM_Init+0x6c>)
 800c8fc:	f000 f8c4 	bl	800ca88 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c900:	4b16      	ldr	r3, [pc, #88]	; (800c95c <TL_MM_Init+0x70>)
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	4a16      	ldr	r2, [pc, #88]	; (800c960 <TL_MM_Init+0x74>)
 800c906:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c908:	4b15      	ldr	r3, [pc, #84]	; (800c960 <TL_MM_Init+0x74>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6892      	ldr	r2, [r2, #8]
 800c910:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c912:	4b13      	ldr	r3, [pc, #76]	; (800c960 <TL_MM_Init+0x74>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	68d2      	ldr	r2, [r2, #12]
 800c91a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c91c:	4b10      	ldr	r3, [pc, #64]	; (800c960 <TL_MM_Init+0x74>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a0c      	ldr	r2, [pc, #48]	; (800c954 <TL_MM_Init+0x68>)
 800c922:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c924:	4b0e      	ldr	r3, [pc, #56]	; (800c960 <TL_MM_Init+0x74>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6812      	ldr	r2, [r2, #0]
 800c92c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c92e:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <TL_MM_Init+0x74>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	6852      	ldr	r2, [r2, #4]
 800c936:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c938:	4b09      	ldr	r3, [pc, #36]	; (800c960 <TL_MM_Init+0x74>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	6912      	ldr	r2, [r2, #16]
 800c940:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c942:	4b07      	ldr	r3, [pc, #28]	; (800c960 <TL_MM_Init+0x74>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6952      	ldr	r2, [r2, #20]
 800c94a:	619a      	str	r2, [r3, #24]

  return;
 800c94c:	bf00      	nop
}
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	200300a8 	.word	0x200300a8
 800c958:	2000047c 	.word	0x2000047c
 800c95c:	20030000 	.word	0x20030000
 800c960:	20000494 	.word	0x20000494

0800c964 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	4805      	ldr	r0, [pc, #20]	; (800c984 <TL_MM_EvtDone+0x20>)
 800c970:	f000 f8de 	bl	800cb30 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c974:	4804      	ldr	r0, [pc, #16]	; (800c988 <TL_MM_EvtDone+0x24>)
 800c976:	f000 ff35 	bl	800d7e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c97a:	bf00      	nop
}
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	2000047c 	.word	0x2000047c
 800c988:	0800c98d 	.word	0x0800c98d

0800c98c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c992:	e00c      	b.n	800c9ae <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c994:	1d3b      	adds	r3, r7, #4
 800c996:	4619      	mov	r1, r3
 800c998:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <SendFreeBuf+0x38>)
 800c99a:	f000 f90c 	bl	800cbb6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c99e:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <SendFreeBuf+0x3c>)
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 f8c1 	bl	800cb30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c9ae:	4805      	ldr	r0, [pc, #20]	; (800c9c4 <SendFreeBuf+0x38>)
 800c9b0:	f000 f87a 	bl	800caa8 <LST_is_empty>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0ec      	beq.n	800c994 <SendFreeBuf+0x8>
  }

  return;
 800c9ba:	bf00      	nop
}
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	2000047c 	.word	0x2000047c
 800c9c8:	20030000 	.word	0x20030000

0800c9cc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c9d0:	4805      	ldr	r0, [pc, #20]	; (800c9e8 <TL_TRACES_Init+0x1c>)
 800c9d2:	f000 f859 	bl	800ca88 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c9d6:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <TL_TRACES_Init+0x20>)
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	4a03      	ldr	r2, [pc, #12]	; (800c9e8 <TL_TRACES_Init+0x1c>)
 800c9dc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c9de:	f000 ff37 	bl	800d850 <HW_IPCC_TRACES_Init>

  return;
 800c9e2:	bf00      	nop
}
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	200300b0 	.word	0x200300b0
 800c9ec:	20030000 	.word	0x20030000

0800c9f0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c9f6:	e008      	b.n	800ca0a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c9f8:	1d3b      	adds	r3, r7, #4
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4808      	ldr	r0, [pc, #32]	; (800ca20 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c9fe:	f000 f8da 	bl	800cbb6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 f80d 	bl	800ca24 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ca0a:	4805      	ldr	r0, [pc, #20]	; (800ca20 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ca0c:	f000 f84c 	bl	800caa8 <LST_is_empty>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0f0      	beq.n	800c9f8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ca16:	bf00      	nop
}
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	200300b0 	.word	0x200300b0

0800ca24 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ca42:	4b0f      	ldr	r3, [pc, #60]	; (800ca80 <OTP_Read+0x48>)
 800ca44:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ca46:	e002      	b.n	800ca4e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3b08      	subs	r3, #8
 800ca4c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3307      	adds	r3, #7
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	79fa      	ldrb	r2, [r7, #7]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d003      	beq.n	800ca62 <OTP_Read+0x2a>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4a09      	ldr	r2, [pc, #36]	; (800ca84 <OTP_Read+0x4c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d1f2      	bne.n	800ca48 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3307      	adds	r3, #7
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	79fa      	ldrb	r2, [r7, #7]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d001      	beq.n	800ca72 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ca72:	68fb      	ldr	r3, [r7, #12]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	1fff73f8 	.word	0x1fff73f8
 800ca84:	1fff7000 	.word	0x1fff7000

0800ca88 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	605a      	str	r2, [r3, #4]
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cab0:	f3ef 8310 	mrs	r3, PRIMASK
 800cab4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cab6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cab8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800caba:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d102      	bne.n	800cacc <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800cac6:	2301      	movs	r3, #1
 800cac8:	75fb      	strb	r3, [r7, #23]
 800caca:	e001      	b.n	800cad0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800cacc:	2300      	movs	r3, #0
 800cace:	75fb      	strb	r3, [r7, #23]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800cada:	7dfb      	ldrb	r3, [r7, #23]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	371c      	adds	r7, #28
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caf2:	f3ef 8310 	mrs	r3, PRIMASK
 800caf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800caf8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cafa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cafc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	683a      	ldr	r2, [r7, #0]
 800cb18:	605a      	str	r2, [r3, #4]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb24:	bf00      	nop
 800cb26:	371c      	adds	r7, #28
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b087      	sub	sp, #28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb44:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb6c:	bf00      	nop
 800cb6e:	371c      	adds	r7, #28
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb80:	f3ef 8310 	mrs	r3, PRIMASK
 800cb84:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	6812      	ldr	r2, [r2, #0]
 800cb94:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6852      	ldr	r2, [r2, #4]
 800cb9e:	605a      	str	r2, [r3, #4]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cbaa:	bf00      	nop
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b086      	sub	sp, #24
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbc0:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cbc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff ffcd 	bl	800cb78 <LST_remove_node>
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cbe8:	bf00      	nop
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800cbf4:	4b03      	ldr	r3, [pc, #12]	; (800cc04 <LL_FLASH_GetUDN+0x14>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	1fff7580 	.word	0x1fff7580

0800cc08 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800cc0c:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <LL_FLASH_GetDeviceID+0x14>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	b2db      	uxtb	r3, r3
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	1fff7584 	.word	0x1fff7584

0800cc20 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800cc24:	4b03      	ldr	r3, [pc, #12]	; (800cc34 <LL_FLASH_GetSTCompanyID+0x14>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	0a1b      	lsrs	r3, r3, #8
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	1fff7584 	.word	0x1fff7584

0800cc38 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800cc38:	b5b0      	push	{r4, r5, r7, lr}
 800cc3a:	b08c      	sub	sp, #48	; 0x30
 800cc3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cc3e:	4b29      	ldr	r3, [pc, #164]	; (800cce4 <APP_BLE_Init+0xac>)
 800cc40:	463c      	mov	r4, r7
 800cc42:	461d      	mov	r5, r3
 800cc44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cc50:	c407      	stmia	r4!, {r0, r1, r2}
 800cc52:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800cc54:	f000 f900 	bl	800ce58 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800cc58:	2101      	movs	r1, #1
 800cc5a:	2002      	movs	r0, #2
 800cc5c:	f000 fe20 	bl	800d8a0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800cc60:	4a21      	ldr	r2, [pc, #132]	; (800cce8 <APP_BLE_Init+0xb0>)
 800cc62:	2100      	movs	r1, #0
 800cc64:	2004      	movs	r0, #4
 800cc66:	f000 ff25 	bl	800dab4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800cc6a:	463b      	mov	r3, r7
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fa4f 	bl	800c110 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800cc72:	f000 f907 	bl	800ce84 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800cc76:	f7ff f86f 	bl	800bd58 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc7a:	4b1c      	ldr	r3, [pc, #112]	; (800ccec <APP_BLE_Init+0xb4>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800cc82:	4b1a      	ldr	r3, [pc, #104]	; (800ccec <APP_BLE_Init+0xb4>)
 800cc84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc88:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cc8a:	4a19      	ldr	r2, [pc, #100]	; (800ccf0 <APP_BLE_Init+0xb8>)
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	2001      	movs	r0, #1
 800cc90:	f000 ff10 	bl	800dab4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800cc94:	2006      	movs	r0, #6
 800cc96:	f7fe fd8b 	bl	800b7b0 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800cc9a:	f000 fb31 	bl	800d300 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800cc9e:	f000 fb67 	bl	800d370 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800cca2:	4b14      	ldr	r3, [pc, #80]	; (800ccf4 <APP_BLE_Init+0xbc>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	4914      	ldr	r1, [pc, #80]	; (800ccf8 <APP_BLE_Init+0xc0>)
 800cca8:	2000      	movs	r0, #0
 800ccaa:	f7f4 f9ab 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ccae:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <APP_BLE_Init+0xc4>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4913      	ldr	r1, [pc, #76]	; (800cd00 <APP_BLE_Init+0xc8>)
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	f7f4 f9a5 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ccba:	4b0c      	ldr	r3, [pc, #48]	; (800ccec <APP_BLE_Init+0xb4>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ccc2:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <APP_BLE_Init+0xb4>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800ccca:	4b0e      	ldr	r3, [pc, #56]	; (800cd04 <APP_BLE_Init+0xcc>)
 800cccc:	2280      	movs	r2, #128	; 0x80
 800ccce:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800ccd0:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <APP_BLE_Init+0xd0>)
 800ccd2:	22a0      	movs	r2, #160	; 0xa0
 800ccd4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800ccd6:	2001      	movs	r0, #1
 800ccd8:	f000 f9ae 	bl	800d038 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800ccdc:	bf00      	nop
}
 800ccde:	3730      	adds	r7, #48	; 0x30
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bdb0      	pop	{r4, r5, r7, pc}
 800cce4:	0800ddb8 	.word	0x0800ddb8
 800cce8:	0800c179 	.word	0x0800c179
 800ccec:	2000026c 	.word	0x2000026c
 800ccf0:	0800d1a5 	.word	0x0800d1a5
 800ccf4:	0800d1d9 	.word	0x0800d1d9
 800ccf8:	200002fd 	.word	0x200002fd
 800ccfc:	0800d1e9 	.word	0x0800d1e9
 800cd00:	200002fe 	.word	0x200002fe
 800cd04:	20000300 	.word	0x20000300
 800cd08:	20000302 	.word	0x20000302

0800cd0c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08a      	sub	sp, #40	; 0x28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cd14:	2342      	movs	r3, #66	; 0x42
 800cd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b3e      	cmp	r3, #62	; 0x3e
 800cd26:	d024      	beq.n	800cd72 <SVCCTL_App_Notification+0x66>
 800cd28:	2bff      	cmp	r3, #255	; 0xff
 800cd2a:	d070      	beq.n	800ce0e <SVCCTL_App_Notification+0x102>
 800cd2c:	2b05      	cmp	r3, #5
 800cd2e:	d000      	beq.n	800cd32 <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800cd30:	e086      	b.n	800ce40 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	3302      	adds	r3, #2
 800cd36:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	4b42      	ldr	r3, [pc, #264]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cd42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d106      	bne.n	800cd56 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cd48:	4b40      	ldr	r3, [pc, #256]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cd4e:	4b3f      	ldr	r3, [pc, #252]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800cd56:	2001      	movs	r0, #1
 800cd58:	f000 f96e 	bl	800d038 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cd5c:	4b3c      	ldr	r3, [pc, #240]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800cd5e:	2201      	movs	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cd62:	4b3a      	ldr	r3, [pc, #232]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cd64:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cd66:	4b3a      	ldr	r3, [pc, #232]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800cd68:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800cd6a:	4839      	ldr	r0, [pc, #228]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800cd6c:	f000 fab4 	bl	800d2d8 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800cd70:	e066      	b.n	800ce40 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	3302      	adds	r3, #2
 800cd76:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d042      	beq.n	800ce06 <SVCCTL_App_Notification+0xfa>
 800cd80:	2b0c      	cmp	r3, #12
 800cd82:	d002      	beq.n	800cd8a <SVCCTL_App_Notification+0x7e>
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d016      	beq.n	800cdb6 <SVCCTL_App_Notification+0xaa>
          break;
 800cd88:	e040      	b.n	800ce0c <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cd90:	4b2e      	ldr	r3, [pc, #184]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cd92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd94:	f107 020a 	add.w	r2, r7, #10
 800cd98:	f107 010b 	add.w	r1, r7, #11
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fd81 	bl	800b8a4 <hci_le_read_phy>
 800cda2:	4603      	mov	r3, r0
 800cda4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800cda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d12c      	bne.n	800ce0a <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	2b02      	cmp	r3, #2
          break;
 800cdb4:	e029      	b.n	800ce0a <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cdbc:	4b23      	ldr	r3, [pc, #140]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdbe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7f4 f994 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cdc8:	4b20      	ldr	r3, [pc, #128]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d104      	bne.n	800cddc <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cdd2:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdd4:	2206      	movs	r2, #6
 800cdd6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800cdda:	e003      	b.n	800cde4 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cddc:	4b1b      	ldr	r3, [pc, #108]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdde:	2205      	movs	r2, #5
 800cde0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cdea:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800cdec:	4b17      	ldr	r3, [pc, #92]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdee:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cdf0:	4b17      	ldr	r3, [pc, #92]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cdf6:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <SVCCTL_App_Notification+0x140>)
 800cdf8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800cdfc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800cdfe:	4814      	ldr	r0, [pc, #80]	; (800ce50 <SVCCTL_App_Notification+0x144>)
 800ce00:	f000 fa6a 	bl	800d2d8 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800ce04:	e002      	b.n	800ce0c <SVCCTL_App_Notification+0x100>
          break;
 800ce06:	bf00      	nop
 800ce08:	e01a      	b.n	800ce40 <SVCCTL_App_Notification+0x134>
          break;
 800ce0a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800ce0c:	e018      	b.n	800ce40 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	3302      	adds	r3, #2
 800ce12:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f240 4207 	movw	r2, #1031	; 0x407
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d00a      	beq.n	800ce38 <SVCCTL_App_Notification+0x12c>
 800ce22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce26:	d009      	beq.n	800ce3c <SVCCTL_App_Notification+0x130>
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d000      	beq.n	800ce2e <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800ce2c:	e007      	b.n	800ce3e <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800ce2e:	2101      	movs	r1, #1
 800ce30:	4808      	ldr	r0, [pc, #32]	; (800ce54 <SVCCTL_App_Notification+0x148>)
 800ce32:	f7f9 f89b 	bl	8005f6c <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800ce36:	e002      	b.n	800ce3e <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800ce38:	bf00      	nop
 800ce3a:	e000      	b.n	800ce3e <SVCCTL_App_Notification+0x132>
      break;
 800ce3c:	bf00      	nop
      break; /* EVT_VENDOR */
 800ce3e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ce40:	2301      	movs	r3, #1
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3728      	adds	r7, #40	; 0x28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	2000026c 	.word	0x2000026c
 800ce50:	200006e0 	.word	0x200006e0
 800ce54:	48000400 	.word	0x48000400

0800ce58 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ce5e:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <Ble_Tl_Init+0x20>)
 800ce60:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ce62:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <Ble_Tl_Init+0x24>)
 800ce64:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ce66:	463b      	mov	r3, r7
 800ce68:	4619      	mov	r1, r3
 800ce6a:	4805      	ldr	r0, [pc, #20]	; (800ce80 <Ble_Tl_Init+0x28>)
 800ce6c:	f7ff f968 	bl	800c140 <hci_init>

  return;
 800ce70:	bf00      	nop
}
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	200300b8 	.word	0x200300b8
 800ce7c:	0800d273 	.word	0x0800d273
 800ce80:	0800d23b 	.word	0x0800d23b

0800ce84 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800ce84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce86:	b091      	sub	sp, #68	; 0x44
 800ce88:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ce8e:	f7fe fce0 	bl	800b852 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ce92:	f000 f943 	bl	800d11c <BleGetBdAddress>
 800ce96:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ce98:	6a3a      	ldr	r2, [r7, #32]
 800ce9a:	2106      	movs	r1, #6
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f7fe fbb9 	bl	800b614 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	795a      	ldrb	r2, [r3, #5]
 800cea6:	4b5e      	ldr	r3, [pc, #376]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cea8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	791a      	ldrb	r2, [r3, #4]
 800ceae:	4b5c      	ldr	r3, [pc, #368]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ceb0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	78da      	ldrb	r2, [r3, #3]
 800ceb6:	4b5a      	ldr	r3, [pc, #360]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ceb8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	789a      	ldrb	r2, [r3, #2]
 800cebe:	4b58      	ldr	r3, [pc, #352]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cec0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	785a      	ldrb	r2, [r3, #1]
 800cec6:	4b56      	ldr	r3, [pc, #344]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cec8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	781a      	ldrb	r2, [r3, #0]
 800cece:	4b54      	ldr	r3, [pc, #336]	; (800d020 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ced0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ced2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ced6:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ced8:	f7ff fe8a 	bl	800cbf0 <LL_FLASH_GetUDN>
 800cedc:	4603      	mov	r3, r0
 800cede:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cee0:	f107 0308 	add.w	r3, r7, #8
 800cee4:	461a      	mov	r2, r3
 800cee6:	2106      	movs	r1, #6
 800cee8:	202e      	movs	r0, #46	; 0x2e
 800ceea:	f7fe fb93 	bl	800b614 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ceee:	4a4d      	ldr	r2, [pc, #308]	; (800d024 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800cef0:	2110      	movs	r1, #16
 800cef2:	2018      	movs	r0, #24
 800cef4:	f7fe fb8e 	bl	800b614 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cef8:	4a4b      	ldr	r2, [pc, #300]	; (800d028 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800cefa:	2110      	movs	r1, #16
 800cefc:	2008      	movs	r0, #8
 800cefe:	f7fe fb89 	bl	800b614 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cf02:	2118      	movs	r1, #24
 800cf04:	2001      	movs	r0, #1
 800cf06:	f7fe fbf5 	bl	800b6f4 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800cf0a:	f7fe f932 	bl	800b172 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cf12:	7ffb      	ldrb	r3, [r7, #31]
 800cf14:	f043 0301 	orr.w	r3, r3, #1
 800cf18:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800cf1a:	7ffb      	ldrb	r3, [r7, #31]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d01e      	beq.n	800cf5e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800cf20:	4b42      	ldr	r3, [pc, #264]	; (800d02c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800cf22:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800cf24:	f107 0216 	add.w	r2, r7, #22
 800cf28:	7ff8      	ldrb	r0, [r7, #31]
 800cf2a:	f107 0312 	add.w	r3, r7, #18
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4613      	mov	r3, r2
 800cf38:	2207      	movs	r2, #7
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	f7fe f802 	bl	800af44 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cf40:	8afc      	ldrh	r4, [r7, #22]
 800cf42:	8abd      	ldrh	r5, [r7, #20]
 800cf44:	69b8      	ldr	r0, [r7, #24]
 800cf46:	f7f3 f91b 	bl	8000180 <strlen>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	2200      	movs	r2, #0
 800cf56:	4629      	mov	r1, r5
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7fe facd 	bl	800b4f8 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800cf5e:	8af8      	ldrh	r0, [r7, #22]
 800cf60:	8a79      	ldrh	r1, [r7, #18]
 800cf62:	1d3b      	adds	r3, r7, #4
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	2302      	movs	r3, #2
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f7fe fac5 	bl	800b4f8 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800cf6e:	2202      	movs	r2, #2
 800cf70:	2102      	movs	r1, #2
 800cf72:	2000      	movs	r0, #0
 800cf74:	f7fe fcfe 	bl	800b974 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cf78:	4b2d      	ldr	r3, [pc, #180]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cf7e:	4b2c      	ldr	r3, [pc, #176]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fd fede 	bl	800ad44 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cf88:	4b29      	ldr	r3, [pc, #164]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cf8e:	4b28      	ldr	r3, [pc, #160]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cf94:	4b26      	ldr	r3, [pc, #152]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf96:	2208      	movs	r2, #8
 800cf98:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cf9a:	4b25      	ldr	r3, [pc, #148]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf9c:	2210      	movs	r2, #16
 800cf9e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cfa0:	4b23      	ldr	r3, [pc, #140]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cfa6:	4b22      	ldr	r3, [pc, #136]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfa8:	4a22      	ldr	r2, [pc, #136]	; (800d034 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800cfaa:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cfac:	4b20      	ldr	r3, [pc, #128]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfae:	2201      	movs	r2, #1
 800cfb0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfb8:	e00b      	b.n	800cfd2 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800cfba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfbe:	4a1c      	ldr	r2, [pc, #112]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cfc6:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800cfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfcc:	3301      	adds	r3, #1
 800cfce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd6:	2b0f      	cmp	r3, #15
 800cfd8:	d9ef      	bls.n	800cfba <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cfda:	4b15      	ldr	r3, [pc, #84]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfdc:	789d      	ldrb	r5, [r3, #2]
 800cfde:	4b14      	ldr	r3, [pc, #80]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfe0:	785e      	ldrb	r6, [r3, #1]
 800cfe2:	4b13      	ldr	r3, [pc, #76]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfe4:	7d5b      	ldrb	r3, [r3, #21]
 800cfe6:	4a12      	ldr	r2, [pc, #72]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfe8:	7d92      	ldrb	r2, [r2, #22]
 800cfea:	4911      	ldr	r1, [pc, #68]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfec:	7d09      	ldrb	r1, [r1, #20]
 800cfee:	4810      	ldr	r0, [pc, #64]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cff0:	6980      	ldr	r0, [r0, #24]
 800cff2:	2400      	movs	r4, #0
 800cff4:	9404      	str	r4, [sp, #16]
 800cff6:	9003      	str	r0, [sp, #12]
 800cff8:	9102      	str	r1, [sp, #8]
 800cffa:	9201      	str	r2, [sp, #4]
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	2300      	movs	r3, #0
 800d000:	2201      	movs	r2, #1
 800d002:	4631      	mov	r1, r6
 800d004:	4628      	mov	r0, r5
 800d006:	f7fd feee 	bl	800ade6 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d00a:	4b09      	ldr	r3, [pc, #36]	; (800d030 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d00c:	789b      	ldrb	r3, [r3, #2]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800d012:	f7fe f885 	bl	800b120 <aci_gap_configure_whitelist>
   }
}
 800d016:	bf00      	nop
 800d018:	372c      	adds	r7, #44	; 0x2c
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000015c 	.word	0x2000015c
 800d024:	0800de98 	.word	0x0800de98
 800d028:	0800dea8 	.word	0x0800dea8
 800d02c:	0800dde8 	.word	0x0800dde8
 800d030:	2000026c 	.word	0x2000026c
 800d034:	0001b207 	.word	0x0001b207

0800d038 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	; 0x30
 800d03c:	af08      	add	r7, sp, #32
 800d03e:	4603      	mov	r3, r0
 800d040:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d042:	2342      	movs	r3, #66	; 0x42
 800d044:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d106      	bne.n	800d05a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d04c:	4b2c      	ldr	r3, [pc, #176]	; (800d100 <Adv_Request+0xc8>)
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d052:	4b2c      	ldr	r3, [pc, #176]	; (800d104 <Adv_Request+0xcc>)
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	81bb      	strh	r3, [r7, #12]
 800d058:	e005      	b.n	800d066 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d05a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800d05e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d060:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d064:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d066:	4b28      	ldr	r3, [pc, #160]	; (800d108 <Adv_Request+0xd0>)
 800d068:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f4 f83f 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d10d      	bne.n	800d094 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d078:	4b23      	ldr	r3, [pc, #140]	; (800d108 <Adv_Request+0xd0>)
 800d07a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d004      	beq.n	800d08c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d082:	4b21      	ldr	r3, [pc, #132]	; (800d108 <Adv_Request+0xd0>)
 800d084:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d103      	bne.n	800d094 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800d08c:	f7fd fd4c 	bl	800ab28 <aci_gap_set_non_discoverable>
 800d090:	4603      	mov	r3, r0
 800d092:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800d094:	4a1c      	ldr	r2, [pc, #112]	; (800d108 <Adv_Request+0xd0>)
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800d09c:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <Adv_Request+0xd0>)
 800d09e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0a2:	89b8      	ldrh	r0, [r7, #12]
 800d0a4:	89f9      	ldrh	r1, [r7, #14]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	9206      	str	r2, [sp, #24]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	9205      	str	r2, [sp, #20]
 800d0ae:	4a17      	ldr	r2, [pc, #92]	; (800d10c <Adv_Request+0xd4>)
 800d0b0:	9204      	str	r2, [sp, #16]
 800d0b2:	9303      	str	r3, [sp, #12]
 800d0b4:	4b16      	ldr	r3, [pc, #88]	; (800d110 <Adv_Request+0xd8>)
 800d0b6:	9302      	str	r3, [sp, #8]
 800d0b8:	2306      	movs	r3, #6
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f7fd fd58 	bl	800ab7a <aci_gap_set_discoverable>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800d0ce:	4911      	ldr	r1, [pc, #68]	; (800d114 <Adv_Request+0xdc>)
 800d0d0:	200e      	movs	r0, #14
 800d0d2:	f7fd ffc2 	bl	800b05a <aci_gap_update_adv_data>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800d0da:	7afb      	ldrb	r3, [r7, #11]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d107      	bne.n	800d0f6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d0e6:	4b08      	ldr	r3, [pc, #32]	; (800d108 <Adv_Request+0xd0>)
 800d0e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d0ec:	490a      	ldr	r1, [pc, #40]	; (800d118 <Adv_Request+0xe0>)
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f4 f888 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
}
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20000300 	.word	0x20000300
 800d104:	20000302 	.word	0x20000302
 800d108:	2000026c 	.word	0x2000026c
 800d10c:	20000295 	.word	0x20000295
 800d110:	0800deb8 	.word	0x0800deb8
 800d114:	2000015c 	.word	0x2000015c
 800d118:	0001e046 	.word	0x0001e046

0800d11c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d122:	f7ff fd65 	bl	800cbf0 <LL_FLASH_GetUDN>
 800d126:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12e:	d023      	beq.n	800d178 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d130:	f7ff fd76 	bl	800cc20 <LL_FLASH_GetSTCompanyID>
 800d134:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d136:	f7ff fd67 	bl	800cc08 <LL_FLASH_GetDeviceID>
 800d13a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	4b16      	ldr	r3, [pc, #88]	; (800d19c <BleGetBdAddress+0x80>)
 800d142:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	0a1b      	lsrs	r3, r3, #8
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	4b14      	ldr	r3, [pc, #80]	; (800d19c <BleGetBdAddress+0x80>)
 800d14c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	0c1b      	lsrs	r3, r3, #16
 800d152:	b2da      	uxtb	r2, r3
 800d154:	4b11      	ldr	r3, [pc, #68]	; (800d19c <BleGetBdAddress+0x80>)
 800d156:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <BleGetBdAddress+0x80>)
 800d15e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	b2da      	uxtb	r2, r3
 800d164:	4b0d      	ldr	r3, [pc, #52]	; (800d19c <BleGetBdAddress+0x80>)
 800d166:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	4b0b      	ldr	r3, [pc, #44]	; (800d19c <BleGetBdAddress+0x80>)
 800d170:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <BleGetBdAddress+0x80>)
 800d174:	617b      	str	r3, [r7, #20]
 800d176:	e00b      	b.n	800d190 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800d178:	2000      	movs	r0, #0
 800d17a:	f7ff fc5d 	bl	800ca38 <OTP_Read>
 800d17e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	617b      	str	r3, [r7, #20]
 800d18a:	e001      	b.n	800d190 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800d18c:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <BleGetBdAddress+0x84>)
 800d18e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800d190:	697b      	ldr	r3, [r7, #20]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	20000498 	.word	0x20000498
 800d1a0:	0800de90 	.word	0x0800de90

0800d1a4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d1aa:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <Adv_Cancel+0x30>)
 800d1ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d1b0:	2b05      	cmp	r3, #5
 800d1b2:	d00a      	beq.n	800d1ca <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800d1b8:	f7fd fcb6 	bl	800ab28 <aci_gap_set_non_discoverable>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d1c0:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <Adv_Cancel+0x30>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
}
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	2000026c 	.word	0x2000026c

0800d1d8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d1dc:	2100      	movs	r1, #0
 800d1de:	2001      	movs	r0, #1
 800d1e0:	f000 fc88 	bl	800daf4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800d1e4:	bf00      	nop
}
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800d1ec:	bf00      	nop
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d1fe:	2100      	movs	r1, #0
 800d200:	2004      	movs	r0, #4
 800d202:	f000 fc77 	bl	800daf4 <UTIL_SEQ_SetTask>
  return;
 800d206:	bf00      	nop
}
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d216:	2001      	movs	r0, #1
 800d218:	f000 fcd2 	bl	800dbc0 <UTIL_SEQ_SetEvt>
  return;
 800d21c:	bf00      	nop
}
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d22c:	2001      	movs	r0, #1
 800d22e:	f000 fce5 	bl	800dbfc <UTIL_SEQ_WaitEvt>
  return;
 800d232:	bf00      	nop
}
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	3308      	adds	r3, #8
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe fdd1 	bl	800bdf4 <SVCCTL_UserEvtRx>
 800d252:	4603      	mov	r3, r0
 800d254:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d256:	7afb      	ldrb	r3, [r7, #11]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2201      	movs	r2, #1
 800d260:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d262:	e002      	b.n	800d26a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	4603      	mov	r3, r0
 800d27a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d27c:	79fb      	ldrb	r3, [r7, #7]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <BLE_StatusNot+0x16>
 800d282:	2b01      	cmp	r3, #1
 800d284:	d006      	beq.n	800d294 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d286:	e00b      	b.n	800d2a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d288:	231f      	movs	r3, #31
 800d28a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f000 fc5b 	bl	800db48 <UTIL_SEQ_PauseTask>
      break;
 800d292:	e005      	b.n	800d2a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d294:	231f      	movs	r3, #31
 800d296:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 fc73 	bl	800db84 <UTIL_SEQ_ResumeTask>
      break;
 800d29e:	bf00      	nop
  }
  return;
 800d2a0:	bf00      	nop
}
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d004      	beq.n	800d2c2 <P2PS_STM_App_Notification+0x1a>
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d004      	beq.n	800d2c6 <P2PS_STM_App_Notification+0x1e>
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d004      	beq.n	800d2ca <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d2c0:	e004      	b.n	800d2cc <P2PS_STM_App_Notification+0x24>
      break;
 800d2c2:	bf00      	nop
 800d2c4:	e002      	b.n	800d2cc <P2PS_STM_App_Notification+0x24>
      break;
 800d2c6:	bf00      	nop
 800d2c8:	e000      	b.n	800d2cc <P2PS_STM_App_Notification+0x24>
      break;
 800d2ca:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d2cc:	bf00      	nop
}
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <P2PS_APP_Notification+0x16>
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d002      	beq.n	800d2f2 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d2ec:	e002      	b.n	800d2f4 <P2PS_APP_Notification+0x1c>
    break;
 800d2ee:	bf00      	nop
 800d2f0:	e000      	b.n	800d2f4 <P2PS_APP_Notification+0x1c>
    break;
 800d2f2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d2f4:	bf00      	nop
}
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d300:	b480      	push	{r7}
 800d302:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800d304:	bf00      	nop
}
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	af00      	add	r7, sp, #0
UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 800d312:	2100      	movs	r1, #0
 800d314:	2010      	movs	r0, #16
 800d316:	f000 fbed 	bl	800daf4 <UTIL_SEQ_SetTask>
}
 800d31a:	bf00      	nop
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d00e      	beq.n	800d34e <TEMPLATE_STM_App_Notification+0x2e>
 800d330:	2b03      	cmp	r3, #3
 800d332:	d015      	beq.n	800d360 <TEMPLATE_STM_App_Notification+0x40>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d000      	beq.n	800d33a <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800d338:	e013      	b.n	800d362 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <TEMPLATE_STM_App_Notification+0x4c>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	701a      	strb	r2, [r3, #0]
HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 800d340:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <TEMPLATE_STM_App_Notification+0x4c>)
 800d342:	7a1b      	ldrb	r3, [r3, #8]
 800d344:	21cc      	movs	r1, #204	; 0xcc
 800d346:	4618      	mov	r0, r3
 800d348:	f7f3 ff5c 	bl	8001204 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800d34c:	e009      	b.n	800d362 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800d34e:	4b07      	ldr	r3, [pc, #28]	; (800d36c <TEMPLATE_STM_App_Notification+0x4c>)
 800d350:	2200      	movs	r2, #0
 800d352:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 800d354:	4b05      	ldr	r3, [pc, #20]	; (800d36c <TEMPLATE_STM_App_Notification+0x4c>)
 800d356:	7a1b      	ldrb	r3, [r3, #8]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f3 fec9 	bl	80010f0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800d35e:	e000      	b.n	800d362 <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800d360:	bf00      	nop
  }

  return;
 800d362:	bf00      	nop
}
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000304 	.word	0x20000304

0800d370 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800d374:	4a08      	ldr	r2, [pc, #32]	; (800d398 <TEMPLATE_APP_Init+0x28>)
 800d376:	2100      	movs	r1, #0
 800d378:	2010      	movs	r0, #16
 800d37a:	f000 fb9b 	bl	800dab4 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800d37e:	4b07      	ldr	r3, [pc, #28]	; (800d39c <TEMPLATE_APP_Init+0x2c>)
 800d380:	2201      	movs	r2, #1
 800d382:	4907      	ldr	r1, [pc, #28]	; (800d3a0 <TEMPLATE_APP_Init+0x30>)
 800d384:	2000      	movs	r0, #0
 800d386:	f7f3 fe3d 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800d38a:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <TEMPLATE_APP_Init+0x34>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800d390:	f000 f80a 	bl	800d3a8 <TEMPLATE_APP_context_Init>
  return;
 800d394:	bf00      	nop
}
 800d396:	bd80      	pop	{r7, pc}
 800d398:	0800d3cd 	.word	0x0800d3cd
 800d39c:	0800d30f 	.word	0x0800d30f
 800d3a0:	2000030c 	.word	0x2000030c
 800d3a4:	20000304 	.word	0x20000304

0800d3a8 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 800d3ac:	4b06      	ldr	r3, [pc, #24]	; (800d3c8 <TEMPLATE_APP_context_Init+0x20>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800d3b2:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <TEMPLATE_APP_context_Init+0x20>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800d3b8:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <TEMPLATE_APP_context_Init+0x20>)
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	80da      	strh	r2, [r3, #6]
}
 800d3be:	bf00      	nop
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	20000304 	.word	0x20000304

0800d3cc <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
  uint8_t value[4];
  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
 800d3d2:	4b21      	ldr	r3, [pc, #132]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
 800d3da:	4b1f      	ldr	r3, [pc, #124]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d3dc:	885b      	ldrh	r3, [r3, #2]
 800d3de:	0a1b      	lsrs	r3, r3, #8
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	717b      	strb	r3, [r7, #5]
  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
 800d3e6:	4b1c      	ldr	r3, [pc, #112]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d3e8:	889b      	ldrh	r3, [r3, #4]
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	71bb      	strb	r3, [r7, #6]
  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
 800d3ee:	4b1a      	ldr	r3, [pc, #104]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d3f0:	889b      	ldrh	r3, [r3, #4]
 800d3f2:	0a1b      	lsrs	r3, r3, #8
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	71fb      	strb	r3, [r7, #7]
  TEMPLATE_Server_App_Context.Parameter.Temperature += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800d3fa:	4b17      	ldr	r3, [pc, #92]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d3fc:	889a      	ldrh	r2, [r3, #4]
 800d3fe:	4b16      	ldr	r3, [pc, #88]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d400:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d404:	b29b      	uxth	r3, r3
 800d406:	4413      	add	r3, r2
 800d408:	b29a      	uxth	r2, r3
 800d40a:	4b13      	ldr	r3, [pc, #76]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d40c:	809a      	strh	r2, [r3, #4]
  TEMPLATE_Server_App_Context.Parameter.TimeStamp += PARAMETER_CHANGE_STEP;
 800d40e:	4b12      	ldr	r3, [pc, #72]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d410:	885b      	ldrh	r3, [r3, #2]
 800d412:	330a      	adds	r3, #10
 800d414:	b29a      	uxth	r2, r3
 800d416:	4b10      	ldr	r3, [pc, #64]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d418:	805a      	strh	r2, [r3, #2]
  if (TEMPLATE_Server_App_Context.Parameter.Temperature > PARAMETER_VALUE_MAX_THRESHOLD) {
 800d41a:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d41c:	889b      	ldrh	r3, [r3, #4]
 800d41e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800d422:	d904      	bls.n	800d42e <TEMPLATE_Send_Notification_Task+0x62>
    TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 800d424:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d426:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800d42a:	80da      	strh	r2, [r3, #6]
 800d42c:	e006      	b.n	800d43c <TEMPLATE_Send_Notification_Task+0x70>
  }
  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
 800d42e:	4b0a      	ldr	r3, [pc, #40]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d430:	889b      	ldrh	r3, [r3, #4]
 800d432:	2b63      	cmp	r3, #99	; 0x63
 800d434:	d802      	bhi.n	800d43c <TEMPLATE_Send_Notification_Task+0x70>
  {
    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 800d436:	4b08      	ldr	r3, [pc, #32]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d438:	220a      	movs	r2, #10
 800d43a:	80da      	strh	r2, [r3, #6]
  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <TEMPLATE_Send_Notification_Task+0x84>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800d444:	1d3b      	adds	r3, r7, #4
 800d446:	4619      	mov	r1, r3
 800d448:	2000      	movs	r0, #0
 800d44a:	f7fe fe41 	bl	800c0d0 <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
}
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000304 	.word	0x20000304

0800d45c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d460:	4b05      	ldr	r3, [pc, #20]	; (800d478 <LL_PWR_EnableBootC2+0x1c>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	4a04      	ldr	r2, [pc, #16]	; (800d478 <LL_PWR_EnableBootC2+0x1c>)
 800d466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d46a:	60d3      	str	r3, [r2, #12]
}
 800d46c:	bf00      	nop
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	58000400 	.word	0x58000400

0800d47c <LL_AHB3_GRP1_EnableClock>:
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d48a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4313      	orrs	r3, r2
 800d492:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4013      	ands	r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
}
 800d4a2:	bf00      	nop
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	601a      	str	r2, [r3, #0]
}
 800d4c2:	bf00      	nop
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f043 0201 	orr.w	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	601a      	str	r2, [r3, #0]
}
 800d4e2:	bf00      	nop
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b083      	sub	sp, #12
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	041b      	lsls	r3, r3, #16
 800d500:	43db      	mvns	r3, r3
 800d502:	401a      	ands	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	605a      	str	r2, [r3, #4]
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	041b      	lsls	r3, r3, #16
 800d526:	431a      	orrs	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	605a      	str	r2, [r3, #4]
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	43db      	mvns	r3, r3
 800d54a:	401a      	ands	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	605a      	str	r2, [r3, #4]
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	609a      	str	r2, [r3, #8]
}
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	041a      	lsls	r2, r3, #16
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	609a      	str	r2, [r3, #8]
}
 800d58a:	bf00      	nop
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68da      	ldr	r2, [r3, #12]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d101      	bne.n	800d5b2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	69da      	ldr	r2, [r3, #28]
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d101      	bne.n	800d5dc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e000      	b.n	800d5de <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
	...

0800d5ec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d5f0:	2102      	movs	r1, #2
 800d5f2:	4819      	ldr	r0, [pc, #100]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d5f4:	f7ff ffe4 	bl	800d5c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <HW_IPCC_Rx_Handler+0x26>
 800d5fe:	4b16      	ldr	r3, [pc, #88]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	43db      	mvns	r3, r3
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d60c:	f000 f8de 	bl	800d7cc <HW_IPCC_SYS_EvtHandler>
 800d610:	e01f      	b.n	800d652 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d612:	2101      	movs	r1, #1
 800d614:	4810      	ldr	r0, [pc, #64]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d616:	f7ff ffd3 	bl	800d5c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d008      	beq.n	800d632 <HW_IPCC_Rx_Handler+0x46>
 800d620:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d62c:	f000 f892 	bl	800d754 <HW_IPCC_BLE_EvtHandler>
 800d630:	e00f      	b.n	800d652 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d632:	2108      	movs	r1, #8
 800d634:	4808      	ldr	r0, [pc, #32]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d636:	f7ff ffc3 	bl	800d5c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d009      	beq.n	800d654 <HW_IPCC_Rx_Handler+0x68>
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <HW_IPCC_Rx_Handler+0x6c>)
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	43db      	mvns	r3, r3
 800d646:	f003 0308 	and.w	r3, r3, #8
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d64e:	f000 f909 	bl	800d864 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d652:	bf00      	nop
 800d654:	bf00      	nop
}
 800d656:	bd80      	pop	{r7, pc}
 800d658:	58000c00 	.word	0x58000c00

0800d65c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d660:	2102      	movs	r1, #2
 800d662:	4822      	ldr	r0, [pc, #136]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d664:	f7ff ff97 	bl	800d596 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d109      	bne.n	800d682 <HW_IPCC_Tx_Handler+0x26>
 800d66e:	4b1f      	ldr	r3, [pc, #124]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	43db      	mvns	r3, r3
 800d674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d67c:	f000 f89a 	bl	800d7b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d680:	e031      	b.n	800d6e6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d682:	2102      	movs	r1, #2
 800d684:	4819      	ldr	r0, [pc, #100]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d686:	f7ff ff86 	bl	800d596 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d109      	bne.n	800d6a4 <HW_IPCC_Tx_Handler+0x48>
 800d690:	4b16      	ldr	r3, [pc, #88]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	43db      	mvns	r3, r3
 800d696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d69e:	f000 f889 	bl	800d7b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d6a2:	e020      	b.n	800d6e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d6a4:	2108      	movs	r1, #8
 800d6a6:	4811      	ldr	r0, [pc, #68]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d6a8:	f7ff ff75 	bl	800d596 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d109      	bne.n	800d6c6 <HW_IPCC_Tx_Handler+0x6a>
 800d6b2:	4b0e      	ldr	r3, [pc, #56]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	43db      	mvns	r3, r3
 800d6b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d6c0:	f000 f8b2 	bl	800d828 <HW_IPCC_MM_FreeBufHandler>
 800d6c4:	e00f      	b.n	800d6e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d6c6:	2120      	movs	r1, #32
 800d6c8:	4808      	ldr	r0, [pc, #32]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d6ca:	f7ff ff64 	bl	800d596 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <HW_IPCC_Tx_Handler+0x8c>
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <HW_IPCC_Tx_Handler+0x90>)
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	43db      	mvns	r3, r3
 800d6da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d6e2:	f000 f843 	bl	800d76c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
}
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	58000c00 	.word	0x58000c00

0800d6f0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d6f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d6f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d6f8:	f7ff feb0 	bl	800d45c <LL_PWR_EnableBootC2>

  return;
 800d6fc:	bf00      	nop
}
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d704:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d708:	f7ff feb8 	bl	800d47c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d70c:	4806      	ldr	r0, [pc, #24]	; (800d728 <HW_IPCC_Init+0x28>)
 800d70e:	f7ff fede 	bl	800d4ce <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d712:	4805      	ldr	r0, [pc, #20]	; (800d728 <HW_IPCC_Init+0x28>)
 800d714:	f7ff fecb 	bl	800d4ae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d718:	202c      	movs	r0, #44	; 0x2c
 800d71a:	f7f8 f91e 	bl	800595a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d71e:	202d      	movs	r0, #45	; 0x2d
 800d720:	f7f8 f91b 	bl	800595a <HAL_NVIC_EnableIRQ>

  return;
 800d724:	bf00      	nop
}
 800d726:	bd80      	pop	{r7, pc}
 800d728:	58000c00 	.word	0x58000c00

0800d72c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d730:	2101      	movs	r1, #1
 800d732:	4802      	ldr	r0, [pc, #8]	; (800d73c <HW_IPCC_BLE_Init+0x10>)
 800d734:	f7ff ff00 	bl	800d538 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d738:	bf00      	nop
}
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	58000c00 	.word	0x58000c00

0800d740 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d744:	2101      	movs	r1, #1
 800d746:	4802      	ldr	r0, [pc, #8]	; (800d750 <HW_IPCC_BLE_SendCmd+0x10>)
 800d748:	f7ff ff16 	bl	800d578 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d74c:	bf00      	nop
}
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	58000c00 	.word	0x58000c00

0800d754 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d758:	f7ff f838 	bl	800c7cc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d75c:	2101      	movs	r1, #1
 800d75e:	4802      	ldr	r0, [pc, #8]	; (800d768 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d760:	f7ff fefc 	bl	800d55c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d764:	bf00      	nop
}
 800d766:	bd80      	pop	{r7, pc}
 800d768:	58000c00 	.word	0x58000c00

0800d76c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d770:	2120      	movs	r1, #32
 800d772:	4803      	ldr	r0, [pc, #12]	; (800d780 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d774:	f7ff fece 	bl	800d514 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d778:	f7ff f844 	bl	800c804 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d77c:	bf00      	nop
}
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	58000c00 	.word	0x58000c00

0800d784 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d788:	2102      	movs	r1, #2
 800d78a:	4802      	ldr	r0, [pc, #8]	; (800d794 <HW_IPCC_SYS_Init+0x10>)
 800d78c:	f7ff fed4 	bl	800d538 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d790:	bf00      	nop
}
 800d792:	bd80      	pop	{r7, pc}
 800d794:	58000c00 	.word	0x58000c00

0800d798 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d79c:	2102      	movs	r1, #2
 800d79e:	4804      	ldr	r0, [pc, #16]	; (800d7b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d7a0:	f7ff feea 	bl	800d578 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d7a4:	2102      	movs	r1, #2
 800d7a6:	4802      	ldr	r0, [pc, #8]	; (800d7b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d7a8:	f7ff fea1 	bl	800d4ee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d7ac:	bf00      	nop
}
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	58000c00 	.word	0x58000c00

0800d7b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d7b8:	2102      	movs	r1, #2
 800d7ba:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d7bc:	f7ff feaa 	bl	800d514 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d7c0:	f7ff f868 	bl	800c894 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d7c4:	bf00      	nop
}
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	58000c00 	.word	0x58000c00

0800d7cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d7d0:	f7ff f870 	bl	800c8b4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d7d4:	2102      	movs	r1, #2
 800d7d6:	4802      	ldr	r0, [pc, #8]	; (800d7e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d7d8:	f7ff fec0 	bl	800d55c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d7dc:	bf00      	nop
}
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	58000c00 	.word	0x58000c00

0800d7e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d7ec:	2108      	movs	r1, #8
 800d7ee:	480c      	ldr	r0, [pc, #48]	; (800d820 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d7f0:	f7ff fed1 	bl	800d596 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d007      	beq.n	800d80a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d7fa:	4a0a      	ldr	r2, [pc, #40]	; (800d824 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d800:	2108      	movs	r1, #8
 800d802:	4807      	ldr	r0, [pc, #28]	; (800d820 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d804:	f7ff fe73 	bl	800d4ee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d808:	e006      	b.n	800d818 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d80e:	2108      	movs	r1, #8
 800d810:	4803      	ldr	r0, [pc, #12]	; (800d820 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d812:	f7ff feb1 	bl	800d578 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d816:	bf00      	nop
}
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	58000c00 	.word	0x58000c00
 800d824:	200004a0 	.word	0x200004a0

0800d828 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d82c:	2108      	movs	r1, #8
 800d82e:	4806      	ldr	r0, [pc, #24]	; (800d848 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d830:	f7ff fe70 	bl	800d514 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d83a:	2108      	movs	r1, #8
 800d83c:	4802      	ldr	r0, [pc, #8]	; (800d848 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d83e:	f7ff fe9b 	bl	800d578 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d842:	bf00      	nop
}
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	58000c00 	.word	0x58000c00
 800d84c:	200004a0 	.word	0x200004a0

0800d850 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d854:	2108      	movs	r1, #8
 800d856:	4802      	ldr	r0, [pc, #8]	; (800d860 <HW_IPCC_TRACES_Init+0x10>)
 800d858:	f7ff fe6e 	bl	800d538 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d85c:	bf00      	nop
}
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	58000c00 	.word	0x58000c00

0800d864 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d868:	f7ff f8c2 	bl	800c9f0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d86c:	2108      	movs	r1, #8
 800d86e:	4802      	ldr	r0, [pc, #8]	; (800d878 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d870:	f7ff fe74 	bl	800d55c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d874:	bf00      	nop
}
 800d876:	bd80      	pop	{r7, pc}
 800d878:	58000c00 	.word	0x58000c00

0800d87c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <UTIL_LPM_Init+0x1c>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d886:	4b05      	ldr	r3, [pc, #20]	; (800d89c <UTIL_LPM_Init+0x20>)
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d88c:	bf00      	nop
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	200004a4 	.word	0x200004a4
 800d89c:	200004a8 	.word	0x200004a8

0800d8a0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d8b0:	613b      	str	r3, [r7, #16]
  return(result);
 800d8b2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d8b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8b6:	b672      	cpsid	i
  
  switch(state)
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d009      	beq.n	800d8d2 <UTIL_LPM_SetOffMode+0x32>
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d000      	beq.n	800d8c4 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800d8c2:	e00e      	b.n	800d8e2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d8c4:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <UTIL_LPM_SetOffMode+0x58>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	4a0a      	ldr	r2, [pc, #40]	; (800d8f8 <UTIL_LPM_SetOffMode+0x58>)
 800d8ce:	6013      	str	r3, [r2, #0]
      break;
 800d8d0:	e007      	b.n	800d8e2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	43da      	mvns	r2, r3
 800d8d6:	4b08      	ldr	r3, [pc, #32]	; (800d8f8 <UTIL_LPM_SetOffMode+0x58>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4013      	ands	r3, r2
 800d8dc:	4a06      	ldr	r2, [pc, #24]	; (800d8f8 <UTIL_LPM_SetOffMode+0x58>)
 800d8de:	6013      	str	r3, [r2, #0]
      break;
 800d8e0:	bf00      	nop
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d8ec:	bf00      	nop
 800d8ee:	371c      	adds	r7, #28
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	200004a8 	.word	0x200004a8

0800d8fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08c      	sub	sp, #48	; 0x30
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d904:	4b63      	ldr	r3, [pc, #396]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800d90a:	4b62      	ldr	r3, [pc, #392]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4013      	ands	r3, r2
 800d912:	4a60      	ldr	r2, [pc, #384]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800d914:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d916:	e082      	b.n	800da1e <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d91c:	e002      	b.n	800d924 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	3301      	adds	r3, #1
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d924:	4a5c      	ldr	r2, [pc, #368]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d92c:	4b5b      	ldr	r3, [pc, #364]	; (800da9c <UTIL_SEQ_Run+0x1a0>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	401a      	ands	r2, r3
 800d932:	4b58      	ldr	r3, [pc, #352]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4013      	ands	r3, r2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0f0      	beq.n	800d91e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d93c:	4a56      	ldr	r2, [pc, #344]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d944:	4b55      	ldr	r3, [pc, #340]	; (800da9c <UTIL_SEQ_Run+0x1a0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	401a      	ands	r2, r3
 800d94a:	4b52      	ldr	r3, [pc, #328]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4013      	ands	r3, r2
 800d950:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800d952:	4a51      	ldr	r2, [pc, #324]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	4413      	add	r3, r2
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	4013      	ands	r3, r2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d964:	4a4c      	ldr	r2, [pc, #304]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	4413      	add	r3, r2
 800d96c:	f04f 32ff 	mov.w	r2, #4294967295
 800d970:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800d972:	4a49      	ldr	r2, [pc, #292]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	4413      	add	r3, r2
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	4013      	ands	r3, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f000 f97d 	bl	800dc80 <bit_position>
 800d986:	4602      	mov	r2, r0
 800d988:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <UTIL_SEQ_Run+0x1a4>)
 800d98a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800d98c:	4a42      	ldr	r2, [pc, #264]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	00db      	lsls	r3, r3, #3
 800d992:	4413      	add	r3, r2
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	4a42      	ldr	r2, [pc, #264]	; (800daa0 <UTIL_SEQ_Run+0x1a4>)
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	2101      	movs	r1, #1
 800d99c:	fa01 f202 	lsl.w	r2, r1, r2
 800d9a0:	43d2      	mvns	r2, r2
 800d9a2:	401a      	ands	r2, r3
 800d9a4:	493c      	ldr	r1, [pc, #240]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	440b      	add	r3, r1
 800d9ac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9b4:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9b8:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800d9ba:	4b39      	ldr	r3, [pc, #228]	; (800daa0 <UTIL_SEQ_Run+0x1a4>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4b36      	ldr	r3, [pc, #216]	; (800daa4 <UTIL_SEQ_Run+0x1a8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	4a35      	ldr	r2, [pc, #212]	; (800daa4 <UTIL_SEQ_Run+0x1a8>)
 800d9d0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9d6:	e014      	b.n	800da02 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	4a2e      	ldr	r2, [pc, #184]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d9de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9e2:	4b2f      	ldr	r3, [pc, #188]	; (800daa0 <UTIL_SEQ_Run+0x1a4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	400a      	ands	r2, r1
 800d9f6:	4928      	ldr	r1, [pc, #160]	; (800da98 <UTIL_SEQ_Run+0x19c>)
 800d9f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	3b01      	subs	r3, #1
 800da00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1e7      	bne.n	800d9d8 <UTIL_SEQ_Run+0xdc>
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800da12:	4b23      	ldr	r3, [pc, #140]	; (800daa0 <UTIL_SEQ_Run+0x1a4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a24      	ldr	r2, [pc, #144]	; (800daa8 <UTIL_SEQ_Run+0x1ac>)
 800da18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da1c:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800da1e:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <UTIL_SEQ_Run+0x1a8>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	4b1e      	ldr	r3, [pc, #120]	; (800da9c <UTIL_SEQ_Run+0x1a0>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	401a      	ands	r2, r3
 800da28:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4013      	ands	r3, r2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <UTIL_SEQ_Run+0x146>
 800da32:	4b1e      	ldr	r3, [pc, #120]	; (800daac <UTIL_SEQ_Run+0x1b0>)
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	4b1e      	ldr	r3, [pc, #120]	; (800dab0 <UTIL_SEQ_Run+0x1b4>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f43f af6b 	beq.w	800d918 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800da42:	f000 f90f 	bl	800dc64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da46:	f3ef 8310 	mrs	r3, PRIMASK
 800da4a:	613b      	str	r3, [r7, #16]
  return(result);
 800da4c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800da50:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800da52:	4b14      	ldr	r3, [pc, #80]	; (800daa4 <UTIL_SEQ_Run+0x1a8>)
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	4b11      	ldr	r3, [pc, #68]	; (800da9c <UTIL_SEQ_Run+0x1a0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	401a      	ands	r2, r3
 800da5c:	4b0d      	ldr	r3, [pc, #52]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4013      	ands	r3, r2
 800da62:	2b00      	cmp	r3, #0
 800da64:	d108      	bne.n	800da78 <UTIL_SEQ_Run+0x17c>
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <UTIL_SEQ_Run+0x1b0>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <UTIL_SEQ_Run+0x1b4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4013      	ands	r3, r2
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800da74:	f7f2 fd89 	bl	800058a <UTIL_SEQ_Idle>
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800da82:	f000 f8f6 	bl	800dc72 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800da86:	4a03      	ldr	r2, [pc, #12]	; (800da94 <UTIL_SEQ_Run+0x198>)
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	6013      	str	r3, [r2, #0]

  return;
 800da8c:	bf00      	nop
}
 800da8e:	3730      	adds	r7, #48	; 0x30
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	20000170 	.word	0x20000170
 800da98:	2000053c 	.word	0x2000053c
 800da9c:	2000016c 	.word	0x2000016c
 800daa0:	200004b8 	.word	0x200004b8
 800daa4:	200004ac 	.word	0x200004ac
 800daa8:	200004bc 	.word	0x200004bc
 800daac:	200004b0 	.word	0x200004b0
 800dab0:	200004b4 	.word	0x200004b4

0800dab4 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac0:	f3ef 8310 	mrs	r3, PRIMASK
 800dac4:	617b      	str	r3, [r7, #20]
  return(result);
 800dac6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800daca:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 f8d7 	bl	800dc80 <bit_position>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4a06      	ldr	r2, [pc, #24]	; (800daf0 <UTIL_SEQ_RegTask+0x3c>)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dae6:	bf00      	nop
}
 800dae8:	3720      	adds	r7, #32
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	200004bc 	.word	0x200004bc

0800daf4 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b087      	sub	sp, #28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dafe:	f3ef 8310 	mrs	r3, PRIMASK
 800db02:	60fb      	str	r3, [r7, #12]
  return(result);
 800db04:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db08:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800db0a:	4b0d      	ldr	r3, [pc, #52]	; (800db40 <UTIL_SEQ_SetTask+0x4c>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4313      	orrs	r3, r2
 800db12:	4a0b      	ldr	r2, [pc, #44]	; (800db40 <UTIL_SEQ_SetTask+0x4c>)
 800db14:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800db16:	4a0b      	ldr	r2, [pc, #44]	; (800db44 <UTIL_SEQ_SetTask+0x50>)
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	431a      	orrs	r2, r3
 800db22:	4908      	ldr	r1, [pc, #32]	; (800db44 <UTIL_SEQ_SetTask+0x50>)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db34:	bf00      	nop
}
 800db36:	371c      	adds	r7, #28
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	200004ac 	.word	0x200004ac
 800db44:	2000053c 	.word	0x2000053c

0800db48 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800db48:	b480      	push	{r7}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db50:	f3ef 8310 	mrs	r3, PRIMASK
 800db54:	60fb      	str	r3, [r7, #12]
  return(result);
 800db56:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db5a:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	43da      	mvns	r2, r3
 800db60:	4b07      	ldr	r3, [pc, #28]	; (800db80 <UTIL_SEQ_PauseTask+0x38>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4013      	ands	r3, r2
 800db66:	4a06      	ldr	r2, [pc, #24]	; (800db80 <UTIL_SEQ_PauseTask+0x38>)
 800db68:	6013      	str	r3, [r2, #0]
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db74:	bf00      	nop
}
 800db76:	371c      	adds	r7, #28
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr
 800db80:	2000016c 	.word	0x2000016c

0800db84 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db8c:	f3ef 8310 	mrs	r3, PRIMASK
 800db90:	60fb      	str	r3, [r7, #12]
  return(result);
 800db92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db96:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800db98:	4b08      	ldr	r3, [pc, #32]	; (800dbbc <UTIL_SEQ_ResumeTask+0x38>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4313      	orrs	r3, r2
 800dba0:	4a06      	ldr	r2, [pc, #24]	; (800dbbc <UTIL_SEQ_ResumeTask+0x38>)
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dbae:	bf00      	nop
}
 800dbb0:	371c      	adds	r7, #28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	2000016c 	.word	0x2000016c

0800dbc0 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbc8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dbd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbd2:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800dbd4:	4b08      	ldr	r3, [pc, #32]	; (800dbf8 <UTIL_SEQ_SetEvt+0x38>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	4a06      	ldr	r2, [pc, #24]	; (800dbf8 <UTIL_SEQ_SetEvt+0x38>)
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dbea:	bf00      	nop
}
 800dbec:	371c      	adds	r7, #28
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	200004b0 	.word	0x200004b0

0800dbfc <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dc04:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <UTIL_SEQ_WaitEvt+0x5c>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0e:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800dc10:	4b12      	ldr	r3, [pc, #72]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800dc16:	4a11      	ldr	r2, [pc, #68]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800dc1c:	e005      	b.n	800dc2a <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800dc1e:	4b0f      	ldr	r3, [pc, #60]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4619      	mov	r1, r3
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7f2 fcb7 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800dc2a:	4b0d      	ldr	r3, [pc, #52]	; (800dc60 <UTIL_SEQ_WaitEvt+0x64>)
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4013      	ands	r3, r2
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0f2      	beq.n	800dc1e <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800dc38:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	43da      	mvns	r2, r3
 800dc3e:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <UTIL_SEQ_WaitEvt+0x64>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4013      	ands	r3, r2
 800dc44:	4a06      	ldr	r2, [pc, #24]	; (800dc60 <UTIL_SEQ_WaitEvt+0x64>)
 800dc46:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800dc48:	4a04      	ldr	r2, [pc, #16]	; (800dc5c <UTIL_SEQ_WaitEvt+0x60>)
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6013      	str	r3, [r2, #0]

  return;
 800dc4e:	bf00      	nop
}
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	200004b8 	.word	0x200004b8
 800dc5c:	200004b4 	.word	0x200004b4
 800dc60:	200004b0 	.word	0x200004b0

0800dc64 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dc68:	bf00      	nop
}
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dc72:	b480      	push	{r7}
 800dc74:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dc76:	bf00      	nop
}
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	0c1b      	lsrs	r3, r3, #16
 800dc90:	041b      	lsls	r3, r3, #16
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d104      	bne.n	800dca0 <bit_position+0x20>
 800dc96:	2310      	movs	r3, #16
 800dc98:	60fb      	str	r3, [r7, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d105      	bne.n	800dcb6 <bit_position+0x36>
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3308      	adds	r3, #8
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d105      	bne.n	800dccc <bit_position+0x4c>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	011b      	lsls	r3, r3, #4
 800dcca:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	0f1b      	lsrs	r3, r3, #28
 800dcd0:	4a07      	ldr	r2, [pc, #28]	; (800dcf0 <bit_position+0x70>)
 800dcd2:	5cd3      	ldrb	r3, [r2, r3]
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	4413      	add	r3, r2
 800dcda:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f1c3 031f 	rsb	r3, r3, #31
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	0800dec0 	.word	0x0800dec0

0800dcf4 <__libc_init_array>:
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	4e0d      	ldr	r6, [pc, #52]	; (800dd2c <__libc_init_array+0x38>)
 800dcf8:	4c0d      	ldr	r4, [pc, #52]	; (800dd30 <__libc_init_array+0x3c>)
 800dcfa:	1ba4      	subs	r4, r4, r6
 800dcfc:	10a4      	asrs	r4, r4, #2
 800dcfe:	2500      	movs	r5, #0
 800dd00:	42a5      	cmp	r5, r4
 800dd02:	d109      	bne.n	800dd18 <__libc_init_array+0x24>
 800dd04:	4e0b      	ldr	r6, [pc, #44]	; (800dd34 <__libc_init_array+0x40>)
 800dd06:	4c0c      	ldr	r4, [pc, #48]	; (800dd38 <__libc_init_array+0x44>)
 800dd08:	f000 f82c 	bl	800dd64 <_init>
 800dd0c:	1ba4      	subs	r4, r4, r6
 800dd0e:	10a4      	asrs	r4, r4, #2
 800dd10:	2500      	movs	r5, #0
 800dd12:	42a5      	cmp	r5, r4
 800dd14:	d105      	bne.n	800dd22 <__libc_init_array+0x2e>
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd1c:	4798      	blx	r3
 800dd1e:	3501      	adds	r5, #1
 800dd20:	e7ee      	b.n	800dd00 <__libc_init_array+0xc>
 800dd22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd26:	4798      	blx	r3
 800dd28:	3501      	adds	r5, #1
 800dd2a:	e7f2      	b.n	800dd12 <__libc_init_array+0x1e>
 800dd2c:	0800ded8 	.word	0x0800ded8
 800dd30:	0800ded8 	.word	0x0800ded8
 800dd34:	0800ded8 	.word	0x0800ded8
 800dd38:	0800dedc 	.word	0x0800dedc

0800dd3c <memcpy>:
 800dd3c:	b510      	push	{r4, lr}
 800dd3e:	1e43      	subs	r3, r0, #1
 800dd40:	440a      	add	r2, r1
 800dd42:	4291      	cmp	r1, r2
 800dd44:	d100      	bne.n	800dd48 <memcpy+0xc>
 800dd46:	bd10      	pop	{r4, pc}
 800dd48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd50:	e7f7      	b.n	800dd42 <memcpy+0x6>

0800dd52 <memset>:
 800dd52:	4402      	add	r2, r0
 800dd54:	4603      	mov	r3, r0
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d100      	bne.n	800dd5c <memset+0xa>
 800dd5a:	4770      	bx	lr
 800dd5c:	f803 1b01 	strb.w	r1, [r3], #1
 800dd60:	e7f9      	b.n	800dd56 <memset+0x4>
	...

0800dd64 <_init>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr

0800dd70 <_fini>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr
