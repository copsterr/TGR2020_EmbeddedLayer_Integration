
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d774  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800d8b4  0800d8b4  0001d8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da08  0800da08  0001da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da14  0800da14  0001da14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f8  20000004  0800da18  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000fc  0800db10  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  20000198  0800dba9  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200001e0  0800dbee  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a2  200001f4  0800dbff  000201f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003b4  20000298  0800dca1  00020298  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000064c  0800dca1  0002064c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020296  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   000535b9  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007663  00000000  00000000  0007387f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003d78  00000000  00000000  0007aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003a30  00000000  00000000  0007ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e869  00000000  00000000  00082690  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002bfbb  00000000  00000000  000b0ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001074a4  00000000  00000000  000dceb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e4358  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010588  00000000  00000000  001e43d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000298 	.word	0x20000298
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d89c 	.word	0x0800d89c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000029c 	.word	0x2000029c
 800017c:	0800d89c 	.word	0x0800d89c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000588 	.word	0x20000588

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f00c ff68 	bl	800d3b4 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f00b fe8b 	bl	800c208 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f00d f878 	bl	800d5ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f00b fd47 	bl	800bf9c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f00b ff7d 	bl	800c424 <TL_MM_Init>

  TL_Enable();
 800052a:	f00b fe67 	bl	800c1fc <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	0800bfd5 	.word	0x0800bfd5
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f00b ffc7 	bl	800c504 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f00c f8fb 	bl	800c770 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f00c ff2b 	bl	800d3d8 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f00c ff45 	bl	800d434 <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f00d f835 	bl	800d62c <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f00d f890 	bl	800d6f8 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f00d f8a3 	bl	800d734 <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200000fc 	.word	0x200000fc

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000018c 	.word	0x2000018c
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000018c 	.word	0x2000018c
 8000918:	2000018d 	.word	0x2000018d
 800091c:	200000fc 	.word	0x200000fc
 8000920:	20000190 	.word	0x20000190

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	2000018c 	.word	0x2000018c
 8000a20:	2000018d 	.word	0x2000018d
 8000a24:	200000fc 	.word	0x200000fc
 8000a28:	20000190 	.word	0x20000190

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000190 	.word	0x20000190
 8000aa0:	200002ba 	.word	0x200002ba
 8000aa4:	200002b9 	.word	0x200002b9
 8000aa8:	200002b8 	.word	0x200002b8

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f004 fdc3 	bl	8005652 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f004 fdab 	bl	800566e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000190 	.word	0x20000190
 8000b58:	200002b8 	.word	0x200002b8
 8000b5c:	200002b4 	.word	0x200002b4
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	200002b4 	.word	0x200002b4
 8000c94:	2000018c 	.word	0x2000018c
 8000c98:	200000fc 	.word	0x200000fc
 8000c9c:	20000194 	.word	0x20000194
 8000ca0:	200002bc 	.word	0x200002bc

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002b4 	.word	0x200002b4
 8000e34:	2000018c 	.word	0x2000018c
 8000e38:	200000fc 	.word	0x200000fc
 8000e3c:	20000194 	.word	0x20000194
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f004 fb73 	bl	800566e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f004 fb4f 	bl	8005652 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fb03 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f004 fb1a 	bl	8005602 <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002b4 	.word	0x200002b4
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	200002b8 	.word	0x200002b8
 8000fe4:	200002b9 	.word	0x200002b9
 8000fe8:	200002ba 	.word	0x200002ba
 8000fec:	200002bc 	.word	0x200002bc
 8000ff0:	20000194 	.word	0x20000194
 8000ff4:	20000190 	.word	0x20000190
 8000ff8:	200000fc 	.word	0x200000fc
 8000ffc:	2000018c 	.word	0x2000018c
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	200000fc 	.word	0x200000fc

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f004 fa89 	bl	800561e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f004 fa5b 	bl	800566e <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 fa14 	bl	8005602 <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002b4 	.word	0x200002b4
 80011f0:	200000fc 	.word	0x200000fc
 80011f4:	2000018c 	.word	0x2000018c
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	2000018d 	.word	0x2000018d

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f004 f9ee 	bl	800561e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f004 f98a 	bl	8005602 <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000fc 	.word	0x200000fc
 8001304:	200002b4 	.word	0x200002b4
 8001308:	2000018c 	.word	0x2000018c
 800130c:	2000018d 	.word	0x2000018d

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	200004b8 	.word	0x200004b8

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f003 ff45 	bl	8005254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f817 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 80013ce:	f000 f8c5 	bl	800155c <MX_TIM16_Init>
  MX_TIM17_Init();
 80013d2:	f000 f8eb 	bl	80015ac <MX_TIM17_Init>
  MX_GPIO_Init();
 80013d6:	f000 f95b 	bl	8001690 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013da:	f000 f90d 	bl	80015f8 <MX_USART1_UART_Init>
  MX_RF_Init();
 80013de:	f000 f88d 	bl	80014fc <MX_RF_Init>
  MX_RTC_Init();
 80013e2:	f000 f893 	bl	800150c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e6:	f7ff f867 	bl	80004b8 <APPE_Init>

  MX_MEMS_Init();
 80013ea:	f009 f921 	bl	800a630 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013ee:	f04f 30ff 	mov.w	r0, #4294967295
 80013f2:	f00c f81f 	bl	800d434 <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80013f6:	f009 f923 	bl	800a640 <MX_MEMS_Process>
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013fa:	e7f8      	b.n	80013ee <main+0x2c>

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ae      	sub	sp, #184	; 0xb8
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001406:	2248      	movs	r2, #72	; 0x48
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f00c fa3d 	bl	800d88a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2250      	movs	r2, #80	; 0x50
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f00c fa2d 	bl	800d88a <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ff97 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <SystemClock_Config+0xfc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <SystemClock_Config+0xfc>)
 8001440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <SystemClock_Config+0xfc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001452:	2307      	movs	r3, #7
 8001454:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001464:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001476:	4618      	mov	r0, r3
 8001478:	f005 fd8a 	bl	8006f90 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001482:	f000 f969 	bl	8001758 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001486:	236f      	movs	r3, #111	; 0x6f
 8001488:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800148a:	2302      	movs	r3, #2
 800148c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 f8cf 	bl	800764c <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80014b4:	f000 f950 	bl	8001758 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80014b8:	f643 0305 	movw	r3, #14341	; 0x3805
 80014bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80014ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80014d4:	2302      	movs	r3, #2
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80014d8:	2300      	movs	r3, #0
 80014da:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f006 fcef 	bl	8007ec2 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80014ea:	f000 f935 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	; 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58000400 	.word	0x58000400

080014fc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_RTC_Init+0x48>)
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <MX_RTC_Init+0x4c>)
 8001514:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_RTC_Init+0x48>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_RTC_Init+0x48>)
 800151e:	220f      	movs	r2, #15
 8001520:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_RTC_Init+0x48>)
 8001524:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001528:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800152a:	480a      	ldr	r0, [pc, #40]	; (8001554 <MX_RTC_Init+0x48>)
 800152c:	f006 ff4f 	bl	80083ce <HAL_RTC_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001536:	f000 f90f 	bl	8001758 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_RTC_Init+0x48>)
 8001540:	f007 f834 	bl	80085ac <HAL_RTCEx_SetWakeUpTimer_IT>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800154a:	f000 f905 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000588 	.word	0x20000588
 8001558:	40002800 	.word	0x40002800

0800155c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <MX_TIM16_Init+0x4c>)
 8001564:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16001;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001568:	f643 6281 	movw	r2, #16001	; 0x3e81
 800156c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2001;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001576:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800157a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_TIM16_Init+0x48>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_TIM16_Init+0x48>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_TIM16_Init+0x48>)
 8001590:	f007 f8f8 	bl	8008784 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800159a:	f000 f8dd 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200005ac 	.word	0x200005ac
 80015a8:	40014400 	.word	0x40014400

080015ac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <MX_TIM17_Init+0x48>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 161;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015b8:	22a1      	movs	r2, #161	; 0xa1
 80015ba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2001;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015c4:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80015c8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_TIM17_Init+0x44>)
 80015de:	f007 f8d1 	bl	8008784 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80015e8:	f000 f8b6 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200004bc 	.word	0x200004bc
 80015f4:	40014800 	.word	0x40014800

080015f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_USART1_UART_Init+0x90>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <MX_USART1_UART_Init+0x94>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_USART1_UART_Init+0x90>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_USART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_USART1_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001642:	f007 fabd 	bl	8008bc0 <HAL_UART_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800164c:	f000 f884 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001654:	f008 ff08 	bl	800a468 <HAL_UARTEx_SetTxFifoThreshold>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800165e:	f000 f87b 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001666:	f008 ff3d 	bl	800a4e4 <HAL_UARTEx_SetRxFifoThreshold>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001670:	f000 f872 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_USART1_UART_Init+0x90>)
 8001676:	f008 febe 	bl	800a3f6 <HAL_UARTEx_DisableFifoMode>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001680:	f000 f86a 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200004fc 	.word	0x200004fc
 800168c:	40013800 	.word	0x40013800

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	2004      	movs	r0, #4
 80016a6:	f7ff fe73 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fe70 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fe6d 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2008      	movs	r0, #8
 80016b8:	f7ff fe6a 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2123      	movs	r1, #35	; 0x23
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <MX_GPIO_Init+0xb8>)
 80016c2:	f004 fa8f 	bl	8005be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 80016c6:	2310      	movs	r3, #16
 80016c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_GPIO_Init+0xbc>)
 80016cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	481e      	ldr	r0, [pc, #120]	; (8001750 <MX_GPIO_Init+0xc0>)
 80016d8:	f004 f836 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80016dc:	2323      	movs	r3, #35	; 0x23
 80016de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <MX_GPIO_Init+0xb8>)
 80016f2:	f004 f829 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001708:	230a      	movs	r3, #10
 800170a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f004 f818 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001718:	2303      	movs	r3, #3
 800171a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <MX_GPIO_Init+0xc4>)
 800172a:	f004 f80d 	bl	8005748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200a      	movs	r0, #10
 8001734:	f003 ff4b 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001738:	200a      	movs	r0, #10
 800173a:	f003 ff62 	bl	8005602 <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	48000400 	.word	0x48000400
 800174c:	10210000 	.word	0x10210000
 8001750:	48000800 	.word	0x48000800
 8001754:	48000c00 	.word	0x48000c00

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_AHB2_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001822:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001826:	f7ff ffc8 	bl	80017ba <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_RTC_MspInit+0x30>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d109      	bne.n	8001856 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001842:	f7ff ff90 	bl	8001766 <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2003      	movs	r0, #3
 800184c:	f003 febf 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001850:	2003      	movs	r0, #3
 8001852:	f003 fed6 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40002800 	.word	0x40002800

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_TIM_Base_MspInit+0x58>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10c      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001876:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800187a:	f7ff ffb7 	bl	80017ec <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2019      	movs	r0, #25
 8001884:	f003 fea3 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001888:	2019      	movs	r0, #25
 800188a:	f003 feba 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800188e:	e010      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10b      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800189a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800189e:	f7ff ffa5 	bl	80017ec <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201a      	movs	r0, #26
 80018a8:	f003 fe91 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018ac:	201a      	movs	r0, #26
 80018ae:	f003 fea8 	bl	8005602 <HAL_NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40014400 	.word	0x40014400
 80018c0:	40014800 	.word	0x40014800

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a12      	ldr	r2, [pc, #72]	; (800192c <HAL_UART_MspInit+0x68>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d11e      	bne.n	8001924 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018ea:	f7ff ff7f 	bl	80017ec <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff ff4a 	bl	8001788 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018f4:	23c0      	movs	r3, #192	; 0xc0
 80018f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001904:	2307      	movs	r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <HAL_UART_MspInit+0x6c>)
 8001910:	f003 ff1a 	bl	8005748 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2024      	movs	r0, #36	; 0x24
 800191a:	f003 fe58 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800191e:	2024      	movs	r0, #36	; 0x24
 8001920:	f003 fe6f 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40013800 	.word	0x40013800
 8001930:	48000400 	.word	0x48000400

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f003 fcbe 	bl	8005308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <RTC_WKUP_IRQHandler+0x14>)
 8001996:	f006 fec5 	bl	8008724 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 800199a:	f7ff f983 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000588 	.word	0x20000588

080019a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019ac:	2010      	movs	r0, #16
 80019ae:	f004 f94b 	bl	8005c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019be:	f006 ff0c 	bl	80087da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200005ac 	.word	0x200005ac

080019cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80019d2:	f006 ff02 	bl	80087da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200004bc 	.word	0x200004bc

080019e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <USART1_IRQHandler+0x10>)
 80019e6:	f007 f93b 	bl	8008c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200004fc 	.word	0x200004fc

080019f4 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80019f8:	f00b fbcc 	bl	800d194 <HW_IPCC_Tx_Handler>
  return;
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001a04:	f00b fb8e 	bl	800d124 <HW_IPCC_Rx_Handler>
  return;
 8001a08:	bf00      	nop
}
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <LL_AHB2_GRP1_EnableClock>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a30:	68fb      	ldr	r3, [r7, #12]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_APB1_GRP1_EnableClock>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_APB1_GRP1_DisableClock>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	4013      	ands	r3, r2
 8001a88:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <BSP_I2C1_Init+0x70>)
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <BSP_I2C1_Init+0x74>)
 8001aa6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <BSP_I2C1_Init+0x78>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	4918      	ldr	r1, [pc, #96]	; (8001b10 <BSP_I2C1_Init+0x78>)
 8001ab0:	600a      	str	r2, [r1, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d122      	bne.n	8001afc <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <BSP_I2C1_Init+0x70>)
 8001ab8:	f004 fbea 	bl	8006290 <HAL_I2C_GetState>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11c      	bne.n	8001afc <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001ac2:	4811      	ldr	r0, [pc, #68]	; (8001b08 <BSP_I2C1_Init+0x70>)
 8001ac4:	f000 f8fe 	bl	8001cc4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <BSP_I2C1_Init+0x70>)
 8001ad0:	f000 f8b4 	bl	8001c3c <MX_I2C1_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8001ada:	f06f 0307 	mvn.w	r3, #7
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	e00c      	b.n	8001afc <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4808      	ldr	r0, [pc, #32]	; (8001b08 <BSP_I2C1_Init+0x70>)
 8001ae6:	f004 fe09 	bl	80066fc <HAL_I2CEx_ConfigAnalogFilter>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8001af0:	f06f 0307 	mvn.w	r3, #7
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e001      	b.n	8001afc <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200005ec 	.word	0x200005ec
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	200002cc 	.word	0x200002cc

08001b14 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <BSP_I2C1_DeInit+0x48>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d014      	beq.n	8001b50 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <BSP_I2C1_DeInit+0x48>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <BSP_I2C1_DeInit+0x48>)
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <BSP_I2C1_DeInit+0x48>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10b      	bne.n	8001b50 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <BSP_I2C1_DeInit+0x4c>)
 8001b3a:	f000 f8e5 	bl	8001d08 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <BSP_I2C1_DeInit+0x4c>)
 8001b40:	f004 f934 	bl	8005dac <HAL_I2C_DeInit>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8001b4a:	f06f 0307 	mvn.w	r3, #7
 8001b4e:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002cc 	.word	0x200002cc
 8001b60:	200005ec 	.word	0x200005ec

08001b64 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	81fb      	strh	r3, [r7, #14]
 8001b72:	460b      	mov	r3, r1
 8001b74:	81bb      	strh	r3, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b7e:	89ba      	ldrh	r2, [r7, #12]
 8001b80:	89f9      	ldrh	r1, [r7, #14]
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <BSP_I2C1_WriteReg+0x60>)
 8001b94:	f004 f94e 	bl	8005e34 <HAL_I2C_Mem_Write>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b9e:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <BSP_I2C1_WriteReg+0x60>)
 8001ba0:	f004 fb84 	bl	80062ac <HAL_I2C_GetError>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d103      	bne.n	8001bb2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001baa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e002      	b.n	8001bb8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bb2:	f06f 0303 	mvn.w	r3, #3
 8001bb6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bb8:	697b      	ldr	r3, [r7, #20]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200005ec 	.word	0x200005ec

08001bc8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	60ba      	str	r2, [r7, #8]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	81bb      	strh	r3, [r7, #12]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001be2:	89ba      	ldrh	r2, [r7, #12]
 8001be4:	89f9      	ldrh	r1, [r7, #14]
 8001be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <BSP_I2C1_ReadReg+0x60>)
 8001bf8:	f004 fa30 	bl	800605c <HAL_I2C_Mem_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00c      	beq.n	8001c1c <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <BSP_I2C1_ReadReg+0x60>)
 8001c04:	f004 fb52 	bl	80062ac <HAL_I2C_GetError>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d103      	bne.n	8001c16 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e002      	b.n	8001c1c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c16:	f06f 0303 	mvn.w	r3, #3
 8001c1a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001c1c:	697b      	ldr	r3, [r7, #20]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200005ec 	.word	0x200005ec

08001c2c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c30:	f003 fb7c 	bl	800532c <HAL_GetTick>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <MX_I2C1_Init+0x80>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <MX_I2C1_Init+0x84>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f004 f805 	bl	8005c8e <HAL_I2C_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f004 fd33 	bl	80066fc <HAL_I2CEx_ConfigAnalogFilter>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f004 fd75 	bl	8006792 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	00707cbb 	.word	0x00707cbb

08001cc4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff fe9d 	bl	8001a0c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd8:	2312      	movs	r3, #18
 8001cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <I2C1_MspInit+0x40>)
 8001cf0:	f003 fd2a 	bl	8005748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001cf8:	f7ff fea1 	bl	8001a3e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	48000400 	.word	0x48000400

08001d08 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d10:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d14:	f7ff feac 	bl	8001a70 <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001d18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <I2C1_MspDeInit+0x24>)
 8001d1e:	f003 fe83 	bl	8005a28 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	48000400 	.word	0x48000400

08001d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <SystemInit+0xa0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <SystemInit+0xa0>)
 8001d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <SystemInit+0xa0>)
 8001d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d62:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <SystemInit+0xa4>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	f023 0305 	bic.w	r3, r3, #5
 8001d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <SystemInit+0xa8>)
 8001da2:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <SystemInit+0xa8>)
 8001daa:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	faf6fefb 	.word	0xfaf6fefb
 8001dd8:	22041000 	.word	0x22041000

08001ddc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <SystemCoreClockUpdate+0x130>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d867      	bhi.n	8001ed4 <SystemCoreClockUpdate+0xf8>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <SystemCoreClockUpdate+0x30>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e41 	.word	0x08001e41
 8001e10:	08001ed5 	.word	0x08001ed5
 8001e14:	08001ed5 	.word	0x08001ed5
 8001e18:	08001ed5 	.word	0x08001ed5
 8001e1c:	08001e49 	.word	0x08001e49
 8001e20:	08001ed5 	.word	0x08001ed5
 8001e24:	08001ed5 	.word	0x08001ed5
 8001e28:	08001ed5 	.word	0x08001ed5
 8001e2c:	08001e51 	.word	0x08001e51
 8001e30:	08001ed5 	.word	0x08001ed5
 8001e34:	08001ed5 	.word	0x08001ed5
 8001e38:	08001ed5 	.word	0x08001ed5
 8001e3c:	08001e59 	.word	0x08001e59
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e40:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6013      	str	r3, [r2, #0]
      break;
 8001e46:	e049      	b.n	8001edc <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001e4a:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <SystemCoreClockUpdate+0x138>)
 8001e4c:	601a      	str	r2, [r3, #0]
      break;
 8001e4e:	e045      	b.n	8001edc <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <SystemCoreClockUpdate+0x13c>)
 8001e54:	601a      	str	r2, [r3, #0]
      break;
 8001e56:	e041      	b.n	8001edc <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d105      	bne.n	8001e86 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001e7a:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <SystemCoreClockUpdate+0x138>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e00d      	b.n	8001ea2 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d105      	bne.n	8001e98 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <SystemCoreClockUpdate+0x13c>)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e004      	b.n	8001ea2 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0f5b      	lsrs	r3, r3, #29
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001ed0:	6013      	str	r3, [r2, #0]
      break;
 8001ed2:	e003      	b.n	8001edc <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6013      	str	r3, [r2, #0]
      break;
 8001eda:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <SystemCoreClockUpdate+0x140>)
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemCoreClockUpdate+0x134>)
 8001efc:	6013      	str	r3, [r2, #0]

}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0800d988 	.word	0x0800d988
 8001f10:	20000004 	.word	0x20000004
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	01e84800 	.word	0x01e84800
 8001f1c:	0800d928 	.word	0x0800d928

08001f20 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f20:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f22:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f24:	3304      	adds	r3, #4

08001f26 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f26:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f28:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f2a:	d3f9      	bcc.n	8001f20 <CopyDataInit>
  bx lr
 8001f2c:	4770      	bx	lr

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f2e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f30:	3004      	adds	r0, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f32:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>
  bx lr
 8001f36:	4770      	bx	lr

08001f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001f3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f3c:	480c      	ldr	r0, [pc, #48]	; (8001f70 <LoopForever+0x8>)
 8001f3e:	490d      	ldr	r1, [pc, #52]	; (8001f74 <LoopForever+0xc>)
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <LoopForever+0x10>)
 8001f42:	2300      	movs	r3, #0
 8001f44:	f7ff ffef 	bl	8001f26 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <LoopForever+0x14>)
 8001f4a:	490d      	ldr	r1, [pc, #52]	; (8001f80 <LoopForever+0x18>)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f7ff fff0 	bl	8001f32 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <LoopForever+0x1c>)
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <LoopForever+0x20>)
 8001f56:	2300      	movs	r3, #0
 8001f58:	f7ff ffeb 	bl	8001f32 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f5c:	f7ff fee8 	bl	8001d30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f60:	f00b fc64 	bl	800d82c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f64:	f7ff fa2d 	bl	80013c2 <main>

08001f68 <LoopForever>:

LoopForever:
  b LoopForever
 8001f68:	e7fe      	b.n	8001f68 <LoopForever>
 8001f6a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f6c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f70:	20000004 	.word	0x20000004
 8001f74:	200000fc 	.word	0x200000fc
 8001f78:	0800da18 	.word	0x0800da18
  INIT_BSS _sbss, _ebss
 8001f7c:	20000298 	.word	0x20000298
 8001f80:	2000064c 	.word	0x2000064c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f84:	200301c4 	.word	0x200301c4
 8001f88:	20030a44 	.word	0x20030a44

08001f8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC1_IRQHandler>
	...

08001f90 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	e04d      	b.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7b1a      	ldrb	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8001fe8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8001fee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e020      	b.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4798      	blx	r3
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e016      	b.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d112      	bne.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800202c:	2301      	movs	r3, #1
 800202e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	461a      	mov	r2, r3
 8002034:	2123      	movs	r1, #35	; 0x23
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fb52 	bl	80026e0 <LSM303AGR_ACC_Write_Reg>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e000      	b.n	800204a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	08002ef1 	.word	0x08002ef1
 8002058:	08002f53 	.word	0x08002f53

0800205c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	331c      	adds	r3, #28
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f001 f948 	bl	8003300 <lsm303agr_xl_block_data_update_set>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e02c      	b.n	80020d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	331c      	adds	r3, #28
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fa77 	bl	8003576 <lsm303agr_xl_fifo_mode_set>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e020      	b.n	80020d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2205      	movs	r2, #5
 8002098:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	331c      	adds	r3, #28
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 f84c 	bl	8003140 <lsm303agr_xl_data_rate_set>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e010      	b.n	80020d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	331c      	adds	r3, #28
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 f8c2 	bl	8003244 <lsm303agr_xl_full_scale_set>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e004      	b.n	80020d6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f87c 	bl	80021e4 <LSM303AGR_ACC_Disable>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e008      	b.n	800210a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	331c      	adds	r3, #28
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f001 f9df 	bl	80034e6 <lsm303agr_xl_device_id_get>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e000      	b.n	8002136 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002180:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	43c80000 	.word	0x43c80000

0800219c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e014      	b.n	80021dc <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f103 021c 	add.w	r2, r3, #28
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f000 ffbd 	bl	8003140 <lsm303agr_xl_data_rate_set>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	e004      	b.n	80021dc <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e01f      	b.n	800223a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f103 021c 	add.w	r2, r3, #28
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	332a      	adds	r3, #42	; 0x2a
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 ffc0 	bl	800318c <lsm303agr_xl_data_rate_get>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e010      	b.n	800223a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	331c      	adds	r3, #28
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f000 ff8e 	bl	8003140 <lsm303agr_xl_data_rate_set>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e004      	b.n	800223a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	331c      	adds	r3, #28
 8002254:	f107 020b 	add.w	r2, r7, #11
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 ff3c 	bl	80030d8 <lsm303agr_xl_operating_mode_get>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e02e      	b.n	80022ca <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d00d      	beq.n	800228e <LSM303AGR_ACC_GetSensitivity+0x4c>
 8002272:	2b02      	cmp	r3, #2
 8002274:	d015      	beq.n	80022a2 <LSM303AGR_ACC_GetSensitivity+0x60>
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11d      	bne.n	80022b6 <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fca9 	bl	8002bd4 <LSM303AGR_ACC_GetSensitivityHR>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01a      	beq.n	80022be <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e01d      	b.n	80022ca <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fce5 	bl	8002c60 <LSM303AGR_ACC_GetSensitivityNM>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d012      	beq.n	80022c2 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	e013      	b.n	80022ca <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fd21 	bl	8002cec <LSM303AGR_ACC_GetSensitivityLP>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	e009      	b.n	80022ca <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
      break;
 80022bc:	e004      	b.n	80022c8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80022be:	bf00      	nop
 80022c0:	e002      	b.n	80022c8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80022c2:	bf00      	nop
 80022c4:	e000      	b.n	80022c8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80022c6:	bf00      	nop
  }

  return ret;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	331c      	adds	r3, #28
 80022e6:	f107 020b 	add.w	r2, r7, #11
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fef3 	bl	80030d8 <lsm303agr_xl_operating_mode_get>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	e09f      	b.n	800243e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	331c      	adds	r3, #28
 8002302:	f107 020a 	add.w	r2, r7, #10
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 ff3f 	bl	800318c <lsm303agr_xl_data_rate_get>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	e091      	b.n	800243e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d148      	bne.n	80023b2 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8002320:	7abb      	ldrb	r3, [r7, #10]
 8002322:	2b09      	cmp	r3, #9
 8002324:	d840      	bhi.n	80023a8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	08002355 	.word	0x08002355
 8002330:	0800235f 	.word	0x0800235f
 8002334:	08002369 	.word	0x08002369
 8002338:	08002371 	.word	0x08002371
 800233c:	08002379 	.word	0x08002379
 8002340:	08002381 	.word	0x08002381
 8002344:	08002389 	.word	0x08002389
 8002348:	08002391 	.word	0x08002391
 800234c:	08002399 	.word	0x08002399
 8002350:	080023a1 	.word	0x080023a1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
        break;
 800235c:	e06e      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002364:	601a      	str	r2, [r3, #0]
        break;
 8002366:	e069      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4a37      	ldr	r2, [pc, #220]	; (8002448 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800236c:	601a      	str	r2, [r3, #0]
        break;
 800236e:	e065      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002374:	601a      	str	r2, [r3, #0]
        break;
 8002376:	e061      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4a35      	ldr	r2, [pc, #212]	; (8002450 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800237c:	601a      	str	r2, [r3, #0]
        break;
 800237e:	e05d      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002384:	601a      	str	r2, [r3, #0]
        break;
 8002386:	e059      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	; (8002458 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 800238c:	601a      	str	r2, [r3, #0]
        break;
 800238e:	e055      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4a32      	ldr	r2, [pc, #200]	; (800245c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002394:	601a      	str	r2, [r3, #0]
        break;
 8002396:	e051      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4a31      	ldr	r2, [pc, #196]	; (8002460 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 800239c:	601a      	str	r2, [r3, #0]
        break;
 800239e:	e04d      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80023a4:	601a      	str	r2, [r3, #0]
        break;
 80023a6:	e049      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	60fb      	str	r3, [r7, #12]
        break;
 80023ae:	bf00      	nop
 80023b0:	e044      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80023b2:	7abb      	ldrb	r3, [r7, #10]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d83d      	bhi.n	8002434 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 80023b8:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023e9 	.word	0x080023e9
 80023c4:	080023f3 	.word	0x080023f3
 80023c8:	080023fd 	.word	0x080023fd
 80023cc:	08002405 	.word	0x08002405
 80023d0:	0800240d 	.word	0x0800240d
 80023d4:	08002415 	.word	0x08002415
 80023d8:	0800241d 	.word	0x0800241d
 80023dc:	08002425 	.word	0x08002425
 80023e0:	08002435 	.word	0x08002435
 80023e4:	0800242d 	.word	0x0800242d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
        break;
 80023f0:	e024      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
        break;
 80023fa:	e01f      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002400:	601a      	str	r2, [r3, #0]
        break;
 8002402:	e01b      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002408:	601a      	str	r2, [r3, #0]
        break;
 800240a:	e017      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002410:	601a      	str	r2, [r3, #0]
        break;
 8002412:	e013      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002418:	601a      	str	r2, [r3, #0]
        break;
 800241a:	e00f      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002420:	601a      	str	r2, [r3, #0]
        break;
 8002422:	e00b      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002428:	601a      	str	r2, [r3, #0]
        break;
 800242a:	e007      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8002430:	601a      	str	r2, [r3, #0]
        break;
 8002432:	e003      	b.n	800243c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
 8002438:	60fb      	str	r3, [r7, #12]
        break;
 800243a:	bf00      	nop
    }
  }

  return ret;
 800243c:	68fb      	ldr	r3, [r7, #12]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	41200000 	.word	0x41200000
 800244c:	41c80000 	.word	0x41c80000
 8002450:	42480000 	.word	0x42480000
 8002454:	42c80000 	.word	0x42c80000
 8002458:	43480000 	.word	0x43480000
 800245c:	43c80000 	.word	0x43c80000
 8002460:	44ca8000 	.word	0x44ca8000
 8002464:	45a80000 	.word	0x45a80000
 8002468:	44a80000 	.word	0x44a80000

0800246c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800247e:	2b01      	cmp	r3, #1
 8002480:	d106      	bne.n	8002490 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002482:	ed97 0a00 	vldr	s0, [r7]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fc76 	bl	8002d78 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 800248c:	4603      	mov	r3, r0
 800248e:	e005      	b.n	800249c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002490:	ed97 0a00 	vldr	s0, [r7]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fcd1 	bl	8002e3c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800249a:	4603      	mov	r3, r0
  }
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	331c      	adds	r3, #28
 80024b6:	f107 020b 	add.w	r2, r7, #11
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fee7 	bl	8003290 <lsm303agr_xl_full_scale_get>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	e023      	b.n	8002516 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d81b      	bhi.n	800250c <LSM303AGR_ACC_GetFullScale+0x68>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <LSM303AGR_ACC_GetFullScale+0x38>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024f5 	.word	0x080024f5
 80024e4:	080024fd 	.word	0x080024fd
 80024e8:	08002505 	.word	0x08002505
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
      break;
 80024f2:	e00f      	b.n	8002514 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2204      	movs	r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
      break;
 80024fa:	e00b      	b.n	8002514 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2208      	movs	r2, #8
 8002500:	601a      	str	r2, [r3, #0]
      break;
 8002502:	e007      	b.n	8002514 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2210      	movs	r2, #16
 8002508:	601a      	str	r2, [r3, #0]
      break;
 800250a:	e003      	b.n	8002514 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	60fb      	str	r3, [r7, #12]
      break;
 8002512:	bf00      	nop
  }

  return ret;
 8002514:	68fb      	ldr	r3, [r7, #12]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop

08002520 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	dd0b      	ble.n	8002548 <LSM303AGR_ACC_SetFullScale+0x28>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b04      	cmp	r3, #4
 8002534:	dd06      	ble.n	8002544 <LSM303AGR_ACC_SetFullScale+0x24>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b08      	cmp	r3, #8
 800253a:	dc01      	bgt.n	8002540 <LSM303AGR_ACC_SetFullScale+0x20>
 800253c:	2302      	movs	r3, #2
 800253e:	e004      	b.n	800254a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002540:	2303      	movs	r3, #3
 8002542:	e002      	b.n	800254a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002548:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800254a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	331c      	adds	r3, #28
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fe75 	bl	8003244 <lsm303agr_xl_full_scale_set>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	e000      	b.n	8002568 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	331c      	adds	r3, #28
 8002586:	f107 020f 	add.w	r2, r7, #15
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fda3 	bl	80030d8 <lsm303agr_xl_operating_mode_get>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e047      	b.n	800262e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d006      	beq.n	80025b2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d007      	beq.n	80025b8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80025ac:	2310      	movs	r3, #16
 80025ae:	83fb      	strh	r3, [r7, #30]
      break;
 80025b0:	e00a      	b.n	80025c8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80025b2:	2340      	movs	r3, #64	; 0x40
 80025b4:	83fb      	strh	r3, [r7, #30]
      break;
 80025b6:	e007      	b.n	80025c8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	83fb      	strh	r3, [r7, #30]
      break;
 80025be:	e003      	b.n	80025c8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	61bb      	str	r3, [r7, #24]
      break;
 80025c6:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d101      	bne.n	80025d4 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	e02c      	b.n	800262e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	331c      	adds	r3, #28
 80025d8:	f107 0210 	add.w	r2, r7, #16
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 feb4 	bl	800334c <lsm303agr_acceleration_raw_get>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e01e      	b.n	800262e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80025f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80025fe:	b21a      	sxth	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002608:	461a      	mov	r2, r3
 800260a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800260e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002612:	b21a      	sxth	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002618:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800261c:	461a      	mov	r2, r3
 800261e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002622:	fb92 f3f3 	sdiv	r3, r2, r3
 8002626:	b21a      	sxth	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	809a      	strh	r2, [r3, #4]

  return ret;
 800262c:	69bb      	ldr	r3, [r7, #24]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff8f 	bl	8002570 <LSM303AGR_ACC_GetAxesRaw>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	e03c      	b.n	80026d8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fdec 	bl	8002242 <LSM303AGR_ACC_GetSensitivity>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
 8002674:	e030      	b.n	80026d8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002676:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002682:	edd7 7a03 	vldr	s15, [r7, #12]
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268e:	ee17 2a90 	vmov	r2, s15
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002696:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ae:	ee17 2a90 	vmov	r2, s15
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80026b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ce:	ee17 2a90 	vmov	r2, s15
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
 80026ec:	4613      	mov	r3, r2
 80026ee:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f103 001c 	add.w	r0, r3, #28
 80026f6:	1cba      	adds	r2, r7, #2
 80026f8:	78f9      	ldrb	r1, [r7, #3]
 80026fa:	2301      	movs	r3, #1
 80026fc:	f000 fcd4 	bl	80030a8 <lsm303agr_write_reg>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e000      	b.n	800270e <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e04b      	b.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7b1a      	ldrb	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002770:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002776:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e01e      	b.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4798      	blx	r3
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e014      	b.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	331c      	adds	r3, #28
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 ff01 	bl	80035c2 <lsm303agr_mag_i2c_interface_set>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e000      	b.n	80027ce <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80027cc:	68fb      	ldr	r3, [r7, #12]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08002fb5 	.word	0x08002fb5
 80027dc:	08003017 	.word	0x08003017

080027e0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	331c      	adds	r3, #28
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe42 	bl	8003478 <lsm303agr_mag_block_data_update_set>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e028      	b.n	8002852 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	2102      	movs	r1, #2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fdb1 	bl	800336e <lsm303agr_mag_operating_mode_set>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e01c      	b.n	8002852 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	2103      	movs	r1, #3
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fdcb 	bl	80033ba <lsm303agr_mag_data_rate_set>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e010      	b.n	8002852 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	331c      	adds	r3, #28
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fe77 	bl	800352a <lsm303agr_mag_self_test_set>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e004      	b.n	8002852 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f874 	bl	8002950 <LSM303AGR_MAG_Disable>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e004      	b.n	800287e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	331c      	adds	r3, #28
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fe36 	bl	8003508 <lsm303agr_mag_device_id_get>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e000      	b.n	80028aa <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2232      	movs	r2, #50	; 0x32
 80028e6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <LSM303AGR_MAG_GetCapabilities+0x58>)
 80028fc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	42c80000 	.word	0x42c80000

08002910 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e010      	b.n	8002948 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	331c      	adds	r3, #28
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fd1e 	bl	800336e <lsm303agr_mag_operating_mode_set>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	e004      	b.n	8002948 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e010      	b.n	8002988 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	331c      	adds	r3, #28
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fcfe 	bl	800336e <lsm303agr_mag_operating_mode_set>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	e004      	b.n	8002988 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80029a0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	331c      	adds	r3, #28
 80029c2:	f107 020b 	add.w	r2, r7, #11
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd1d 	bl	8003408 <lsm303agr_mag_data_rate_get>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	e023      	b.n	8002a22 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d81b      	bhi.n	8002a18 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a01 	.word	0x08002a01
 80029f0:	08002a09 	.word	0x08002a09
 80029f4:	08002a11 	.word	0x08002a11
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80029fc:	601a      	str	r2, [r3, #0]
      break;
 80029fe:	e00f      	b.n	8002a20 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002a04:	601a      	str	r2, [r3, #0]
      break;
 8002a06:	e00b      	b.n	8002a20 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002a0c:	601a      	str	r2, [r3, #0]
      break;
 8002a0e:	e007      	b.n	8002a20 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002a14:	601a      	str	r2, [r3, #0]
      break;
 8002a16:	e003      	b.n	8002a20 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	60fb      	str	r3, [r7, #12]
      break;
 8002a1e:	bf00      	nop
  }

  return ret;
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	41200000 	.word	0x41200000
 8002a30:	41a00000 	.word	0x41a00000
 8002a34:	42480000 	.word	0x42480000
 8002a38:	42c80000 	.word	0x42c80000

08002a3c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002a48:	edd7 7a00 	vldr	s15, [r7]
 8002a4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	d801      	bhi.n	8002a5e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e016      	b.n	8002a8c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002a5e:	edd7 7a00 	vldr	s15, [r7]
 8002a62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d801      	bhi.n	8002a74 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e00b      	b.n	8002a8c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002a74:	edd7 7a00 	vldr	s15, [r7]
 8002a78:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002ab4 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d801      	bhi.n	8002a8a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e000      	b.n	8002a8c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002a8a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002a8c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	331c      	adds	r3, #28
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fc8f 	bl	80033ba <lsm303agr_mag_data_rate_set>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e000      	b.n	8002aaa <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	42480000 	.word	0x42480000

08002ab8 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2232      	movs	r2, #50	; 0x32
 8002ac6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	331c      	adds	r3, #28
 8002afc:	f107 0208 	add.w	r2, r7, #8
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fcde 	bl	80034c4 <lsm303agr_magnetic_raw_get>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e00c      	b.n	8002b2e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002b14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002b1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002b24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	331c      	adds	r3, #28
 8002b44:	f107 0210 	add.w	r2, r7, #16
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fcba 	bl	80034c4 <lsm303agr_magnetic_raw_get>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e036      	b.n	8002bca <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff14 	bl	8002990 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002b68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b80:	ee17 2a90 	vmov	r2, s15
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002b88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba0:	ee17 2a90 	vmov	r2, s15
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002ba8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc0:	ee17 2a90 	vmov	r2, s15
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	331c      	adds	r3, #28
 8002be6:	f107 020b 	add.w	r2, r7, #11
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fb4f 	bl	8003290 <lsm303agr_xl_full_scale_get>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfc:	e023      	b.n	8002c46 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d81b      	bhi.n	8002c3c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c25 	.word	0x08002c25
 8002c14:	08002c2d 	.word	0x08002c2d
 8002c18:	08002c35 	.word	0x08002c35
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8002c20:	601a      	str	r2, [r3, #0]
      break;
 8002c22:	e00f      	b.n	8002c44 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8002c28:	601a      	str	r2, [r3, #0]
      break;
 8002c2a:	e00b      	b.n	8002c44 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8002c30:	601a      	str	r2, [r3, #0]
      break;
 8002c32:	e007      	b.n	8002c44 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8002c38:	601a      	str	r2, [r3, #0]
      break;
 8002c3a:	e003      	b.n	8002c44 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	60fb      	str	r3, [r7, #12]
      break;
 8002c42:	bf00      	nop
  }

  return ret;
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	3f7ae148 	.word	0x3f7ae148
 8002c54:	3ff9999a 	.word	0x3ff9999a
 8002c58:	4079999a 	.word	0x4079999a
 8002c5c:	413b851f 	.word	0x413b851f

08002c60 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	331c      	adds	r3, #28
 8002c72:	f107 020b 	add.w	r2, r7, #11
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fb09 	bl	8003290 <lsm303agr_xl_full_scale_get>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e023      	b.n	8002cd2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d81b      	bhi.n	8002cc8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb1 	.word	0x08002cb1
 8002ca0:	08002cb9 	.word	0x08002cb9
 8002ca4:	08002cc1 	.word	0x08002cc1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8002cac:	601a      	str	r2, [r3, #0]
      break;
 8002cae:	e00f      	b.n	8002cd0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8002cb4:	601a      	str	r2, [r3, #0]
      break;
 8002cb6:	e00b      	b.n	8002cd0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8002cbc:	601a      	str	r2, [r3, #0]
      break;
 8002cbe:	e007      	b.n	8002cd0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8002cc4:	601a      	str	r2, [r3, #0]
      break;
 8002cc6:	e003      	b.n	8002cd0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	60fb      	str	r3, [r7, #12]
      break;
 8002cce:	bf00      	nop
  }

  return ret;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	4079999a 	.word	0x4079999a
 8002ce0:	40fa3d71 	.word	0x40fa3d71
 8002ce4:	417a147b 	.word	0x417a147b
 8002ce8:	423b999a 	.word	0x423b999a

08002cec <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	331c      	adds	r3, #28
 8002cfe:	f107 020b 	add.w	r2, r7, #11
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fac3 	bl	8003290 <lsm303agr_xl_full_scale_get>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	e023      	b.n	8002d5e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d81b      	bhi.n	8002d54 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3d 	.word	0x08002d3d
 8002d2c:	08002d45 	.word	0x08002d45
 8002d30:	08002d4d 	.word	0x08002d4d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8002d38:	601a      	str	r2, [r3, #0]
      break;
 8002d3a:	e00f      	b.n	8002d5c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8002d40:	601a      	str	r2, [r3, #0]
      break;
 8002d42:	e00b      	b.n	8002d5c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8002d48:	601a      	str	r2, [r3, #0]
      break;
 8002d4a:	e007      	b.n	8002d5c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8002d50:	601a      	str	r2, [r3, #0]
      break;
 8002d52:	e003      	b.n	8002d5c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	60fb      	str	r3, [r7, #12]
      break;
 8002d5a:	bf00      	nop
  }

  return ret;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	417a147b 	.word	0x417a147b
 8002d6c:	41fa147b 	.word	0x41fa147b
 8002d70:	427a147b 	.word	0x427a147b
 8002d74:	433b947b 	.word	0x433b947b

08002d78 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002d84:	edd7 7a00 	vldr	s15, [r7]
 8002d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d801      	bhi.n	8002d9a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e037      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002d9a:	edd7 7a00 	vldr	s15, [r7]
 8002d9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d801      	bhi.n	8002db0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e02c      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002db0:	edd7 7a00 	vldr	s15, [r7]
 8002db4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	d801      	bhi.n	8002dc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e021      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002dc6:	edd7 7a00 	vldr	s15, [r7]
 8002dca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e30 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d801      	bhi.n	8002ddc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e016      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002ddc:	edd7 7a00 	vldr	s15, [r7]
 8002de0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e34 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d801      	bhi.n	8002df2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002dee:	2305      	movs	r3, #5
 8002df0:	e00b      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002df2:	edd7 7a00 	vldr	s15, [r7]
 8002df6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002e38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8002dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d801      	bhi.n	8002e08 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002e04:	2306      	movs	r3, #6
 8002e06:	e000      	b.n	8002e0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002e08:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8002e0a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	331c      	adds	r3, #28
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f993 	bl	8003140 <lsm303agr_xl_data_rate_set>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e000      	b.n	8002e28 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	42480000 	.word	0x42480000
 8002e34:	42c80000 	.word	0x42c80000
 8002e38:	43480000 	.word	0x43480000

08002e3c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002e48:	edd7 7a00 	vldr	s15, [r7]
 8002e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	d801      	bhi.n	8002e5e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e037      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002e5e:	edd7 7a00 	vldr	s15, [r7]
 8002e62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d801      	bhi.n	8002e74 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e02c      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d801      	bhi.n	8002e8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e021      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002e8a:	edd7 7a00 	vldr	s15, [r7]
 8002e8e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002ee4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d801      	bhi.n	8002ea0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e016      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002ea0:	edd7 7a00 	vldr	s15, [r7]
 8002ea4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ee8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d801      	bhi.n	8002eb6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e00b      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002eb6:	edd7 7a00 	vldr	s15, [r7]
 8002eba:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002eec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d801      	bhi.n	8002ecc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002ec8:	2306      	movs	r3, #6
 8002eca:	e000      	b.n	8002ece <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002ecc:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	42480000 	.word	0x42480000
 8002ee8:	42c80000 	.word	0x42c80000
 8002eec:	43480000 	.word	0x43480000

08002ef0 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	461a      	mov	r2, r3
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
 8002f00:	4613      	mov	r3, r2
 8002f02:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10e      	bne.n	8002f2e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	695c      	ldr	r4, [r3, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	7b1b      	ldrb	r3, [r3, #12]
 8002f18:	b298      	uxth	r0, r3
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	b299      	uxth	r1, r3
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	47a0      	blx	r4
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	e00d      	b.n	8002f4a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	695c      	ldr	r4, [r3, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	b298      	uxth	r0, r3
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	b299      	uxth	r1, r3
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	47a0      	blx	r4
 8002f48:	4603      	mov	r3, r0
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}

08002f52 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f52:	b590      	push	{r4, r7, lr}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	460b      	mov	r3, r1
 8002f60:	72fb      	strb	r3, [r7, #11]
 8002f62:	4613      	mov	r3, r2
 8002f64:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	691c      	ldr	r4, [r3, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	7b1b      	ldrb	r3, [r3, #12]
 8002f7a:	b298      	uxth	r0, r3
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	b299      	uxth	r1, r3
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	47a0      	blx	r4
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	e00d      	b.n	8002fac <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	691c      	ldr	r4, [r3, #16]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	7b1b      	ldrb	r3, [r3, #12]
 8002f98:	b298      	uxth	r0, r3
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	b299      	uxth	r1, r3
 8002fa4:	893b      	ldrh	r3, [r7, #8]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	47a0      	blx	r4
 8002faa:	4603      	mov	r3, r0
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	72fb      	strb	r3, [r7, #11]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10e      	bne.n	8002ff2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	695c      	ldr	r4, [r3, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	7b1b      	ldrb	r3, [r3, #12]
 8002fdc:	b298      	uxth	r0, r3
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	b299      	uxth	r1, r3
 8002fe8:	893b      	ldrh	r3, [r7, #8]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	47a0      	blx	r4
 8002fee:	4603      	mov	r3, r0
 8002ff0:	e00d      	b.n	800300e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	695c      	ldr	r4, [r3, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	7b1b      	ldrb	r3, [r3, #12]
 8002ffa:	b298      	uxth	r0, r3
 8002ffc:	7afb      	ldrb	r3, [r7, #11]
 8002ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003002:	b2db      	uxtb	r3, r3
 8003004:	b299      	uxth	r1, r3
 8003006:	893b      	ldrh	r3, [r7, #8]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	47a0      	blx	r4
 800300c:	4603      	mov	r3, r0
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd90      	pop	{r4, r7, pc}

08003016 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003016:	b590      	push	{r4, r7, lr}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	461a      	mov	r2, r3
 8003022:	460b      	mov	r3, r1
 8003024:	72fb      	strb	r3, [r7, #11]
 8003026:	4613      	mov	r3, r2
 8003028:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	691c      	ldr	r4, [r3, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	7b1b      	ldrb	r3, [r3, #12]
 800303e:	b298      	uxth	r0, r3
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003046:	b2db      	uxtb	r3, r3
 8003048:	b299      	uxth	r1, r3
 800304a:	893b      	ldrh	r3, [r7, #8]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	47a0      	blx	r4
 8003050:	4603      	mov	r3, r0
 8003052:	e00d      	b.n	8003070 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	691c      	ldr	r4, [r3, #16]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	7b1b      	ldrb	r3, [r3, #12]
 800305c:	b298      	uxth	r0, r3
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003064:	b2db      	uxtb	r3, r3
 8003066:	b299      	uxth	r1, r3
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	47a0      	blx	r4
 800306e:	4603      	mov	r3, r0
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	460b      	mov	r3, r1
 8003086:	72fb      	strb	r3, [r7, #11]
 8003088:	4613      	mov	r3, r2
 800308a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685c      	ldr	r4, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6898      	ldr	r0, [r3, #8]
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	7af9      	ldrb	r1, [r7, #11]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	47a0      	blx	r4
 800309c:	6178      	str	r0, [r7, #20]
  return ret;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd90      	pop	{r4, r7, pc}

080030a8 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	461a      	mov	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	72fb      	strb	r3, [r7, #11]
 80030b8:	4613      	mov	r3, r2
 80030ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6898      	ldr	r0, [r3, #8]
 80030c4:	893b      	ldrh	r3, [r7, #8]
 80030c6:	7af9      	ldrb	r1, [r7, #11]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	47a0      	blx	r4
 80030cc:	6178      	str	r0, [r7, #20]
  return ret;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80030e2:	f107 020c 	add.w	r2, r7, #12
 80030e6:	2301      	movs	r3, #1
 80030e8:	2120      	movs	r1, #32
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffc4 	bl	8003078 <lsm303agr_read_reg>
 80030f0:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80030f8:	f107 0210 	add.w	r2, r7, #16
 80030fc:	2301      	movs	r3, #1
 80030fe:	2123      	movs	r1, #35	; 0x23
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffb9 	bl	8003078 <lsm303agr_read_reg>
 8003106:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8003108:	7b3b      	ldrb	r3, [r7, #12]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e00c      	b.n	8003136 <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 800311c:	7c3b      	ldrb	r3, [r7, #16]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e002      	b.n	8003136 <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003136:	697b      	ldr	r3, [r7, #20]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800314c:	f107 0208 	add.w	r2, r7, #8
 8003150:	2301      	movs	r3, #1
 8003152:	2120      	movs	r1, #32
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff8f 	bl	8003078 <lsm303agr_read_reg>
 800315a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	7a3b      	ldrb	r3, [r7, #8]
 800316c:	f362 1307 	bfi	r3, r2, #4, #4
 8003170:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003172:	f107 0208 	add.w	r2, r7, #8
 8003176:	2301      	movs	r3, #1
 8003178:	2120      	movs	r1, #32
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff94 	bl	80030a8 <lsm303agr_write_reg>
 8003180:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003196:	f107 0208 	add.w	r2, r7, #8
 800319a:	2301      	movs	r3, #1
 800319c:	2120      	movs	r1, #32
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff6a 	bl	8003078 <lsm303agr_read_reg>
 80031a4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 80031a6:	7a3b      	ldrb	r3, [r7, #8]
 80031a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d83e      	bhi.n	8003230 <lsm303agr_xl_data_rate_get+0xa4>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <lsm303agr_xl_data_rate_get+0x2c>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080031f1 	.word	0x080031f1
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	08003201 	.word	0x08003201
 80031cc:	08003209 	.word	0x08003209
 80031d0:	08003211 	.word	0x08003211
 80031d4:	08003219 	.word	0x08003219
 80031d8:	08003221 	.word	0x08003221
 80031dc:	08003229 	.word	0x08003229
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
      break;
 80031e6:	e027      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
      break;
 80031ee:	e023      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	701a      	strb	r2, [r3, #0]
      break;
 80031f6:	e01f      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2203      	movs	r2, #3
 80031fc:	701a      	strb	r2, [r3, #0]
      break;
 80031fe:	e01b      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2204      	movs	r2, #4
 8003204:	701a      	strb	r2, [r3, #0]
      break;
 8003206:	e017      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2205      	movs	r2, #5
 800320c:	701a      	strb	r2, [r3, #0]
      break;
 800320e:	e013      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2206      	movs	r2, #6
 8003214:	701a      	strb	r2, [r3, #0]
      break;
 8003216:	e00f      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2207      	movs	r2, #7
 800321c:	701a      	strb	r2, [r3, #0]
      break;
 800321e:	e00b      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2208      	movs	r2, #8
 8003224:	701a      	strb	r2, [r3, #0]
      break;
 8003226:	e007      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2209      	movs	r2, #9
 800322c:	701a      	strb	r2, [r3, #0]
      break;
 800322e:	e003      	b.n	8003238 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
      break;
 8003236:	bf00      	nop
  }

  return ret;
 8003238:	68fb      	ldr	r3, [r7, #12]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop

08003244 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003250:	f107 0208 	add.w	r2, r7, #8
 8003254:	2301      	movs	r3, #1
 8003256:	2123      	movs	r1, #35	; 0x23
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff0d 	bl	8003078 <lsm303agr_read_reg>
 800325e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	b2da      	uxtb	r2, r3
 800326e:	7a3b      	ldrb	r3, [r7, #8]
 8003270:	f362 1305 	bfi	r3, r2, #4, #2
 8003274:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003276:	f107 0208 	add.w	r2, r7, #8
 800327a:	2301      	movs	r3, #1
 800327c:	2123      	movs	r1, #35	; 0x23
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff12 	bl	80030a8 <lsm303agr_write_reg>
 8003284:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	2301      	movs	r3, #1
 80032a0:	2123      	movs	r1, #35	; 0x23
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fee8 	bl	8003078 <lsm303agr_read_reg>
 80032a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 80032aa:	7a3b      	ldrb	r3, [r7, #8]
 80032ac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d81a      	bhi.n	80032ec <lsm303agr_xl_full_scale_get+0x5c>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <lsm303agr_xl_full_scale_get+0x2c>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032d5 	.word	0x080032d5
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032e5 	.word	0x080032e5
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e00f      	b.n	80032f4 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
      break;
 80032da:	e00b      	b.n	80032f4 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e007      	b.n	80032f4 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2203      	movs	r2, #3
 80032e8:	701a      	strb	r2, [r3, #0]
      break;
 80032ea:	e003      	b.n	80032f4 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
      break;
 80032f2:	bf00      	nop
  }
  return ret;
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop

08003300 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800330c:	f107 0208 	add.w	r2, r7, #8
 8003310:	2301      	movs	r3, #1
 8003312:	2123      	movs	r1, #35	; 0x23
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff feaf 	bl	8003078 <lsm303agr_read_reg>
 800331a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	b2da      	uxtb	r2, r3
 800332a:	7a3b      	ldrb	r3, [r7, #8]
 800332c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003330:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003332:	f107 0208 	add.w	r2, r7, #8
 8003336:	2301      	movs	r3, #1
 8003338:	2123      	movs	r1, #35	; 0x23
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff feb4 	bl	80030a8 <lsm303agr_write_reg>
 8003340:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003356:	2306      	movs	r3, #6
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	2128      	movs	r1, #40	; 0x28
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe8b 	bl	8003078 <lsm303agr_read_reg>
 8003362:	60f8      	str	r0, [r7, #12]
  return ret;
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800337a:	f107 0208 	add.w	r2, r7, #8
 800337e:	2301      	movs	r3, #1
 8003380:	2160      	movs	r1, #96	; 0x60
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fe78 	bl	8003078 <lsm303agr_read_reg>
 8003388:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	b2da      	uxtb	r2, r3
 8003398:	7a3b      	ldrb	r3, [r7, #8]
 800339a:	f362 0301 	bfi	r3, r2, #0, #2
 800339e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80033a0:	f107 0208 	add.w	r2, r7, #8
 80033a4:	2301      	movs	r3, #1
 80033a6:	2160      	movs	r1, #96	; 0x60
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fe7d 	bl	80030a8 <lsm303agr_write_reg>
 80033ae:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80033b0:	68fb      	ldr	r3, [r7, #12]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80033c6:	f107 0208 	add.w	r2, r7, #8
 80033ca:	2301      	movs	r3, #1
 80033cc:	2160      	movs	r1, #96	; 0x60
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fe52 	bl	8003078 <lsm303agr_read_reg>
 80033d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10f      	bne.n	80033fc <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	7a3b      	ldrb	r3, [r7, #8]
 80033e6:	f362 0383 	bfi	r3, r2, #2, #2
 80033ea:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80033ec:	f107 0208 	add.w	r2, r7, #8
 80033f0:	2301      	movs	r3, #1
 80033f2:	2160      	movs	r1, #96	; 0x60
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fe57 	bl	80030a8 <lsm303agr_write_reg>
 80033fa:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003412:	f107 0208 	add.w	r2, r7, #8
 8003416:	2301      	movs	r3, #1
 8003418:	2160      	movs	r1, #96	; 0x60
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fe2c 	bl	8003078 <lsm303agr_read_reg>
 8003420:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 8003422:	7a3b      	ldrb	r3, [r7, #8]
 8003424:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d81a      	bhi.n	8003464 <lsm303agr_mag_data_rate_get+0x5c>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <lsm303agr_mag_data_rate_get+0x2c>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	0800344d 	.word	0x0800344d
 800343c:	08003455 	.word	0x08003455
 8003440:	0800345d 	.word	0x0800345d
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	e00f      	b.n	800346c <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
      break;
 8003452:	e00b      	b.n	800346c <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
      break;
 800345a:	e007      	b.n	800346c <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2203      	movs	r2, #3
 8003460:	701a      	strb	r2, [r3, #0]
      break;
 8003462:	e003      	b.n	800346c <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
      break;
 800346a:	bf00      	nop
  }
  return ret;
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop

08003478 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003484:	f107 0208 	add.w	r2, r7, #8
 8003488:	2301      	movs	r3, #1
 800348a:	2162      	movs	r1, #98	; 0x62
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fdf3 	bl	8003078 <lsm303agr_read_reg>
 8003492:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	7a3b      	ldrb	r3, [r7, #8]
 80034a4:	f362 1304 	bfi	r3, r2, #4, #1
 80034a8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80034aa:	f107 0208 	add.w	r2, r7, #8
 80034ae:	2301      	movs	r3, #1
 80034b0:	2162      	movs	r1, #98	; 0x62
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fdf8 	bl	80030a8 <lsm303agr_write_reg>
 80034b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80034ce:	2306      	movs	r3, #6
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	2168      	movs	r1, #104	; 0x68
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fdcf 	bl	8003078 <lsm303agr_read_reg>
 80034da:	60f8      	str	r0, [r7, #12]
  return ret;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80034f0:	2301      	movs	r3, #1
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	210f      	movs	r1, #15
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fdbe 	bl	8003078 <lsm303agr_read_reg>
 80034fc:	60f8      	str	r0, [r7, #12]
  return ret;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003512:	2301      	movs	r3, #1
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	214f      	movs	r1, #79	; 0x4f
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fdad 	bl	8003078 <lsm303agr_read_reg>
 800351e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003536:	f107 0208 	add.w	r2, r7, #8
 800353a:	2301      	movs	r3, #1
 800353c:	2162      	movs	r1, #98	; 0x62
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fd9a 	bl	8003078 <lsm303agr_read_reg>
 8003544:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	7a3b      	ldrb	r3, [r7, #8]
 8003556:	f362 0341 	bfi	r3, r2, #1, #1
 800355a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800355c:	f107 0208 	add.w	r2, r7, #8
 8003560:	2301      	movs	r3, #1
 8003562:	2162      	movs	r1, #98	; 0x62
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fd9f 	bl	80030a8 <lsm303agr_write_reg>
 800356a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003582:	f107 0208 	add.w	r2, r7, #8
 8003586:	2301      	movs	r3, #1
 8003588:	212e      	movs	r1, #46	; 0x2e
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fd74 	bl	8003078 <lsm303agr_read_reg>
 8003590:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	7a3b      	ldrb	r3, [r7, #8]
 80035a2:	f362 1387 	bfi	r3, r2, #6, #2
 80035a6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80035a8:	f107 0208 	add.w	r2, r7, #8
 80035ac:	2301      	movs	r3, #1
 80035ae:	212e      	movs	r1, #46	; 0x2e
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fd79 	bl	80030a8 <lsm303agr_write_reg>
 80035b6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80035ce:	f107 0208 	add.w	r2, r7, #8
 80035d2:	2301      	movs	r3, #1
 80035d4:	2162      	movs	r1, #98	; 0x62
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fd4e 	bl	8003078 <lsm303agr_read_reg>
 80035dc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	7a3b      	ldrb	r3, [r7, #8]
 80035ee:	f362 1345 	bfi	r3, r2, #5, #1
 80035f2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80035f4:	f107 0208 	add.w	r2, r7, #8
 80035f8:	2301      	movs	r3, #1
 80035fa:	2162      	movs	r1, #98	; 0x62
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fd53 	bl	80030a8 <lsm303agr_write_reg>
 8003602:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e04d      	b.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	7b1a      	ldrb	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <LSM6DSL_RegisterBusIO+0xc4>)
 8003668:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <LSM6DSL_RegisterBusIO+0xc8>)
 800366e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e020      	b.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4798      	blx	r3
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e016      	b.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d112      	bne.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10d      	bne.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80036ac:	230c      	movs	r3, #12
 80036ae:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	461a      	mov	r2, r3
 80036b4:	2112      	movs	r1, #18
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fd2d 	bl	8004116 <LSM6DSL_Write_Reg>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	08004585 	.word	0x08004585
 80036d8:	080045bb 	.word	0x080045bb

080036dc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	331c      	adds	r3, #28
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f9e5 	bl	8004aba <lsm6dsl_auto_increment_set>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
 80036fa:	e054      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	331c      	adds	r3, #28
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f980 	bl	8004a08 <lsm6dsl_block_data_update_set>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e048      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	331c      	adds	r3, #28
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f9f3 	bl	8004b06 <lsm6dsl_fifo_mode_set>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	e03c      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2204      	movs	r2, #4
 8003730:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	331c      	adds	r3, #28
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ffe6 	bl	800470c <lsm6dsl_xl_data_rate_set>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e02c      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	331c      	adds	r3, #28
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f000 ff7c 	bl	8004650 <lsm6dsl_xl_full_scale_set>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	e020      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	331c      	adds	r3, #28
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f8c0 	bl	80048f8 <lsm6dsl_gy_data_rate_set>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e010      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	331c      	adds	r3, #28
 8003788:	2106      	movs	r1, #6
 800378a:	4618      	mov	r0, r3
 800378c:	f001 f84c 	bl	8004828 <lsm6dsl_gy_full_scale_set>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	e004      	b.n	80037a6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f888 	bl	80038cc <LSM6DSL_ACC_Disable>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e015      	b.n	80037f4 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa9a 	bl	8003d02 <LSM6DSL_GYRO_Disable>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	e00c      	b.n	80037f4 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	331c      	adds	r3, #28
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f943 	bl	8004a98 <lsm6dsl_device_id_get>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003818:	f04f 33ff 	mov.w	r3, #4294967295
 800381c:	e000      	b.n	8003820 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003850:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4a07      	ldr	r2, [pc, #28]	; (8003880 <LSM6DSL_GetCapabilities+0x58>)
 8003862:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <LSM6DSL_GetCapabilities+0x58>)
 8003868:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	45d02000 	.word	0x45d02000

08003884 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e014      	b.n	80038c4 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f103 021c 	add.w	r2, r3, #28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 ff2f 	bl	800470c <lsm6dsl_xl_data_rate_set>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	e004      	b.n	80038c4 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e01f      	b.n	8003922 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f103 021c 	add.w	r2, r3, #28
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	332b      	adds	r3, #43	; 0x2b
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f000 ff32 	bl	8004758 <lsm6dsl_xl_data_rate_get>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e010      	b.n	8003922 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	331c      	adds	r3, #28
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f000 ff00 	bl	800470c <lsm6dsl_xl_data_rate_set>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e004      	b.n	8003922 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	331c      	adds	r3, #28
 800393e:	f107 020b 	add.w	r2, r7, #11
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fea9 	bl	800469c <lsm6dsl_xl_full_scale_get>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e023      	b.n	800399e <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003956:	7afb      	ldrb	r3, [r7, #11]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d81b      	bhi.n	8003994 <LSM6DSL_ACC_GetSensitivity+0x68>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	0800398d 	.word	0x0800398d
 800396c:	0800397d 	.word	0x0800397d
 8003970:	08003985 	.word	0x08003985
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003978:	601a      	str	r2, [r3, #0]
      break;
 800397a:	e00f      	b.n	800399c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003980:	601a      	str	r2, [r3, #0]
      break;
 8003982:	e00b      	b.n	800399c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003988:	601a      	str	r2, [r3, #0]
      break;
 800398a:	e007      	b.n	800399c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003990:	601a      	str	r2, [r3, #0]
      break;
 8003992:	e003      	b.n	800399c <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	60fb      	str	r3, [r7, #12]
      break;
 800399a:	bf00      	nop
  }

  return ret;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	3d79db23 	.word	0x3d79db23
 80039ac:	3df9db23 	.word	0x3df9db23
 80039b0:	3e79db23 	.word	0x3e79db23
 80039b4:	3ef9db23 	.word	0x3ef9db23

080039b8 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	331c      	adds	r3, #28
 80039ca:	f107 020b 	add.w	r2, r7, #11
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fec1 	bl	8004758 <lsm6dsl_xl_data_rate_get>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
 80039e0:	e054      	b.n	8003a8c <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80039e2:	7afb      	ldrb	r3, [r7, #11]
 80039e4:	2b0b      	cmp	r3, #11
 80039e6:	d84c      	bhi.n	8003a82 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a21 	.word	0x08003a21
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a3b 	.word	0x08003a3b
 80039fc:	08003a43 	.word	0x08003a43
 8003a00:	08003a4b 	.word	0x08003a4b
 8003a04:	08003a53 	.word	0x08003a53
 8003a08:	08003a5b 	.word	0x08003a5b
 8003a0c:	08003a63 	.word	0x08003a63
 8003a10:	08003a6b 	.word	0x08003a6b
 8003a14:	08003a73 	.word	0x08003a73
 8003a18:	08003a7b 	.word	0x08003a7b
 8003a1c:	08003a2b 	.word	0x08003a2b
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
      break;
 8003a28:	e02f      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003a2e:	601a      	str	r2, [r3, #0]
      break;
 8003a30:	e02b      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003a36:	601a      	str	r2, [r3, #0]
      break;
 8003a38:	e027      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003a3e:	601a      	str	r2, [r3, #0]
      break;
 8003a40:	e023      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003a46:	601a      	str	r2, [r3, #0]
      break;
 8003a48:	e01f      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003a4e:	601a      	str	r2, [r3, #0]
      break;
 8003a50:	e01b      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003a56:	601a      	str	r2, [r3, #0]
      break;
 8003a58:	e017      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4a13      	ldr	r2, [pc, #76]	; (8003aac <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003a5e:	601a      	str	r2, [r3, #0]
      break;
 8003a60:	e013      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003a66:	601a      	str	r2, [r3, #0]
      break;
 8003a68:	e00f      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003a6e:	601a      	str	r2, [r3, #0]
      break;
 8003a70:	e00b      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003a76:	601a      	str	r2, [r3, #0]
      break;
 8003a78:	e007      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003a7e:	601a      	str	r2, [r3, #0]
      break;
 8003a80:	e003      	b.n	8003a8a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	60fb      	str	r3, [r7, #12]
      break;
 8003a88:	bf00      	nop
  }

  return ret;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	3fcccccd 	.word	0x3fcccccd
 8003a98:	41480000 	.word	0x41480000
 8003a9c:	41d00000 	.word	0x41d00000
 8003aa0:	42500000 	.word	0x42500000
 8003aa4:	42d00000 	.word	0x42d00000
 8003aa8:	43500000 	.word	0x43500000
 8003aac:	43d00000 	.word	0x43d00000
 8003ab0:	44504000 	.word	0x44504000
 8003ab4:	44cf8000 	.word	0x44cf8000
 8003ab8:	45502000 	.word	0x45502000
 8003abc:	45d02000 	.word	0x45d02000

08003ac0 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d106      	bne.n	8003ae4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003ad6:	ed97 0a00 	vldr	s0, [r7]
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fb36 	bl	800414c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	e005      	b.n	8003af0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003ae4:	ed97 0a00 	vldr	s0, [r7]
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fbbb 	bl	8004264 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003aee:	4603      	mov	r3, r0
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	331c      	adds	r3, #28
 8003b0a:	f107 020b 	add.w	r2, r7, #11
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fdc3 	bl	800469c <lsm6dsl_xl_full_scale_get>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	e023      	b.n	8003b6a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d81b      	bhi.n	8003b60 <LSM6DSL_ACC_GetFullScale+0x68>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <LSM6DSL_ACC_GetFullScale+0x38>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b51 	.word	0x08003b51
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
      break;
 8003b46:	e00f      	b.n	8003b68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	601a      	str	r2, [r3, #0]
      break;
 8003b4e:	e00b      	b.n	8003b68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2208      	movs	r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
      break;
 8003b56:	e007      	b.n	8003b68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	601a      	str	r2, [r3, #0]
      break;
 8003b5e:	e003      	b.n	8003b68 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	60fb      	str	r3, [r7, #12]
      break;
 8003b66:	bf00      	nop
  }

  return ret;
 8003b68:	68fb      	ldr	r3, [r7, #12]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	dd0b      	ble.n	8003b9c <LSM6DSL_ACC_SetFullScale+0x28>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	dd06      	ble.n	8003b98 <LSM6DSL_ACC_SetFullScale+0x24>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	dc01      	bgt.n	8003b94 <LSM6DSL_ACC_SetFullScale+0x20>
 8003b90:	2303      	movs	r3, #3
 8003b92:	e004      	b.n	8003b9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e002      	b.n	8003b9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e000      	b.n	8003b9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8003b9c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003b9e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	331c      	adds	r3, #28
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fd51 	bl	8004650 <lsm6dsl_xl_full_scale_set>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e000      	b.n	8003bbc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	331c      	adds	r3, #28
 8003bd2:	f107 0208 	add.w	r2, r7, #8
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 ff4c 	bl	8004a76 <lsm6dsl_acceleration_raw_get>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	e00c      	b.n	8003c04 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003bea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003bf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003bfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	331c      	adds	r3, #28
 8003c20:	f107 0210 	add.w	r2, r7, #16
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ff25 	bl	8004a76 <lsm6dsl_acceleration_raw_get>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e03c      	b.n	8003cb2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003c38:	f107 030c 	add.w	r3, r7, #12
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fe74 	bl	800392c <LSM6DSL_ACC_GetSensitivity>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e030      	b.n	8003cb2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c68:	ee17 2a90 	vmov	r2, s15
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003c70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c88:	ee17 2a90 	vmov	r2, s15
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003c90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca8:	ee17 2a90 	vmov	r2, s15
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e014      	b.n	8003cfa <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f103 021c 	add.w	r2, r3, #28
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 fe0a 	bl	80048f8 <lsm6dsl_gy_data_rate_set>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e004      	b.n	8003cfa <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e01f      	b.n	8003d58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 021c 	add.w	r2, r3, #28
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	332c      	adds	r3, #44	; 0x2c
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f000 fe0d 	bl	8004944 <lsm6dsl_gy_data_rate_get>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	e010      	b.n	8003d58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	331c      	adds	r3, #28
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fddb 	bl	80048f8 <lsm6dsl_gy_data_rate_set>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	e004      	b.n	8003d58 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	331c      	adds	r3, #28
 8003d72:	f107 020b 	add.w	r2, r7, #11
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fd7b 	bl	8004874 <lsm6dsl_gy_full_scale_get>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e02d      	b.n	8003de6 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d825      	bhi.n	8003ddc <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003ddd 	.word	0x08003ddd
 8003db0:	08003dd5 	.word	0x08003dd5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003db8:	601a      	str	r2, [r3, #0]
      break;
 8003dba:	e013      	b.n	8003de4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8003dc0:	601a      	str	r2, [r3, #0]
      break;
 8003dc2:	e00f      	b.n	8003de4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8003dc8:	601a      	str	r2, [r3, #0]
      break;
 8003dca:	e00b      	b.n	8003de4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8003dd0:	601a      	str	r2, [r3, #0]
      break;
 8003dd2:	e007      	b.n	8003de4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8003dd8:	601a      	str	r2, [r3, #0]
      break;
 8003dda:	e003      	b.n	8003de4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	60fb      	str	r3, [r7, #12]
      break;
 8003de2:	bf00      	nop
  }

  return ret;
 8003de4:	68fb      	ldr	r3, [r7, #12]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	408c0000 	.word	0x408c0000
 8003df4:	410c0000 	.word	0x410c0000
 8003df8:	418c0000 	.word	0x418c0000
 8003dfc:	420c0000 	.word	0x420c0000
 8003e00:	428c0000 	.word	0x428c0000

08003e04 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	331c      	adds	r3, #28
 8003e16:	f107 020b 	add.w	r2, r7, #11
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fd91 	bl	8004944 <lsm6dsl_gy_data_rate_get>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	e04e      	b.n	8003ecc <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	2b0a      	cmp	r3, #10
 8003e32:	d846      	bhi.n	8003ec2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e83 	.word	0x08003e83
 8003e4c:	08003e8b 	.word	0x08003e8b
 8003e50:	08003e93 	.word	0x08003e93
 8003e54:	08003e9b 	.word	0x08003e9b
 8003e58:	08003ea3 	.word	0x08003ea3
 8003e5c:	08003eab 	.word	0x08003eab
 8003e60:	08003eb3 	.word	0x08003eb3
 8003e64:	08003ebb 	.word	0x08003ebb
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
      break;
 8003e70:	e02b      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8003e76:	601a      	str	r2, [r3, #0]
      break;
 8003e78:	e027      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8003e7e:	601a      	str	r2, [r3, #0]
      break;
 8003e80:	e023      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	4a15      	ldr	r2, [pc, #84]	; (8003edc <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8003e86:	601a      	str	r2, [r3, #0]
      break;
 8003e88:	e01f      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8003e8e:	601a      	str	r2, [r3, #0]
      break;
 8003e90:	e01b      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8003e96:	601a      	str	r2, [r3, #0]
      break;
 8003e98:	e017      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8003e9e:	601a      	str	r2, [r3, #0]
      break;
 8003ea0:	e013      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8003ea6:	601a      	str	r2, [r3, #0]
      break;
 8003ea8:	e00f      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8003eae:	601a      	str	r2, [r3, #0]
      break;
 8003eb0:	e00b      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8003eb6:	601a      	str	r2, [r3, #0]
      break;
 8003eb8:	e007      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8003ebe:	601a      	str	r2, [r3, #0]
      break;
 8003ec0:	e003      	b.n	8003eca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	60fb      	str	r3, [r7, #12]
      break;
 8003ec8:	bf00      	nop
  }

  return ret;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	41480000 	.word	0x41480000
 8003ed8:	41d00000 	.word	0x41d00000
 8003edc:	42500000 	.word	0x42500000
 8003ee0:	42d00000 	.word	0x42d00000
 8003ee4:	43500000 	.word	0x43500000
 8003ee8:	43d00000 	.word	0x43d00000
 8003eec:	44504000 	.word	0x44504000
 8003ef0:	44cf8000 	.word	0x44cf8000
 8003ef4:	45502000 	.word	0x45502000
 8003ef8:	45d02000 	.word	0x45d02000

08003efc <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d106      	bne.n	8003f20 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003f12:	ed97 0a00 	vldr	s0, [r7]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa26 	bl	8004368 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e005      	b.n	8003f2c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003f20:	ed97 0a00 	vldr	s0, [r7]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 faab 	bl	8004480 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8003f2a:	4603      	mov	r3, r0
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	331c      	adds	r3, #28
 8003f46:	f107 020b 	add.w	r2, r7, #11
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fc91 	bl	8004874 <lsm6dsl_gy_full_scale_get>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5c:	e030      	b.n	8003fc0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d828      	bhi.n	8003fb6 <LSM6DSL_GYRO_GetFullScale+0x82>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003f89 	.word	0x08003f89
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fb7 	.word	0x08003fb7
 8003f7c:	08003fa3 	.word	0x08003fa3
 8003f80:	08003fb7 	.word	0x08003fb7
 8003f84:	08003fad 	.word	0x08003fad
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	227d      	movs	r2, #125	; 0x7d
 8003f8c:	601a      	str	r2, [r3, #0]
      break;
 8003f8e:	e016      	b.n	8003fbe <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	22fa      	movs	r2, #250	; 0xfa
 8003f94:	601a      	str	r2, [r3, #0]
      break;
 8003f96:	e012      	b.n	8003fbe <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f9e:	601a      	str	r2, [r3, #0]
      break;
 8003fa0:	e00d      	b.n	8003fbe <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa8:	601a      	str	r2, [r3, #0]
      break;
 8003faa:	e008      	b.n	8003fbe <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fb2:	601a      	str	r2, [r3, #0]
      break;
 8003fb4:	e003      	b.n	8003fbe <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	60fb      	str	r3, [r7, #12]
      break;
 8003fbc:	bf00      	nop
  }

  return ret;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b7d      	cmp	r3, #125	; 0x7d
 8003fd6:	dd12      	ble.n	8003ffe <LSM6DSL_GYRO_SetFullScale+0x36>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2bfa      	cmp	r3, #250	; 0xfa
 8003fdc:	dd0d      	ble.n	8003ffa <LSM6DSL_GYRO_SetFullScale+0x32>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fe4:	dd07      	ble.n	8003ff6 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fec:	dc01      	bgt.n	8003ff2 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	e006      	b.n	8004000 <LSM6DSL_GYRO_SetFullScale+0x38>
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	e004      	b.n	8004000 <LSM6DSL_GYRO_SetFullScale+0x38>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e002      	b.n	8004000 <LSM6DSL_GYRO_SetFullScale+0x38>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <LSM6DSL_GYRO_SetFullScale+0x38>
 8003ffe:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004000:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	331c      	adds	r3, #28
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fc0c 	bl	8004828 <lsm6dsl_gy_full_scale_set>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	e000      	b.n	800401e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	331c      	adds	r3, #28
 8004034:	f107 0208 	add.w	r2, r7, #8
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd0a 	bl	8004a54 <lsm6dsl_angular_rate_raw_get>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e00c      	b.n	8004066 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800404c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004054:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800405c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	331c      	adds	r3, #28
 800407c:	f107 0210 	add.w	r2, r7, #16
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fce6 	bl	8004a54 <lsm6dsl_angular_rate_raw_get>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e03c      	b.n	800410e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004094:	f107 030c 	add.w	r3, r7, #12
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe60 	bl	8003d60 <LSM6DSL_GYRO_GetSensitivity>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	e030      	b.n	800410e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80040ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c4:	ee17 2a90 	vmov	r2, s15
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80040cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e4:	ee17 2a90 	vmov	r2, s15
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80040ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004104:	ee17 2a90 	vmov	r2, s15
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
 8004122:	4613      	mov	r3, r2
 8004124:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f103 001c 	add.w	r0, r3, #28
 800412c:	1cba      	adds	r2, r7, #2
 800412e:	78f9      	ldrb	r1, [r7, #3]
 8004130:	2301      	movs	r3, #1
 8004132:	f000 fa75 	bl	8004620 <lsm6dsl_write_reg>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e000      	b.n	8004144 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004158:	edd7 7a00 	vldr	s15, [r7]
 800415c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004168:	d801      	bhi.n	800416e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800416a:	2301      	movs	r3, #1
 800416c:	e058      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800416e:	edd7 7a00 	vldr	s15, [r7]
 8004172:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d801      	bhi.n	8004184 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004180:	2302      	movs	r3, #2
 8004182:	e04d      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004184:	edd7 7a00 	vldr	s15, [r7]
 8004188:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004248 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d801      	bhi.n	800419a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004196:	2303      	movs	r3, #3
 8004198:	e042      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800419a:	edd7 7a00 	vldr	s15, [r7]
 800419e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800424c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80041a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	d801      	bhi.n	80041b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80041ac:	2304      	movs	r3, #4
 80041ae:	e037      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80041b0:	edd7 7a00 	vldr	s15, [r7]
 80041b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004250 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80041b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	d801      	bhi.n	80041c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e02c      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80041c6:	edd7 7a00 	vldr	s15, [r7]
 80041ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004254 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80041ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	d801      	bhi.n	80041dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80041d8:	2306      	movs	r3, #6
 80041da:	e021      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80041dc:	edd7 7a00 	vldr	s15, [r7]
 80041e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004258 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80041e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d801      	bhi.n	80041f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80041ee:	2307      	movs	r3, #7
 80041f0:	e016      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80041f2:	edd7 7a00 	vldr	s15, [r7]
 80041f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800425c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80041fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004202:	d801      	bhi.n	8004208 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004204:	2308      	movs	r3, #8
 8004206:	e00b      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004208:	edd7 7a00 	vldr	s15, [r7]
 800420c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004260 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	d801      	bhi.n	800421e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800421a:	2309      	movs	r3, #9
 800421c:	e000      	b.n	8004220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800421e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004220:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	331c      	adds	r3, #28
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa6e 	bl	800470c <lsm6dsl_xl_data_rate_set>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e000      	b.n	800423e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	42500000 	.word	0x42500000
 800424c:	42d00000 	.word	0x42d00000
 8004250:	43500000 	.word	0x43500000
 8004254:	43d00000 	.word	0x43d00000
 8004258:	44504000 	.word	0x44504000
 800425c:	44cf8000 	.word	0x44cf8000
 8004260:	45502000 	.word	0x45502000

08004264 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004270:	edd7 7a00 	vldr	s15, [r7]
 8004274:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d801      	bhi.n	8004286 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004282:	2301      	movs	r3, #1
 8004284:	e058      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004286:	edd7 7a00 	vldr	s15, [r7]
 800428a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800428e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d801      	bhi.n	800429c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004298:	2302      	movs	r3, #2
 800429a:	e04d      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800429c:	edd7 7a00 	vldr	s15, [r7]
 80042a0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800434c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80042a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ac:	d801      	bhi.n	80042b2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80042ae:	2303      	movs	r3, #3
 80042b0:	e042      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042b2:	edd7 7a00 	vldr	s15, [r7]
 80042b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004350 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80042ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c2:	d801      	bhi.n	80042c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e037      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042c8:	edd7 7a00 	vldr	s15, [r7]
 80042cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004354 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80042d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	d801      	bhi.n	80042de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80042da:	2305      	movs	r3, #5
 80042dc:	e02c      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042de:	edd7 7a00 	vldr	s15, [r7]
 80042e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004358 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80042e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ee:	d801      	bhi.n	80042f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80042f0:	2306      	movs	r3, #6
 80042f2:	e021      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042f4:	edd7 7a00 	vldr	s15, [r7]
 80042f8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800435c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80042fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	d801      	bhi.n	800430a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004306:	2307      	movs	r3, #7
 8004308:	e016      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800430a:	edd7 7a00 	vldr	s15, [r7]
 800430e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004360 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431a:	d801      	bhi.n	8004320 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800431c:	2308      	movs	r3, #8
 800431e:	e00b      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004320:	edd7 7a00 	vldr	s15, [r7]
 8004324:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004364 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004330:	d801      	bhi.n	8004336 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004332:	2309      	movs	r3, #9
 8004334:	e000      	b.n	8004338 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004336:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	42500000 	.word	0x42500000
 8004350:	42d00000 	.word	0x42d00000
 8004354:	43500000 	.word	0x43500000
 8004358:	43d00000 	.word	0x43d00000
 800435c:	44504000 	.word	0x44504000
 8004360:	44cf8000 	.word	0x44cf8000
 8004364:	45502000 	.word	0x45502000

08004368 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004374:	edd7 7a00 	vldr	s15, [r7]
 8004378:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800437c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004384:	d801      	bhi.n	800438a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004386:	2301      	movs	r3, #1
 8004388:	e058      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800438a:	edd7 7a00 	vldr	s15, [r7]
 800438e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	d801      	bhi.n	80043a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800439c:	2302      	movs	r3, #2
 800439e:	e04d      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043a0:	edd7 7a00 	vldr	s15, [r7]
 80043a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004464 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80043a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d801      	bhi.n	80043b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80043b2:	2303      	movs	r3, #3
 80043b4:	e042      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043b6:	edd7 7a00 	vldr	s15, [r7]
 80043ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004468 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80043be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c6:	d801      	bhi.n	80043cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80043c8:	2304      	movs	r3, #4
 80043ca:	e037      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043cc:	edd7 7a00 	vldr	s15, [r7]
 80043d0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800446c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80043d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	d801      	bhi.n	80043e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80043de:	2305      	movs	r3, #5
 80043e0:	e02c      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043e2:	edd7 7a00 	vldr	s15, [r7]
 80043e6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004470 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80043ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	d801      	bhi.n	80043f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80043f4:	2306      	movs	r3, #6
 80043f6:	e021      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043f8:	edd7 7a00 	vldr	s15, [r7]
 80043fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004474 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	d801      	bhi.n	800440e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800440a:	2307      	movs	r3, #7
 800440c:	e016      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800440e:	edd7 7a00 	vldr	s15, [r7]
 8004412:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004478 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d801      	bhi.n	8004424 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004420:	2308      	movs	r3, #8
 8004422:	e00b      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004424:	edd7 7a00 	vldr	s15, [r7]
 8004428:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800447c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800442c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	d801      	bhi.n	800443a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004436:	2309      	movs	r3, #9
 8004438:	e000      	b.n	800443c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800443a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800443c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	331c      	adds	r3, #28
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa56 	bl	80048f8 <lsm6dsl_gy_data_rate_set>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e000      	b.n	800445a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	42500000 	.word	0x42500000
 8004468:	42d00000 	.word	0x42d00000
 800446c:	43500000 	.word	0x43500000
 8004470:	43d00000 	.word	0x43d00000
 8004474:	44504000 	.word	0x44504000
 8004478:	44cf8000 	.word	0x44cf8000
 800447c:	45502000 	.word	0x45502000

08004480 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800448c:	edd7 7a00 	vldr	s15, [r7]
 8004490:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449c:	d801      	bhi.n	80044a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800449e:	2301      	movs	r3, #1
 80044a0:	e058      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044a2:	edd7 7a00 	vldr	s15, [r7]
 80044a6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	d801      	bhi.n	80044b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e04d      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044b8:	edd7 7a00 	vldr	s15, [r7]
 80044bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004568 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80044c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c8:	d801      	bhi.n	80044ce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e042      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044ce:	edd7 7a00 	vldr	s15, [r7]
 80044d2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800456c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80044d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044de:	d801      	bhi.n	80044e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80044e0:	2304      	movs	r3, #4
 80044e2:	e037      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044e4:	edd7 7a00 	vldr	s15, [r7]
 80044e8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004570 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80044ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	d801      	bhi.n	80044fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80044f6:	2305      	movs	r3, #5
 80044f8:	e02c      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044fa:	edd7 7a00 	vldr	s15, [r7]
 80044fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004574 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450a:	d801      	bhi.n	8004510 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800450c:	2306      	movs	r3, #6
 800450e:	e021      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004510:	edd7 7a00 	vldr	s15, [r7]
 8004514:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004578 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	d801      	bhi.n	8004526 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004522:	2307      	movs	r3, #7
 8004524:	e016      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004526:	edd7 7a00 	vldr	s15, [r7]
 800452a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800457c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	d801      	bhi.n	800453c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004538:	2308      	movs	r3, #8
 800453a:	e00b      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800453c:	edd7 7a00 	vldr	s15, [r7]
 8004540:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004580 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d801      	bhi.n	8004552 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800454e:	2309      	movs	r3, #9
 8004550:	e000      	b.n	8004554 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004552:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	42500000 	.word	0x42500000
 800456c:	42d00000 	.word	0x42d00000
 8004570:	43500000 	.word	0x43500000
 8004574:	43d00000 	.word	0x43d00000
 8004578:	44504000 	.word	0x44504000
 800457c:	44cf8000 	.word	0x44cf8000
 8004580:	45502000 	.word	0x45502000

08004584 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	460b      	mov	r3, r1
 8004592:	72fb      	strb	r3, [r7, #11]
 8004594:	4613      	mov	r3, r2
 8004596:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	695c      	ldr	r4, [r3, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	7b1b      	ldrb	r3, [r3, #12]
 80045a4:	b298      	uxth	r0, r3
 80045a6:	7afb      	ldrb	r3, [r7, #11]
 80045a8:	b299      	uxth	r1, r3
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	47a0      	blx	r4
 80045b0:	4603      	mov	r3, r0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}

080045ba <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045ba:	b590      	push	{r4, r7, lr}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	461a      	mov	r2, r3
 80045c6:	460b      	mov	r3, r1
 80045c8:	72fb      	strb	r3, [r7, #11]
 80045ca:	4613      	mov	r3, r2
 80045cc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	691c      	ldr	r4, [r3, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	7b1b      	ldrb	r3, [r3, #12]
 80045da:	b298      	uxth	r0, r3
 80045dc:	7afb      	ldrb	r3, [r7, #11]
 80045de:	b299      	uxth	r1, r3
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	47a0      	blx	r4
 80045e6:	4603      	mov	r3, r0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}

080045f0 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	460b      	mov	r3, r1
 80045fe:	72fb      	strb	r3, [r7, #11]
 8004600:	4613      	mov	r3, r2
 8004602:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685c      	ldr	r4, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6898      	ldr	r0, [r3, #8]
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	7af9      	ldrb	r1, [r7, #11]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	47a0      	blx	r4
 8004614:	6178      	str	r0, [r7, #20]
  return ret;
 8004616:	697b      	ldr	r3, [r7, #20]
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}

08004620 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	461a      	mov	r2, r3
 800462c:	460b      	mov	r3, r1
 800462e:	72fb      	strb	r3, [r7, #11]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681c      	ldr	r4, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6898      	ldr	r0, [r3, #8]
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	7af9      	ldrb	r1, [r7, #11]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	47a0      	blx	r4
 8004644:	6178      	str	r0, [r7, #20]
  return ret;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800465c:	f107 0208 	add.w	r2, r7, #8
 8004660:	2301      	movs	r3, #1
 8004662:	2110      	movs	r1, #16
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ffc3 	bl	80045f0 <lsm6dsl_read_reg>
 800466a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	b2da      	uxtb	r2, r3
 800467a:	7a3b      	ldrb	r3, [r7, #8]
 800467c:	f362 0383 	bfi	r3, r2, #2, #2
 8004680:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004682:	f107 0208 	add.w	r2, r7, #8
 8004686:	2301      	movs	r3, #1
 8004688:	2110      	movs	r1, #16
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ffc8 	bl	8004620 <lsm6dsl_write_reg>
 8004690:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80046a6:	f107 0208 	add.w	r2, r7, #8
 80046aa:	2301      	movs	r3, #1
 80046ac:	2110      	movs	r1, #16
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ff9e 	bl	80045f0 <lsm6dsl_read_reg>
 80046b4:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 80046b6:	7a3b      	ldrb	r3, [r7, #8]
 80046b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d81a      	bhi.n	80046f8 <lsm6dsl_xl_full_scale_get+0x5c>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <lsm6dsl_xl_full_scale_get+0x2c>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046d9 	.word	0x080046d9
 80046cc:	080046e1 	.word	0x080046e1
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f1 	.word	0x080046f1
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
      break;
 80046de:	e00f      	b.n	8004700 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
      break;
 80046e6:	e00b      	b.n	8004700 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2202      	movs	r2, #2
 80046ec:	701a      	strb	r2, [r3, #0]
      break;
 80046ee:	e007      	b.n	8004700 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2203      	movs	r2, #3
 80046f4:	701a      	strb	r2, [r3, #0]
      break;
 80046f6:	e003      	b.n	8004700 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2204      	movs	r2, #4
 80046fc:	701a      	strb	r2, [r3, #0]
      break;
 80046fe:	bf00      	nop
  }

  return ret;
 8004700:	68fb      	ldr	r3, [r7, #12]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop

0800470c <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004718:	f107 0208 	add.w	r2, r7, #8
 800471c:	2301      	movs	r3, #1
 800471e:	2110      	movs	r1, #16
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff65 	bl	80045f0 <lsm6dsl_read_reg>
 8004726:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	b2da      	uxtb	r2, r3
 8004736:	7a3b      	ldrb	r3, [r7, #8]
 8004738:	f362 1307 	bfi	r3, r2, #4, #4
 800473c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	2301      	movs	r3, #1
 8004744:	2110      	movs	r1, #16
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ff6a 	bl	8004620 <lsm6dsl_write_reg>
 800474c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004762:	f107 0208 	add.w	r2, r7, #8
 8004766:	2301      	movs	r3, #1
 8004768:	2110      	movs	r1, #16
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff40 	bl	80045f0 <lsm6dsl_read_reg>
 8004770:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8004772:	7a3b      	ldrb	r3, [r7, #8]
 8004774:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b0b      	cmp	r3, #11
 800477c:	d84a      	bhi.n	8004814 <lsm6dsl_xl_data_rate_get+0xbc>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047d5 	.word	0x080047d5
 8004798:	080047dd 	.word	0x080047dd
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047ed 	.word	0x080047ed
 80047a4:	080047f5 	.word	0x080047f5
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004805 	.word	0x08004805
 80047b0:	0800480d 	.word	0x0800480d
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
      break;
 80047ba:	e02f      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
      break;
 80047c2:	e02b      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
      break;
 80047ca:	e027      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]
      break;
 80047d2:	e023      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2204      	movs	r2, #4
 80047d8:	701a      	strb	r2, [r3, #0]
      break;
 80047da:	e01f      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2205      	movs	r2, #5
 80047e0:	701a      	strb	r2, [r3, #0]
      break;
 80047e2:	e01b      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2206      	movs	r2, #6
 80047e8:	701a      	strb	r2, [r3, #0]
      break;
 80047ea:	e017      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2207      	movs	r2, #7
 80047f0:	701a      	strb	r2, [r3, #0]
      break;
 80047f2:	e013      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2208      	movs	r2, #8
 80047f8:	701a      	strb	r2, [r3, #0]
      break;
 80047fa:	e00f      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2209      	movs	r2, #9
 8004800:	701a      	strb	r2, [r3, #0]
      break;
 8004802:	e00b      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	220a      	movs	r2, #10
 8004808:	701a      	strb	r2, [r3, #0]
      break;
 800480a:	e007      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	220b      	movs	r2, #11
 8004810:	701a      	strb	r2, [r3, #0]
      break;
 8004812:	e003      	b.n	800481c <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	220c      	movs	r2, #12
 8004818:	701a      	strb	r2, [r3, #0]
      break;
 800481a:	bf00      	nop
  }

  return ret;
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004834:	f107 0208 	add.w	r2, r7, #8
 8004838:	2301      	movs	r3, #1
 800483a:	2111      	movs	r1, #17
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fed7 	bl	80045f0 <lsm6dsl_read_reg>
 8004842:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	b2da      	uxtb	r2, r3
 8004852:	7a3b      	ldrb	r3, [r7, #8]
 8004854:	f362 0343 	bfi	r3, r2, #1, #3
 8004858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800485a:	f107 0208 	add.w	r2, r7, #8
 800485e:	2301      	movs	r3, #1
 8004860:	2111      	movs	r1, #17
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fedc 	bl	8004620 <lsm6dsl_write_reg>
 8004868:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800487e:	f107 0208 	add.w	r2, r7, #8
 8004882:	2301      	movs	r3, #1
 8004884:	2111      	movs	r1, #17
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff feb2 	bl	80045f0 <lsm6dsl_read_reg>
 800488c:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 800488e:	7a3b      	ldrb	r3, [r7, #8]
 8004890:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b06      	cmp	r3, #6
 8004898:	d824      	bhi.n	80048e4 <lsm6dsl_gy_full_scale_get+0x70>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <lsm6dsl_gy_full_scale_get+0x2c>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048bd 	.word	0x080048bd
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048e5 	.word	0x080048e5
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048dd 	.word	0x080048dd
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
      break;
 80048c2:	e013      	b.n	80048ec <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
      break;
 80048ca:	e00f      	b.n	80048ec <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
      break;
 80048d2:	e00b      	b.n	80048ec <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2204      	movs	r2, #4
 80048d8:	701a      	strb	r2, [r3, #0]
      break;
 80048da:	e007      	b.n	80048ec <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2206      	movs	r2, #6
 80048e0:	701a      	strb	r2, [r3, #0]
      break;
 80048e2:	e003      	b.n	80048ec <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2207      	movs	r2, #7
 80048e8:	701a      	strb	r2, [r3, #0]
      break;
 80048ea:	bf00      	nop
  }

  return ret;
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004904:	f107 0208 	add.w	r2, r7, #8
 8004908:	2301      	movs	r3, #1
 800490a:	2111      	movs	r1, #17
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff fe6f 	bl	80045f0 <lsm6dsl_read_reg>
 8004912:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	7a3b      	ldrb	r3, [r7, #8]
 8004924:	f362 1307 	bfi	r3, r2, #4, #4
 8004928:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800492a:	f107 0208 	add.w	r2, r7, #8
 800492e:	2301      	movs	r3, #1
 8004930:	2111      	movs	r1, #17
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe74 	bl	8004620 <lsm6dsl_write_reg>
 8004938:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800494e:	f107 0208 	add.w	r2, r7, #8
 8004952:	2301      	movs	r3, #1
 8004954:	2111      	movs	r1, #17
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fe4a 	bl	80045f0 <lsm6dsl_read_reg>
 800495c:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 800495e:	7a3b      	ldrb	r3, [r7, #8]
 8004960:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b0a      	cmp	r3, #10
 8004968:	d844      	bhi.n	80049f4 <lsm6dsl_gy_data_rate_get+0xb0>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <lsm6dsl_gy_data_rate_get+0x2c>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049bd 	.word	0x080049bd
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049d5 	.word	0x080049d5
 8004990:	080049dd 	.word	0x080049dd
 8004994:	080049e5 	.word	0x080049e5
 8004998:	080049ed 	.word	0x080049ed
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
      break;
 80049a2:	e02b      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
      break;
 80049aa:	e027      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2202      	movs	r2, #2
 80049b0:	701a      	strb	r2, [r3, #0]
      break;
 80049b2:	e023      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2203      	movs	r2, #3
 80049b8:	701a      	strb	r2, [r3, #0]
      break;
 80049ba:	e01f      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2204      	movs	r2, #4
 80049c0:	701a      	strb	r2, [r3, #0]
      break;
 80049c2:	e01b      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2205      	movs	r2, #5
 80049c8:	701a      	strb	r2, [r3, #0]
      break;
 80049ca:	e017      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2206      	movs	r2, #6
 80049d0:	701a      	strb	r2, [r3, #0]
      break;
 80049d2:	e013      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2207      	movs	r2, #7
 80049d8:	701a      	strb	r2, [r3, #0]
      break;
 80049da:	e00f      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	701a      	strb	r2, [r3, #0]
      break;
 80049e2:	e00b      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2209      	movs	r2, #9
 80049e8:	701a      	strb	r2, [r3, #0]
      break;
 80049ea:	e007      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	220a      	movs	r2, #10
 80049f0:	701a      	strb	r2, [r3, #0]
      break;
 80049f2:	e003      	b.n	80049fc <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	220b      	movs	r2, #11
 80049f8:	701a      	strb	r2, [r3, #0]
      break;
 80049fa:	bf00      	nop
  }

  return ret;
 80049fc:	68fb      	ldr	r3, [r7, #12]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004a14:	f107 0208 	add.w	r2, r7, #8
 8004a18:	2301      	movs	r3, #1
 8004a1a:	2112      	movs	r1, #18
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fde7 	bl	80045f0 <lsm6dsl_read_reg>
 8004a22:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	7a3b      	ldrb	r3, [r7, #8]
 8004a34:	f362 1386 	bfi	r3, r2, #6, #1
 8004a38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004a3a:	f107 0208 	add.w	r2, r7, #8
 8004a3e:	2301      	movs	r3, #1
 8004a40:	2112      	movs	r1, #18
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff fdec 	bl	8004620 <lsm6dsl_write_reg>
 8004a48:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004a5e:	2306      	movs	r3, #6
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	2122      	movs	r1, #34	; 0x22
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fdc3 	bl	80045f0 <lsm6dsl_read_reg>
 8004a6a:	60f8      	str	r0, [r7, #12]
  return ret;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004a80:	2306      	movs	r3, #6
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	2128      	movs	r1, #40	; 0x28
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fdb2 	bl	80045f0 <lsm6dsl_read_reg>
 8004a8c:	60f8      	str	r0, [r7, #12]
  return ret;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	210f      	movs	r1, #15
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fda1 	bl	80045f0 <lsm6dsl_read_reg>
 8004aae:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004ac6:	f107 0208 	add.w	r2, r7, #8
 8004aca:	2301      	movs	r3, #1
 8004acc:	2112      	movs	r1, #18
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fd8e 	bl	80045f0 <lsm6dsl_read_reg>
 8004ad4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	7a3b      	ldrb	r3, [r7, #8]
 8004ae6:	f362 0382 	bfi	r3, r2, #2, #1
 8004aea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004aec:	f107 0208 	add.w	r2, r7, #8
 8004af0:	2301      	movs	r3, #1
 8004af2:	2112      	movs	r1, #18
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fd93 	bl	8004620 <lsm6dsl_write_reg>
 8004afa:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004b12:	f107 0208 	add.w	r2, r7, #8
 8004b16:	2301      	movs	r3, #1
 8004b18:	210a      	movs	r1, #10
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fd68 	bl	80045f0 <lsm6dsl_read_reg>
 8004b20:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	7a3b      	ldrb	r3, [r7, #8]
 8004b32:	f362 0302 	bfi	r3, r2, #0, #3
 8004b36:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004b38:	f107 0208 	add.w	r2, r7, #8
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	210a      	movs	r1, #10
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fd6d 	bl	8004620 <lsm6dsl_write_reg>
 8004b46:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004b62:	2301      	movs	r3, #1
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d036      	beq.n	8004bde <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d302      	bcc.n	8004b7a <IKS01A2_MOTION_SENSOR_Init+0x26>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d064      	beq.n	8004c42 <IKS01A2_MOTION_SENSOR_Init+0xee>
 8004b78:	e095      	b.n	8004ca6 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004b7a:	6838      	ldr	r0, [r7, #0]
 8004b7c:	f000 f966 	bl	8004e4c <LSM6DSL_0_Probe>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	e0cc      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004b8c:	4a68      	ldr	r2, [pc, #416]	; (8004d30 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4967      	ldr	r1, [pc, #412]	; (8004d34 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b9e:	f107 010c 	add.w	r1, r7, #12
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4798      	blx	r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004bac:	f06f 0306 	mvn.w	r3, #6
 8004bb0:	e0b9      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004bb2:	7b3b      	ldrb	r3, [r7, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d103      	bne.n	8004bc0 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004bc0:	7b7b      	ldrb	r3, [r7, #13]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d103      	bne.n	8004bce <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d16c      	bne.n	8004cae <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004bdc:	e067      	b.n	8004cae <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004bde:	6838      	ldr	r0, [r7, #0]
 8004be0:	f000 f9f0 	bl	8004fc4 <LSM303AGR_ACC_0_Probe>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e09a      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004bf0:	4a4f      	ldr	r2, [pc, #316]	; (8004d30 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	494e      	ldr	r1, [pc, #312]	; (8004d34 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c02:	f107 010c 	add.w	r1, r7, #12
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004c10:	f06f 0306 	mvn.w	r3, #6
 8004c14:	e087      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004c16:	7b3b      	ldrb	r3, [r7, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d103      	bne.n	8004c24 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004c24:	7b7b      	ldrb	r3, [r7, #13]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d103      	bne.n	8004c32 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004c32:	7bbb      	ldrb	r3, [r7, #14]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d13c      	bne.n	8004cb2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004c40:	e037      	b.n	8004cb2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8004c42:	6838      	ldr	r0, [r7, #0]
 8004c44:	f000 fa62 	bl	800510c <LSM303AGR_MAG_0_Probe>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e068      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004c54:	4a36      	ldr	r2, [pc, #216]	; (8004d30 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4935      	ldr	r1, [pc, #212]	; (8004d34 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c66:	f107 010c 	add.w	r1, r7, #12
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4798      	blx	r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004c74:	f06f 0306 	mvn.w	r3, #6
 8004c78:	e055      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004c7a:	7b3b      	ldrb	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d103      	bne.n	8004c88 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004c88:	7b7b      	ldrb	r3, [r7, #13]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d103      	bne.n	8004c96 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10c      	bne.n	8004cb6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004ca4:	e007      	b.n	8004cb6 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004ca6:	f06f 0301 	mvn.w	r3, #1
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004cac:	e004      	b.n	8004cb8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004cb6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	e031      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	e02a      	b.n	8004d1e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	4013      	ands	r3, r2
 8004cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d11e      	bne.n	8004d12 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8004cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	4013      	ands	r3, r2
 8004cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d118      	bne.n	8004d12 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ce8:	4814      	ldr	r0, [pc, #80]	; (8004d3c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	490e      	ldr	r1, [pc, #56]	; (8004d34 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d02:	4610      	mov	r0, r2
 8004d04:	4798      	blx	r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004d0c:	f06f 0304 	mvn.w	r3, #4
 8004d10:	e009      	b.n	8004d26 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d9d1      	bls.n	8004cc8 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3738      	adds	r7, #56	; 0x38
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200002f4 	.word	0x200002f4
 8004d34:	20000638 	.word	0x20000638
 8004d38:	200000c8 	.word	0x200000c8
 8004d3c:	200002d0 	.word	0x200002d0

08004d40 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d903      	bls.n	8004d58 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004d50:	f06f 0301 	mvn.w	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e028      	b.n	8004daa <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004d58:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4013      	ands	r3, r2
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d11c      	bne.n	8004da4 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d72:	4812      	ldr	r0, [pc, #72]	; (8004dbc <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	490e      	ldr	r1, [pc, #56]	; (8004dc0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4798      	blx	r3
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d96:	f06f 0304 	mvn.w	r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e005      	b.n	8004daa <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e002      	b.n	8004daa <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004da4:	f06f 0301 	mvn.w	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000300 	.word	0x20000300
 8004db8:	200000c8 	.word	0x200000c8
 8004dbc:	200002d0 	.word	0x200002d0
 8004dc0:	20000638 	.word	0x20000638

08004dc4 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d903      	bls.n	8004dde <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004dd6:	f06f 0301 	mvn.w	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e029      	b.n	8004e32 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004dde:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d11d      	bne.n	8004e2c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004df8:	4812      	ldr	r0, [pc, #72]	; (8004e44 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	440b      	add	r3, r1
 8004e04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	490f      	ldr	r1, [pc, #60]	; (8004e48 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004e1e:	f06f 0304 	mvn.w	r3, #4
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e005      	b.n	8004e32 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e002      	b.n	8004e32 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004e2c:	f06f 0301 	mvn.w	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004e32:	697b      	ldr	r3, [r7, #20]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000300 	.word	0x20000300
 8004e40:	200000c8 	.word	0x200000c8
 8004e44:	200002d0 	.word	0x200002d0
 8004e48:	20000638 	.word	0x20000638

08004e4c <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b092      	sub	sp, #72	; 0x48
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8004e5c:	23d7      	movs	r3, #215	; 0xd7
 8004e5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <LSM6DSL_0_Probe+0x140>)
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004e66:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <LSM6DSL_0_Probe+0x144>)
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <LSM6DSL_0_Probe+0x148>)
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004e6e:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <LSM6DSL_0_Probe+0x14c>)
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004e72:	4b4a      	ldr	r3, [pc, #296]	; (8004f9c <LSM6DSL_0_Probe+0x150>)
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8004e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4848      	ldr	r0, [pc, #288]	; (8004fa0 <LSM6DSL_0_Probe+0x154>)
 8004e7e:	f7fe fbc7 	bl	8003610 <LSM6DSL_RegisterBusIO>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e88:	f06f 0306 	mvn.w	r3, #6
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8e:	e077      	b.n	8004f80 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8004e90:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8004e94:	4619      	mov	r1, r3
 8004e96:	4842      	ldr	r0, [pc, #264]	; (8004fa0 <LSM6DSL_0_Probe+0x154>)
 8004e98:	f7fe fcb0 	bl	80037fc <LSM6DSL_ReadID>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004ea2:	f06f 0306 	mvn.w	r3, #6
 8004ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea8:	e06a      	b.n	8004f80 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8004eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eae:	2b6a      	cmp	r3, #106	; 0x6a
 8004eb0:	d003      	beq.n	8004eba <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004eb2:	f06f 0306 	mvn.w	r3, #6
 8004eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb8:	e062      	b.n	8004f80 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8004eba:	f107 0308 	add.w	r3, r7, #8
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4837      	ldr	r0, [pc, #220]	; (8004fa0 <LSM6DSL_0_Probe+0x154>)
 8004ec2:	f7fe fcb1 	bl	8003828 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8004ec6:	7a7b      	ldrb	r3, [r7, #9]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	7a3b      	ldrb	r3, [r7, #8]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	7abb      	ldrb	r3, [r7, #10]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <LSM6DSL_0_Probe+0x158>)
 8004ed8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8004eda:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <LSM6DSL_0_Probe+0x15c>)
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <LSM6DSL_0_Probe+0x154>)
 8004ede:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8004ee0:	4b32      	ldr	r3, [pc, #200]	; (8004fac <LSM6DSL_0_Probe+0x160>)
 8004ee2:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <LSM6DSL_0_Probe+0x164>)
 8004ee4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11d      	bne.n	8004f28 <LSM6DSL_0_Probe+0xdc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <LSM6DSL_0_Probe+0xdc>
 8004ef6:	7a7b      	ldrb	r3, [r7, #9]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d115      	bne.n	8004f28 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8004efc:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <LSM6DSL_0_Probe+0x168>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a2d      	ldr	r2, [pc, #180]	; (8004fb8 <LSM6DSL_0_Probe+0x16c>)
 8004f02:	492e      	ldr	r1, [pc, #184]	; (8004fbc <LSM6DSL_0_Probe+0x170>)
 8004f04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <LSM6DSL_0_Probe+0x160>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <LSM6DSL_0_Probe+0x15c>)
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	4610      	mov	r0, r2
 8004f14:	4798      	blx	r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f1c:	f06f 0304 	mvn.w	r3, #4
 8004f20:	647b      	str	r3, [r7, #68]	; 0x44
 8004f22:	e001      	b.n	8004f28 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8004f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11d      	bne.n	8004f6a <LSM6DSL_0_Probe+0x11e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <LSM6DSL_0_Probe+0x11e>
 8004f38:	7a3b      	ldrb	r3, [r7, #8]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d115      	bne.n	8004f6a <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <LSM6DSL_0_Probe+0x168>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <LSM6DSL_0_Probe+0x16c>)
 8004f44:	491e      	ldr	r1, [pc, #120]	; (8004fc0 <LSM6DSL_0_Probe+0x174>)
 8004f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <LSM6DSL_0_Probe+0x160>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <LSM6DSL_0_Probe+0x15c>)
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	4610      	mov	r0, r2
 8004f56:	4798      	blx	r3
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f5e:	f06f 0304 	mvn.w	r3, #4
 8004f62:	647b      	str	r3, [r7, #68]	; 0x44
 8004f64:	e001      	b.n	8004f6a <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d107      	bne.n	8004f80 <LSM6DSL_0_Probe+0x134>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f7a:	f06f 0304 	mvn.w	r3, #4
 8004f7e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8004f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3748      	adds	r7, #72	; 0x48
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08001a99 	.word	0x08001a99
 8004f90:	08001b15 	.word	0x08001b15
 8004f94:	08001bc9 	.word	0x08001bc9
 8004f98:	08001b65 	.word	0x08001b65
 8004f9c:	08001c2d 	.word	0x08001c2d
 8004fa0:	2000030c 	.word	0x2000030c
 8004fa4:	20000300 	.word	0x20000300
 8004fa8:	20000638 	.word	0x20000638
 8004fac:	200002f4 	.word	0x200002f4
 8004fb0:	20000070 	.word	0x20000070
 8004fb4:	200000c8 	.word	0x200000c8
 8004fb8:	200002d0 	.word	0x200002d0
 8004fbc:	200000a4 	.word	0x200000a4
 8004fc0:	20000080 	.word	0x20000080

08004fc4 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b092      	sub	sp, #72	; 0x48
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8004fd4:	2333      	movs	r3, #51	; 0x33
 8004fd6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <LSM303AGR_ACC_0_Probe+0x114>)
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <LSM303AGR_ACC_0_Probe+0x118>)
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <LSM303AGR_ACC_0_Probe+0x11c>)
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8004fe6:	4b3f      	ldr	r3, [pc, #252]	; (80050e4 <LSM303AGR_ACC_0_Probe+0x120>)
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <LSM303AGR_ACC_0_Probe+0x124>)
 8004fec:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8004fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	483d      	ldr	r0, [pc, #244]	; (80050ec <LSM303AGR_ACC_0_Probe+0x128>)
 8004ff6:	f7fc ffcb 	bl	8001f90 <LSM303AGR_ACC_RegisterBusIO>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005000:	f06f 0306 	mvn.w	r3, #6
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
 8005006:	e062      	b.n	80050ce <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005008:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800500c:	4619      	mov	r1, r3
 800500e:	4837      	ldr	r0, [pc, #220]	; (80050ec <LSM303AGR_ACC_0_Probe+0x128>)
 8005010:	f7fd f87f 	bl	8002112 <LSM303AGR_ACC_ReadID>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800501a:	f06f 0306 	mvn.w	r3, #6
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
 8005020:	e055      	b.n	80050ce <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005026:	2b33      	cmp	r3, #51	; 0x33
 8005028:	d003      	beq.n	8005032 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800502a:	f06f 0306 	mvn.w	r3, #6
 800502e:	647b      	str	r3, [r7, #68]	; 0x44
 8005030:	e04d      	b.n	80050ce <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	4619      	mov	r1, r3
 8005038:	482c      	ldr	r0, [pc, #176]	; (80050ec <LSM303AGR_ACC_0_Probe+0x128>)
 800503a:	f7fd f881 	bl	8002140 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800503e:	7a7b      	ldrb	r3, [r7, #9]
 8005040:	461a      	mov	r2, r3
 8005042:	7a3b      	ldrb	r3, [r7, #8]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005048:	7abb      	ldrb	r3, [r7, #10]
 800504a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800504c:	4313      	orrs	r3, r2
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005050:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005052:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <LSM303AGR_ACC_0_Probe+0x130>)
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <LSM303AGR_ACC_0_Probe+0x128>)
 8005056:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005058:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <LSM303AGR_ACC_0_Probe+0x134>)
 800505a:	4a28      	ldr	r2, [pc, #160]	; (80050fc <LSM303AGR_ACC_0_Probe+0x138>)
 800505c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11e      	bne.n	80050a2 <LSM303AGR_ACC_0_Probe+0xde>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d019      	beq.n	80050a2 <LSM303AGR_ACC_0_Probe+0xde>
 800506e:	7a3b      	ldrb	r3, [r7, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d116      	bne.n	80050a2 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005074:	4b22      	ldr	r3, [pc, #136]	; (8005100 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <LSM303AGR_ACC_0_Probe+0x140>)
 800507a:	3303      	adds	r3, #3
 800507c:	4922      	ldr	r1, [pc, #136]	; (8005108 <LSM303AGR_ACC_0_Probe+0x144>)
 800507e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <LSM303AGR_ACC_0_Probe+0x134>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <LSM303AGR_ACC_0_Probe+0x130>)
 800508a:	6852      	ldr	r2, [r2, #4]
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005096:	f06f 0304 	mvn.w	r3, #4
 800509a:	647b      	str	r3, [r7, #68]	; 0x44
 800509c:	e001      	b.n	80050a2 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800509e:	2300      	movs	r3, #0
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d107      	bne.n	80050b8 <LSM303AGR_ACC_0_Probe+0xf4>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80050b2:	f06f 0304 	mvn.w	r3, #4
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d107      	bne.n	80050ce <LSM303AGR_ACC_0_Probe+0x10a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80050c8:	f06f 0304 	mvn.w	r3, #4
 80050cc:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80050ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3748      	adds	r7, #72	; 0x48
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	08001a99 	.word	0x08001a99
 80050dc:	08001b15 	.word	0x08001b15
 80050e0:	08001bc9 	.word	0x08001bc9
 80050e4:	08001b65 	.word	0x08001b65
 80050e8:	08001c2d 	.word	0x08001c2d
 80050ec:	2000033c 	.word	0x2000033c
 80050f0:	20000300 	.word	0x20000300
 80050f4:	20000638 	.word	0x20000638
 80050f8:	200002f4 	.word	0x200002f4
 80050fc:	20000008 	.word	0x20000008
 8005100:	200000c8 	.word	0x200000c8
 8005104:	200002d0 	.word	0x200002d0
 8005108:	20000018 	.word	0x20000018

0800510c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b092      	sub	sp, #72	; 0x48
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005114:	2300      	movs	r3, #0
 8005116:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005118:	2300      	movs	r3, #0
 800511a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800511c:	233d      	movs	r3, #61	; 0x3d
 800511e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005122:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <LSM303AGR_MAG_0_Probe+0x114>)
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005126:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <LSM303AGR_MAG_0_Probe+0x118>)
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800512a:	4b3f      	ldr	r3, [pc, #252]	; (8005228 <LSM303AGR_MAG_0_Probe+0x11c>)
 800512c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800512e:	4b3f      	ldr	r3, [pc, #252]	; (800522c <LSM303AGR_MAG_0_Probe+0x120>)
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <LSM303AGR_MAG_0_Probe+0x124>)
 8005134:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513a:	4619      	mov	r1, r3
 800513c:	483d      	ldr	r0, [pc, #244]	; (8005234 <LSM303AGR_MAG_0_Probe+0x128>)
 800513e:	f7fd faeb 	bl	8002718 <LSM303AGR_MAG_RegisterBusIO>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005148:	f06f 0306 	mvn.w	r3, #6
 800514c:	647b      	str	r3, [r7, #68]	; 0x44
 800514e:	e062      	b.n	8005216 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005150:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005154:	4619      	mov	r1, r3
 8005156:	4837      	ldr	r0, [pc, #220]	; (8005234 <LSM303AGR_MAG_0_Probe+0x128>)
 8005158:	f7fd fb95 	bl	8002886 <LSM303AGR_MAG_ReadID>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005162:	f06f 0306 	mvn.w	r3, #6
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	e055      	b.n	8005216 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800516a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d003      	beq.n	800517a <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005172:	f06f 0306 	mvn.w	r3, #6
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
 8005178:	e04d      	b.n	8005216 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4619      	mov	r1, r3
 8005180:	482c      	ldr	r0, [pc, #176]	; (8005234 <LSM303AGR_MAG_0_Probe+0x128>)
 8005182:	f7fd fb97 	bl	80028b4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005186:	7a7b      	ldrb	r3, [r7, #9]
 8005188:	461a      	mov	r2, r3
 800518a:	7a3b      	ldrb	r3, [r7, #8]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005190:	7abb      	ldrb	r3, [r7, #10]
 8005192:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005194:	4313      	orrs	r3, r2
 8005196:	4a28      	ldr	r2, [pc, #160]	; (8005238 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005198:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800519a:	4b28      	ldr	r3, [pc, #160]	; (800523c <LSM303AGR_MAG_0_Probe+0x130>)
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <LSM303AGR_MAG_0_Probe+0x128>)
 800519e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <LSM303AGR_MAG_0_Probe+0x134>)
 80051a2:	4a28      	ldr	r2, [pc, #160]	; (8005244 <LSM303AGR_MAG_0_Probe+0x138>)
 80051a4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11e      	bne.n	80051ea <LSM303AGR_MAG_0_Probe+0xde>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d019      	beq.n	80051ea <LSM303AGR_MAG_0_Probe+0xde>
 80051b6:	7abb      	ldrb	r3, [r7, #10]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d116      	bne.n	80051ea <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80051bc:	4b22      	ldr	r3, [pc, #136]	; (8005248 <LSM303AGR_MAG_0_Probe+0x13c>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <LSM303AGR_MAG_0_Probe+0x140>)
 80051c2:	3306      	adds	r3, #6
 80051c4:	4922      	ldr	r1, [pc, #136]	; (8005250 <LSM303AGR_MAG_0_Probe+0x144>)
 80051c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <LSM303AGR_MAG_0_Probe+0x134>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	; (800523c <LSM303AGR_MAG_0_Probe+0x130>)
 80051d2:	6892      	ldr	r2, [r2, #8]
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051de:	f06f 0304 	mvn.w	r3, #4
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
 80051e4:	e001      	b.n	80051ea <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80051ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <LSM303AGR_MAG_0_Probe+0xf4>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80051fa:	f06f 0304 	mvn.w	r3, #4
 80051fe:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <LSM303AGR_MAG_0_Probe+0x10a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005210:	f06f 0304 	mvn.w	r3, #4
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005218:	4618      	mov	r0, r3
 800521a:	3748      	adds	r7, #72	; 0x48
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	08001a99 	.word	0x08001a99
 8005224:	08001b15 	.word	0x08001b15
 8005228:	08001bc9 	.word	0x08001bc9
 800522c:	08001b65 	.word	0x08001b65
 8005230:	08001c2d 	.word	0x08001c2d
 8005234:	20000368 	.word	0x20000368
 8005238:	20000300 	.word	0x20000300
 800523c:	20000638 	.word	0x20000638
 8005240:	200002f4 	.word	0x200002f4
 8005244:	2000003c 	.word	0x2000003c
 8005248:	200000c8 	.word	0x200000c8
 800524c:	200002d0 	.word	0x200002d0
 8005250:	2000004c 	.word	0x2000004c

08005254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_Init+0x3c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <HAL_Init+0x3c>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800526a:	2003      	movs	r0, #3
 800526c:	f000 f9a4 	bl	80055b8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005270:	2000      	movs	r0, #0
 8005272:	f000 f80f 	bl	8005294 <HAL_InitTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	71fb      	strb	r3, [r7, #7]
 8005280:	e001      	b.n	8005286 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005282:	f7fc facc 	bl	800181e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005286:	79fb      	ldrb	r3, [r7, #7]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	58004000 	.word	0x58004000

08005294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_InitTick+0x6c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d023      	beq.n	80052f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80052a8:	f002 fb76 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80052ac:	4601      	mov	r1, r0
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_InitTick+0x6c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f9bb 	bl	800563a <HAL_SYSTICK_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d809      	bhi.n	80052e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052d0:	2200      	movs	r2, #0
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	f000 f979 	bl	80055ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_InitTick+0x70>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e007      	b.n	80052f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e004      	b.n	80052f4 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	e001      	b.n	80052f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200000e0 	.word	0x200000e0
 8005304:	200000dc 	.word	0x200000dc

08005308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_IncTick+0x1c>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_IncTick+0x20>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4413      	add	r3, r2
 8005316:	4a03      	ldr	r2, [pc, #12]	; (8005324 <HAL_IncTick+0x1c>)
 8005318:	6013      	str	r3, [r2, #0]
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000644 	.word	0x20000644
 8005328:	200000e0 	.word	0x200000e0

0800532c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return uwTick;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_GetTick+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000644 	.word	0x20000644

08005344 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_GetTickPrio+0x14>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200000dc 	.word	0x200000dc

0800535c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <__NVIC_SetPriorityGrouping+0x44>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005378:	4013      	ands	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	60d3      	str	r3, [r2, #12]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <__NVIC_GetPriorityGrouping+0x18>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 0307 	and.w	r3, r3, #7
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	db0b      	blt.n	80053ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	f003 021f 	and.w	r2, r3, #31
 80053d8:	4907      	ldr	r1, [pc, #28]	; (80053f8 <__NVIC_EnableIRQ+0x38>)
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2001      	movs	r0, #1
 80053e2:	fa00 f202 	lsl.w	r2, r0, r2
 80053e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000e100 	.word	0xe000e100

080053fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db10      	blt.n	8005430 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4909      	ldr	r1, [pc, #36]	; (800543c <__NVIC_DisableIRQ+0x40>)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2001      	movs	r0, #1
 800541e:	fa00 f202 	lsl.w	r2, r0, r2
 8005422:	3320      	adds	r3, #32
 8005424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800542c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	e000e100 	.word	0xe000e100

08005440 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800544a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544e:	2b00      	cmp	r3, #0
 8005450:	db0c      	blt.n	800546c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	f003 021f 	and.w	r2, r3, #31
 8005458:	4907      	ldr	r1, [pc, #28]	; (8005478 <__NVIC_SetPendingIRQ+0x38>)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2001      	movs	r0, #1
 8005462:	fa00 f202 	lsl.w	r2, r0, r2
 8005466:	3340      	adds	r3, #64	; 0x40
 8005468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100

0800547c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548a:	2b00      	cmp	r3, #0
 800548c:	db0c      	blt.n	80054a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	f003 021f 	and.w	r2, r3, #31
 8005494:	4907      	ldr	r1, [pc, #28]	; (80054b4 <__NVIC_ClearPendingIRQ+0x38>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2001      	movs	r0, #1
 800549e:	fa00 f202 	lsl.w	r2, r0, r2
 80054a2:	3360      	adds	r3, #96	; 0x60
 80054a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000e100 	.word	0xe000e100

080054b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	db0a      	blt.n	80054e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	490c      	ldr	r1, [pc, #48]	; (8005504 <__NVIC_SetPriority+0x4c>)
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	0112      	lsls	r2, r2, #4
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	440b      	add	r3, r1
 80054dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e0:	e00a      	b.n	80054f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <__NVIC_SetPriority+0x50>)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3b04      	subs	r3, #4
 80054f0:	0112      	lsls	r2, r2, #4
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	440b      	add	r3, r1
 80054f6:	761a      	strb	r2, [r3, #24]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000e100 	.word	0xe000e100
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f1c3 0307 	rsb	r3, r3, #7
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf28      	it	cs
 800552a:	2304      	movcs	r3, #4
 800552c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3304      	adds	r3, #4
 8005532:	2b06      	cmp	r3, #6
 8005534:	d902      	bls.n	800553c <NVIC_EncodePriority+0x30>
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3b03      	subs	r3, #3
 800553a:	e000      	b.n	800553e <NVIC_EncodePriority+0x32>
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	401a      	ands	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005554:	f04f 31ff 	mov.w	r1, #4294967295
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	43d9      	mvns	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005564:	4313      	orrs	r3, r2
         );
}
 8005566:	4618      	mov	r0, r3
 8005568:	3724      	adds	r7, #36	; 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005584:	d301      	bcc.n	800558a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005586:	2301      	movs	r3, #1
 8005588:	e00f      	b.n	80055aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800558a:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <SysTick_Config+0x40>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005592:	210f      	movs	r1, #15
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	f7ff ff8e 	bl	80054b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <SysTick_Config+0x40>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <SysTick_Config+0x40>)
 80055a4:	2207      	movs	r2, #7
 80055a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	e000e010 	.word	0xe000e010

080055b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fecb 	bl	800535c <__NVIC_SetPriorityGrouping>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055dc:	f7ff fee2 	bl	80053a4 <__NVIC_GetPriorityGrouping>
 80055e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f7ff ff90 	bl	800550c <NVIC_EncodePriority>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff5f 	bl	80054b8 <__NVIC_SetPriority>
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	4603      	mov	r3, r0
 800560a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800560c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fed5 	bl	80053c0 <__NVIC_EnableIRQ>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fee5 	bl	80053fc <__NVIC_DisableIRQ>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff96 	bl	8005574 <SysTick_Config>
 8005648:	4603      	mov	r3, r0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	4603      	mov	r3, r0
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800565c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff feed 	bl	8005440 <__NVIC_SetPendingIRQ>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	4603      	mov	r3, r0
 8005676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fefd 	bl	800547c <__NVIC_ClearPendingIRQ>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d005      	beq.n	80056ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	e047      	b.n	800573e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 020e 	bic.w	r2, r2, #14
 80056bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	f003 021c 	and.w	r2, r3, #28
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f202 	lsl.w	r2, r1, r2
 80056f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005712:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800571c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
    }
  }
  return status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005756:	e14c      	b.n	80059f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2101      	movs	r1, #1
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 813e 	beq.w	80059ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d003      	beq.n	8005780 <HAL_GPIO_Init+0x38>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b12      	cmp	r3, #18
 800577e:	d123      	bne.n	80057c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	08da      	lsrs	r2, r3, #3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3208      	adds	r2, #8
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	08da      	lsrs	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3208      	adds	r2, #8
 80057c2:	6939      	ldr	r1, [r7, #16]
 80057c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	2203      	movs	r2, #3
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 0203 	and.w	r2, r3, #3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d00b      	beq.n	800581c <HAL_GPIO_Init+0xd4>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d007      	beq.n	800581c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005810:	2b11      	cmp	r3, #17
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b12      	cmp	r3, #18
 800581a:	d130      	bne.n	800587e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005852:	2201      	movs	r2, #1
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0201 	and.w	r2, r3, #1
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	2203      	movs	r2, #3
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8098 	beq.w	80059ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80058bc:	4a54      	ldr	r2, [pc, #336]	; (8005a10 <HAL_GPIO_Init+0x2c8>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	3302      	adds	r3, #2
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	220f      	movs	r2, #15
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058e6:	d019      	beq.n	800591c <HAL_GPIO_Init+0x1d4>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <HAL_GPIO_Init+0x2cc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_GPIO_Init+0x1d0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a49      	ldr	r2, [pc, #292]	; (8005a18 <HAL_GPIO_Init+0x2d0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00d      	beq.n	8005914 <HAL_GPIO_Init+0x1cc>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a48      	ldr	r2, [pc, #288]	; (8005a1c <HAL_GPIO_Init+0x2d4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <HAL_GPIO_Init+0x1c8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a47      	ldr	r2, [pc, #284]	; (8005a20 <HAL_GPIO_Init+0x2d8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_GPIO_Init+0x1c4>
 8005908:	2304      	movs	r3, #4
 800590a:	e008      	b.n	800591e <HAL_GPIO_Init+0x1d6>
 800590c:	2307      	movs	r3, #7
 800590e:	e006      	b.n	800591e <HAL_GPIO_Init+0x1d6>
 8005910:	2303      	movs	r3, #3
 8005912:	e004      	b.n	800591e <HAL_GPIO_Init+0x1d6>
 8005914:	2302      	movs	r3, #2
 8005916:	e002      	b.n	800591e <HAL_GPIO_Init+0x1d6>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_GPIO_Init+0x1d6>
 800591c:	2300      	movs	r3, #0
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	f002 0203 	and.w	r2, r2, #3
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	4093      	lsls	r3, r2
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800592e:	4938      	ldr	r1, [pc, #224]	; (8005a10 <HAL_GPIO_Init+0x2c8>)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	3302      	adds	r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800593c:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	43db      	mvns	r3, r3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005962:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800596a:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 800596c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	43db      	mvns	r3, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005990:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005998:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059c2:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059e6:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <HAL_GPIO_Init+0x2dc>)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3301      	adds	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f aeab 	bne.w	8005758 <HAL_GPIO_Init+0x10>
  }
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	48000400 	.word	0x48000400
 8005a18:	48000800 	.word	0x48000800
 8005a1c:	48000c00 	.word	0x48000c00
 8005a20:	48001000 	.word	0x48001000
 8005a24:	58000800 	.word	0x58000800

08005a28 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a36:	e0bb      	b.n	8005bb0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a38:	2201      	movs	r2, #1
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80ae 	beq.w	8005baa <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005a4e:	4a5f      	ldr	r2, [pc, #380]	; (8005bcc <HAL_GPIO_DeInit+0x1a4>)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	3302      	adds	r3, #2
 8005a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	220f      	movs	r2, #15
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a76:	d019      	beq.n	8005aac <HAL_GPIO_DeInit+0x84>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a55      	ldr	r2, [pc, #340]	; (8005bd0 <HAL_GPIO_DeInit+0x1a8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_GPIO_DeInit+0x80>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a54      	ldr	r2, [pc, #336]	; (8005bd4 <HAL_GPIO_DeInit+0x1ac>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00d      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x7c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a53      	ldr	r2, [pc, #332]	; (8005bd8 <HAL_GPIO_DeInit+0x1b0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <HAL_GPIO_DeInit+0x78>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a52      	ldr	r2, [pc, #328]	; (8005bdc <HAL_GPIO_DeInit+0x1b4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_GPIO_DeInit+0x74>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e008      	b.n	8005aae <HAL_GPIO_DeInit+0x86>
 8005a9c:	2307      	movs	r3, #7
 8005a9e:	e006      	b.n	8005aae <HAL_GPIO_DeInit+0x86>
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e004      	b.n	8005aae <HAL_GPIO_DeInit+0x86>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e002      	b.n	8005aae <HAL_GPIO_DeInit+0x86>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_GPIO_DeInit+0x86>
 8005aac:	2300      	movs	r3, #0
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	f002 0203 	and.w	r2, r2, #3
 8005ab4:	0092      	lsls	r2, r2, #2
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d136      	bne.n	8005b2c <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005ace:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <HAL_GPIO_DeInit+0x1a4>)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	43da      	mvns	r2, r3
 8005ade:	483b      	ldr	r0, [pc, #236]	; (8005bcc <HAL_GPIO_DeInit+0x1a4>)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	400a      	ands	r2, r1
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005aec:	4b3c      	ldr	r3, [pc, #240]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005aee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	493a      	ldr	r1, [pc, #232]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005afe:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	4935      	ldr	r1, [pc, #212]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005b10:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	43db      	mvns	r3, r3
 8005b18:	4931      	ldr	r1, [pc, #196]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005b1e:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	492e      	ldr	r1, [pc, #184]	; (8005be0 <HAL_GPIO_DeInit+0x1b8>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	2103      	movs	r1, #3
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	08da      	lsrs	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3208      	adds	r2, #8
 8005b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	220f      	movs	r2, #15
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	08d2      	lsrs	r2, r2, #3
 8005b60:	4019      	ands	r1, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3208      	adds	r2, #8
 8005b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	2103      	movs	r1, #3
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	2101      	movs	r1, #1
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	401a      	ands	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	2103      	movs	r1, #3
 8005b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	3301      	adds	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f af3d 	bne.w	8005a38 <HAL_GPIO_DeInit+0x10>
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	48000400 	.word	0x48000400
 8005bd4:	48000800 	.word	0x48000800
 8005bd8:	48000c00 	.word	0x48000c00
 8005bdc:	48001000 	.word	0x48001000
 8005be0:	58000800 	.word	0x58000800

08005be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bf4:	787b      	ldrb	r3, [r7, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bfa:	887a      	ldrh	r2, [r7, #2]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c00:	e002      	b.n	8005c08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c02:	887a      	ldrh	r2, [r7, #2]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c2c:	887a      	ldrh	r2, [r7, #2]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005c32:	e002      	b.n	8005c3a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	619a      	str	r2, [r3, #24]
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c5e:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f806 	bl	8005c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	58000800 	.word	0x58000800

08005c78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e081      	b.n	8005da4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f8a8 	bl	8005e0a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2224      	movs	r2, #36	; 0x24
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d107      	bne.n	8005d08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	e006      	b.n	8005d16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d104      	bne.n	8005d28 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	021a      	lsls	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69d9      	ldr	r1, [r3, #28]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e021      	b.n	8005e02 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	; 0x24
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f821 	bl	8005e1e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	817b      	strh	r3, [r7, #10]
 8005e46:	460b      	mov	r3, r1
 8005e48:	813b      	strh	r3, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	f040 80f9 	bne.w	800604e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_I2C_Mem_Write+0x34>
 8005e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0ed      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2C_Mem_Write+0x4e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e0e6      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e8a:	f7ff fa4f 	bl	800532c <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2319      	movs	r3, #25
 8005e96:	2201      	movs	r2, #1
 8005e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fadd 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0d1      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	; 0x21
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2240      	movs	r2, #64	; 0x40
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ed4:	88f8      	ldrh	r0, [r7, #6]
 8005ed6:	893a      	ldrh	r2, [r7, #8]
 8005ed8:	8979      	ldrh	r1, [r7, #10]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f9ed 	bl	80062c4 <I2C_RequestMemoryWrite>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0a9      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2bff      	cmp	r3, #255	; 0xff
 8005f04:	d90e      	bls.n	8005f24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	22ff      	movs	r2, #255	; 0xff
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	8979      	ldrh	r1, [r7, #10]
 8005f14:	2300      	movs	r3, #0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fbbf 	bl	80066a0 <I2C_TransferConfig>
 8005f22:	e00f      	b.n	8005f44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	8979      	ldrh	r1, [r7, #10]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fbae 	bl	80066a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fac7 	bl	80064dc <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e07b      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d034      	beq.n	8005ffc <HAL_I2C_Mem_Write+0x1c8>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d130      	bne.n	8005ffc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa59 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e04d      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2bff      	cmp	r3, #255	; 0xff
 8005fbc:	d90e      	bls.n	8005fdc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	22ff      	movs	r2, #255	; 0xff
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	8979      	ldrh	r1, [r7, #10]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fb63 	bl	80066a0 <I2C_TransferConfig>
 8005fda:	e00f      	b.n	8005ffc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	8979      	ldrh	r1, [r7, #10]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fb52 	bl	80066a0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d19e      	bne.n	8005f44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 faa6 	bl	800655c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e01a      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2220      	movs	r2, #32
 8006020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <HAL_I2C_Mem_Write+0x224>)
 800602e:	400b      	ands	r3, r1
 8006030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	fe00e800 	.word	0xfe00e800

0800605c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	f040 80fd 	bne.w	800627e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_I2C_Mem_Read+0x34>
 800608a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006096:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0f1      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_I2C_Mem_Read+0x4e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e0ea      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060b2:	f7ff f93b 	bl	800532c <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2319      	movs	r3, #25
 80060be:	2201      	movs	r2, #1
 80060c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f9c9 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0d5      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2222      	movs	r2, #34	; 0x22
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060fc:	88f8      	ldrh	r0, [r7, #6]
 80060fe:	893a      	ldrh	r2, [r7, #8]
 8006100:	8979      	ldrh	r1, [r7, #10]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4603      	mov	r3, r0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f92d 	bl	800636c <I2C_RequestMemoryRead>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0ad      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2bff      	cmp	r3, #255	; 0xff
 800612c:	d90e      	bls.n	800614c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	b2da      	uxtb	r2, r3
 800613a:	8979      	ldrh	r1, [r7, #10]
 800613c:	4b52      	ldr	r3, [pc, #328]	; (8006288 <HAL_I2C_Mem_Read+0x22c>)
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 faab 	bl	80066a0 <I2C_TransferConfig>
 800614a:	e00f      	b.n	800616c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615a:	b2da      	uxtb	r2, r3
 800615c:	8979      	ldrh	r1, [r7, #10]
 800615e:	4b4a      	ldr	r3, [pc, #296]	; (8006288 <HAL_I2C_Mem_Read+0x22c>)
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa9a 	bl	80066a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2200      	movs	r2, #0
 8006174:	2104      	movs	r1, #4
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f970 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e07c      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d034      	beq.n	800622c <HAL_I2C_Mem_Read+0x1d0>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d130      	bne.n	800622c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	; 0x80
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f941 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e04d      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2bff      	cmp	r3, #255	; 0xff
 80061ec:	d90e      	bls.n	800620c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	8979      	ldrh	r1, [r7, #10]
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fa4b 	bl	80066a0 <I2C_TransferConfig>
 800620a:	e00f      	b.n	800622c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	b2da      	uxtb	r2, r3
 800621c:	8979      	ldrh	r1, [r7, #10]
 800621e:	2300      	movs	r3, #0
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fa3a 	bl	80066a0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d19a      	bne.n	800616c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f98e 	bl	800655c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e01a      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2220      	movs	r2, #32
 8006250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_I2C_Mem_Read+0x230>)
 800625e:	400b      	ands	r3, r1
 8006260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	80002400 	.word	0x80002400
 800628c:	fe00e800 	.word	0xfe00e800

08006290 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	460b      	mov	r3, r1
 80062d8:	813b      	strh	r3, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	8979      	ldrh	r1, [r7, #10]
 80062e4:	4b20      	ldr	r3, [pc, #128]	; (8006368 <I2C_RequestMemoryWrite+0xa4>)
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f9d7 	bl	80066a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	69b9      	ldr	r1, [r7, #24]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f8f0 	bl	80064dc <I2C_WaitOnTXISFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e02c      	b.n	8006360 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d105      	bne.n	8006318 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
 8006316:	e015      	b.n	8006344 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	0a1b      	lsrs	r3, r3, #8
 800631c:	b29b      	uxth	r3, r3
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f8d6 	bl	80064dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e012      	b.n	8006360 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800633a:	893b      	ldrh	r3, [r7, #8]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2200      	movs	r2, #0
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f884 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	80002000 	.word	0x80002000

0800636c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	4608      	mov	r0, r1
 8006376:	4611      	mov	r1, r2
 8006378:	461a      	mov	r2, r3
 800637a:	4603      	mov	r3, r0
 800637c:	817b      	strh	r3, [r7, #10]
 800637e:	460b      	mov	r3, r1
 8006380:	813b      	strh	r3, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	8979      	ldrh	r1, [r7, #10]
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <I2C_RequestMemoryRead+0xa4>)
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2300      	movs	r3, #0
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f984 	bl	80066a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	69b9      	ldr	r1, [r7, #24]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f89d 	bl	80064dc <I2C_WaitOnTXISFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e02c      	b.n	8006406 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d105      	bne.n	80063be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063b2:	893b      	ldrh	r3, [r7, #8]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
 80063bc:	e015      	b.n	80063ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f883 	bl	80064dc <I2C_WaitOnTXISFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e012      	b.n	8006406 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063e0:	893b      	ldrh	r3, [r7, #8]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2200      	movs	r2, #0
 80063f2:	2140      	movs	r1, #64	; 0x40
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f831 	bl	800645c <I2C_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	80002000 	.word	0x80002000

08006414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d103      	bne.n	8006432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d007      	beq.n	8006450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	619a      	str	r2, [r3, #24]
  }
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800646c:	e022      	b.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d01e      	beq.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fe ff59 	bl	800532c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d113      	bne.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	f043 0220 	orr.w	r2, r3, #32
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e00f      	b.n	80064d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4013      	ands	r3, r2
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d0cd      	beq.n	800646e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064e8:	e02c      	b.n	8006544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f870 	bl	80065d4 <I2C_IsAcknowledgeFailed>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e02a      	b.n	8006554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d01e      	beq.n	8006544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006506:	f7fe ff11 	bl	800532c <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d113      	bne.n	8006544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	f043 0220 	orr.w	r2, r3, #32
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e007      	b.n	8006554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d1cb      	bne.n	80064ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006568:	e028      	b.n	80065bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f830 	bl	80065d4 <I2C_IsAcknowledgeFailed>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e026      	b.n	80065cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fe fed5 	bl	800532c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d113      	bne.n	80065bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e007      	b.n	80065cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d1cf      	bne.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d151      	bne.n	8006692 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ee:	e022      	b.n	8006636 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d01e      	beq.n	8006636 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f8:	f7fe fe98 	bl	800532c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	429a      	cmp	r2, r3
 8006606:	d302      	bcc.n	800660e <I2C_IsAcknowledgeFailed+0x3a>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d113      	bne.n	8006636 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f043 0220 	orr.w	r2, r3, #32
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e02e      	b.n	8006694 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b20      	cmp	r3, #32
 8006642:	d1d5      	bne.n	80065f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2210      	movs	r2, #16
 800664a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2220      	movs	r2, #32
 8006652:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fedd 	bl	8006414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <I2C_IsAcknowledgeFailed+0xc8>)
 8006666:	400b      	ands	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	fe00e800 	.word	0xfe00e800

080066a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	4613      	mov	r3, r2
 80066b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	0d5b      	lsrs	r3, r3, #21
 80066bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <I2C_TransferConfig+0x58>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	43db      	mvns	r3, r3
 80066c6:	ea02 0103 	and.w	r1, r2, r3
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80066d0:	7a7b      	ldrb	r3, [r7, #9]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	431a      	orrs	r2, r3
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	03ff63ff 	.word	0x03ff63ff

080066fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b20      	cmp	r3, #32
 8006710:	d138      	bne.n	8006784 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800671c:	2302      	movs	r3, #2
 800671e:	e032      	b.n	8006786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2224      	movs	r2, #36	; 0x24
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800674e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6819      	ldr	r1, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	e000      	b.n	8006786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d139      	bne.n	800681c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e033      	b.n	800681e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	; 0x24
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a04      	ldr	r2, [pc, #16]	; (8006848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	6013      	str	r3, [r2, #0]
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	58000400 	.word	0x58000400

0800684c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <HAL_PWREx_GetVoltageRange+0x18>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	58000400 	.word	0x58000400

08006868 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800686c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687a:	d101      	bne.n	8006880 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <LL_RCC_HSE_EnableBypass>:
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800689a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <LL_RCC_HSE_DisableBypass>:
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068bc:	6013      	str	r3, [r2, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <LL_RCC_HSE_Enable>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <LL_RCC_HSE_Disable>:
{
 80068e6:	b480      	push	{r7}
 80068e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f8:	6013      	str	r3, [r2, #0]
}
 80068fa:	bf00      	nop
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <LL_RCC_HSE_IsReady>:
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006916:	d101      	bne.n	800691c <LL_RCC_HSE_IsReady+0x18>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <LL_RCC_HSE_IsReady+0x1a>
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <LL_RCC_HSI_Enable>:
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <LL_RCC_HSI_Disable>:
{
 8006946:	b480      	push	{r7}
 8006948:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_HSI_IsReady>:
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d101      	bne.n	800697c <LL_RCC_HSI_IsReady+0x18>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <LL_RCC_HSI_IsReady+0x1a>
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <LL_RCC_HSI48_Enable>:
{
 80069b2:	b480      	push	{r7}
 80069b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80069ca:	bf00      	nop
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <LL_RCC_HSI48_Disable>:
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <LL_RCC_HSI48_IsReady>:
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d101      	bne.n	8006a0e <LL_RCC_HSI48_IsReady+0x18>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <LL_RCC_HSI48_IsReady+0x1a>
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <LL_RCC_LSE_Enable>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <LL_RCC_LSE_Disable>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_LSE_EnableBypass>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a6e:	f043 0304 	orr.w	r3, r3, #4
 8006a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <LL_RCC_LSE_DisableBypass>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a90:	f023 0304 	bic.w	r3, r3, #4
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a98:	bf00      	nop
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <LL_RCC_LSE_IsReady>:
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d101      	bne.n	8006aba <LL_RCC_LSE_IsReady+0x18>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <LL_RCC_LSE_IsReady+0x1a>
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_RCC_LSI1_Enable>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ade:	bf00      	nop
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <LL_RCC_LSI1_Disable>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <LL_RCC_LSI1_IsReady>:
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d101      	bne.n	8006b22 <LL_RCC_LSI1_IsReady+0x18>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <LL_RCC_LSI1_IsReady+0x1a>
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <LL_RCC_LSI2_Enable>:
{
 8006b2e:	b480      	push	{r7}
 8006b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b3e:	f043 0304 	orr.w	r3, r3, #4
 8006b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <LL_RCC_LSI2_Disable>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b60:	f023 0304 	bic.w	r3, r3, #4
 8006b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b68:	bf00      	nop
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_LSI2_IsReady>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d101      	bne.n	8006b8a <LL_RCC_LSI2_IsReady+0x18>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <LL_RCC_LSI2_IsReady+0x1a>
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_RCC_LSI2_SetTrimming>:
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ba6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_RCC_MSI_Enable>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bd2:	f043 0301 	orr.w	r3, r3, #1
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <LL_RCC_MSI_Disable>:
{
 8006be2:	b480      	push	{r7}
 8006be4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	6013      	str	r3, [r2, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <LL_RCC_MSI_IsReady>:
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d101      	bne.n	8006c16 <LL_RCC_MSI_IsReady+0x16>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <LL_RCC_MSI_IsReady+0x18>
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <LL_RCC_MSI_SetRange>:
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <LL_RCC_MSI_GetRange>:
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2bb0      	cmp	r3, #176	; 0xb0
 8006c60:	d901      	bls.n	8006c66 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006c62:	23b0      	movs	r3, #176	; 0xb0
 8006c64:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006c66:	687b      	ldr	r3, [r7, #4]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <LL_RCC_SetSysClkSource>:
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 0203 	bic.w	r2, r3, #3
 8006cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <LL_RCC_GetSysClkSource>:
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 030c 	and.w	r3, r3, #12
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_SetAHBPrescaler>:
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_SetAHB4Prescaler>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d42:	f023 020f 	bic.w	r2, r3, #15
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_RCC_SetAPB1Prescaler>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_RCC_SetAPB2Prescaler>:
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	608b      	str	r3, [r1, #8]
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_GetAHBPrescaler>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <LL_RCC_GetAHB4Prescaler>:
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_GetAPB1Prescaler>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_RCC_GetAPB2Prescaler>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e32:	b480      	push	{r7}
 8006e34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e44:	6013      	str	r3, [r2, #0]
}
 8006e46:	bf00      	nop
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e62:	d101      	bne.n	8006e68 <LL_RCC_PLL_IsReady+0x18>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <LL_RCC_PLL_IsReady+0x1a>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d101      	bne.n	8006eee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006efa:	b480      	push	{r7}
 8006efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f0e:	d101      	bne.n	8006f14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f34:	d101      	bne.n	8006f3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f46:	b480      	push	{r7}
 8006f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f58:	d101      	bne.n	8006f5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f7c:	d101      	bne.n	8006f82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b08b      	sub	sp, #44	; 0x2c
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e34b      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 808f 	beq.w	80070ce <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fb0:	f7ff fe89 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 8006fb4:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fb6:	f7ff ff82 	bl	8006ebe <LL_RCC_PLL_GetMainSource>
 8006fba:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RCC_OscConfig+0x3e>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	2b0c      	cmp	r3, #12
 8006fc6:	d149      	bne.n	800705c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d146      	bne.n	800705c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fce:	f7ff fe17 	bl	8006c00 <LL_RCC_MSI_IsReady>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x54>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e32a      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006fe8:	f7ff fe2f 	bl	8006c4a <LL_RCC_MSI_GetRange>
 8006fec:	4603      	mov	r3, r0
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d914      	bls.n	800701c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd0e 	bl	8007a18 <RCC_SetFlashLatencyFromMSIRange>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e319      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fe09 	bl	8006c22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fe2d 	bl	8006c74 <LL_RCC_MSI_SetCalibTrimming>
 800701a:	e013      	b.n	8007044 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fdfe 	bl	8006c22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fe22 	bl	8006c74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fcef 	bl	8007a18 <RCC_SetFlashLatencyFromMSIRange>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e2fa      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8007044:	f7fa feca 	bl	8001ddc <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007048:	4bb4      	ldr	r3, [pc, #720]	; (800731c <HAL_RCC_OscConfig+0x38c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe f921 	bl	8005294 <HAL_InitTick>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d039      	beq.n	80070cc <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e2ee      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01e      	beq.n	80070a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007064:	f7ff fdae 	bl	8006bc4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007068:	f7fe f960 	bl	800532c <HAL_GetTick>
 800706c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007070:	f7fe f95c 	bl	800532c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e2db      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007082:	f7ff fdbd 	bl	8006c00 <LL_RCC_MSI_IsReady>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f1      	beq.n	8007070 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fdc6 	bl	8006c22 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fdea 	bl	8006c74 <LL_RCC_MSI_SetCalibTrimming>
 80070a0:	e015      	b.n	80070ce <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070a2:	f7ff fd9e 	bl	8006be2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070a6:	f7fe f941 	bl	800532c <HAL_GetTick>
 80070aa:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070ae:	f7fe f93d 	bl	800532c <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e2bc      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 80070c0:	f7ff fd9e 	bl	8006c00 <LL_RCC_MSI_IsReady>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f1      	bne.n	80070ae <HAL_RCC_OscConfig+0x11e>
 80070ca:	e000      	b.n	80070ce <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d05a      	beq.n	8007190 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070da:	f7ff fdf4 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 80070de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070e0:	f7ff feed 	bl	8006ebe <LL_RCC_PLL_GetMainSource>
 80070e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d005      	beq.n	80070f8 <HAL_RCC_OscConfig+0x168>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b0c      	cmp	r3, #12
 80070f0:	d10d      	bne.n	800710e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d10a      	bne.n	800710e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f8:	f7ff fc04 	bl	8006904 <LL_RCC_HSE_IsReady>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d045      	beq.n	800718e <HAL_RCC_OscConfig+0x1fe>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d141      	bne.n	800718e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e295      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d102      	bne.n	800711e <HAL_RCC_OscConfig+0x18e>
 8007118:	f7ff fbd6 	bl	80068c8 <LL_RCC_HSE_Enable>
 800711c:	e00d      	b.n	800713a <HAL_RCC_OscConfig+0x1aa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007126:	d104      	bne.n	8007132 <HAL_RCC_OscConfig+0x1a2>
 8007128:	f7ff fbb0 	bl	800688c <LL_RCC_HSE_EnableBypass>
 800712c:	f7ff fbcc 	bl	80068c8 <LL_RCC_HSE_Enable>
 8007130:	e003      	b.n	800713a <HAL_RCC_OscConfig+0x1aa>
 8007132:	f7ff fbd8 	bl	80068e6 <LL_RCC_HSE_Disable>
 8007136:	f7ff fbb8 	bl	80068aa <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d012      	beq.n	8007168 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007142:	f7fe f8f3 	bl	800532c <HAL_GetTick>
 8007146:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007148:	e008      	b.n	800715c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714a:	f7fe f8ef 	bl	800532c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b64      	cmp	r3, #100	; 0x64
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e26e      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800715c:	f7ff fbd2 	bl	8006904 <LL_RCC_HSE_IsReady>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f1      	beq.n	800714a <HAL_RCC_OscConfig+0x1ba>
 8007166:	e013      	b.n	8007190 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fe f8e0 	bl	800532c <HAL_GetTick>
 800716c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007170:	f7fe f8dc 	bl	800532c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e25b      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007182:	f7ff fbbf 	bl	8006904 <LL_RCC_HSE_IsReady>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f1      	bne.n	8007170 <HAL_RCC_OscConfig+0x1e0>
 800718c:	e000      	b.n	8007190 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800718e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d051      	beq.n	8007240 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800719c:	f7ff fd93 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 80071a0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071a2:	f7ff fe8c 	bl	8006ebe <LL_RCC_PLL_GetMainSource>
 80071a6:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d005      	beq.n	80071ba <HAL_RCC_OscConfig+0x22a>
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	d113      	bne.n	80071dc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d110      	bne.n	80071dc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ba:	f7ff fbd3 	bl	8006964 <LL_RCC_HSI_IsReady>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_OscConfig+0x240>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e234      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fbd7 	bl	8006988 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071da:	e031      	b.n	8007240 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d019      	beq.n	8007218 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071e4:	f7ff fba0 	bl	8006928 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e8:	f7fe f8a0 	bl	800532c <HAL_GetTick>
 80071ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f0:	f7fe f89c 	bl	800532c <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e21b      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007202:	f7ff fbaf 	bl	8006964 <LL_RCC_HSI_IsReady>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f1      	beq.n	80071f0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fbb9 	bl	8006988 <LL_RCC_HSI_SetCalibTrimming>
 8007216:	e013      	b.n	8007240 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007218:	f7ff fb95 	bl	8006946 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fe f886 	bl	800532c <HAL_GetTick>
 8007220:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007224:	f7fe f882 	bl	800532c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e201      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007236:	f7ff fb95 	bl	8006964 <LL_RCC_HSI_IsReady>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f1      	bne.n	8007224 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a2 	beq.w	800739e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d075      	beq.n	800734e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	d046      	beq.n	80072fc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800726e:	f7ff fc4c 	bl	8006b0a <LL_RCC_LSI1_IsReady>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d113      	bne.n	80072a0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007278:	f7ff fc25 	bl	8006ac6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800727c:	f7fe f856 	bl	800532c <HAL_GetTick>
 8007280:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007284:	f7fe f852 	bl	800532c <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e1d1      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007296:	f7ff fc38 	bl	8006b0a <LL_RCC_LSI1_IsReady>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0f1      	beq.n	8007284 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80072a0:	f7ff fc45 	bl	8006b2e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fe f842 	bl	800532c <HAL_GetTick>
 80072a8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072ac:	f7fe f83e 	bl	800532c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e1bd      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072be:	f7ff fc58 	bl	8006b72 <LL_RCC_LSI2_IsReady>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f1      	beq.n	80072ac <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fc62 	bl	8006b96 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80072d2:	f7ff fc09 	bl	8006ae8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d6:	f7fe f829 	bl	800532c <HAL_GetTick>
 80072da:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072de:	f7fe f825 	bl	800532c <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e1a4      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072f0:	f7ff fc0b 	bl	8006b0a <LL_RCC_LSI1_IsReady>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f1      	bne.n	80072de <HAL_RCC_OscConfig+0x34e>
 80072fa:	e050      	b.n	800739e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80072fc:	f7ff fbe3 	bl	8006ac6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007300:	f7fe f814 	bl	800532c <HAL_GetTick>
 8007304:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007306:	e00b      	b.n	8007320 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007308:	f7fe f810 	bl	800532c <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d904      	bls.n	8007320 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e18f      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
 800731a:	bf00      	nop
 800731c:	200000dc 	.word	0x200000dc
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007320:	f7ff fbf3 	bl	8006b0a <LL_RCC_LSI1_IsReady>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800732a:	f7ff fc11 	bl	8006b50 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007330:	f7fd fffc 	bl	800532c <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e17b      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007342:	f7ff fc16 	bl	8006b72 <LL_RCC_LSI2_IsReady>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f1      	bne.n	8007330 <HAL_RCC_OscConfig+0x3a0>
 800734c:	e027      	b.n	800739e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800734e:	f7ff fbff 	bl	8006b50 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007352:	f7fd ffeb 	bl	800532c <HAL_GetTick>
 8007356:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800735a:	f7fd ffe7 	bl	800532c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b03      	cmp	r3, #3
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e166      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800736c:	f7ff fc01 	bl	8006b72 <LL_RCC_LSI2_IsReady>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f1      	bne.n	800735a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007376:	f7ff fbb7 	bl	8006ae8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737a:	f7fd ffd7 	bl	800532c <HAL_GetTick>
 800737e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007382:	f7fd ffd3 	bl	800532c <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e152      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007394:	f7ff fbb9 	bl	8006b0a <LL_RCC_LSI1_IsReady>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f1      	bne.n	8007382 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05b      	beq.n	8007462 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073aa:	4ba6      	ldr	r3, [pc, #664]	; (8007644 <HAL_RCC_OscConfig+0x6b4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d114      	bne.n	80073e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80073b6:	f7ff fa39 	bl	800682c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ba:	f7fd ffb7 	bl	800532c <HAL_GetTick>
 80073be:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c2:	f7fd ffb3 	bl	800532c <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e132      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d4:	4b9b      	ldr	r3, [pc, #620]	; (8007644 <HAL_RCC_OscConfig+0x6b4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0f0      	beq.n	80073c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <HAL_RCC_OscConfig+0x45e>
 80073e8:	f7ff fb17 	bl	8006a1a <LL_RCC_LSE_Enable>
 80073ec:	e00c      	b.n	8007408 <HAL_RCC_OscConfig+0x478>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	d104      	bne.n	8007400 <HAL_RCC_OscConfig+0x470>
 80073f6:	f7ff fb32 	bl	8006a5e <LL_RCC_LSE_EnableBypass>
 80073fa:	f7ff fb0e 	bl	8006a1a <LL_RCC_LSE_Enable>
 80073fe:	e003      	b.n	8007408 <HAL_RCC_OscConfig+0x478>
 8007400:	f7ff fb1c 	bl	8006a3c <LL_RCC_LSE_Disable>
 8007404:	f7ff fb3c 	bl	8006a80 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d014      	beq.n	800743a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007410:	f7fd ff8c 	bl	800532c <HAL_GetTick>
 8007414:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007416:	e00a      	b.n	800742e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007418:	f7fd ff88 	bl	800532c <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	f241 3288 	movw	r2, #5000	; 0x1388
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e105      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800742e:	f7ff fb38 	bl	8006aa2 <LL_RCC_LSE_IsReady>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0ef      	beq.n	8007418 <HAL_RCC_OscConfig+0x488>
 8007438:	e013      	b.n	8007462 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743a:	f7fd ff77 	bl	800532c <HAL_GetTick>
 800743e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007440:	e00a      	b.n	8007458 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007442:	f7fd ff73 	bl	800532c <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e0f0      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007458:	f7ff fb23 	bl	8006aa2 <LL_RCC_LSE_IsReady>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1ef      	bne.n	8007442 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02c      	beq.n	80074c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007476:	f7ff fa9c 	bl	80069b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747a:	f7fd ff57 	bl	800532c <HAL_GetTick>
 800747e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007480:	e008      	b.n	8007494 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007482:	f7fd ff53 	bl	800532c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e0d2      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007494:	f7ff faaf 	bl	80069f6 <LL_RCC_HSI48_IsReady>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0f1      	beq.n	8007482 <HAL_RCC_OscConfig+0x4f2>
 800749e:	e013      	b.n	80074c8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074a0:	f7ff fa98 	bl	80069d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fd ff42 	bl	800532c <HAL_GetTick>
 80074a8:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ac:	f7fd ff3e 	bl	800532c <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e0bd      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074be:	f7ff fa9a 	bl	80069f6 <LL_RCC_HSI48_IsReady>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1f1      	bne.n	80074ac <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80b3 	beq.w	8007638 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074d2:	f7ff fbf8 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b0c      	cmp	r3, #12
 80074da:	d076      	beq.n	80075ca <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d14b      	bne.n	800757c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e4:	f7ff fca5 	bl	8006e32 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fd ff20 	bl	800532c <HAL_GetTick>
 80074ec:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fd ff1c 	bl	800532c <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e09b      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007502:	f7ff fca5 	bl	8006e50 <LL_RCC_PLL_IsReady>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f1      	bne.n	80074f0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800750c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	4b4d      	ldr	r3, [pc, #308]	; (8007648 <HAL_RCC_OscConfig+0x6b8>)
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800751e:	4311      	orrs	r1, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007524:	0212      	lsls	r2, r2, #8
 8007526:	4311      	orrs	r1, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800752c:	4311      	orrs	r1, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007532:	4311      	orrs	r1, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007538:	430a      	orrs	r2, r1
 800753a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800753e:	4313      	orrs	r3, r2
 8007540:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007542:	f7ff fc67 	bl	8006e14 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007556:	f7fd fee9 	bl	800532c <HAL_GetTick>
 800755a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755e:	f7fd fee5 	bl	800532c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e064      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007570:	f7ff fc6e 	bl	8006e50 <LL_RCC_PLL_IsReady>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f1      	beq.n	800755e <HAL_RCC_OscConfig+0x5ce>
 800757a:	e05d      	b.n	8007638 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757c:	f7ff fc59 	bl	8006e32 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8007590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800759a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800759e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fd fec2 	bl	800532c <HAL_GetTick>
 80075a8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fd febe 	bl	800532c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e03d      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80075be:	f7ff fc47 	bl	8006e50 <LL_RCC_PLL_IsReady>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f1      	bne.n	80075ac <HAL_RCC_OscConfig+0x61c>
 80075c8:	e036      	b.n	8007638 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e031      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80075d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f003 0203 	and.w	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d123      	bne.n	8007634 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d11c      	bne.n	8007634 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007606:	429a      	cmp	r2, r3
 8007608:	d114      	bne.n	8007634 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d10d      	bne.n	8007634 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d106      	bne.n	8007634 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	372c      	adds	r7, #44	; 0x2c
 800763e:	46bd      	mov	sp, r7
 8007640:	bd90      	pop	{r4, r7, pc}
 8007642:	bf00      	nop
 8007644:	58000400 	.word	0x58000400
 8007648:	11c1808c 	.word	0x11c1808c

0800764c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e12a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b97      	ldr	r3, [pc, #604]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d91b      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	4b94      	ldr	r3, [pc, #592]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 0207 	bic.w	r2, r3, #7
 8007676:	4992      	ldr	r1, [pc, #584]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4313      	orrs	r3, r2
 800767c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800767e:	f7fd fe55 	bl	800532c <HAL_GetTick>
 8007682:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007684:	e008      	b.n	8007698 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007686:	f7fd fe51 	bl	800532c <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e10e      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007698:	4b89      	ldr	r3, [pc, #548]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d1ef      	bne.n	8007686 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fb11 	bl	8006cde <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076bc:	f7fd fe36 	bl	800532c <HAL_GetTick>
 80076c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076c4:	f7fd fe32 	bl	800532c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e0ef      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076d6:	f7ff fbfe 	bl	8006ed6 <LL_RCC_IsActiveFlag_HPRE>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f1      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d016      	beq.n	800771a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fb08 	bl	8006d06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076f6:	f7fd fe19 	bl	800532c <HAL_GetTick>
 80076fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076fe:	f7fd fe15 	bl	800532c <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e0d2      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007710:	f7ff fbf3 	bl	8006efa <LL_RCC_IsActiveFlag_C2HPRE>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f1      	beq.n	80076fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d016      	beq.n	8007754 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fb01 	bl	8006d32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007730:	f7fd fdfc 	bl	800532c <HAL_GetTick>
 8007734:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007738:	f7fd fdf8 	bl	800532c <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e0b5      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800774a:	f7ff fbe9 	bl	8006f20 <LL_RCC_IsActiveFlag_SHDHPRE>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f1      	beq.n	8007738 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fafb 	bl	8006d60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800776a:	f7fd fddf 	bl	800532c <HAL_GetTick>
 800776e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007770:	e008      	b.n	8007784 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007772:	f7fd fddb 	bl	800532c <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e098      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007784:	f7ff fbdf 	bl	8006f46 <LL_RCC_IsActiveFlag_PPRE1>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f1      	beq.n	8007772 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d017      	beq.n	80077ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff faf1 	bl	8006d88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077a6:	f7fd fdc1 	bl	800532c <HAL_GetTick>
 80077aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077ae:	f7fd fdbd 	bl	800532c <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e07a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077c0:	f7ff fbd3 	bl	8006f6a <LL_RCC_IsActiveFlag_PPRE2>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f1      	beq.n	80077ae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d043      	beq.n	800785e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d106      	bne.n	80077ec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077de:	f7ff f891 	bl	8006904 <LL_RCC_HSE_IsReady>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11e      	bne.n	8007826 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e064      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d106      	bne.n	8007802 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80077f4:	f7ff fb2c 	bl	8006e50 <LL_RCC_PLL_IsReady>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d113      	bne.n	8007826 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e059      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800780a:	f7ff f9f9 	bl	8006c00 <LL_RCC_MSI_IsReady>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d108      	bne.n	8007826 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e04e      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007818:	f7ff f8a4 	bl	8006964 <LL_RCC_HSI_IsReady>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e047      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fa37 	bl	8006c9e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007830:	f7fd fd7c 	bl	800532c <HAL_GetTick>
 8007834:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007836:	e00a      	b.n	800784e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007838:	f7fd fd78 	bl	800532c <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f241 3288 	movw	r2, #5000	; 0x1388
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e033      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784e:	f7ff fa3a 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 8007852:	4602      	mov	r2, r0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	429a      	cmp	r2, r3
 800785c:	d1ec      	bne.n	8007838 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800785e:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d21b      	bcs.n	80078a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786c:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f023 0207 	bic.w	r2, r3, #7
 8007874:	4912      	ldr	r1, [pc, #72]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	4313      	orrs	r3, r2
 800787a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787c:	f7fd fd56 	bl	800532c <HAL_GetTick>
 8007880:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007882:	e008      	b.n	8007896 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007884:	f7fd fd52 	bl	800532c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e00f      	b.n	80078b6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <HAL_RCC_ClockConfig+0x274>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d1ef      	bne.n	8007884 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80078a4:	f7fa fa9a 	bl	8001ddc <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80078a8:	f7fd fd4c 	bl	8005344 <HAL_GetTickPrio>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fd fcf0 	bl	8005294 <HAL_InitTick>
 80078b4:	4603      	mov	r3, r0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	58004000 	.word	0x58004000

080078c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ca:	f7ff f9fc 	bl	8006cc6 <LL_RCC_GetSysClkSource>
 80078ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80078d6:	f7ff f9b8 	bl	8006c4a <LL_RCC_MSI_GetRange>
 80078da:	4603      	mov	r3, r0
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	4a2a      	ldr	r2, [pc, #168]	; (800798c <HAL_RCC_GetSysClockFreq+0xc8>)
 80078e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e04a      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d102      	bne.n	80078f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078f2:	4b27      	ldr	r3, [pc, #156]	; (8007990 <HAL_RCC_GetSysClockFreq+0xcc>)
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	e044      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d10a      	bne.n	8007914 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078fe:	f7fe ffb3 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d102      	bne.n	800790e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007908:	4b21      	ldr	r3, [pc, #132]	; (8007990 <HAL_RCC_GetSysClockFreq+0xcc>)
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e039      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800790e:	4b21      	ldr	r3, [pc, #132]	; (8007994 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	e036      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007914:	f7ff fad3 	bl	8006ebe <LL_RCC_PLL_GetMainSource>
 8007918:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d002      	beq.n	8007926 <HAL_RCC_GetSysClockFreq+0x62>
 8007920:	2b03      	cmp	r3, #3
 8007922:	d003      	beq.n	800792c <HAL_RCC_GetSysClockFreq+0x68>
 8007924:	e00d      	b.n	8007942 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007928:	60bb      	str	r3, [r7, #8]
        break;
 800792a:	e015      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800792c:	f7fe ff9c 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007930:	4603      	mov	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	d102      	bne.n	800793c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007938:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800793a:	e00d      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800793c:	4b15      	ldr	r3, [pc, #84]	; (8007994 <HAL_RCC_GetSysClockFreq+0xd0>)
 800793e:	60bb      	str	r3, [r7, #8]
        break;
 8007940:	e00a      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007942:	f7ff f982 	bl	8006c4a <LL_RCC_MSI_GetRange>
 8007946:	4603      	mov	r3, r0
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	4a0f      	ldr	r2, [pc, #60]	; (800798c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	60bb      	str	r3, [r7, #8]
        break;
 8007956:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007958:	f7ff fa8c 	bl	8006e74 <LL_RCC_PLL_GetN>
 800795c:	4602      	mov	r2, r0
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	fb03 f402 	mul.w	r4, r3, r2
 8007964:	f7ff fa9f 	bl	8006ea6 <LL_RCC_PLL_GetDivider>
 8007968:	4603      	mov	r3, r0
 800796a:	091b      	lsrs	r3, r3, #4
 800796c:	3301      	adds	r3, #1
 800796e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007972:	f7ff fa8c 	bl	8006e8e <LL_RCC_PLL_GetR>
 8007976:	4603      	mov	r3, r0
 8007978:	0f5b      	lsrs	r3, r3, #29
 800797a:	3301      	adds	r3, #1
 800797c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007980:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}
 800798c:	0800d988 	.word	0x0800d988
 8007990:	00f42400 	.word	0x00f42400
 8007994:	01e84800 	.word	0x01e84800

08007998 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007998:	b598      	push	{r3, r4, r7, lr}
 800799a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800799c:	f7ff ff92 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 80079a0:	4604      	mov	r4, r0
 80079a2:	f7ff fa05 	bl	8006db0 <LL_RCC_GetAHBPrescaler>
 80079a6:	4603      	mov	r3, r0
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	4a03      	ldr	r2, [pc, #12]	; (80079bc <HAL_RCC_GetHCLKFreq+0x24>)
 80079b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd98      	pop	{r3, r4, r7, pc}
 80079bc:	0800d928 	.word	0x0800d928

080079c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c0:	b598      	push	{r3, r4, r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079c4:	f7ff ffe8 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80079c8:	4604      	mov	r4, r0
 80079ca:	f7ff fa0b 	bl	8006de4 <LL_RCC_GetAPB1Prescaler>
 80079ce:	4603      	mov	r3, r0
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd98      	pop	{r3, r4, r7, pc}
 80079e8:	0800d968 	.word	0x0800d968

080079ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ec:	b598      	push	{r3, r4, r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80079f0:	f7ff ffd2 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80079f4:	4604      	mov	r4, r0
 80079f6:	f7ff fa01 	bl	8006dfc <LL_RCC_GetAPB2Prescaler>
 80079fa:	4603      	mov	r3, r0
 80079fc:	0adb      	lsrs	r3, r3, #11
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	bd98      	pop	{r3, r4, r7, pc}
 8007a14:	0800d968 	.word	0x0800d968

08007a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2bb0      	cmp	r3, #176	; 0xb0
 8007a24:	d903      	bls.n	8007a2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007a26:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e007      	b.n	8007a3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007a3e:	f7ff f9c3 	bl	8006dc8 <LL_RCC_GetAHB4Prescaler>
 8007a42:	4603      	mov	r3, r0
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	4a0d      	ldr	r2, [pc, #52]	; (8007a80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	0c9c      	lsrs	r4, r3, #18
 8007a62:	f7fe fef3 	bl	800684c <HAL_PWREx_GetVoltageRange>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f80c 	bl	8007a88 <RCC_SetFlashLatency>
 8007a70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd90      	pop	{r4, r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	0800d988 	.word	0x0800d988
 8007a80:	0800d928 	.word	0x0800d928
 8007a84:	431bde83 	.word	0x431bde83

08007a88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007a88:	b590      	push	{r4, r7, lr}
 8007a8a:	b093      	sub	sp, #76	; 0x4c
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007a92:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <RCC_SetFlashLatency+0xf0>)
 8007a94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007a9e:	4a37      	ldr	r2, [pc, #220]	; (8007b7c <RCC_SetFlashLatency+0xf4>)
 8007aa0:	f107 031c 	add.w	r3, r7, #28
 8007aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007aaa:	4b35      	ldr	r3, [pc, #212]	; (8007b80 <RCC_SetFlashLatency+0xf8>)
 8007aac:	f107 040c 	add.w	r4, r7, #12
 8007ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac0:	d11c      	bne.n	8007afc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac6:	e015      	b.n	8007af4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d808      	bhi.n	8007aee <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007aea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007aec:	e022      	b.n	8007b34 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af0:	3301      	adds	r3, #1
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
 8007af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d9e6      	bls.n	8007ac8 <RCC_SetFlashLatency+0x40>
 8007afa:	e01b      	b.n	8007b34 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b00:	e015      	b.n	8007b2e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d808      	bhi.n	8007b28 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007b1e:	4413      	add	r3, r2
 8007b20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007b26:	e005      	b.n	8007b34 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d9e6      	bls.n	8007b02 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007b34:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <RCC_SetFlashLatency+0xfc>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f023 0207 	bic.w	r2, r3, #7
 8007b3c:	4911      	ldr	r1, [pc, #68]	; (8007b84 <RCC_SetFlashLatency+0xfc>)
 8007b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b44:	f7fd fbf2 	bl	800532c <HAL_GetTick>
 8007b48:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b4a:	e008      	b.n	8007b5e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b4c:	f7fd fbee 	bl	800532c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e007      	b.n	8007b6e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <RCC_SetFlashLatency+0xfc>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d1ef      	bne.n	8007b4c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	374c      	adds	r7, #76	; 0x4c
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd90      	pop	{r4, r7, pc}
 8007b76:	bf00      	nop
 8007b78:	0800d8b4 	.word	0x0800d8b4
 8007b7c:	0800d8c4 	.word	0x0800d8c4
 8007b80:	0800d8d0 	.word	0x0800d8d0
 8007b84:	58004000 	.word	0x58004000

08007b88 <LL_RCC_LSE_IsEnabled>:
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <LL_RCC_LSE_IsEnabled+0x18>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <LL_RCC_LSE_IsEnabled+0x1a>
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <LL_RCC_LSE_IsReady>:
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d101      	bne.n	8007bc4 <LL_RCC_LSE_IsReady+0x18>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <LL_RCC_LSE_IsReady+0x1a>
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <LL_RCC_SetRFWKPClockSource>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <LL_RCC_SetSMPSClockSource>:
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	f023 0203 	bic.w	r2, r3, #3
 8007c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <LL_RCC_SetSMPSPrescaler>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_RCC_SetUSARTClockSource>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5c:	f023 0203 	bic.w	r2, r3, #3
 8007c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <LL_RCC_SetLPUARTClockSource>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <LL_RCC_SetI2CClockSource>:
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <LL_RCC_SetLPTIMClockSource>:
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	041b      	lsls	r3, r3, #16
 8007cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <LL_RCC_SetSAIClockSource>:
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <LL_RCC_SetRNGClockSource>:
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_RCC_SetCLK48ClockSource>:
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <LL_RCC_SetUSBClockSource>:
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ffe3 	bl	8007d6a <LL_RCC_SetCLK48ClockSource>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <LL_RCC_SetADCClockSource>:
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <LL_RCC_SetRTCClockSource>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <LL_RCC_GetRTCClockSource>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <LL_RCC_ForceBackupDomainReset>:
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007e36:	bf00      	nop
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007e58:	bf00      	nop
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <LL_RCC_PLLSAI1_Enable>:
{
 8007e62:	b480      	push	{r7}
 8007e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e74:	6013      	str	r3, [r2, #0]
}
 8007e76:	bf00      	nop
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <LL_RCC_PLLSAI1_Disable>:
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e92:	6013      	str	r3, [r2, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <LL_RCC_PLLSAI1_IsReady>:
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eb0:	d101      	bne.n	8007eb6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b088      	sub	sp, #32
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007eca:	2300      	movs	r3, #0
 8007ecc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007ece:	2300      	movs	r3, #0
 8007ed0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d033      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee6:	d00c      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eec:	d802      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d010      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ef2:	e017      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef8:	d017      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007efa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007efe:	d016      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007f00:	e010      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f12:	e00d      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 f947 	bl	80081ac <RCCEx_PLLSAI1_ConfigNP>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f22:	e005      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	77fb      	strb	r3, [r7, #31]
        break;
 8007f28:	e002      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f30:	7ffb      	ldrb	r3, [r7, #31]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fee9 	bl	8007d12 <LL_RCC_SetSAIClockSource>
 8007f40:	e001      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f42:	7ffb      	ldrb	r3, [r7, #31]
 8007f44:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d046      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007f52:	f7ff ff57 	bl	8007e04 <LL_RCC_GetRTCClockSource>
 8007f56:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d03c      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007f62:	f7fe fc63 	bl	800682c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff ff31 	bl	8007dd8 <LL_RCC_SetRTCClockSource>
 8007f76:	e02e      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f80:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007f82:	f7ff ff4c 	bl	8007e1e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007f86:	f7ff ff5b 	bl	8007e40 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007fa2:	f7ff fdf1 	bl	8007b88 <LL_RCC_LSE_IsEnabled>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d114      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fac:	f7fd f9be 	bl	800532c <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007fb2:	e00b      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb4:	f7fd f9ba 	bl	800532c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d902      	bls.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	77fb      	strb	r3, [r7, #31]
              break;
 8007fca:	e004      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007fcc:	f7ff fdee 	bl	8007bac <LL_RCC_LSE_IsReady>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d1ee      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007fd6:	7ffb      	ldrb	r3, [r7, #31]
 8007fd8:	77bb      	strb	r3, [r7, #30]
 8007fda:	e001      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	7ffb      	ldrb	r3, [r7, #31]
 8007fde:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fe2b 	bl	8007c4c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fe36 	bl	8007c78 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fe5e 	bl	8007cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff fe53 	bl	8007cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fe2b 	bl	8007ca4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fe20 	bl	8007ca4 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d022      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fe8e 	bl	8007d96 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008082:	d107      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008092:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800809c:	d10b      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f8dd 	bl	8008262 <RCCEx_PLLSAI1_ConfigNQ>
 80080a8:	4603      	mov	r3, r0
 80080aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80080ac:	7ffb      	ldrb	r3, [r7, #31]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02b      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ca:	d008      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d4:	d003      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x228>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fe2b 	bl	8007d3e <LL_RCC_SetRNGClockSource>
 80080e8:	e00a      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	2000      	movs	r0, #0
 80080f6:	f7ff fe22 	bl	8007d3e <LL_RCC_SetRNGClockSource>
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fe35 	bl	8007d6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008108:	d107      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800810a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008118:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008122:	2b00      	cmp	r3, #0
 8008124:	d022      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fe3e 	bl	8007dac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008138:	d107      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800813a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008148:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008152:	d10b      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f8dd 	bl	8008318 <RCCEx_PLLSAI1_ConfigNR>
 800815e:	4603      	mov	r3, r0
 8008160:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8008168:	7ffb      	ldrb	r3, [r7, #31]
 800816a:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fd27 	bl	8007bd0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fd46 	bl	8007c24 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fd2d 	bl	8007bfc <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80081a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80081b8:	f7ff fe62 	bl	8007e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081bc:	f7fd f8b6 	bl	800532c <HAL_GetTick>
 80081c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081c2:	e009      	b.n	80081d8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081c4:	f7fd f8b2 	bl	800532c <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d902      	bls.n	80081d8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	73fb      	strb	r3, [r7, #15]
      break;
 80081d6:	e004      	b.n	80081e2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081d8:	f7ff fe61 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f0      	bne.n	80081c4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d137      	bne.n	8008258 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80081e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008212:	4313      	orrs	r3, r2
 8008214:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008216:	f7ff fe24 	bl	8007e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821a:	f7fd f887 	bl	800532c <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008220:	e009      	b.n	8008236 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008222:	f7fd f883 	bl	800532c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d902      	bls.n	8008236 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
        break;
 8008234:	e004      	b.n	8008240 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008236:	f7ff fe32 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d1f0      	bne.n	8008222 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d108      	bne.n	8008258 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008254:	4313      	orrs	r3, r2
 8008256:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800826e:	f7ff fe07 	bl	8007e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008272:	f7fd f85b 	bl	800532c <HAL_GetTick>
 8008276:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008278:	e009      	b.n	800828e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800827a:	f7fd f857 	bl	800532c <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	2b02      	cmp	r3, #2
 8008286:	d902      	bls.n	800828e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	73fb      	strb	r3, [r7, #15]
      break;
 800828c:	e004      	b.n	8008298 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800828e:	f7ff fe06 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1f0      	bne.n	800827a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d137      	bne.n	800830e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800829e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082b2:	4313      	orrs	r3, r2
 80082b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80082b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082c8:	4313      	orrs	r3, r2
 80082ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80082cc:	f7ff fdc9 	bl	8007e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d0:	f7fd f82c 	bl	800532c <HAL_GetTick>
 80082d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082d6:	e009      	b.n	80082ec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082d8:	f7fd f828 	bl	800532c <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d902      	bls.n	80082ec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	73fb      	strb	r3, [r7, #15]
        break;
 80082ea:	e004      	b.n	80082f6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082ec:	f7ff fdd7 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d1f0      	bne.n	80082d8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d108      	bne.n	800830e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80082fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800830a:	4313      	orrs	r3, r2
 800830c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008324:	f7ff fdac 	bl	8007e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008328:	f7fd f800 	bl	800532c <HAL_GetTick>
 800832c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800832e:	e009      	b.n	8008344 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008330:	f7fc fffc 	bl	800532c <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d902      	bls.n	8008344 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	73fb      	strb	r3, [r7, #15]
      break;
 8008342:	e004      	b.n	800834e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008344:	f7ff fdab 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f0      	bne.n	8008330 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d137      	bne.n	80083c4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008368:	4313      	orrs	r3, r2
 800836a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800836c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800837e:	4313      	orrs	r3, r2
 8008380:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008382:	f7ff fd6e 	bl	8007e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008386:	f7fc ffd1 	bl	800532c <HAL_GetTick>
 800838a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800838c:	e009      	b.n	80083a2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800838e:	f7fc ffcd 	bl	800532c <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d902      	bls.n	80083a2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	73fb      	strb	r3, [r7, #15]
        break;
 80083a0:	e004      	b.n	80083ac <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083a2:	f7ff fd7c 	bl	8007e9e <LL_RCC_PLLSAI1_IsReady>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d1f0      	bne.n	800838e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d108      	bne.n	80083c4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b6:	691a      	ldr	r2, [r3, #16]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083c0:	4313      	orrs	r3, r2
 80083c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e090      	b.n	8008502 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7f9 fa1b 	bl	8001830 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	22ca      	movs	r2, #202	; 0xca
 8008408:	625a      	str	r2, [r3, #36]	; 0x24
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2253      	movs	r2, #83	; 0x53
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f89f 	bl	8008556 <RTC_EnterInitMode>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	22ff      	movs	r2, #255	; 0xff
 8008424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2204      	movs	r2, #4
 800842a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e067      	b.n	8008502 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	68d2      	ldr	r2, [r2, #12]
 800846c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6919      	ldr	r1, [r3, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	041a      	lsls	r2, r3, #16
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008490:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0203 	bic.w	r2, r2, #3
 80084a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d113      	bne.n	80084f0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f81e 	bl	800850a <HAL_RTC_WaitForSynchro>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00d      	beq.n	80084f0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	22ff      	movs	r2, #255	; 0xff
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e008      	b.n	8008502 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	22ff      	movs	r2, #255	; 0xff
 80084f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008500:	2300      	movs	r3, #0
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008520:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008522:	f7fc ff03 	bl	800532c <HAL_GetTick>
 8008526:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008528:	e009      	b.n	800853e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800852a:	f7fc feff 	bl	800532c <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008538:	d901      	bls.n	800853e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e007      	b.n	800854e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0ee      	beq.n	800852a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d119      	bne.n	80085a0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008576:	f7fc fed9 	bl	800532c <HAL_GetTick>
 800857a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800857c:	e009      	b.n	8008592 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800857e:	f7fc fed5 	bl	800532c <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800858c:	d901      	bls.n	8008592 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e007      	b.n	80085a2 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0ee      	beq.n	800857e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e0a8      	b.n	8008718 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	22ca      	movs	r2, #202	; 0xca
 80085dc:	625a      	str	r2, [r3, #36]	; 0x24
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2253      	movs	r2, #83	; 0x53
 80085e4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d020      	beq.n	8008636 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 80085f4:	f7fc fe9a 	bl	800532c <HAL_GetTick>
 80085f8:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80085fa:	e015      	b.n	8008628 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80085fc:	f7fc fe96 	bl	800532c <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800860a:	d90d      	bls.n	8008628 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	22ff      	movs	r2, #255	; 0xff
 8008612:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2203      	movs	r2, #3
 8008618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e077      	b.n	8008718 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e2      	bne.n	80085fc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008644:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	b2da      	uxtb	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008656:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008658:	f7fc fe68 	bl	800532c <HAL_GetTick>
 800865c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800865e:	e015      	b.n	800868c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008660:	f7fc fe64 	bl	800532c <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866e:	d90d      	bls.n	800868c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	22ff      	movs	r2, #255	; 0xff
 8008676:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2203      	movs	r2, #3
 800867c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e045      	b.n	8008718 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0e2      	beq.n	8008660 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0207 	bic.w	r2, r2, #7
 80086b0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6899      	ldr	r1, [r3, #8]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	430a      	orrs	r2, r1
 80086c0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80086c2:	4b17      	ldr	r3, [pc, #92]	; (8008720 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086c8:	4a15      	ldr	r2, [pc, #84]	; (8008720 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80086ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a12      	ldr	r2, [pc, #72]	; (8008720 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80086d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086dc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086ec:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086fc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	58000800 	.word	0x58000800

08008724 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00b      	beq.n	8008752 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f818 	bl	8008770 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008750:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008754:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008758:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	58000800 	.word	0x58000800

08008770 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e01d      	b.n	80087d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7f9 f85a 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f000 f95a 	bl	8008a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d122      	bne.n	8008836 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d11b      	bne.n	8008836 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f06f 0202 	mvn.w	r2, #2
 8008806:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f90f 	bl	8008a40 <HAL_TIM_IC_CaptureCallback>
 8008822:	e005      	b.n	8008830 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f901 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f912 	bl	8008a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b04      	cmp	r3, #4
 8008842:	d122      	bne.n	800888a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b04      	cmp	r3, #4
 8008850:	d11b      	bne.n	800888a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f06f 0204 	mvn.w	r2, #4
 800885a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f8e5 	bl	8008a40 <HAL_TIM_IC_CaptureCallback>
 8008876:	e005      	b.n	8008884 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8d7 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f8e8 	bl	8008a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b08      	cmp	r3, #8
 8008896:	d122      	bne.n	80088de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0308 	and.w	r3, r3, #8
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d11b      	bne.n	80088de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0208 	mvn.w	r2, #8
 80088ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2204      	movs	r2, #4
 80088b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f8bb 	bl	8008a40 <HAL_TIM_IC_CaptureCallback>
 80088ca:	e005      	b.n	80088d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f8ad 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f8be 	bl	8008a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d122      	bne.n	8008932 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d11b      	bne.n	8008932 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f06f 0210 	mvn.w	r2, #16
 8008902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2208      	movs	r2, #8
 8008908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f891 	bl	8008a40 <HAL_TIM_IC_CaptureCallback>
 800891e:	e005      	b.n	800892c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f883 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f894 	bl	8008a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b01      	cmp	r3, #1
 800893e:	d10e      	bne.n	800895e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b01      	cmp	r3, #1
 800894c:	d107      	bne.n	800895e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f06f 0201 	mvn.w	r2, #1
 8008956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f85d 	bl	8008a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d10e      	bne.n	800898a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008976:	2b80      	cmp	r3, #128	; 0x80
 8008978:	d107      	bne.n	800898a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f8e7 	bl	8008b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008998:	d10e      	bne.n	80089b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	d107      	bne.n	80089b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8da 	bl	8008b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c2:	2b40      	cmp	r3, #64	; 0x40
 80089c4:	d10e      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b40      	cmp	r3, #64	; 0x40
 80089d2:	d107      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f842 	bl	8008a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d10e      	bne.n	8008a10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d107      	bne.n	8008a10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f06f 0220 	mvn.w	r2, #32
 8008a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f89a 	bl	8008b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a2a      	ldr	r2, [pc, #168]	; (8008b38 <TIM_Base_SetConfig+0xbc>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_Base_SetConfig+0x20>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9a:	d108      	bne.n	8008aae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	; (8008b38 <TIM_Base_SetConfig+0xbc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00b      	beq.n	8008ace <TIM_Base_SetConfig+0x52>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abc:	d007      	beq.n	8008ace <TIM_Base_SetConfig+0x52>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <TIM_Base_SetConfig+0xc0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_Base_SetConfig+0x52>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <TIM_Base_SetConfig+0xc4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d108      	bne.n	8008ae0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <TIM_Base_SetConfig+0xbc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d007      	beq.n	8008b1c <TIM_Base_SetConfig+0xa0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a0b      	ldr	r2, [pc, #44]	; (8008b3c <TIM_Base_SetConfig+0xc0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_Base_SetConfig+0xa0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a0a      	ldr	r2, [pc, #40]	; (8008b40 <TIM_Base_SetConfig+0xc4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d103      	bne.n	8008b24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	615a      	str	r2, [r3, #20]
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <LL_RCC_GetUSARTClockSource>:
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4013      	ands	r3, r2
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <LL_RCC_GetLPUARTClockSource>:
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4013      	ands	r3, r2
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e042      	b.n	8008c58 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d106      	bne.n	8008bea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7f8 fe6d 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2224      	movs	r2, #36	; 0x24
 8008bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0201 	bic.w	r2, r2, #1
 8008c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f9b8 	bl	8008f78 <UART_SetConfig>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e022      	b.n	8008c58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fa10 	bl	800a040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fa97 	bl	800a184 <UART_CheckIdleState>
 8008c56:	4603      	mov	r3, r0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c86:	4013      	ands	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d118      	bne.n	8008cc2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d013      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 8145 	beq.w	8008f42 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
      }
      return;
 8008cc0:	e13f      	b.n	8008f42 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80e8 	beq.w	8008e9a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4ba1      	ldr	r3, [pc, #644]	; (8008f54 <HAL_UART_IRQHandler+0x2f4>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4ba0      	ldr	r3, [pc, #640]	; (8008f58 <HAL_UART_IRQHandler+0x2f8>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 80dd 	beq.w	8008e9a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <HAL_UART_IRQHandler+0xac>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d02:	f043 0201 	orr.w	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d010      	beq.n	8008d38 <HAL_UART_IRQHandler+0xd8>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2202      	movs	r2, #2
 8008d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2e:	f043 0204 	orr.w	r2, r3, #4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d010      	beq.n	8008d64 <HAL_UART_IRQHandler+0x104>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2204      	movs	r2, #4
 8008d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5a:	f043 0202 	orr.w	r2, r3, #2
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d015      	beq.n	8008d9a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4b76      	ldr	r3, [pc, #472]	; (8008f54 <HAL_UART_IRQHandler+0x2f4>)
 8008d7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00b      	beq.n	8008d9a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2208      	movs	r2, #8
 8008d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d90:	f043 0208 	orr.w	r2, r3, #8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d011      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x168>
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00c      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dbe:	f043 0220 	orr.w	r2, r3, #32
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80b9 	beq.w	8008f46 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d011      	beq.n	8008e02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d004      	beq.n	8008e22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d031      	beq.n	8008e86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fa76 	bl	800a314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d123      	bne.n	8008e7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d013      	beq.n	8008e76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e52:	4a42      	ldr	r2, [pc, #264]	; (8008f5c <HAL_UART_IRQHandler+0x2fc>)
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fc fc15 	bl	800568a <HAL_DMA_Abort_IT>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d017      	beq.n	8008e96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	e00f      	b.n	8008e96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f872 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00b      	b.n	8008e96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f86e 	bl	8008f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e007      	b.n	8008e96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f86a 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008e94:	e057      	b.n	8008f46 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e96:	bf00      	nop
    return;
 8008e98:	e055      	b.n	8008f46 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00d      	beq.n	8008ec0 <HAL_UART_IRQHandler+0x260>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d008      	beq.n	8008ec0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fa7e 	bl	800a3ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ebe:	e045      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d012      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d031      	beq.n	8008f4a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
    }
    return;
 8008eee:	e02c      	b.n	8008f4a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d008      	beq.n	8008f0c <HAL_UART_IRQHandler+0x2ac>
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fa3e 	bl	800a386 <UART_EndTransmit_IT>
    return;
 8008f0a:	e01f      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_UART_IRQHandler+0x2c8>
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fa5e 	bl	800a3e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f26:	e011      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00c      	beq.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da09      	bge.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 fa48 	bl	800a3ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f3e:	bf00      	nop
 8008f40:	e004      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
      return;
 8008f42:	bf00      	nop
 8008f44:	e002      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
    return;
 8008f46:	bf00      	nop
 8008f48:	e000      	b.n	8008f4c <HAL_UART_IRQHandler+0x2ec>
    return;
 8008f4a:	bf00      	nop
  }
}
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	10000001 	.word	0x10000001
 8008f58:	04000120 	.word	0x04000120
 8008f5c:	0800a35b 	.word	0x0800a35b

08008f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	0000      	movs	r0, r0
	...

08008f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008f7c:	b08a      	sub	sp, #40	; 0x28
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fac:	4313      	orrs	r3, r2
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	4ba4      	ldr	r3, [pc, #656]	; (8009248 <UART_SetConfig+0x2d0>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a99      	ldr	r2, [pc, #612]	; (800924c <UART_SetConfig+0x2d4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d004      	beq.n	8008ff4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009008:	430b      	orrs	r3, r1
 800900a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	f023 010f 	bic.w	r1, r3, #15
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a8a      	ldr	r2, [pc, #552]	; (8009250 <UART_SetConfig+0x2d8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d126      	bne.n	800907a <UART_SetConfig+0x102>
 800902c:	2003      	movs	r0, #3
 800902e:	f7ff fda7 	bl	8008b80 <LL_RCC_GetUSARTClockSource>
 8009032:	4603      	mov	r3, r0
 8009034:	2b03      	cmp	r3, #3
 8009036:	d81b      	bhi.n	8009070 <UART_SetConfig+0xf8>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <UART_SetConfig+0xc8>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	08009051 	.word	0x08009051
 8009044:	08009061 	.word	0x08009061
 8009048:	08009059 	.word	0x08009059
 800904c:	08009069 	.word	0x08009069
 8009050:	2301      	movs	r3, #1
 8009052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009056:	e042      	b.n	80090de <UART_SetConfig+0x166>
 8009058:	2302      	movs	r3, #2
 800905a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905e:	e03e      	b.n	80090de <UART_SetConfig+0x166>
 8009060:	2304      	movs	r3, #4
 8009062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009066:	e03a      	b.n	80090de <UART_SetConfig+0x166>
 8009068:	2308      	movs	r3, #8
 800906a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800906e:	e036      	b.n	80090de <UART_SetConfig+0x166>
 8009070:	2310      	movs	r3, #16
 8009072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009076:	bf00      	nop
 8009078:	e031      	b.n	80090de <UART_SetConfig+0x166>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a73      	ldr	r2, [pc, #460]	; (800924c <UART_SetConfig+0x2d4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d129      	bne.n	80090d8 <UART_SetConfig+0x160>
 8009084:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009088:	f7ff fd8a 	bl	8008ba0 <LL_RCC_GetLPUARTClockSource>
 800908c:	4603      	mov	r3, r0
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009092:	d014      	beq.n	80090be <UART_SetConfig+0x146>
 8009094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009098:	d802      	bhi.n	80090a0 <UART_SetConfig+0x128>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <UART_SetConfig+0x136>
 800909e:	e016      	b.n	80090ce <UART_SetConfig+0x156>
 80090a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a4:	d007      	beq.n	80090b6 <UART_SetConfig+0x13e>
 80090a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090aa:	d00c      	beq.n	80090c6 <UART_SetConfig+0x14e>
 80090ac:	e00f      	b.n	80090ce <UART_SetConfig+0x156>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b4:	e013      	b.n	80090de <UART_SetConfig+0x166>
 80090b6:	2302      	movs	r3, #2
 80090b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090bc:	e00f      	b.n	80090de <UART_SetConfig+0x166>
 80090be:	2304      	movs	r3, #4
 80090c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090c4:	e00b      	b.n	80090de <UART_SetConfig+0x166>
 80090c6:	2308      	movs	r3, #8
 80090c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090cc:	e007      	b.n	80090de <UART_SetConfig+0x166>
 80090ce:	2310      	movs	r3, #16
 80090d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090d4:	bf00      	nop
 80090d6:	e002      	b.n	80090de <UART_SetConfig+0x166>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a5a      	ldr	r2, [pc, #360]	; (800924c <UART_SetConfig+0x2d4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	f040 8428 	bne.w	800993a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	f200 8171 	bhi.w	80093d6 <UART_SetConfig+0x45e>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0x184>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009121 	.word	0x08009121
 8009100:	080093d7 	.word	0x080093d7
 8009104:	080091c3 	.word	0x080091c3
 8009108:	080093d7 	.word	0x080093d7
 800910c:	08009287 	.word	0x08009287
 8009110:	080093d7 	.word	0x080093d7
 8009114:	080093d7 	.word	0x080093d7
 8009118:	080093d7 	.word	0x080093d7
 800911c:	08009329 	.word	0x08009329
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009120:	f7fe fc4e 	bl	80079c0 <HAL_RCC_GetPCLK1Freq>
 8009124:	4602      	mov	r2, r0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b00      	cmp	r3, #0
 800912c:	d044      	beq.n	80091b8 <UART_SetConfig+0x240>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b01      	cmp	r3, #1
 8009134:	d03e      	beq.n	80091b4 <UART_SetConfig+0x23c>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b02      	cmp	r3, #2
 800913c:	d038      	beq.n	80091b0 <UART_SetConfig+0x238>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b03      	cmp	r3, #3
 8009144:	d032      	beq.n	80091ac <UART_SetConfig+0x234>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b04      	cmp	r3, #4
 800914c:	d02c      	beq.n	80091a8 <UART_SetConfig+0x230>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b05      	cmp	r3, #5
 8009154:	d026      	beq.n	80091a4 <UART_SetConfig+0x22c>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b06      	cmp	r3, #6
 800915c:	d020      	beq.n	80091a0 <UART_SetConfig+0x228>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b07      	cmp	r3, #7
 8009164:	d01a      	beq.n	800919c <UART_SetConfig+0x224>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b08      	cmp	r3, #8
 800916c:	d014      	beq.n	8009198 <UART_SetConfig+0x220>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b09      	cmp	r3, #9
 8009174:	d00e      	beq.n	8009194 <UART_SetConfig+0x21c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b0a      	cmp	r3, #10
 800917c:	d008      	beq.n	8009190 <UART_SetConfig+0x218>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b0b      	cmp	r3, #11
 8009184:	d102      	bne.n	800918c <UART_SetConfig+0x214>
 8009186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918a:	e016      	b.n	80091ba <UART_SetConfig+0x242>
 800918c:	2301      	movs	r3, #1
 800918e:	e014      	b.n	80091ba <UART_SetConfig+0x242>
 8009190:	2380      	movs	r3, #128	; 0x80
 8009192:	e012      	b.n	80091ba <UART_SetConfig+0x242>
 8009194:	2340      	movs	r3, #64	; 0x40
 8009196:	e010      	b.n	80091ba <UART_SetConfig+0x242>
 8009198:	2320      	movs	r3, #32
 800919a:	e00e      	b.n	80091ba <UART_SetConfig+0x242>
 800919c:	2310      	movs	r3, #16
 800919e:	e00c      	b.n	80091ba <UART_SetConfig+0x242>
 80091a0:	230c      	movs	r3, #12
 80091a2:	e00a      	b.n	80091ba <UART_SetConfig+0x242>
 80091a4:	230a      	movs	r3, #10
 80091a6:	e008      	b.n	80091ba <UART_SetConfig+0x242>
 80091a8:	2308      	movs	r3, #8
 80091aa:	e006      	b.n	80091ba <UART_SetConfig+0x242>
 80091ac:	2306      	movs	r3, #6
 80091ae:	e004      	b.n	80091ba <UART_SetConfig+0x242>
 80091b0:	2304      	movs	r3, #4
 80091b2:	e002      	b.n	80091ba <UART_SetConfig+0x242>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e000      	b.n	80091ba <UART_SetConfig+0x242>
 80091b8:	2301      	movs	r3, #1
 80091ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80091be:	617b      	str	r3, [r7, #20]
        break;
 80091c0:	e10c      	b.n	80093dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d05a      	beq.n	8009280 <UART_SetConfig+0x308>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d054      	beq.n	800927c <UART_SetConfig+0x304>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d04e      	beq.n	8009278 <UART_SetConfig+0x300>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d048      	beq.n	8009274 <UART_SetConfig+0x2fc>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d02c      	beq.n	8009244 <UART_SetConfig+0x2cc>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d026      	beq.n	8009240 <UART_SetConfig+0x2c8>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	2b06      	cmp	r3, #6
 80091f8:	d020      	beq.n	800923c <UART_SetConfig+0x2c4>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	2b07      	cmp	r3, #7
 8009200:	d01a      	beq.n	8009238 <UART_SetConfig+0x2c0>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	2b08      	cmp	r3, #8
 8009208:	d014      	beq.n	8009234 <UART_SetConfig+0x2bc>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b09      	cmp	r3, #9
 8009210:	d00e      	beq.n	8009230 <UART_SetConfig+0x2b8>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b0a      	cmp	r3, #10
 8009218:	d008      	beq.n	800922c <UART_SetConfig+0x2b4>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	2b0b      	cmp	r3, #11
 8009220:	d102      	bne.n	8009228 <UART_SetConfig+0x2b0>
 8009222:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009226:	e02c      	b.n	8009282 <UART_SetConfig+0x30a>
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <UART_SetConfig+0x2dc>)
 800922a:	e02a      	b.n	8009282 <UART_SetConfig+0x30a>
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <UART_SetConfig+0x2e0>)
 800922e:	e028      	b.n	8009282 <UART_SetConfig+0x30a>
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <UART_SetConfig+0x2e4>)
 8009232:	e026      	b.n	8009282 <UART_SetConfig+0x30a>
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <UART_SetConfig+0x2e8>)
 8009236:	e024      	b.n	8009282 <UART_SetConfig+0x30a>
 8009238:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <UART_SetConfig+0x2ec>)
 800923a:	e022      	b.n	8009282 <UART_SetConfig+0x30a>
 800923c:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <UART_SetConfig+0x2f0>)
 800923e:	e020      	b.n	8009282 <UART_SetConfig+0x30a>
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <UART_SetConfig+0x2f4>)
 8009242:	e01e      	b.n	8009282 <UART_SetConfig+0x30a>
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <UART_SetConfig+0x2f8>)
 8009246:	e01c      	b.n	8009282 <UART_SetConfig+0x30a>
 8009248:	cfff69f3 	.word	0xcfff69f3
 800924c:	40008000 	.word	0x40008000
 8009250:	40013800 	.word	0x40013800
 8009254:	00f42400 	.word	0x00f42400
 8009258:	0001e848 	.word	0x0001e848
 800925c:	0003d090 	.word	0x0003d090
 8009260:	0007a120 	.word	0x0007a120
 8009264:	000f4240 	.word	0x000f4240
 8009268:	00145855 	.word	0x00145855
 800926c:	00186a00 	.word	0x00186a00
 8009270:	001e8480 	.word	0x001e8480
 8009274:	4ba6      	ldr	r3, [pc, #664]	; (8009510 <UART_SetConfig+0x598>)
 8009276:	e004      	b.n	8009282 <UART_SetConfig+0x30a>
 8009278:	4ba6      	ldr	r3, [pc, #664]	; (8009514 <UART_SetConfig+0x59c>)
 800927a:	e002      	b.n	8009282 <UART_SetConfig+0x30a>
 800927c:	4ba6      	ldr	r3, [pc, #664]	; (8009518 <UART_SetConfig+0x5a0>)
 800927e:	e000      	b.n	8009282 <UART_SetConfig+0x30a>
 8009280:	4ba6      	ldr	r3, [pc, #664]	; (800951c <UART_SetConfig+0x5a4>)
 8009282:	617b      	str	r3, [r7, #20]
        break;
 8009284:	e0aa      	b.n	80093dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009286:	f7fe fb1d 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 800928a:	4602      	mov	r2, r0
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d044      	beq.n	800931e <UART_SetConfig+0x3a6>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b01      	cmp	r3, #1
 800929a:	d03e      	beq.n	800931a <UART_SetConfig+0x3a2>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d038      	beq.n	8009316 <UART_SetConfig+0x39e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d032      	beq.n	8009312 <UART_SetConfig+0x39a>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d02c      	beq.n	800930e <UART_SetConfig+0x396>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d026      	beq.n	800930a <UART_SetConfig+0x392>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b06      	cmp	r3, #6
 80092c2:	d020      	beq.n	8009306 <UART_SetConfig+0x38e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	d01a      	beq.n	8009302 <UART_SetConfig+0x38a>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d014      	beq.n	80092fe <UART_SetConfig+0x386>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b09      	cmp	r3, #9
 80092da:	d00e      	beq.n	80092fa <UART_SetConfig+0x382>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b0a      	cmp	r3, #10
 80092e2:	d008      	beq.n	80092f6 <UART_SetConfig+0x37e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b0b      	cmp	r3, #11
 80092ea:	d102      	bne.n	80092f2 <UART_SetConfig+0x37a>
 80092ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f0:	e016      	b.n	8009320 <UART_SetConfig+0x3a8>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e014      	b.n	8009320 <UART_SetConfig+0x3a8>
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	e012      	b.n	8009320 <UART_SetConfig+0x3a8>
 80092fa:	2340      	movs	r3, #64	; 0x40
 80092fc:	e010      	b.n	8009320 <UART_SetConfig+0x3a8>
 80092fe:	2320      	movs	r3, #32
 8009300:	e00e      	b.n	8009320 <UART_SetConfig+0x3a8>
 8009302:	2310      	movs	r3, #16
 8009304:	e00c      	b.n	8009320 <UART_SetConfig+0x3a8>
 8009306:	230c      	movs	r3, #12
 8009308:	e00a      	b.n	8009320 <UART_SetConfig+0x3a8>
 800930a:	230a      	movs	r3, #10
 800930c:	e008      	b.n	8009320 <UART_SetConfig+0x3a8>
 800930e:	2308      	movs	r3, #8
 8009310:	e006      	b.n	8009320 <UART_SetConfig+0x3a8>
 8009312:	2306      	movs	r3, #6
 8009314:	e004      	b.n	8009320 <UART_SetConfig+0x3a8>
 8009316:	2304      	movs	r3, #4
 8009318:	e002      	b.n	8009320 <UART_SetConfig+0x3a8>
 800931a:	2302      	movs	r3, #2
 800931c:	e000      	b.n	8009320 <UART_SetConfig+0x3a8>
 800931e:	2301      	movs	r3, #1
 8009320:	fbb2 f3f3 	udiv	r3, r2, r3
 8009324:	617b      	str	r3, [r7, #20]
        break;
 8009326:	e059      	b.n	80093dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	d04e      	beq.n	80093ce <UART_SetConfig+0x456>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	2b01      	cmp	r3, #1
 8009336:	d047      	beq.n	80093c8 <UART_SetConfig+0x450>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	2b02      	cmp	r3, #2
 800933e:	d040      	beq.n	80093c2 <UART_SetConfig+0x44a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	2b03      	cmp	r3, #3
 8009346:	d039      	beq.n	80093bc <UART_SetConfig+0x444>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	2b04      	cmp	r3, #4
 800934e:	d032      	beq.n	80093b6 <UART_SetConfig+0x43e>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	2b05      	cmp	r3, #5
 8009356:	d02b      	beq.n	80093b0 <UART_SetConfig+0x438>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b06      	cmp	r3, #6
 800935e:	d024      	beq.n	80093aa <UART_SetConfig+0x432>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	2b07      	cmp	r3, #7
 8009366:	d01d      	beq.n	80093a4 <UART_SetConfig+0x42c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	2b08      	cmp	r3, #8
 800936e:	d016      	beq.n	800939e <UART_SetConfig+0x426>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b09      	cmp	r3, #9
 8009376:	d00f      	beq.n	8009398 <UART_SetConfig+0x420>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	2b0a      	cmp	r3, #10
 800937e:	d008      	beq.n	8009392 <UART_SetConfig+0x41a>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	2b0b      	cmp	r3, #11
 8009386:	d101      	bne.n	800938c <UART_SetConfig+0x414>
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	e022      	b.n	80093d2 <UART_SetConfig+0x45a>
 800938c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009390:	e01f      	b.n	80093d2 <UART_SetConfig+0x45a>
 8009392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009396:	e01c      	b.n	80093d2 <UART_SetConfig+0x45a>
 8009398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800939c:	e019      	b.n	80093d2 <UART_SetConfig+0x45a>
 800939e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a2:	e016      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093a8:	e013      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093aa:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80093ae:	e010      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093b0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80093b4:	e00d      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ba:	e00a      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093bc:	f241 5355 	movw	r3, #5461	; 0x1555
 80093c0:	e007      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c6:	e004      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093cc:	e001      	b.n	80093d2 <UART_SetConfig+0x45a>
 80093ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093d2:	617b      	str	r3, [r7, #20]
        break;
 80093d4:	e002      	b.n	80093dc <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	76fb      	strb	r3, [r7, #27]
        break;
 80093da:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 8604 	beq.w	8009fec <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	4413      	add	r3, r2
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d305      	bcc.n	8009400 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d903      	bls.n	8009408 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	76fb      	strb	r3, [r7, #27]
 8009404:	f000 bdf2 	b.w	8009fec <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8009408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800940c:	2b08      	cmp	r3, #8
 800940e:	f200 8281 	bhi.w	8009914 <UART_SetConfig+0x99c>
 8009412:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <UART_SetConfig+0x4a0>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	0800943d 	.word	0x0800943d
 800941c:	08009915 	.word	0x08009915
 8009420:	0800958d 	.word	0x0800958d
 8009424:	08009915 	.word	0x08009915
 8009428:	08009683 	.word	0x08009683
 800942c:	08009915 	.word	0x08009915
 8009430:	08009915 	.word	0x08009915
 8009434:	08009915 	.word	0x08009915
 8009438:	080097c1 	.word	0x080097c1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800943c:	f7fe fac0 	bl	80079c0 <HAL_RCC_GetPCLK1Freq>
 8009440:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	4618      	mov	r0, r3
 8009446:	f04f 0100 	mov.w	r1, #0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d070      	beq.n	8009534 <UART_SetConfig+0x5bc>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	2b01      	cmp	r3, #1
 8009458:	d067      	beq.n	800952a <UART_SetConfig+0x5b2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b02      	cmp	r3, #2
 8009460:	d05e      	beq.n	8009520 <UART_SetConfig+0x5a8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2b03      	cmp	r3, #3
 8009468:	d04c      	beq.n	8009504 <UART_SetConfig+0x58c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b04      	cmp	r3, #4
 8009470:	d043      	beq.n	80094fa <UART_SetConfig+0x582>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	2b05      	cmp	r3, #5
 8009478:	d03a      	beq.n	80094f0 <UART_SetConfig+0x578>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	2b06      	cmp	r3, #6
 8009480:	d031      	beq.n	80094e6 <UART_SetConfig+0x56e>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b07      	cmp	r3, #7
 8009488:	d028      	beq.n	80094dc <UART_SetConfig+0x564>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2b08      	cmp	r3, #8
 8009490:	d01f      	beq.n	80094d2 <UART_SetConfig+0x55a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	2b09      	cmp	r3, #9
 8009498:	d016      	beq.n	80094c8 <UART_SetConfig+0x550>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	2b0a      	cmp	r3, #10
 80094a0:	d00d      	beq.n	80094be <UART_SetConfig+0x546>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2b0b      	cmp	r3, #11
 80094a8:	d104      	bne.n	80094b4 <UART_SetConfig+0x53c>
 80094aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ae:	f04f 0400 	mov.w	r4, #0
 80094b2:	e043      	b.n	800953c <UART_SetConfig+0x5c4>
 80094b4:	f04f 0301 	mov.w	r3, #1
 80094b8:	f04f 0400 	mov.w	r4, #0
 80094bc:	e03e      	b.n	800953c <UART_SetConfig+0x5c4>
 80094be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80094c2:	f04f 0400 	mov.w	r4, #0
 80094c6:	e039      	b.n	800953c <UART_SetConfig+0x5c4>
 80094c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80094cc:	f04f 0400 	mov.w	r4, #0
 80094d0:	e034      	b.n	800953c <UART_SetConfig+0x5c4>
 80094d2:	f04f 0320 	mov.w	r3, #32
 80094d6:	f04f 0400 	mov.w	r4, #0
 80094da:	e02f      	b.n	800953c <UART_SetConfig+0x5c4>
 80094dc:	f04f 0310 	mov.w	r3, #16
 80094e0:	f04f 0400 	mov.w	r4, #0
 80094e4:	e02a      	b.n	800953c <UART_SetConfig+0x5c4>
 80094e6:	f04f 030c 	mov.w	r3, #12
 80094ea:	f04f 0400 	mov.w	r4, #0
 80094ee:	e025      	b.n	800953c <UART_SetConfig+0x5c4>
 80094f0:	f04f 030a 	mov.w	r3, #10
 80094f4:	f04f 0400 	mov.w	r4, #0
 80094f8:	e020      	b.n	800953c <UART_SetConfig+0x5c4>
 80094fa:	f04f 0308 	mov.w	r3, #8
 80094fe:	f04f 0400 	mov.w	r4, #0
 8009502:	e01b      	b.n	800953c <UART_SetConfig+0x5c4>
 8009504:	f04f 0306 	mov.w	r3, #6
 8009508:	f04f 0400 	mov.w	r4, #0
 800950c:	e016      	b.n	800953c <UART_SetConfig+0x5c4>
 800950e:	bf00      	nop
 8009510:	0028b0aa 	.word	0x0028b0aa
 8009514:	003d0900 	.word	0x003d0900
 8009518:	007a1200 	.word	0x007a1200
 800951c:	00f42400 	.word	0x00f42400
 8009520:	f04f 0304 	mov.w	r3, #4
 8009524:	f04f 0400 	mov.w	r4, #0
 8009528:	e008      	b.n	800953c <UART_SetConfig+0x5c4>
 800952a:	f04f 0302 	mov.w	r3, #2
 800952e:	f04f 0400 	mov.w	r4, #0
 8009532:	e003      	b.n	800953c <UART_SetConfig+0x5c4>
 8009534:	f04f 0301 	mov.w	r3, #1
 8009538:	f04f 0400 	mov.w	r4, #0
 800953c:	461a      	mov	r2, r3
 800953e:	4623      	mov	r3, r4
 8009540:	f7f6 fe26 	bl	8000190 <__aeabi_uldivmod>
 8009544:	4603      	mov	r3, r0
 8009546:	460c      	mov	r4, r1
 8009548:	4619      	mov	r1, r3
 800954a:	4622      	mov	r2, r4
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	f04f 0400 	mov.w	r4, #0
 8009554:	0214      	lsls	r4, r2, #8
 8009556:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800955a:	020b      	lsls	r3, r1, #8
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6852      	ldr	r2, [r2, #4]
 8009560:	0852      	lsrs	r2, r2, #1
 8009562:	4611      	mov	r1, r2
 8009564:	f04f 0200 	mov.w	r2, #0
 8009568:	eb13 0b01 	adds.w	fp, r3, r1
 800956c:	eb44 0c02 	adc.w	ip, r4, r2
 8009570:	4658      	mov	r0, fp
 8009572:	4661      	mov	r1, ip
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f04f 0400 	mov.w	r4, #0
 800957c:	461a      	mov	r2, r3
 800957e:	4623      	mov	r3, r4
 8009580:	f7f6 fe06 	bl	8000190 <__aeabi_uldivmod>
 8009584:	4603      	mov	r3, r0
 8009586:	460c      	mov	r4, r1
 8009588:	61fb      	str	r3, [r7, #28]
            break;
 800958a:	e1c6      	b.n	800991a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	d05b      	beq.n	800964c <UART_SetConfig+0x6d4>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b01      	cmp	r3, #1
 800959a:	d053      	beq.n	8009644 <UART_SetConfig+0x6cc>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d04b      	beq.n	800963c <UART_SetConfig+0x6c4>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d043      	beq.n	8009634 <UART_SetConfig+0x6bc>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d03b      	beq.n	800962c <UART_SetConfig+0x6b4>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b05      	cmp	r3, #5
 80095ba:	d033      	beq.n	8009624 <UART_SetConfig+0x6ac>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b06      	cmp	r3, #6
 80095c2:	d02b      	beq.n	800961c <UART_SetConfig+0x6a4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b07      	cmp	r3, #7
 80095ca:	d023      	beq.n	8009614 <UART_SetConfig+0x69c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d01b      	beq.n	800960c <UART_SetConfig+0x694>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b09      	cmp	r3, #9
 80095da:	d013      	beq.n	8009604 <UART_SetConfig+0x68c>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b0a      	cmp	r3, #10
 80095e2:	d00b      	beq.n	80095fc <UART_SetConfig+0x684>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b0b      	cmp	r3, #11
 80095ea:	d103      	bne.n	80095f4 <UART_SetConfig+0x67c>
 80095ec:	4bae      	ldr	r3, [pc, #696]	; (80098a8 <UART_SetConfig+0x930>)
 80095ee:	f04f 0400 	mov.w	r4, #0
 80095f2:	e02e      	b.n	8009652 <UART_SetConfig+0x6da>
 80095f4:	4bad      	ldr	r3, [pc, #692]	; (80098ac <UART_SetConfig+0x934>)
 80095f6:	f04f 0400 	mov.w	r4, #0
 80095fa:	e02a      	b.n	8009652 <UART_SetConfig+0x6da>
 80095fc:	4bac      	ldr	r3, [pc, #688]	; (80098b0 <UART_SetConfig+0x938>)
 80095fe:	f04f 0400 	mov.w	r4, #0
 8009602:	e026      	b.n	8009652 <UART_SetConfig+0x6da>
 8009604:	4bab      	ldr	r3, [pc, #684]	; (80098b4 <UART_SetConfig+0x93c>)
 8009606:	f04f 0400 	mov.w	r4, #0
 800960a:	e022      	b.n	8009652 <UART_SetConfig+0x6da>
 800960c:	4baa      	ldr	r3, [pc, #680]	; (80098b8 <UART_SetConfig+0x940>)
 800960e:	f04f 0400 	mov.w	r4, #0
 8009612:	e01e      	b.n	8009652 <UART_SetConfig+0x6da>
 8009614:	4ba9      	ldr	r3, [pc, #676]	; (80098bc <UART_SetConfig+0x944>)
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	e01a      	b.n	8009652 <UART_SetConfig+0x6da>
 800961c:	a49e      	add	r4, pc, #632	; (adr r4, 8009898 <UART_SetConfig+0x920>)
 800961e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009622:	e016      	b.n	8009652 <UART_SetConfig+0x6da>
 8009624:	4ba6      	ldr	r3, [pc, #664]	; (80098c0 <UART_SetConfig+0x948>)
 8009626:	f04f 0400 	mov.w	r4, #0
 800962a:	e012      	b.n	8009652 <UART_SetConfig+0x6da>
 800962c:	4ba5      	ldr	r3, [pc, #660]	; (80098c4 <UART_SetConfig+0x94c>)
 800962e:	f04f 0400 	mov.w	r4, #0
 8009632:	e00e      	b.n	8009652 <UART_SetConfig+0x6da>
 8009634:	a49a      	add	r4, pc, #616	; (adr r4, 80098a0 <UART_SetConfig+0x928>)
 8009636:	e9d4 3400 	ldrd	r3, r4, [r4]
 800963a:	e00a      	b.n	8009652 <UART_SetConfig+0x6da>
 800963c:	4ba2      	ldr	r3, [pc, #648]	; (80098c8 <UART_SetConfig+0x950>)
 800963e:	f04f 0400 	mov.w	r4, #0
 8009642:	e006      	b.n	8009652 <UART_SetConfig+0x6da>
 8009644:	4ba1      	ldr	r3, [pc, #644]	; (80098cc <UART_SetConfig+0x954>)
 8009646:	f04f 0400 	mov.w	r4, #0
 800964a:	e002      	b.n	8009652 <UART_SetConfig+0x6da>
 800964c:	4b97      	ldr	r3, [pc, #604]	; (80098ac <UART_SetConfig+0x934>)
 800964e:	f04f 0400 	mov.w	r4, #0
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6852      	ldr	r2, [r2, #4]
 8009656:	0852      	lsrs	r2, r2, #1
 8009658:	4611      	mov	r1, r2
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	eb13 0b01 	adds.w	fp, r3, r1
 8009662:	eb44 0c02 	adc.w	ip, r4, r2
 8009666:	4658      	mov	r0, fp
 8009668:	4661      	mov	r1, ip
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f04f 0400 	mov.w	r4, #0
 8009672:	461a      	mov	r2, r3
 8009674:	4623      	mov	r3, r4
 8009676:	f7f6 fd8b 	bl	8000190 <__aeabi_uldivmod>
 800967a:	4603      	mov	r3, r0
 800967c:	460c      	mov	r4, r1
 800967e:	61fb      	str	r3, [r7, #28]
            break;
 8009680:	e14b      	b.n	800991a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009682:	f7fe f91f 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 8009686:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	4618      	mov	r0, r3
 800968c:	f04f 0100 	mov.w	r1, #0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	2b00      	cmp	r3, #0
 8009696:	d067      	beq.n	8009768 <UART_SetConfig+0x7f0>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	2b01      	cmp	r3, #1
 800969e:	d05e      	beq.n	800975e <UART_SetConfig+0x7e6>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d055      	beq.n	8009754 <UART_SetConfig+0x7dc>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d04c      	beq.n	800974a <UART_SetConfig+0x7d2>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d043      	beq.n	8009740 <UART_SetConfig+0x7c8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d03a      	beq.n	8009736 <UART_SetConfig+0x7be>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	2b06      	cmp	r3, #6
 80096c6:	d031      	beq.n	800972c <UART_SetConfig+0x7b4>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	2b07      	cmp	r3, #7
 80096ce:	d028      	beq.n	8009722 <UART_SetConfig+0x7aa>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d01f      	beq.n	8009718 <UART_SetConfig+0x7a0>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d016      	beq.n	800970e <UART_SetConfig+0x796>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	2b0a      	cmp	r3, #10
 80096e6:	d00d      	beq.n	8009704 <UART_SetConfig+0x78c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	2b0b      	cmp	r3, #11
 80096ee:	d104      	bne.n	80096fa <UART_SetConfig+0x782>
 80096f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f4:	f04f 0400 	mov.w	r4, #0
 80096f8:	e03a      	b.n	8009770 <UART_SetConfig+0x7f8>
 80096fa:	f04f 0301 	mov.w	r3, #1
 80096fe:	f04f 0400 	mov.w	r4, #0
 8009702:	e035      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009704:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009708:	f04f 0400 	mov.w	r4, #0
 800970c:	e030      	b.n	8009770 <UART_SetConfig+0x7f8>
 800970e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009712:	f04f 0400 	mov.w	r4, #0
 8009716:	e02b      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009718:	f04f 0320 	mov.w	r3, #32
 800971c:	f04f 0400 	mov.w	r4, #0
 8009720:	e026      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009722:	f04f 0310 	mov.w	r3, #16
 8009726:	f04f 0400 	mov.w	r4, #0
 800972a:	e021      	b.n	8009770 <UART_SetConfig+0x7f8>
 800972c:	f04f 030c 	mov.w	r3, #12
 8009730:	f04f 0400 	mov.w	r4, #0
 8009734:	e01c      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009736:	f04f 030a 	mov.w	r3, #10
 800973a:	f04f 0400 	mov.w	r4, #0
 800973e:	e017      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009740:	f04f 0308 	mov.w	r3, #8
 8009744:	f04f 0400 	mov.w	r4, #0
 8009748:	e012      	b.n	8009770 <UART_SetConfig+0x7f8>
 800974a:	f04f 0306 	mov.w	r3, #6
 800974e:	f04f 0400 	mov.w	r4, #0
 8009752:	e00d      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009754:	f04f 0304 	mov.w	r3, #4
 8009758:	f04f 0400 	mov.w	r4, #0
 800975c:	e008      	b.n	8009770 <UART_SetConfig+0x7f8>
 800975e:	f04f 0302 	mov.w	r3, #2
 8009762:	f04f 0400 	mov.w	r4, #0
 8009766:	e003      	b.n	8009770 <UART_SetConfig+0x7f8>
 8009768:	f04f 0301 	mov.w	r3, #1
 800976c:	f04f 0400 	mov.w	r4, #0
 8009770:	461a      	mov	r2, r3
 8009772:	4623      	mov	r3, r4
 8009774:	f7f6 fd0c 	bl	8000190 <__aeabi_uldivmod>
 8009778:	4603      	mov	r3, r0
 800977a:	460c      	mov	r4, r1
 800977c:	4619      	mov	r1, r3
 800977e:	4622      	mov	r2, r4
 8009780:	f04f 0300 	mov.w	r3, #0
 8009784:	f04f 0400 	mov.w	r4, #0
 8009788:	0214      	lsls	r4, r2, #8
 800978a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800978e:	020b      	lsls	r3, r1, #8
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6852      	ldr	r2, [r2, #4]
 8009794:	0852      	lsrs	r2, r2, #1
 8009796:	4611      	mov	r1, r2
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	eb13 0b01 	adds.w	fp, r3, r1
 80097a0:	eb44 0c02 	adc.w	ip, r4, r2
 80097a4:	4658      	mov	r0, fp
 80097a6:	4661      	mov	r1, ip
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f04f 0400 	mov.w	r4, #0
 80097b0:	461a      	mov	r2, r3
 80097b2:	4623      	mov	r3, r4
 80097b4:	f7f6 fcec 	bl	8000190 <__aeabi_uldivmod>
 80097b8:	4603      	mov	r3, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	61fb      	str	r3, [r7, #28]
            break;
 80097be:	e0ac      	b.n	800991a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8089 	beq.w	80098dc <UART_SetConfig+0x964>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d05b      	beq.n	800988a <UART_SetConfig+0x912>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d052      	beq.n	8009880 <UART_SetConfig+0x908>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d04a      	beq.n	8009878 <UART_SetConfig+0x900>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d041      	beq.n	800986e <UART_SetConfig+0x8f6>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d039      	beq.n	8009866 <UART_SetConfig+0x8ee>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b06      	cmp	r3, #6
 80097f8:	d031      	beq.n	800985e <UART_SetConfig+0x8e6>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	2b07      	cmp	r3, #7
 8009800:	d028      	beq.n	8009854 <UART_SetConfig+0x8dc>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b08      	cmp	r3, #8
 8009808:	d01f      	beq.n	800984a <UART_SetConfig+0x8d2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b09      	cmp	r3, #9
 8009810:	d016      	beq.n	8009840 <UART_SetConfig+0x8c8>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	2b0a      	cmp	r3, #10
 8009818:	d00d      	beq.n	8009836 <UART_SetConfig+0x8be>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b0b      	cmp	r3, #11
 8009820:	d104      	bne.n	800982c <UART_SetConfig+0x8b4>
 8009822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009826:	f04f 0400 	mov.w	r4, #0
 800982a:	e05b      	b.n	80098e4 <UART_SetConfig+0x96c>
 800982c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009830:	f04f 0400 	mov.w	r4, #0
 8009834:	e056      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800983a:	f04f 0400 	mov.w	r4, #0
 800983e:	e051      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009844:	f04f 0400 	mov.w	r4, #0
 8009848:	e04c      	b.n	80098e4 <UART_SetConfig+0x96c>
 800984a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800984e:	f04f 0400 	mov.w	r4, #0
 8009852:	e047      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	e042      	b.n	80098e4 <UART_SetConfig+0x96c>
 800985e:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <UART_SetConfig+0x958>)
 8009860:	f04f 0400 	mov.w	r4, #0
 8009864:	e03e      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009866:	4b1b      	ldr	r3, [pc, #108]	; (80098d4 <UART_SetConfig+0x95c>)
 8009868:	f04f 0400 	mov.w	r4, #0
 800986c:	e03a      	b.n	80098e4 <UART_SetConfig+0x96c>
 800986e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009872:	f04f 0400 	mov.w	r4, #0
 8009876:	e035      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009878:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <UART_SetConfig+0x960>)
 800987a:	f04f 0400 	mov.w	r4, #0
 800987e:	e031      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009884:	f04f 0400 	mov.w	r4, #0
 8009888:	e02c      	b.n	80098e4 <UART_SetConfig+0x96c>
 800988a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	e027      	b.n	80098e4 <UART_SetConfig+0x96c>
 8009894:	f3af 8000 	nop.w
 8009898:	14585500 	.word	0x14585500
 800989c:	00000000 	.word	0x00000000
 80098a0:	28b0aa00 	.word	0x28b0aa00
 80098a4:	00000000 	.word	0x00000000
 80098a8:	00f42400 	.word	0x00f42400
 80098ac:	f4240000 	.word	0xf4240000
 80098b0:	01e84800 	.word	0x01e84800
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	07a12000 	.word	0x07a12000
 80098bc:	0f424000 	.word	0x0f424000
 80098c0:	186a0000 	.word	0x186a0000
 80098c4:	1e848000 	.word	0x1e848000
 80098c8:	3d090000 	.word	0x3d090000
 80098cc:	7a120000 	.word	0x7a120000
 80098d0:	000aaa00 	.word	0x000aaa00
 80098d4:	000ccc00 	.word	0x000ccc00
 80098d8:	00155500 	.word	0x00155500
 80098dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80098e0:	f04f 0400 	mov.w	r4, #0
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6852      	ldr	r2, [r2, #4]
 80098e8:	0852      	lsrs	r2, r2, #1
 80098ea:	4611      	mov	r1, r2
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	eb13 0b01 	adds.w	fp, r3, r1
 80098f4:	eb44 0c02 	adc.w	ip, r4, r2
 80098f8:	4658      	mov	r0, fp
 80098fa:	4661      	mov	r1, ip
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	461a      	mov	r2, r3
 8009906:	4623      	mov	r3, r4
 8009908:	f7f6 fc42 	bl	8000190 <__aeabi_uldivmod>
 800990c:	4603      	mov	r3, r0
 800990e:	460c      	mov	r4, r1
 8009910:	61fb      	str	r3, [r7, #28]
            break;
 8009912:	e002      	b.n	800991a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	76fb      	strb	r3, [r7, #27]
            break;
 8009918:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009920:	d308      	bcc.n	8009934 <UART_SetConfig+0x9bc>
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009928:	d204      	bcs.n	8009934 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	60da      	str	r2, [r3, #12]
 8009932:	e35b      	b.n	8009fec <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	76fb      	strb	r3, [r7, #27]
 8009938:	e358      	b.n	8009fec <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009942:	f040 81a6 	bne.w	8009c92 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800994a:	3b01      	subs	r3, #1
 800994c:	2b07      	cmp	r3, #7
 800994e:	f200 8180 	bhi.w	8009c52 <UART_SetConfig+0xcda>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0x9e0>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	08009979 	.word	0x08009979
 800995c:	08009a31 	.word	0x08009a31
 8009960:	08009c53 	.word	0x08009c53
 8009964:	08009ad9 	.word	0x08009ad9
 8009968:	08009c53 	.word	0x08009c53
 800996c:	08009c53 	.word	0x08009c53
 8009970:	08009c53 	.word	0x08009c53
 8009974:	08009b91 	.word	0x08009b91
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009978:	f7fe f838 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 800997c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b00      	cmp	r3, #0
 8009984:	d044      	beq.n	8009a10 <UART_SetConfig+0xa98>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	2b01      	cmp	r3, #1
 800998c:	d03e      	beq.n	8009a0c <UART_SetConfig+0xa94>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	2b02      	cmp	r3, #2
 8009994:	d038      	beq.n	8009a08 <UART_SetConfig+0xa90>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2b03      	cmp	r3, #3
 800999c:	d032      	beq.n	8009a04 <UART_SetConfig+0xa8c>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d02c      	beq.n	8009a00 <UART_SetConfig+0xa88>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d026      	beq.n	80099fc <UART_SetConfig+0xa84>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	2b06      	cmp	r3, #6
 80099b4:	d020      	beq.n	80099f8 <UART_SetConfig+0xa80>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	2b07      	cmp	r3, #7
 80099bc:	d01a      	beq.n	80099f4 <UART_SetConfig+0xa7c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d014      	beq.n	80099f0 <UART_SetConfig+0xa78>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d00e      	beq.n	80099ec <UART_SetConfig+0xa74>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d2:	2b0a      	cmp	r3, #10
 80099d4:	d008      	beq.n	80099e8 <UART_SetConfig+0xa70>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	2b0b      	cmp	r3, #11
 80099dc:	d102      	bne.n	80099e4 <UART_SetConfig+0xa6c>
 80099de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e2:	e016      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e014      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	e012      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	e010      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099f0:	2320      	movs	r3, #32
 80099f2:	e00e      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099f4:	2310      	movs	r3, #16
 80099f6:	e00c      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099f8:	230c      	movs	r3, #12
 80099fa:	e00a      	b.n	8009a12 <UART_SetConfig+0xa9a>
 80099fc:	230a      	movs	r3, #10
 80099fe:	e008      	b.n	8009a12 <UART_SetConfig+0xa9a>
 8009a00:	2308      	movs	r3, #8
 8009a02:	e006      	b.n	8009a12 <UART_SetConfig+0xa9a>
 8009a04:	2306      	movs	r3, #6
 8009a06:	e004      	b.n	8009a12 <UART_SetConfig+0xa9a>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	e002      	b.n	8009a12 <UART_SetConfig+0xa9a>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e000      	b.n	8009a12 <UART_SetConfig+0xa9a>
 8009a10:	2301      	movs	r3, #1
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a18:	005a      	lsls	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	441a      	add	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	61fb      	str	r3, [r7, #28]
        break;
 8009a2e:	e113      	b.n	8009c58 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d043      	beq.n	8009ac0 <UART_SetConfig+0xb48>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d03d      	beq.n	8009abc <UART_SetConfig+0xb44>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d037      	beq.n	8009ab8 <UART_SetConfig+0xb40>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d031      	beq.n	8009ab4 <UART_SetConfig+0xb3c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d02b      	beq.n	8009ab0 <UART_SetConfig+0xb38>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	2b05      	cmp	r3, #5
 8009a5e:	d025      	beq.n	8009aac <UART_SetConfig+0xb34>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b06      	cmp	r3, #6
 8009a66:	d01f      	beq.n	8009aa8 <UART_SetConfig+0xb30>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b07      	cmp	r3, #7
 8009a6e:	d019      	beq.n	8009aa4 <UART_SetConfig+0xb2c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d013      	beq.n	8009aa0 <UART_SetConfig+0xb28>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2b09      	cmp	r3, #9
 8009a7e:	d00d      	beq.n	8009a9c <UART_SetConfig+0xb24>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	2b0a      	cmp	r3, #10
 8009a86:	d007      	beq.n	8009a98 <UART_SetConfig+0xb20>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	2b0b      	cmp	r3, #11
 8009a8e:	d101      	bne.n	8009a94 <UART_SetConfig+0xb1c>
 8009a90:	4b8c      	ldr	r3, [pc, #560]	; (8009cc4 <UART_SetConfig+0xd4c>)
 8009a92:	e016      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009a94:	4b8c      	ldr	r3, [pc, #560]	; (8009cc8 <UART_SetConfig+0xd50>)
 8009a96:	e014      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009a98:	4b8c      	ldr	r3, [pc, #560]	; (8009ccc <UART_SetConfig+0xd54>)
 8009a9a:	e012      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009a9c:	4b8c      	ldr	r3, [pc, #560]	; (8009cd0 <UART_SetConfig+0xd58>)
 8009a9e:	e010      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009aa0:	4b8c      	ldr	r3, [pc, #560]	; (8009cd4 <UART_SetConfig+0xd5c>)
 8009aa2:	e00e      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009aa4:	4b8c      	ldr	r3, [pc, #560]	; (8009cd8 <UART_SetConfig+0xd60>)
 8009aa6:	e00c      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009aa8:	4b8c      	ldr	r3, [pc, #560]	; (8009cdc <UART_SetConfig+0xd64>)
 8009aaa:	e00a      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009aac:	4b8c      	ldr	r3, [pc, #560]	; (8009ce0 <UART_SetConfig+0xd68>)
 8009aae:	e008      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009ab0:	4b8c      	ldr	r3, [pc, #560]	; (8009ce4 <UART_SetConfig+0xd6c>)
 8009ab2:	e006      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009ab4:	4b8c      	ldr	r3, [pc, #560]	; (8009ce8 <UART_SetConfig+0xd70>)
 8009ab6:	e004      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009ab8:	4b8c      	ldr	r3, [pc, #560]	; (8009cec <UART_SetConfig+0xd74>)
 8009aba:	e002      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009abc:	4b8c      	ldr	r3, [pc, #560]	; (8009cf0 <UART_SetConfig+0xd78>)
 8009abe:	e000      	b.n	8009ac2 <UART_SetConfig+0xb4a>
 8009ac0:	4b81      	ldr	r3, [pc, #516]	; (8009cc8 <UART_SetConfig+0xd50>)
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	6852      	ldr	r2, [r2, #4]
 8009ac6:	0852      	lsrs	r2, r2, #1
 8009ac8:	441a      	add	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	61fb      	str	r3, [r7, #28]
        break;
 8009ad6:	e0bf      	b.n	8009c58 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ad8:	f7fd fef4 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 8009adc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d044      	beq.n	8009b70 <UART_SetConfig+0xbf8>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d03e      	beq.n	8009b6c <UART_SetConfig+0xbf4>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d038      	beq.n	8009b68 <UART_SetConfig+0xbf0>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d032      	beq.n	8009b64 <UART_SetConfig+0xbec>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d02c      	beq.n	8009b60 <UART_SetConfig+0xbe8>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	d026      	beq.n	8009b5c <UART_SetConfig+0xbe4>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b06      	cmp	r3, #6
 8009b14:	d020      	beq.n	8009b58 <UART_SetConfig+0xbe0>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b07      	cmp	r3, #7
 8009b1c:	d01a      	beq.n	8009b54 <UART_SetConfig+0xbdc>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d014      	beq.n	8009b50 <UART_SetConfig+0xbd8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d00e      	beq.n	8009b4c <UART_SetConfig+0xbd4>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b0a      	cmp	r3, #10
 8009b34:	d008      	beq.n	8009b48 <UART_SetConfig+0xbd0>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	2b0b      	cmp	r3, #11
 8009b3c:	d102      	bne.n	8009b44 <UART_SetConfig+0xbcc>
 8009b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b42:	e016      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e014      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b48:	2380      	movs	r3, #128	; 0x80
 8009b4a:	e012      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	e010      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b50:	2320      	movs	r3, #32
 8009b52:	e00e      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b54:	2310      	movs	r3, #16
 8009b56:	e00c      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	e00a      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b5c:	230a      	movs	r3, #10
 8009b5e:	e008      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b60:	2308      	movs	r3, #8
 8009b62:	e006      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b64:	2306      	movs	r3, #6
 8009b66:	e004      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	e002      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e000      	b.n	8009b72 <UART_SetConfig+0xbfa>
 8009b70:	2301      	movs	r3, #1
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	005a      	lsls	r2, r3, #1
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	085b      	lsrs	r3, r3, #1
 8009b80:	441a      	add	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	61fb      	str	r3, [r7, #28]
        break;
 8009b8e:	e063      	b.n	8009c58 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d04f      	beq.n	8009c38 <UART_SetConfig+0xcc0>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d048      	beq.n	8009c32 <UART_SetConfig+0xcba>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d041      	beq.n	8009c2c <UART_SetConfig+0xcb4>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d03a      	beq.n	8009c26 <UART_SetConfig+0xcae>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d033      	beq.n	8009c20 <UART_SetConfig+0xca8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d02c      	beq.n	8009c1a <UART_SetConfig+0xca2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	2b06      	cmp	r3, #6
 8009bc6:	d025      	beq.n	8009c14 <UART_SetConfig+0xc9c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	d01e      	beq.n	8009c0e <UART_SetConfig+0xc96>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d017      	beq.n	8009c08 <UART_SetConfig+0xc90>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d010      	beq.n	8009c02 <UART_SetConfig+0xc8a>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b0a      	cmp	r3, #10
 8009be6:	d009      	beq.n	8009bfc <UART_SetConfig+0xc84>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b0b      	cmp	r3, #11
 8009bee:	d102      	bne.n	8009bf6 <UART_SetConfig+0xc7e>
 8009bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf4:	e022      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bfa:	e01f      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c00:	e01c      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c06:	e019      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c0c:	e016      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c12:	e013      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c14:	f241 5354 	movw	r3, #5460	; 0x1554
 8009c18:	e010      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8009c1e:	e00d      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c24:	e00a      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009c2a:	e007      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c30:	e004      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c36:	e001      	b.n	8009c3c <UART_SetConfig+0xcc4>
 8009c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6852      	ldr	r2, [r2, #4]
 8009c40:	0852      	lsrs	r2, r2, #1
 8009c42:	441a      	add	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	61fb      	str	r3, [r7, #28]
        break;
 8009c50:	e002      	b.n	8009c58 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	76fb      	strb	r3, [r7, #27]
        break;
 8009c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	2b0f      	cmp	r3, #15
 8009c5c:	d916      	bls.n	8009c8c <UART_SetConfig+0xd14>
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c64:	d212      	bcs.n	8009c8c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f023 030f 	bic.w	r3, r3, #15
 8009c6e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	085b      	lsrs	r3, r3, #1
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	89fb      	ldrh	r3, [r7, #14]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	89fa      	ldrh	r2, [r7, #14]
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e1af      	b.n	8009fec <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	76fb      	strb	r3, [r7, #27]
 8009c90:	e1ac      	b.n	8009fec <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8009c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c96:	3b01      	subs	r3, #1
 8009c98:	2b07      	cmp	r3, #7
 8009c9a:	f200 8196 	bhi.w	8009fca <UART_SetConfig+0x1052>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <UART_SetConfig+0xd2c>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cf5 	.word	0x08009cf5
 8009ca8:	08009dab 	.word	0x08009dab
 8009cac:	08009fcb 	.word	0x08009fcb
 8009cb0:	08009e55 	.word	0x08009e55
 8009cb4:	08009fcb 	.word	0x08009fcb
 8009cb8:	08009fcb 	.word	0x08009fcb
 8009cbc:	08009fcb 	.word	0x08009fcb
 8009cc0:	08009f0b 	.word	0x08009f0b
 8009cc4:	0001e848 	.word	0x0001e848
 8009cc8:	01e84800 	.word	0x01e84800
 8009ccc:	0003d090 	.word	0x0003d090
 8009cd0:	0007a120 	.word	0x0007a120
 8009cd4:	000f4240 	.word	0x000f4240
 8009cd8:	001e8480 	.word	0x001e8480
 8009cdc:	0028b0aa 	.word	0x0028b0aa
 8009ce0:	0030d400 	.word	0x0030d400
 8009ce4:	003d0900 	.word	0x003d0900
 8009ce8:	00516154 	.word	0x00516154
 8009cec:	007a1200 	.word	0x007a1200
 8009cf0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf4:	f7fd fe7a 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 8009cf8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d044      	beq.n	8009d8c <UART_SetConfig+0xe14>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d03e      	beq.n	8009d88 <UART_SetConfig+0xe10>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d038      	beq.n	8009d84 <UART_SetConfig+0xe0c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d032      	beq.n	8009d80 <UART_SetConfig+0xe08>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d02c      	beq.n	8009d7c <UART_SetConfig+0xe04>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d026      	beq.n	8009d78 <UART_SetConfig+0xe00>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d020      	beq.n	8009d74 <UART_SetConfig+0xdfc>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b07      	cmp	r3, #7
 8009d38:	d01a      	beq.n	8009d70 <UART_SetConfig+0xdf8>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	d014      	beq.n	8009d6c <UART_SetConfig+0xdf4>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d00e      	beq.n	8009d68 <UART_SetConfig+0xdf0>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b0a      	cmp	r3, #10
 8009d50:	d008      	beq.n	8009d64 <UART_SetConfig+0xdec>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b0b      	cmp	r3, #11
 8009d58:	d102      	bne.n	8009d60 <UART_SetConfig+0xde8>
 8009d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d5e:	e016      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e014      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	e012      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d68:	2340      	movs	r3, #64	; 0x40
 8009d6a:	e010      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	e00e      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d70:	2310      	movs	r3, #16
 8009d72:	e00c      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d74:	230c      	movs	r3, #12
 8009d76:	e00a      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d78:	230a      	movs	r3, #10
 8009d7a:	e008      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	e006      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d80:	2306      	movs	r3, #6
 8009d82:	e004      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d84:	2304      	movs	r3, #4
 8009d86:	e002      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e000      	b.n	8009d8e <UART_SetConfig+0xe16>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	085b      	lsrs	r3, r3, #1
 8009d9a:	441a      	add	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	61fb      	str	r3, [r7, #28]
        break;
 8009da8:	e112      	b.n	8009fd0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d044      	beq.n	8009e3c <UART_SetConfig+0xec4>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d03e      	beq.n	8009e38 <UART_SetConfig+0xec0>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d038      	beq.n	8009e34 <UART_SetConfig+0xebc>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d032      	beq.n	8009e30 <UART_SetConfig+0xeb8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d02c      	beq.n	8009e2c <UART_SetConfig+0xeb4>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b05      	cmp	r3, #5
 8009dd8:	d026      	beq.n	8009e28 <UART_SetConfig+0xeb0>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	d020      	beq.n	8009e24 <UART_SetConfig+0xeac>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d01a      	beq.n	8009e20 <UART_SetConfig+0xea8>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d014      	beq.n	8009e1c <UART_SetConfig+0xea4>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d00e      	beq.n	8009e18 <UART_SetConfig+0xea0>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b0a      	cmp	r3, #10
 8009e00:	d008      	beq.n	8009e14 <UART_SetConfig+0xe9c>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b0b      	cmp	r3, #11
 8009e08:	d102      	bne.n	8009e10 <UART_SetConfig+0xe98>
 8009e0a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009e0e:	e016      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e10:	4b80      	ldr	r3, [pc, #512]	; (800a014 <UART_SetConfig+0x109c>)
 8009e12:	e014      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e14:	4b80      	ldr	r3, [pc, #512]	; (800a018 <UART_SetConfig+0x10a0>)
 8009e16:	e012      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e18:	4b80      	ldr	r3, [pc, #512]	; (800a01c <UART_SetConfig+0x10a4>)
 8009e1a:	e010      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e1c:	4b80      	ldr	r3, [pc, #512]	; (800a020 <UART_SetConfig+0x10a8>)
 8009e1e:	e00e      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e20:	4b80      	ldr	r3, [pc, #512]	; (800a024 <UART_SetConfig+0x10ac>)
 8009e22:	e00c      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e24:	4b80      	ldr	r3, [pc, #512]	; (800a028 <UART_SetConfig+0x10b0>)
 8009e26:	e00a      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e28:	4b80      	ldr	r3, [pc, #512]	; (800a02c <UART_SetConfig+0x10b4>)
 8009e2a:	e008      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e2c:	4b80      	ldr	r3, [pc, #512]	; (800a030 <UART_SetConfig+0x10b8>)
 8009e2e:	e006      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e30:	4b80      	ldr	r3, [pc, #512]	; (800a034 <UART_SetConfig+0x10bc>)
 8009e32:	e004      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e34:	4b80      	ldr	r3, [pc, #512]	; (800a038 <UART_SetConfig+0x10c0>)
 8009e36:	e002      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e38:	4b80      	ldr	r3, [pc, #512]	; (800a03c <UART_SetConfig+0x10c4>)
 8009e3a:	e000      	b.n	8009e3e <UART_SetConfig+0xec6>
 8009e3c:	4b75      	ldr	r3, [pc, #468]	; (800a014 <UART_SetConfig+0x109c>)
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6852      	ldr	r2, [r2, #4]
 8009e42:	0852      	lsrs	r2, r2, #1
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	61fb      	str	r3, [r7, #28]
        break;
 8009e52:	e0bd      	b.n	8009fd0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e54:	f7fd fd36 	bl	80078c4 <HAL_RCC_GetSysClockFreq>
 8009e58:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d044      	beq.n	8009eec <UART_SetConfig+0xf74>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d03e      	beq.n	8009ee8 <UART_SetConfig+0xf70>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d038      	beq.n	8009ee4 <UART_SetConfig+0xf6c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d032      	beq.n	8009ee0 <UART_SetConfig+0xf68>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d02c      	beq.n	8009edc <UART_SetConfig+0xf64>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b05      	cmp	r3, #5
 8009e88:	d026      	beq.n	8009ed8 <UART_SetConfig+0xf60>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b06      	cmp	r3, #6
 8009e90:	d020      	beq.n	8009ed4 <UART_SetConfig+0xf5c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2b07      	cmp	r3, #7
 8009e98:	d01a      	beq.n	8009ed0 <UART_SetConfig+0xf58>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	2b08      	cmp	r3, #8
 8009ea0:	d014      	beq.n	8009ecc <UART_SetConfig+0xf54>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	d00e      	beq.n	8009ec8 <UART_SetConfig+0xf50>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	2b0a      	cmp	r3, #10
 8009eb0:	d008      	beq.n	8009ec4 <UART_SetConfig+0xf4c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	2b0b      	cmp	r3, #11
 8009eb8:	d102      	bne.n	8009ec0 <UART_SetConfig+0xf48>
 8009eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ebe:	e016      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e014      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ec4:	2380      	movs	r3, #128	; 0x80
 8009ec6:	e012      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	e010      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	e00e      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	e00c      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	e00a      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ed8:	230a      	movs	r3, #10
 8009eda:	e008      	b.n	8009eee <UART_SetConfig+0xf76>
 8009edc:	2308      	movs	r3, #8
 8009ede:	e006      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ee0:	2306      	movs	r3, #6
 8009ee2:	e004      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	e002      	b.n	8009eee <UART_SetConfig+0xf76>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e000      	b.n	8009eee <UART_SetConfig+0xf76>
 8009eec:	2301      	movs	r3, #1
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	085b      	lsrs	r3, r3, #1
 8009efa:	441a      	add	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	61fb      	str	r3, [r7, #28]
        break;
 8009f08:	e062      	b.n	8009fd0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d04e      	beq.n	8009fb0 <UART_SetConfig+0x1038>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d047      	beq.n	8009faa <UART_SetConfig+0x1032>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d040      	beq.n	8009fa4 <UART_SetConfig+0x102c>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d039      	beq.n	8009f9e <UART_SetConfig+0x1026>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d032      	beq.n	8009f98 <UART_SetConfig+0x1020>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b05      	cmp	r3, #5
 8009f38:	d02b      	beq.n	8009f92 <UART_SetConfig+0x101a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b06      	cmp	r3, #6
 8009f40:	d024      	beq.n	8009f8c <UART_SetConfig+0x1014>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b07      	cmp	r3, #7
 8009f48:	d01d      	beq.n	8009f86 <UART_SetConfig+0x100e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	d016      	beq.n	8009f80 <UART_SetConfig+0x1008>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d00f      	beq.n	8009f7a <UART_SetConfig+0x1002>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b0a      	cmp	r3, #10
 8009f60:	d008      	beq.n	8009f74 <UART_SetConfig+0xffc>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	2b0b      	cmp	r3, #11
 8009f68:	d101      	bne.n	8009f6e <UART_SetConfig+0xff6>
 8009f6a:	2380      	movs	r3, #128	; 0x80
 8009f6c:	e022      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f72:	e01f      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f78:	e01c      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f7e:	e019      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f84:	e016      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f8a:	e013      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f8c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009f90:	e010      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f92:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009f96:	e00d      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f9c:	e00a      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009f9e:	f241 5355 	movw	r3, #5461	; 0x1555
 8009fa2:	e007      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fa8:	e004      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fae:	e001      	b.n	8009fb4 <UART_SetConfig+0x103c>
 8009fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6852      	ldr	r2, [r2, #4]
 8009fb8:	0852      	lsrs	r2, r2, #1
 8009fba:	441a      	add	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	61fb      	str	r3, [r7, #28]
        break;
 8009fc8:	e002      	b.n	8009fd0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	76fb      	strb	r3, [r7, #27]
        break;
 8009fce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	2b0f      	cmp	r3, #15
 8009fd4:	d908      	bls.n	8009fe8 <UART_SetConfig+0x1070>
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fdc:	d204      	bcs.n	8009fe8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69fa      	ldr	r2, [r7, #28]
 8009fe4:	60da      	str	r2, [r3, #12]
 8009fe6:	e001      	b.n	8009fec <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a008:	7efb      	ldrb	r3, [r7, #27]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3728      	adds	r7, #40	; 0x28
 800a00e:	46bd      	mov	sp, r7
 800a010:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a014:	00f42400 	.word	0x00f42400
 800a018:	0001e848 	.word	0x0001e848
 800a01c:	0003d090 	.word	0x0003d090
 800a020:	0007a120 	.word	0x0007a120
 800a024:	000f4240 	.word	0x000f4240
 800a028:	00145855 	.word	0x00145855
 800a02c:	00186a00 	.word	0x00186a00
 800a030:	001e8480 	.word	0x001e8480
 800a034:	0028b0aa 	.word	0x0028b0aa
 800a038:	003d0900 	.word	0x003d0900
 800a03c:	007a1200 	.word	0x007a1200

0800a040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00a      	beq.n	800a06a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f6:	f003 0320 	and.w	r3, r3, #32
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d01a      	beq.n	800a156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13e:	d10a      	bne.n	800a156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	605a      	str	r2, [r3, #4]
  }
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af02      	add	r7, sp, #8
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a194:	f7fb f8ca 	bl	800532c <HAL_GetTick>
 800a198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b08      	cmp	r3, #8
 800a1a6:	d10e      	bne.n	800a1c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f82c 	bl	800a214 <UART_WaitOnFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e022      	b.n	800a20c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d10e      	bne.n	800a1f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f816 	bl	800a214 <UART_WaitOnFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e00c      	b.n	800a20c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4613      	mov	r3, r2
 800a222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a224:	e062      	b.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22c:	d05e      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22e:	f7fb f87d 	bl	800532c <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d302      	bcc.n	800a244 <UART_WaitOnFlagUntilTimeout+0x30>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11d      	bne.n	800a280 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a252:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2220      	movs	r2, #32
 800a268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e045      	b.n	800a30c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d02e      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a29c:	d126      	bne.n	800a2ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2a6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0201 	bic.w	r2, r2, #1
 800a2c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e00f      	b.n	800a30c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	69da      	ldr	r2, [r3, #28]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2301      	moveq	r3, #1
 800a2fe:	2300      	movne	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	429a      	cmp	r2, r3
 800a308:	d08d      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a32a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a34e:	bf00      	nop
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7fe fdf1 	bl	8008f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a39c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7f6 ffbd 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3ea:	bf00      	nop
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a404:	2b01      	cmp	r3, #1
 800a406:	d101      	bne.n	800a40c <HAL_UARTEx_DisableFifoMode+0x16>
 800a408:	2302      	movs	r3, #2
 800a40a:	e027      	b.n	800a45c <HAL_UARTEx_DisableFifoMode+0x66>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2224      	movs	r2, #36	; 0x24
 800a418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0201 	bic.w	r2, r2, #1
 800a432:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a43a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e02d      	b.n	800a4dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2224      	movs	r2, #36	; 0x24
 800a48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f022 0201 	bic.w	r2, r2, #1
 800a4a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f84f 	bl	800a560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d101      	bne.n	800a4fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e02d      	b.n	800a558 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2224      	movs	r2, #36	; 0x24
 800a508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f811 	bl	800a560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a560:	b480      	push	{r7}
 800a562:	b089      	sub	sp, #36	; 0x24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a568:	4a2f      	ldr	r2, [pc, #188]	; (800a628 <UARTEx_SetNbDataToProcess+0xc8>)
 800a56a:	f107 0314 	add.w	r3, r7, #20
 800a56e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a572:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a576:	4a2d      	ldr	r2, [pc, #180]	; (800a62c <UARTEx_SetNbDataToProcess+0xcc>)
 800a578:	f107 030c 	add.w	r3, r7, #12
 800a57c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a580:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d108      	bne.n	800a59e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a59c:	e03d      	b.n	800a61a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a59e:	2308      	movs	r3, #8
 800a5a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	0e5b      	lsrs	r3, r3, #25
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	0f5b      	lsrs	r3, r3, #29
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f003 0307 	and.w	r3, r3, #7
 800a5c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a5c6:	7fbb      	ldrb	r3, [r7, #30]
 800a5c8:	7f3a      	ldrb	r2, [r7, #28]
 800a5ca:	f107 0120 	add.w	r1, r7, #32
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a5d4:	fb02 f303 	mul.w	r3, r2, r3
 800a5d8:	7f3a      	ldrb	r2, [r7, #28]
 800a5da:	f107 0120 	add.w	r1, r7, #32
 800a5de:	440a      	add	r2, r1
 800a5e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a5e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a5f0:	7ffb      	ldrb	r3, [r7, #31]
 800a5f2:	7f7a      	ldrb	r2, [r7, #29]
 800a5f4:	f107 0120 	add.w	r1, r7, #32
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a5fe:	fb02 f303 	mul.w	r3, r2, r3
 800a602:	7f7a      	ldrb	r2, [r7, #29]
 800a604:	f107 0120 	add.w	r1, r7, #32
 800a608:	440a      	add	r2, r1
 800a60a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a60e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a61a:	bf00      	nop
 800a61c:	3724      	adds	r7, #36	; 0x24
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	0800d8e0 	.word	0x0800d8e0
 800a62c:	0800d8e8 	.word	0x0800d8e8

0800a630 <MX_MEMS_Init>:
#include "iks01a2_motion_sensors.h"

extern IKS01A2_MOTION_SENSOR_Axes_t accelero_val;

void MX_MEMS_Init(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800a634:	2102      	movs	r1, #2
 800a636:	2000      	movs	r0, #0
 800a638:	f7fa fa8c 	bl	8004b54 <IKS01A2_MOTION_SENSOR_Init>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800a63c:	bf00      	nop
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800a644:	2102      	movs	r1, #2
 800a646:	2000      	movs	r0, #0
 800a648:	f7fa fb7a 	bl	8004d40 <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelero_val);
 800a64c:	4a03      	ldr	r2, [pc, #12]	; (800a65c <MX_MEMS_Process+0x1c>)
 800a64e:	2102      	movs	r1, #2
 800a650:	2000      	movs	r0, #0
 800a652:	f7fa fbb7 	bl	8004dc4 <IKS01A2_MOTION_SENSOR_GetAxes>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800a656:	bf00      	nop
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	200002c0 	.word	0x200002c0

0800a660 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a66a:	f107 0308 	add.w	r3, r7, #8
 800a66e:	2218      	movs	r2, #24
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f000 ff98 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a678:	233f      	movs	r3, #63	; 0x3f
 800a67a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a67c:	2381      	movs	r3, #129	; 0x81
 800a67e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a680:	1dfb      	adds	r3, r7, #7
 800a682:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a684:	2301      	movs	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a688:	f107 0308 	add.w	r3, r7, #8
 800a68c:	2100      	movs	r1, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f001 fb58 	bl	800bd44 <hci_send_req>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	da01      	bge.n	800a69e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a69a:	23ff      	movs	r3, #255	; 0xff
 800a69c:	e005      	b.n	800a6aa <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	e000      	b.n	800a6aa <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800a6b2:	b5b0      	push	{r4, r5, r7, lr}
 800a6b4:	b0ce      	sub	sp, #312	; 0x138
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4619      	mov	r1, r3
 800a6c0:	1dfb      	adds	r3, r7, #7
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	801a      	strh	r2, [r3, #0]
 800a6cc:	1cbb      	adds	r3, r7, #2
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	801a      	strh	r2, [r3, #0]
 800a6d2:	1dbb      	adds	r3, r7, #6
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a6e0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	f107 0210 	add.w	r2, r7, #16
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a6f0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a6f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3309      	adds	r3, #9
 800a6fc:	f107 0210 	add.w	r2, r7, #16
 800a700:	4413      	add	r3, r2
 800a702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a706:	f107 030f 	add.w	r3, r7, #15
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800a714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a718:	1dfa      	adds	r2, r7, #7
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a71e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a722:	3301      	adds	r3, #1
 800a724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800a728:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a72c:	1d3a      	adds	r2, r7, #4
 800a72e:	8812      	ldrh	r2, [r2, #0]
 800a730:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a738:	3302      	adds	r3, #2
 800a73a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800a73e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a742:	1cba      	adds	r2, r7, #2
 800a744:	8812      	ldrh	r2, [r2, #0]
 800a746:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a74a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a74e:	3302      	adds	r3, #2
 800a750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800a754:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a758:	1dba      	adds	r2, r7, #6
 800a75a:	7812      	ldrb	r2, [r2, #0]
 800a75c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a75e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a762:	3301      	adds	r3, #1
 800a764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800a768:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a76c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a770:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a776:	3301      	adds	r3, #1
 800a778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800a77c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a780:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a784:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a78a:	3301      	adds	r3, #1
 800a78c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800a790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a794:	3308      	adds	r3, #8
 800a796:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800a79a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fef2 	bl	800b588 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a7a4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a7a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800a7b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a7ba:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a7bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800a7c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a7d0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fed7 	bl	800b588 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a7da:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a7de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800a7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ec:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a7f0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a7f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800a7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a800:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a804:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a80a:	3302      	adds	r3, #2
 800a80c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a814:	2218      	movs	r2, #24
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fec5 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a81e:	233f      	movs	r3, #63	; 0x3f
 800a820:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a824:	2383      	movs	r3, #131	; 0x83
 800a826:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a82a:	f107 0310 	add.w	r3, r7, #16
 800a82e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a836:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a83a:	f107 030f 	add.w	r3, r7, #15
 800a83e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f001 fa78 	bl	800bd44 <hci_send_req>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	da01      	bge.n	800a85e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800a85a:	23ff      	movs	r3, #255	; 0xff
 800a85c:	e009      	b.n	800a872 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800a85e:	f107 030f 	add.w	r3, r7, #15
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800a868:	f107 030f 	add.w	r3, r7, #15
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	e000      	b.n	800a872 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a878:	46bd      	mov	sp, r7
 800a87a:	bdb0      	pop	{r4, r5, r7, pc}

0800a87c <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b0cc      	sub	sp, #304	; 0x130
 800a880:	af00      	add	r7, sp, #0
 800a882:	4602      	mov	r2, r0
 800a884:	1dfb      	adds	r3, r7, #7
 800a886:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a888:	f107 0310 	add.w	r3, r7, #16
 800a88c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a890:	f107 030f 	add.w	r3, r7, #15
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800a89e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a2:	1dfa      	adds	r2, r7, #7
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a8a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a8b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8b6:	2218      	movs	r2, #24
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fe74 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8c0:	233f      	movs	r3, #63	; 0x3f
 800a8c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a8c6:	2385      	movs	r3, #133	; 0x85
 800a8c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a8cc:	f107 0310 	add.w	r3, r7, #16
 800a8d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a8d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a8dc:	f107 030f 	add.w	r3, r7, #15
 800a8e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a8ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f001 fa27 	bl	800bd44 <hci_send_req>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	da01      	bge.n	800a900 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800a8fc:	23ff      	movs	r3, #255	; 0xff
 800a8fe:	e009      	b.n	800a914 <aci_gap_set_io_capability+0x98>
  if (status) 
 800a900:	f107 030f 	add.w	r3, r7, #15
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800a90a:	f107 030f 	add.w	r3, r7, #15
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	e000      	b.n	800a914 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800a91e:	b5b0      	push	{r4, r5, r7, lr}
 800a920:	b0cc      	sub	sp, #304	; 0x130
 800a922:	af00      	add	r7, sp, #0
 800a924:	4605      	mov	r5, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	1dfb      	adds	r3, r7, #7
 800a92e:	462a      	mov	r2, r5
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	1dbb      	adds	r3, r7, #6
 800a934:	4622      	mov	r2, r4
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	1d7b      	adds	r3, r7, #5
 800a93a:	4602      	mov	r2, r0
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	1d3b      	adds	r3, r7, #4
 800a940:	460a      	mov	r2, r1
 800a942:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a944:	f107 0310 	add.w	r3, r7, #16
 800a948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a94c:	f107 030f 	add.w	r3, r7, #15
 800a950:	2200      	movs	r2, #0
 800a952:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800a95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a95e:	1dfa      	adds	r2, r7, #7
 800a960:	7812      	ldrb	r2, [r2, #0]
 800a962:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a968:	3301      	adds	r3, #1
 800a96a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800a96e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a972:	1dba      	adds	r2, r7, #6
 800a974:	7812      	ldrb	r2, [r2, #0]
 800a976:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a97c:	3301      	adds	r3, #1
 800a97e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800a982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a986:	1d7a      	adds	r2, r7, #5
 800a988:	7812      	ldrb	r2, [r2, #0]
 800a98a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a98c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a990:	3301      	adds	r3, #1
 800a992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800a996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a99a:	1d3a      	adds	r2, r7, #4
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a9a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800a9aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ae:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a9b2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a9b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800a9be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9c2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a9c6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a9c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800a9d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9d6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a9da:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a9dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800a9e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a9ee:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a9f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800a9fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa00:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aa04:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800aa06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aa10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa14:	2218      	movs	r2, #24
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fdc5 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa1e:	233f      	movs	r3, #63	; 0x3f
 800aa20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800aa24:	2386      	movs	r3, #134	; 0x86
 800aa26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa2a:	f107 0310 	add.w	r3, r7, #16
 800aa2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aa3a:	f107 030f 	add.w	r3, r7, #15
 800aa3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aa42:	2301      	movs	r3, #1
 800aa44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aa48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 f978 	bl	800bd44 <hci_send_req>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da01      	bge.n	800aa5e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800aa5a:	23ff      	movs	r3, #255	; 0xff
 800aa5c:	e009      	b.n	800aa72 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800aa5e:	f107 030f 	add.w	r3, r7, #15
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800aa68:	f107 030f 	add.w	r3, r7, #15
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	e000      	b.n	800aa72 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bdb0      	pop	{r4, r5, r7, pc}

0800aa7c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b0cd      	sub	sp, #308	; 0x134
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	463a      	mov	r2, r7
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	1dfb      	adds	r3, r7, #7
 800aa8e:	4622      	mov	r2, r4
 800aa90:	701a      	strb	r2, [r3, #0]
 800aa92:	1dbb      	adds	r3, r7, #6
 800aa94:	4602      	mov	r2, r0
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	1d7b      	adds	r3, r7, #5
 800aa9a:	460a      	mov	r2, r1
 800aa9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800aa9e:	f107 0310 	add.w	r3, r7, #16
 800aaa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	2207      	movs	r2, #7
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fd7a 	bl	800b5a8 <Osal_MemSet>
  int index_input = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800aaba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aabe:	1dfa      	adds	r2, r7, #7
 800aac0:	7812      	ldrb	r2, [r2, #0]
 800aac2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aac8:	3301      	adds	r3, #1
 800aaca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800aace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aad2:	1dba      	adds	r2, r7, #6
 800aad4:	7812      	ldrb	r2, [r2, #0]
 800aad6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aadc:	3301      	adds	r3, #1
 800aade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800aae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae6:	1d7a      	adds	r2, r7, #5
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aaec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aaf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aafa:	2218      	movs	r2, #24
 800aafc:	2100      	movs	r1, #0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fd52 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab04:	233f      	movs	r3, #63	; 0x3f
 800ab06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ab0a:	238a      	movs	r3, #138	; 0x8a
 800ab0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab10:	f107 0310 	add.w	r3, r7, #16
 800ab14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ab20:	f107 0308 	add.w	r3, r7, #8
 800ab24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ab28:	2307      	movs	r3, #7
 800ab2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 f905 	bl	800bd44 <hci_send_req>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da01      	bge.n	800ab44 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800ab40:	23ff      	movs	r3, #255	; 0xff
 800ab42:	e021      	b.n	800ab88 <aci_gap_init+0x10c>
  if (resp.Status) 
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <aci_gap_init+0xda>
  {
    return resp.Status;
 800ab4e:	f107 0308 	add.w	r3, r7, #8
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	e018      	b.n	800ab88 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	463b      	mov	r3, r7
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ab74:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ab76:	f107 0308 	add.w	r3, r7, #8
 800ab7a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ab84:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd90      	pop	{r4, r7, pc}

0800ab92 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b0cc      	sub	sp, #304	; 0x130
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	4602      	mov	r2, r0
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	1dfb      	adds	r3, r7, #7
 800aba0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800aba2:	f107 0310 	add.w	r3, r7, #16
 800aba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abaa:	f107 030f 	add.w	r3, r7, #15
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800abb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abbc:	1dfa      	adds	r2, r7, #7
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abc6:	3301      	adds	r3, #1
 800abc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800abcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abd0:	1c58      	adds	r0, r3, #1
 800abd2:	1dfb      	adds	r3, r7, #7
 800abd4:	781a      	ldrb	r2, [r3, #0]
 800abd6:	463b      	mov	r3, r7
 800abd8:	6819      	ldr	r1, [r3, #0]
 800abda:	f000 fcd5 	bl	800b588 <Osal_MemCpy>
  index_input += AdvDataLen;
 800abde:	1dfb      	adds	r3, r7, #7
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800abe6:	4413      	add	r3, r2
 800abe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800abec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abf0:	2218      	movs	r2, #24
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fcd7 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800abfa:	233f      	movs	r3, #63	; 0x3f
 800abfc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800ac00:	238e      	movs	r3, #142	; 0x8e
 800ac02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac06:	f107 0310 	add.w	r3, r7, #16
 800ac0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac16:	f107 030f 	add.w	r3, r7, #15
 800ac1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ac24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac28:	2100      	movs	r1, #0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 f88a 	bl	800bd44 <hci_send_req>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da01      	bge.n	800ac3a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800ac36:	23ff      	movs	r3, #255	; 0xff
 800ac38:	e009      	b.n	800ac4e <aci_gap_update_adv_data+0xbc>
  if (status) 
 800ac3a:	f107 030f 	add.w	r3, r7, #15
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <aci_gap_update_adv_data+0xba>
  {
    return status;
 800ac44:	f107 030f 	add.w	r3, r7, #15
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	e000      	b.n	800ac4e <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	2218      	movs	r2, #24
 800ac68:	2100      	movs	r1, #0
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fc9c 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac70:	233f      	movs	r3, #63	; 0x3f
 800ac72:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ac74:	2392      	movs	r3, #146	; 0x92
 800ac76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac78:	1dfb      	adds	r3, r7, #7
 800ac7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ac80:	f107 0308 	add.w	r3, r7, #8
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 f85c 	bl	800bd44 <hci_send_req>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da01      	bge.n	800ac96 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ac92:	23ff      	movs	r3, #255	; 0xff
 800ac94:	e005      	b.n	800aca2 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	e000      	b.n	800aca2 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b088      	sub	sp, #32
 800acae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800acb4:	f107 0308 	add.w	r3, r7, #8
 800acb8:	2218      	movs	r2, #24
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fc73 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acc2:	233f      	movs	r3, #63	; 0x3f
 800acc4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800acc6:	f240 1301 	movw	r3, #257	; 0x101
 800acca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800accc:	1dfb      	adds	r3, r7, #7
 800acce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800acd0:	2301      	movs	r3, #1
 800acd2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800acd4:	f107 0308 	add.w	r3, r7, #8
 800acd8:	2100      	movs	r1, #0
 800acda:	4618      	mov	r0, r3
 800acdc:	f001 f832 	bl	800bd44 <hci_send_req>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	da01      	bge.n	800acea <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ace6:	23ff      	movs	r3, #255	; 0xff
 800ace8:	e005      	b.n	800acf6 <aci_gatt_init+0x4c>
  if (status) 
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <aci_gatt_init+0x4a>
  {
    return status;
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	e000      	b.n	800acf6 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800acfe:	b590      	push	{r4, r7, lr}
 800ad00:	b0cf      	sub	sp, #316	; 0x13c
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	4604      	mov	r4, r0
 800ad06:	4638      	mov	r0, r7
 800ad08:	6001      	str	r1, [r0, #0]
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	1dfb      	adds	r3, r7, #7
 800ad10:	4622      	mov	r2, r4
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	1dbb      	adds	r3, r7, #6
 800ad16:	4602      	mov	r2, r0
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	1d7b      	adds	r3, r7, #5
 800ad1c:	460a      	mov	r2, r1
 800ad1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ad20:	f107 0310 	add.w	r3, r7, #16
 800ad24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ad28:	1dfb      	adds	r3, r7, #7
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d007      	beq.n	800ad40 <aci_gatt_add_service+0x42>
 800ad30:	1dfb      	adds	r3, r7, #7
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d101      	bne.n	800ad3c <aci_gatt_add_service+0x3e>
 800ad38:	2311      	movs	r3, #17
 800ad3a:	e002      	b.n	800ad42 <aci_gatt_add_service+0x44>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e000      	b.n	800ad42 <aci_gatt_add_service+0x44>
 800ad40:	2303      	movs	r3, #3
 800ad42:	f107 0210 	add.w	r2, r7, #16
 800ad46:	4413      	add	r3, r2
 800ad48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ad4c:	f107 030c 	add.w	r3, r7, #12
 800ad50:	2203      	movs	r2, #3
 800ad52:	2100      	movs	r1, #0
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fc27 	bl	800b5a8 <Osal_MemSet>
  int index_input = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800ad60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad64:	1dfa      	adds	r2, r7, #7
 800ad66:	7812      	ldrb	r2, [r2, #0]
 800ad68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad6e:	3301      	adds	r3, #1
 800ad70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800ad74:	1dfb      	adds	r3, r7, #7
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d002      	beq.n	800ad82 <aci_gatt_add_service+0x84>
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d004      	beq.n	800ad8a <aci_gatt_add_service+0x8c>
 800ad80:	e007      	b.n	800ad92 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800ad82:	2302      	movs	r3, #2
 800ad84:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ad88:	e005      	b.n	800ad96 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ad90:	e001      	b.n	800ad96 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800ad92:	2347      	movs	r3, #71	; 0x47
 800ad94:	e05d      	b.n	800ae52 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800ad96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad9a:	1c58      	adds	r0, r3, #1
 800ad9c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800ada0:	463b      	mov	r3, r7
 800ada2:	6819      	ldr	r1, [r3, #0]
 800ada4:	f000 fbf0 	bl	800b588 <Osal_MemCpy>
    index_input += size;
 800ada8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800adac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800adb0:	4413      	add	r3, r2
 800adb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800adb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adba:	1dba      	adds	r2, r7, #6
 800adbc:	7812      	ldrb	r2, [r2, #0]
 800adbe:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800adc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adc4:	3301      	adds	r3, #1
 800adc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800adca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adce:	1d7a      	adds	r2, r7, #5
 800add0:	7812      	ldrb	r2, [r2, #0]
 800add2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800add4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800add8:	3301      	adds	r3, #1
 800adda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800adde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ade2:	2218      	movs	r2, #24
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fbde 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adec:	233f      	movs	r3, #63	; 0x3f
 800adee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800adf2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800adf6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800adfa:	f107 0310 	add.w	r3, r7, #16
 800adfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ae12:	2303      	movs	r3, #3
 800ae14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 ff90 	bl	800bd44 <hci_send_req>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	da01      	bge.n	800ae2e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800ae2a:	23ff      	movs	r3, #255	; 0xff
 800ae2c:	e011      	b.n	800ae52 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800ae2e:	f107 030c 	add.w	r3, r7, #12
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	e008      	b.n	800ae52 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ae40:	f107 030c 	add.w	r3, r7, #12
 800ae44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ae4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd90      	pop	{r4, r7, pc}

0800ae5c <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b0d1      	sub	sp, #324	; 0x144
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	f107 0108 	add.w	r1, r7, #8
 800ae6a:	600a      	str	r2, [r1, #0]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f107 030e 	add.w	r3, r7, #14
 800ae72:	4622      	mov	r2, r4
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	f107 030d 	add.w	r3, r7, #13
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	1dbb      	adds	r3, r7, #6
 800ae80:	460a      	mov	r2, r1
 800ae82:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ae84:	f107 0318 	add.w	r3, r7, #24
 800ae88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ae8c:	f107 030d 	add.w	r3, r7, #13
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d008      	beq.n	800aea8 <aci_gatt_add_char+0x4c>
 800ae96:	f107 030d 	add.w	r3, r7, #13
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d101      	bne.n	800aea4 <aci_gatt_add_char+0x48>
 800aea0:	2313      	movs	r3, #19
 800aea2:	e002      	b.n	800aeaa <aci_gatt_add_char+0x4e>
 800aea4:	2303      	movs	r3, #3
 800aea6:	e000      	b.n	800aeaa <aci_gatt_add_char+0x4e>
 800aea8:	2305      	movs	r3, #5
 800aeaa:	f107 0218 	add.w	r2, r7, #24
 800aeae:	4413      	add	r3, r2
 800aeb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800aeb4:	f107 0314 	add.w	r3, r7, #20
 800aeb8:	2203      	movs	r2, #3
 800aeba:	2100      	movs	r1, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fb73 	bl	800b5a8 <Osal_MemSet>
  int index_input = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800aec8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aecc:	f107 020e 	add.w	r2, r7, #14
 800aed0:	8812      	ldrh	r2, [r2, #0]
 800aed2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aed8:	3302      	adds	r3, #2
 800aeda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800aede:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aee2:	f107 020d 	add.w	r2, r7, #13
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aeea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aeee:	3301      	adds	r3, #1
 800aef0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800aef4:	f107 030d 	add.w	r3, r7, #13
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d002      	beq.n	800af04 <aci_gatt_add_char+0xa8>
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d004      	beq.n	800af0c <aci_gatt_add_char+0xb0>
 800af02:	e007      	b.n	800af14 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800af04:	2302      	movs	r3, #2
 800af06:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800af0a:	e005      	b.n	800af18 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800af0c:	2310      	movs	r3, #16
 800af0e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800af12:	e001      	b.n	800af18 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800af14:	2347      	movs	r3, #71	; 0x47
 800af16:	e086      	b.n	800b026 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800af18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800af1c:	1cd8      	adds	r0, r3, #3
 800af1e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800af22:	f107 0308 	add.w	r3, r7, #8
 800af26:	6819      	ldr	r1, [r3, #0]
 800af28:	f000 fb2e 	bl	800b588 <Osal_MemCpy>
    index_input += size;
 800af2c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800af30:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800af34:	4413      	add	r3, r2
 800af36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800af3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af3e:	1dba      	adds	r2, r7, #6
 800af40:	8812      	ldrh	r2, [r2, #0]
 800af42:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800af44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af48:	3302      	adds	r3, #2
 800af4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800af4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af52:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800af56:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800af58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af5c:	3301      	adds	r3, #1
 800af5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800af62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af66:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800af6a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800af6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af70:	3301      	adds	r3, #1
 800af72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800af76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af7a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800af7e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800af80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af84:	3301      	adds	r3, #1
 800af86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800af8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af8e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800af92:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800af94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af98:	3301      	adds	r3, #1
 800af9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800af9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800afa2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800afa6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800afa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afac:	3301      	adds	r3, #1
 800afae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800afb6:	2218      	movs	r2, #24
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 faf4 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afc0:	233f      	movs	r3, #63	; 0x3f
 800afc2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800afc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800afca:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800afce:	f107 0318 	add.w	r3, r7, #24
 800afd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800afd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800afde:	f107 0314 	add.w	r3, r7, #20
 800afe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800afe6:	2303      	movs	r3, #3
 800afe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800afec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fea6 	bl	800bd44 <hci_send_req>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	da01      	bge.n	800b002 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800affe:	23ff      	movs	r3, #255	; 0xff
 800b000:	e011      	b.n	800b026 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b002:	f107 0314 	add.w	r3, r7, #20
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	e008      	b.n	800b026 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b014:	f107 0314 	add.w	r3, r7, #20
 800b018:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b022:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd90      	pop	{r4, r7, pc}

0800b030 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b030:	b5b0      	push	{r4, r5, r7, lr}
 800b032:	b0cc      	sub	sp, #304	; 0x130
 800b034:	af00      	add	r7, sp, #0
 800b036:	4605      	mov	r5, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	4610      	mov	r0, r2
 800b03c:	4619      	mov	r1, r3
 800b03e:	1dbb      	adds	r3, r7, #6
 800b040:	462a      	mov	r2, r5
 800b042:	801a      	strh	r2, [r3, #0]
 800b044:	1d3b      	adds	r3, r7, #4
 800b046:	4622      	mov	r2, r4
 800b048:	801a      	strh	r2, [r3, #0]
 800b04a:	1cfb      	adds	r3, r7, #3
 800b04c:	4602      	mov	r2, r0
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	1cbb      	adds	r3, r7, #2
 800b052:	460a      	mov	r2, r1
 800b054:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b056:	f107 0310 	add.w	r3, r7, #16
 800b05a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b05e:	f107 030f 	add.w	r3, r7, #15
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b06c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b070:	1dba      	adds	r2, r7, #6
 800b072:	8812      	ldrh	r2, [r2, #0]
 800b074:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b07a:	3302      	adds	r3, #2
 800b07c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b084:	1d3a      	adds	r2, r7, #4
 800b086:	8812      	ldrh	r2, [r2, #0]
 800b088:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b08a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b08e:	3302      	adds	r3, #2
 800b090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b098:	1cfa      	adds	r2, r7, #3
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0ac:	1cba      	adds	r2, r7, #2
 800b0ae:	7812      	ldrb	r2, [r2, #0]
 800b0b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b0b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b0bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c0:	1d98      	adds	r0, r3, #6
 800b0c2:	1cbb      	adds	r3, r7, #2
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b0cc:	f000 fa5c 	bl	800b588 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b0d0:	1cbb      	adds	r3, r7, #2
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0d8:	4413      	add	r3, r2
 800b0da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0e2:	2218      	movs	r2, #24
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fa5e 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0ec:	233f      	movs	r3, #63	; 0x3f
 800b0ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b0f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b0f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0fa:	f107 0310 	add.w	r3, r7, #16
 800b0fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b10a:	f107 030f 	add.w	r3, r7, #15
 800b10e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b112:	2301      	movs	r3, #1
 800b114:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 fe10 	bl	800bd44 <hci_send_req>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	da01      	bge.n	800b12e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b12a:	23ff      	movs	r3, #255	; 0xff
 800b12c:	e009      	b.n	800b142 <aci_gatt_update_char_value+0x112>
  if (status) 
 800b12e:	f107 030f 	add.w	r3, r7, #15
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b138:	f107 030f 	add.w	r3, r7, #15
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	e000      	b.n	800b142 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b148:	46bd      	mov	sp, r7
 800b14a:	bdb0      	pop	{r4, r5, r7, pc}

0800b14c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b0cc      	sub	sp, #304	; 0x130
 800b150:	af00      	add	r7, sp, #0
 800b152:	463b      	mov	r3, r7
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	1dfb      	adds	r3, r7, #7
 800b158:	4602      	mov	r2, r0
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	1dbb      	adds	r3, r7, #6
 800b15e:	460a      	mov	r2, r1
 800b160:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b162:	f107 0310 	add.w	r3, r7, #16
 800b166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b16a:	f107 030f 	add.w	r3, r7, #15
 800b16e:	2200      	movs	r2, #0
 800b170:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b17c:	1dfa      	adds	r2, r7, #7
 800b17e:	7812      	ldrb	r2, [r2, #0]
 800b180:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b186:	3301      	adds	r3, #1
 800b188:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b18c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b190:	1dba      	adds	r2, r7, #6
 800b192:	7812      	ldrb	r2, [r2, #0]
 800b194:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b196:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b19a:	3301      	adds	r3, #1
 800b19c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b1a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a4:	1c98      	adds	r0, r3, #2
 800b1a6:	1dbb      	adds	r3, r7, #6
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	463b      	mov	r3, r7
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	f000 f9eb 	bl	800b588 <Osal_MemCpy>
  index_input += Length;
 800b1b2:	1dbb      	adds	r3, r7, #6
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b1c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1c4:	2218      	movs	r2, #24
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 f9ed 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1ce:	233f      	movs	r3, #63	; 0x3f
 800b1d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b1d4:	230c      	movs	r3, #12
 800b1d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b1da:	f107 0310 	add.w	r3, r7, #16
 800b1de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b1e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1ea:	f107 030f 	add.w	r3, r7, #15
 800b1ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b1f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fda0 	bl	800bd44 <hci_send_req>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	da01      	bge.n	800b20e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b20a:	23ff      	movs	r3, #255	; 0xff
 800b20c:	e009      	b.n	800b222 <aci_hal_write_config_data+0xd6>
  if (status) 
 800b20e:	f107 030f 	add.w	r3, r7, #15
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b218:	f107 030f 	add.w	r3, r7, #15
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	e000      	b.n	800b222 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b0cc      	sub	sp, #304	; 0x130
 800b230:	af00      	add	r7, sp, #0
 800b232:	4602      	mov	r2, r0
 800b234:	1dfb      	adds	r3, r7, #7
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	1dbb      	adds	r3, r7, #6
 800b23a:	460a      	mov	r2, r1
 800b23c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b23e:	f107 0310 	add.w	r3, r7, #16
 800b242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b246:	f107 030f 	add.w	r3, r7, #15
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b258:	1dfa      	adds	r2, r7, #7
 800b25a:	7812      	ldrb	r2, [r2, #0]
 800b25c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b25e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b262:	3301      	adds	r3, #1
 800b264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b26c:	1dba      	adds	r2, r7, #6
 800b26e:	7812      	ldrb	r2, [r2, #0]
 800b270:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b276:	3301      	adds	r3, #1
 800b278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b27c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b280:	2218      	movs	r2, #24
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f000 f98f 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b28a:	233f      	movs	r3, #63	; 0x3f
 800b28c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b290:	230f      	movs	r3, #15
 800b292:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b296:	f107 0310 	add.w	r3, r7, #16
 800b29a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b29e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b2a6:	f107 030f 	add.w	r3, r7, #15
 800b2aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b2b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fd42 	bl	800bd44 <hci_send_req>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da01      	bge.n	800b2ca <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b2c6:	23ff      	movs	r3, #255	; 0xff
 800b2c8:	e009      	b.n	800b2de <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b2ca:	f107 030f 	add.w	r3, r7, #15
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b2d4:	f107 030f 	add.w	r3, r7, #15
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	e000      	b.n	800b2de <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b0cc      	sub	sp, #304	; 0x130
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	1dbb      	adds	r3, r7, #6
 800b2f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b2f4:	f107 0310 	add.w	r3, r7, #16
 800b2f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b2fc:	f107 030f 	add.w	r3, r7, #15
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b30a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b30e:	1dba      	adds	r2, r7, #6
 800b310:	8812      	ldrh	r2, [r2, #0]
 800b312:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b318:	3302      	adds	r3, #2
 800b31a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b31e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b322:	2218      	movs	r2, #24
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f93e 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b32c:	233f      	movs	r3, #63	; 0x3f
 800b32e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b332:	2318      	movs	r3, #24
 800b334:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b338:	f107 0310 	add.w	r3, r7, #16
 800b33c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b348:	f107 030f 	add.w	r3, r7, #15
 800b34c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b350:	2301      	movs	r3, #1
 800b352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b35a:	2100      	movs	r1, #0
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fcf1 	bl	800bd44 <hci_send_req>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	da01      	bge.n	800b36c <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b368:	23ff      	movs	r3, #255	; 0xff
 800b36a:	e009      	b.n	800b380 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b36c:	f107 030f 	add.w	r3, r7, #15
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b376:	f107 030f 	add.w	r3, r7, #15
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	e000      	b.n	800b380 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b088      	sub	sp, #32
 800b38e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b394:	f107 0308 	add.w	r3, r7, #8
 800b398:	2218      	movs	r2, #24
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f903 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x03;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b3aa:	1dfb      	adds	r3, r7, #7
 800b3ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 fcc3 	bl	800bd44 <hci_send_req>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	da01      	bge.n	800b3c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b3c4:	23ff      	movs	r3, #255	; 0xff
 800b3c6:	e005      	b.n	800b3d4 <hci_reset+0x4a>
  if (status) 
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <hci_reset+0x48>
  {
    return status;
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	e000      	b.n	800b3d4 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b0ce      	sub	sp, #312	; 0x138
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	6019      	str	r1, [r3, #0]
 800b3e8:	1d3b      	adds	r3, r7, #4
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	f107 030e 	add.w	r3, r7, #14
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b3f4:	f107 0318 	add.w	r3, r7, #24
 800b3f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b3fc:	f107 0310 	add.w	r3, r7, #16
 800b400:	2205      	movs	r2, #5
 800b402:	2100      	movs	r1, #0
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f8cf 	bl	800b5a8 <Osal_MemSet>
  int index_input = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b414:	f107 020e 	add.w	r2, r7, #14
 800b418:	8812      	ldrh	r2, [r2, #0]
 800b41a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b41c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b420:	3302      	adds	r3, #2
 800b422:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b426:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b42a:	2218      	movs	r2, #24
 800b42c:	2100      	movs	r1, #0
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 f8ba 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x08;
 800b434:	2308      	movs	r3, #8
 800b436:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b43a:	2330      	movs	r3, #48	; 0x30
 800b43c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b440:	f107 0318 	add.w	r3, r7, #24
 800b444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b44c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b450:	f107 0310 	add.w	r3, r7, #16
 800b454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b458:	2305      	movs	r3, #5
 800b45a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b45e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fc6d 	bl	800bd44 <hci_send_req>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	da01      	bge.n	800b474 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b470:	23ff      	movs	r3, #255	; 0xff
 800b472:	e016      	b.n	800b4a2 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800b474:	f107 0310 	add.w	r3, r7, #16
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800b47e:	f107 0310 	add.w	r3, r7, #16
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	e00d      	b.n	800b4a2 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800b486:	f107 0310 	add.w	r3, r7, #16
 800b48a:	78da      	ldrb	r2, [r3, #3]
 800b48c:	f107 0308 	add.w	r3, r7, #8
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800b494:	f107 0310 	add.w	r3, r7, #16
 800b498:	791a      	ldrb	r2, [r3, #4]
 800b49a:	1d3b      	adds	r3, r7, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800b4ac:	b590      	push	{r4, r7, lr}
 800b4ae:	b0cd      	sub	sp, #308	; 0x134
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	1dfb      	adds	r3, r7, #7
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	1dbb      	adds	r3, r7, #6
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	1d7b      	adds	r3, r7, #5
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b4ca:	f107 0310 	add.w	r3, r7, #16
 800b4ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b4d2:	f107 030f 	add.w	r3, r7, #15
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800b4e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4e4:	1dfa      	adds	r2, r7, #7
 800b4e6:	7812      	ldrb	r2, [r2, #0]
 800b4e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800b4f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4f8:	1dba      	adds	r2, r7, #6
 800b4fa:	7812      	ldrb	r2, [r2, #0]
 800b4fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b4fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b502:	3301      	adds	r3, #1
 800b504:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800b508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b50c:	1d7a      	adds	r2, r7, #5
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b516:	3301      	adds	r3, #1
 800b518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b51c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b520:	2218      	movs	r2, #24
 800b522:	2100      	movs	r1, #0
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f83f 	bl	800b5a8 <Osal_MemSet>
  rq.ogf = 0x08;
 800b52a:	2308      	movs	r3, #8
 800b52c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b530:	2331      	movs	r3, #49	; 0x31
 800b532:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b536:	f107 0310 	add.w	r3, r7, #16
 800b53a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b53e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b546:	f107 030f 	add.w	r3, r7, #15
 800b54a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b54e:	2301      	movs	r3, #1
 800b550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b558:	2100      	movs	r1, #0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fbf2 	bl	800bd44 <hci_send_req>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	da01      	bge.n	800b56a <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800b566:	23ff      	movs	r3, #255	; 0xff
 800b568:	e009      	b.n	800b57e <hci_le_set_default_phy+0xd2>
  if (status) 
 800b56a:	f107 030f 	add.w	r3, r7, #15
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <hci_le_set_default_phy+0xd0>
  {
    return status;
 800b574:	f107 030f 	add.w	r3, r7, #15
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	e000      	b.n	800b57e <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b584:	46bd      	mov	sp, r7
 800b586:	bd90      	pop	{r4, r7, pc}

0800b588 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f002 f96b 	bl	800d874 <memcpy>
 800b59e:	4603      	mov	r3, r0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f002 f966 	bl	800d88a <memset>
 800b5be:	4603      	mov	r3, r0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2bff      	cmp	r3, #255	; 0xff
 800b5e2:	d000      	beq.n	800b5e6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b5e4:	e04a      	b.n	800b67c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	3302      	adds	r3, #2
 800b5ea:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f640 4301 	movw	r3, #3073	; 0xc01
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d000      	beq.n	800b5fe <PeerToPeer_Event_Handler+0x36>
          break;
 800b5fc:	e03d      	b.n	800b67a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	3302      	adds	r3, #2
 800b602:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	885b      	ldrh	r3, [r3, #2]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	461a      	mov	r2, r3
 800b60c:	4b1e      	ldr	r3, [pc, #120]	; (800b688 <PeerToPeer_Event_Handler+0xc0>)
 800b60e:	889b      	ldrh	r3, [r3, #4]
 800b610:	3302      	adds	r3, #2
 800b612:	429a      	cmp	r2, r3
 800b614:	d118      	bne.n	800b648 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800b616:	2301      	movs	r3, #1
 800b618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	7a1b      	ldrb	r3, [r3, #8]
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b628:	2300      	movs	r3, #0
 800b62a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b62c:	f107 0308 	add.w	r3, r7, #8
 800b630:	4618      	mov	r0, r3
 800b632:	f001 fbd5 	bl	800cde0 <P2PS_STM_App_Notification>
        break;
 800b636:	e01f      	b.n	800b678 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b638:	2301      	movs	r3, #1
 800b63a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b63c:	f107 0308 	add.w	r3, r7, #8
 800b640:	4618      	mov	r0, r3
 800b642:	f001 fbcd 	bl	800cde0 <P2PS_STM_App_Notification>
        break;
 800b646:	e017      	b.n	800b678 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	885b      	ldrh	r3, [r3, #2]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <PeerToPeer_Event_Handler+0xc0>)
 800b652:	885b      	ldrh	r3, [r3, #2]
 800b654:	3301      	adds	r3, #1
 800b656:	429a      	cmp	r2, r3
 800b658:	d10e      	bne.n	800b678 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	88db      	ldrh	r3, [r3, #6]
 800b662:	b29b      	uxth	r3, r3
 800b664:	b2db      	uxtb	r3, r3
 800b666:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	3308      	adds	r3, #8
 800b66c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4618      	mov	r0, r3
 800b674:	f001 fbb4 	bl	800cde0 <P2PS_STM_App_Notification>
        break;
 800b678:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b67a:	bf00      	nop
  }

  return(return_value);
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b680:	4618      	mov	r0, r3
 800b682:	3728      	adds	r7, #40	; 0x28
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000198 	.word	0x20000198

0800b68c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08a      	sub	sp, #40	; 0x28
 800b690:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b692:	484a      	ldr	r0, [pc, #296]	; (800b7bc <P2PS_STM_Init+0x130>)
 800b694:	f000 f930 	bl	800b8f8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b698:	238f      	movs	r3, #143	; 0x8f
 800b69a:	703b      	strb	r3, [r7, #0]
 800b69c:	23e5      	movs	r3, #229	; 0xe5
 800b69e:	707b      	strb	r3, [r7, #1]
 800b6a0:	23b3      	movs	r3, #179	; 0xb3
 800b6a2:	70bb      	strb	r3, [r7, #2]
 800b6a4:	23d5      	movs	r3, #213	; 0xd5
 800b6a6:	70fb      	strb	r3, [r7, #3]
 800b6a8:	232e      	movs	r3, #46	; 0x2e
 800b6aa:	713b      	strb	r3, [r7, #4]
 800b6ac:	237f      	movs	r3, #127	; 0x7f
 800b6ae:	717b      	strb	r3, [r7, #5]
 800b6b0:	234a      	movs	r3, #74	; 0x4a
 800b6b2:	71bb      	strb	r3, [r7, #6]
 800b6b4:	2398      	movs	r3, #152	; 0x98
 800b6b6:	71fb      	strb	r3, [r7, #7]
 800b6b8:	232a      	movs	r3, #42	; 0x2a
 800b6ba:	723b      	strb	r3, [r7, #8]
 800b6bc:	2348      	movs	r3, #72	; 0x48
 800b6be:	727b      	strb	r3, [r7, #9]
 800b6c0:	237a      	movs	r3, #122	; 0x7a
 800b6c2:	72bb      	strb	r3, [r7, #10]
 800b6c4:	23cc      	movs	r3, #204	; 0xcc
 800b6c6:	72fb      	strb	r3, [r7, #11]
 800b6c8:	2340      	movs	r3, #64	; 0x40
 800b6ca:	733b      	strb	r3, [r7, #12]
 800b6cc:	23fe      	movs	r3, #254	; 0xfe
 800b6ce:	737b      	strb	r3, [r7, #13]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73bb      	strb	r3, [r7, #14]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <P2PS_STM_Init+0x134>)
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	2308      	movs	r3, #8
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	2002      	movs	r0, #2
 800b6e4:	f7ff fb0b 	bl	800acfe <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b6e8:	2319      	movs	r3, #25
 800b6ea:	703b      	strb	r3, [r7, #0]
 800b6ec:	23ed      	movs	r3, #237	; 0xed
 800b6ee:	707b      	strb	r3, [r7, #1]
 800b6f0:	2382      	movs	r3, #130	; 0x82
 800b6f2:	70bb      	strb	r3, [r7, #2]
 800b6f4:	23ae      	movs	r3, #174	; 0xae
 800b6f6:	70fb      	strb	r3, [r7, #3]
 800b6f8:	23ed      	movs	r3, #237	; 0xed
 800b6fa:	713b      	strb	r3, [r7, #4]
 800b6fc:	2321      	movs	r3, #33	; 0x21
 800b6fe:	717b      	strb	r3, [r7, #5]
 800b700:	234c      	movs	r3, #76	; 0x4c
 800b702:	71bb      	strb	r3, [r7, #6]
 800b704:	239d      	movs	r3, #157	; 0x9d
 800b706:	71fb      	strb	r3, [r7, #7]
 800b708:	2341      	movs	r3, #65	; 0x41
 800b70a:	723b      	strb	r3, [r7, #8]
 800b70c:	2345      	movs	r3, #69	; 0x45
 800b70e:	727b      	strb	r3, [r7, #9]
 800b710:	2322      	movs	r3, #34	; 0x22
 800b712:	72bb      	strb	r3, [r7, #10]
 800b714:	238e      	movs	r3, #142	; 0x8e
 800b716:	72fb      	strb	r3, [r7, #11]
 800b718:	2341      	movs	r3, #65	; 0x41
 800b71a:	733b      	strb	r3, [r7, #12]
 800b71c:	23fe      	movs	r3, #254	; 0xfe
 800b71e:	737b      	strb	r3, [r7, #13]
 800b720:	2300      	movs	r3, #0
 800b722:	73bb      	strb	r3, [r7, #14]
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b728:	4b25      	ldr	r3, [pc, #148]	; (800b7c0 <P2PS_STM_Init+0x134>)
 800b72a:	8818      	ldrh	r0, [r3, #0]
 800b72c:	463a      	mov	r2, r7
 800b72e:	4b25      	ldr	r3, [pc, #148]	; (800b7c4 <P2PS_STM_Init+0x138>)
 800b730:	9305      	str	r3, [sp, #20]
 800b732:	2301      	movs	r3, #1
 800b734:	9304      	str	r3, [sp, #16]
 800b736:	230a      	movs	r3, #10
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	2301      	movs	r3, #1
 800b73c:	9302      	str	r3, [sp, #8]
 800b73e:	2300      	movs	r3, #0
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	2306      	movs	r3, #6
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	2302      	movs	r3, #2
 800b748:	2102      	movs	r1, #2
 800b74a:	f7ff fb87 	bl	800ae5c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b74e:	2319      	movs	r3, #25
 800b750:	703b      	strb	r3, [r7, #0]
 800b752:	23ed      	movs	r3, #237	; 0xed
 800b754:	707b      	strb	r3, [r7, #1]
 800b756:	2382      	movs	r3, #130	; 0x82
 800b758:	70bb      	strb	r3, [r7, #2]
 800b75a:	23ae      	movs	r3, #174	; 0xae
 800b75c:	70fb      	strb	r3, [r7, #3]
 800b75e:	23ed      	movs	r3, #237	; 0xed
 800b760:	713b      	strb	r3, [r7, #4]
 800b762:	2321      	movs	r3, #33	; 0x21
 800b764:	717b      	strb	r3, [r7, #5]
 800b766:	234c      	movs	r3, #76	; 0x4c
 800b768:	71bb      	strb	r3, [r7, #6]
 800b76a:	239d      	movs	r3, #157	; 0x9d
 800b76c:	71fb      	strb	r3, [r7, #7]
 800b76e:	2341      	movs	r3, #65	; 0x41
 800b770:	723b      	strb	r3, [r7, #8]
 800b772:	2345      	movs	r3, #69	; 0x45
 800b774:	727b      	strb	r3, [r7, #9]
 800b776:	2322      	movs	r3, #34	; 0x22
 800b778:	72bb      	strb	r3, [r7, #10]
 800b77a:	238e      	movs	r3, #142	; 0x8e
 800b77c:	72fb      	strb	r3, [r7, #11]
 800b77e:	2342      	movs	r3, #66	; 0x42
 800b780:	733b      	strb	r3, [r7, #12]
 800b782:	23fe      	movs	r3, #254	; 0xfe
 800b784:	737b      	strb	r3, [r7, #13]
 800b786:	2300      	movs	r3, #0
 800b788:	73bb      	strb	r3, [r7, #14]
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <P2PS_STM_Init+0x134>)
 800b790:	8818      	ldrh	r0, [r3, #0]
 800b792:	463a      	mov	r2, r7
 800b794:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <P2PS_STM_Init+0x13c>)
 800b796:	9305      	str	r3, [sp, #20]
 800b798:	2301      	movs	r3, #1
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	230a      	movs	r3, #10
 800b79e:	9303      	str	r3, [sp, #12]
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	9302      	str	r3, [sp, #8]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	2102      	movs	r1, #2
 800b7b0:	f7ff fb54 	bl	800ae5c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b7b4:	bf00      	nop
}
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	0800b5c9 	.word	0x0800b5c9
 800b7c0:	20000198 	.word	0x20000198
 800b7c4:	2000019a 	.word	0x2000019a
 800b7c8:	2000019c 	.word	0x2000019c

0800b7cc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  return;
 800b7d0:	bf00      	nop
}
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b7da:	b480      	push	{r7}
 800b7dc:	af00      	add	r7, sp, #0
  return;
 800b7de:	bf00      	nop
}
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	af00      	add	r7, sp, #0
  return;
 800b7ec:	bf00      	nop
}
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	af00      	add	r7, sp, #0
  return;
 800b7fa:	bf00      	nop
}
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b804:	b480      	push	{r7}
 800b806:	af00      	add	r7, sp, #0
  return;
 800b808:	bf00      	nop
}
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b812:	b480      	push	{r7}
 800b814:	af00      	add	r7, sp, #0
  return;
 800b816:	bf00      	nop
}
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
  return;
 800b824:	bf00      	nop
}
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <IAS_Init>:
__weak void IAS_Init( void )
{
 800b82e:	b480      	push	{r7}
 800b830:	af00      	add	r7, sp, #0
  return;
 800b832:	bf00      	nop
}
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <LLS_Init>:
__weak void LLS_Init( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
  return;
 800b840:	bf00      	nop
}
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <TPS_Init>:
__weak void TPS_Init( void )
{
 800b84a:	b480      	push	{r7}
 800b84c:	af00      	add	r7, sp, #0
  return;
 800b84e:	bf00      	nop
}
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b858:	b480      	push	{r7}
 800b85a:	af00      	add	r7, sp, #0
  return;
 800b85c:	bf00      	nop
}
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b866:	b480      	push	{r7}
 800b868:	af00      	add	r7, sp, #0
  return;
 800b86a:	bf00      	nop
}
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
  return;
 800b878:	bf00      	nop
}
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b882:	b480      	push	{r7}
 800b884:	af00      	add	r7, sp, #0
  return;
 800b886:	bf00      	nop
}
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b894:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <SVCCTL_Init+0x18>)
 800b896:	2200      	movs	r2, #0
 800b898:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <SVCCTL_Init+0x1c>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b8a0:	f000 f806 	bl	800b8b0 <SVCCTL_SvcInit>

  return;
 800b8a4:	bf00      	nop
}
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	200001a0 	.word	0x200001a0
 800b8ac:	200001c0 	.word	0x200001c0

0800b8b0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  BLS_Init();
 800b8b4:	f7ff ff8a 	bl	800b7cc <BLS_Init>

  CRS_STM_Init();
 800b8b8:	f7ff ff8f 	bl	800b7da <CRS_STM_Init>

  DIS_Init();
 800b8bc:	f7ff ff94 	bl	800b7e8 <DIS_Init>

  EDS_STM_Init();
 800b8c0:	f7ff ff99 	bl	800b7f6 <EDS_STM_Init>

  HIDS_Init();
 800b8c4:	f7ff ff9e 	bl	800b804 <HIDS_Init>

  HRS_Init();
 800b8c8:	f7ff ffa3 	bl	800b812 <HRS_Init>

  HTS_Init();
 800b8cc:	f7ff ffa8 	bl	800b820 <HTS_Init>

  IAS_Init();
 800b8d0:	f7ff ffad 	bl	800b82e <IAS_Init>

  LLS_Init();
 800b8d4:	f7ff ffb2 	bl	800b83c <LLS_Init>

  TPS_Init();
 800b8d8:	f7ff ffb7 	bl	800b84a <TPS_Init>

  MOTENV_STM_Init();
 800b8dc:	f7ff ffbc 	bl	800b858 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b8e0:	f7ff fed4 	bl	800b68c <P2PS_STM_Init>

  OTAS_STM_Init();
 800b8e4:	f7ff ffbf 	bl	800b866 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b8e8:	f7ff ffcb 	bl	800b882 <BVOPUS_STM_Init>

  MESH_Init();
 800b8ec:	f7ff ffc2 	bl	800b874 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b8f0:	f000 f8ea 	bl	800bac8 <SVCCTL_InitCustomSvc>
  
  return;
 800b8f4:	bf00      	nop
}
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <SVCCTL_RegisterSvcHandler+0x30>)
 800b902:	7f1b      	ldrb	r3, [r3, #28]
 800b904:	4619      	mov	r1, r3
 800b906:	4a08      	ldr	r2, [pc, #32]	; (800b928 <SVCCTL_RegisterSvcHandler+0x30>)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <SVCCTL_RegisterSvcHandler+0x30>)
 800b910:	7f1b      	ldrb	r3, [r3, #28]
 800b912:	3301      	adds	r3, #1
 800b914:	b2da      	uxtb	r2, r3
 800b916:	4b04      	ldr	r3, [pc, #16]	; (800b928 <SVCCTL_RegisterSvcHandler+0x30>)
 800b918:	771a      	strb	r2, [r3, #28]

  return;
 800b91a:	bf00      	nop
}
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	200001a0 	.word	0x200001a0

0800b92c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3301      	adds	r3, #1
 800b938:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b93a:	2300      	movs	r3, #0
 800b93c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2bff      	cmp	r3, #255	; 0xff
 800b944:	d000      	beq.n	800b948 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b946:	e025      	b.n	800b994 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	3302      	adds	r3, #2
 800b94c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b95c:	d000      	beq.n	800b960 <SVCCTL_UserEvtRx+0x34>
          break;
 800b95e:	e018      	b.n	800b992 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b960:	2300      	movs	r3, #0
 800b962:	757b      	strb	r3, [r7, #21]
 800b964:	e00d      	b.n	800b982 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b966:	7d7b      	ldrb	r3, [r7, #21]
 800b968:	4a18      	ldr	r2, [pc, #96]	; (800b9cc <SVCCTL_UserEvtRx+0xa0>)
 800b96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
 800b972:	4603      	mov	r3, r0
 800b974:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d108      	bne.n	800b98e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b97c:	7d7b      	ldrb	r3, [r7, #21]
 800b97e:	3301      	adds	r3, #1
 800b980:	757b      	strb	r3, [r7, #21]
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <SVCCTL_UserEvtRx+0xa0>)
 800b984:	7f1b      	ldrb	r3, [r3, #28]
 800b986:	7d7a      	ldrb	r2, [r7, #21]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d3ec      	bcc.n	800b966 <SVCCTL_UserEvtRx+0x3a>
          break;
 800b98c:	e000      	b.n	800b990 <SVCCTL_UserEvtRx+0x64>
              break;
 800b98e:	bf00      	nop
          break;
 800b990:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b992:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d009      	beq.n	800b9ae <SVCCTL_UserEvtRx+0x82>
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d00a      	beq.n	800b9b4 <SVCCTL_UserEvtRx+0x88>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10b      	bne.n	800b9ba <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 ff4e 	bl	800c844 <SVCCTL_App_Notification>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75bb      	strb	r3, [r7, #22]
      break;
 800b9ac:	e008      	b.n	800b9c0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	75bb      	strb	r3, [r7, #22]
      break;
 800b9b2:	e005      	b.n	800b9c0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	75bb      	strb	r3, [r7, #22]
      break;
 800b9b8:	e002      	b.n	800b9c0 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	75bb      	strb	r3, [r7, #22]
      break;
 800b9be:	bf00      	nop
  }

  return (return_status);
 800b9c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	200001a0 	.word	0x200001a0

0800b9d0 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2bff      	cmp	r3, #255	; 0xff
 800b9ea:	d000      	beq.n	800b9ee <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b9ec:	e063      	b.n	800bab6 <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	3302      	adds	r3, #2
 800b9f2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f640 4301 	movw	r3, #3073	; 0xc01
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d000      	beq.n	800ba06 <Template_Event_Handler+0x36>
          break;
 800ba04:	e056      	b.n	800bab4 <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	3302      	adds	r3, #2
 800ba0a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	885b      	ldrh	r3, [r3, #2]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	461a      	mov	r2, r3
 800ba14:	4b2b      	ldr	r3, [pc, #172]	; (800bac4 <Template_Event_Handler+0xf4>)
 800ba16:	889b      	ldrh	r3, [r3, #4]
 800ba18:	3302      	adds	r3, #2
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d118      	bne.n	800ba50 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	7a1b      	ldrb	r3, [r3, #8]
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d007      	beq.n	800ba40 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800ba30:	2300      	movs	r3, #0
 800ba32:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800ba34:	f107 0308 	add.w	r3, r7, #8
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f001 fa0d 	bl	800ce58 <TEMPLATE_STM_App_Notification>
        break;
 800ba3e:	e038      	b.n	800bab2 <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800ba40:	2301      	movs	r3, #1
 800ba42:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800ba44:	f107 0308 	add.w	r3, r7, #8
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fa05 	bl	800ce58 <TEMPLATE_STM_App_Notification>
        break;
 800ba4e:	e030      	b.n	800bab2 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	885b      	ldrh	r3, [r3, #2]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	461a      	mov	r2, r3
 800ba58:	4b1a      	ldr	r3, [pc, #104]	; (800bac4 <Template_Event_Handler+0xf4>)
 800ba5a:	885b      	ldrh	r3, [r3, #2]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d10f      	bne.n	800ba82 <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	88db      	ldrh	r3, [r3, #6]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	3308      	adds	r3, #8
 800ba74:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800ba76:	f107 0308 	add.w	r3, r7, #8
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f001 f9ec 	bl	800ce58 <TEMPLATE_STM_App_Notification>
        break;
 800ba80:	e017      	b.n	800bab2 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	885b      	ldrh	r3, [r3, #2]
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <Template_Event_Handler+0xf4>)
 800ba8c:	88db      	ldrh	r3, [r3, #6]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d10e      	bne.n	800bab2 <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800ba94:	2304      	movs	r3, #4
 800ba96:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	88db      	ldrh	r3, [r3, #6]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	3308      	adds	r3, #8
 800baa6:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800baa8:	f107 0308 	add.w	r3, r7, #8
 800baac:	4618      	mov	r0, r3
 800baae:	f001 f9d3 	bl	800ce58 <TEMPLATE_STM_App_Notification>
        break;
 800bab2:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bab4:	bf00      	nop
  }

  return(return_value);
 800bab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800baba:	4618      	mov	r0, r3
 800babc:	3728      	adds	r7, #40	; 0x28
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	200001c4 	.word	0x200001c4

0800bac8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	; 0x28
 800bacc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800bace:	484a      	ldr	r0, [pc, #296]	; (800bbf8 <SVCCTL_InitCustomSvc+0x130>)
 800bad0:	f7ff ff12 	bl	800b8f8 <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800bad4:	238f      	movs	r3, #143	; 0x8f
 800bad6:	703b      	strb	r3, [r7, #0]
 800bad8:	23e5      	movs	r3, #229	; 0xe5
 800bada:	707b      	strb	r3, [r7, #1]
 800badc:	23b3      	movs	r3, #179	; 0xb3
 800bade:	70bb      	strb	r3, [r7, #2]
 800bae0:	23d5      	movs	r3, #213	; 0xd5
 800bae2:	70fb      	strb	r3, [r7, #3]
 800bae4:	232e      	movs	r3, #46	; 0x2e
 800bae6:	713b      	strb	r3, [r7, #4]
 800bae8:	237f      	movs	r3, #127	; 0x7f
 800baea:	717b      	strb	r3, [r7, #5]
 800baec:	234a      	movs	r3, #74	; 0x4a
 800baee:	71bb      	strb	r3, [r7, #6]
 800baf0:	2398      	movs	r3, #152	; 0x98
 800baf2:	71fb      	strb	r3, [r7, #7]
 800baf4:	232a      	movs	r3, #42	; 0x2a
 800baf6:	723b      	strb	r3, [r7, #8]
 800baf8:	2348      	movs	r3, #72	; 0x48
 800bafa:	727b      	strb	r3, [r7, #9]
 800bafc:	237a      	movs	r3, #122	; 0x7a
 800bafe:	72bb      	strb	r3, [r7, #10]
 800bb00:	23cc      	movs	r3, #204	; 0xcc
 800bb02:	72fb      	strb	r3, [r7, #11]
 800bb04:	23bb      	movs	r3, #187	; 0xbb
 800bb06:	733b      	strb	r3, [r7, #12]
 800bb08:	23aa      	movs	r3, #170	; 0xaa
 800bb0a:	737b      	strb	r3, [r7, #13]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73bb      	strb	r3, [r7, #14]
 800bb10:	2300      	movs	r3, #0
 800bb12:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800bb14:	4639      	mov	r1, r7
 800bb16:	4b39      	ldr	r3, [pc, #228]	; (800bbfc <SVCCTL_InitCustomSvc+0x134>)
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	2002      	movs	r0, #2
 800bb20:	f7ff f8ed 	bl	800acfe <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800bb24:	2319      	movs	r3, #25
 800bb26:	703b      	strb	r3, [r7, #0]
 800bb28:	23ed      	movs	r3, #237	; 0xed
 800bb2a:	707b      	strb	r3, [r7, #1]
 800bb2c:	2382      	movs	r3, #130	; 0x82
 800bb2e:	70bb      	strb	r3, [r7, #2]
 800bb30:	23ae      	movs	r3, #174	; 0xae
 800bb32:	70fb      	strb	r3, [r7, #3]
 800bb34:	23ed      	movs	r3, #237	; 0xed
 800bb36:	713b      	strb	r3, [r7, #4]
 800bb38:	2321      	movs	r3, #33	; 0x21
 800bb3a:	717b      	strb	r3, [r7, #5]
 800bb3c:	234c      	movs	r3, #76	; 0x4c
 800bb3e:	71bb      	strb	r3, [r7, #6]
 800bb40:	239d      	movs	r3, #157	; 0x9d
 800bb42:	71fb      	strb	r3, [r7, #7]
 800bb44:	2341      	movs	r3, #65	; 0x41
 800bb46:	723b      	strb	r3, [r7, #8]
 800bb48:	2345      	movs	r3, #69	; 0x45
 800bb4a:	727b      	strb	r3, [r7, #9]
 800bb4c:	2322      	movs	r3, #34	; 0x22
 800bb4e:	72bb      	strb	r3, [r7, #10]
 800bb50:	238e      	movs	r3, #142	; 0x8e
 800bb52:	72fb      	strb	r3, [r7, #11]
 800bb54:	23cc      	movs	r3, #204	; 0xcc
 800bb56:	733b      	strb	r3, [r7, #12]
 800bb58:	23aa      	movs	r3, #170	; 0xaa
 800bb5a:	737b      	strb	r3, [r7, #13]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73bb      	strb	r3, [r7, #14]
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800bb64:	4b25      	ldr	r3, [pc, #148]	; (800bbfc <SVCCTL_InitCustomSvc+0x134>)
 800bb66:	8818      	ldrh	r0, [r3, #0]
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4b25      	ldr	r3, [pc, #148]	; (800bc00 <SVCCTL_InitCustomSvc+0x138>)
 800bb6c:	9305      	str	r3, [sp, #20]
 800bb6e:	2301      	movs	r3, #1
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	230a      	movs	r3, #10
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	2301      	movs	r3, #1
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	2306      	movs	r3, #6
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	2302      	movs	r3, #2
 800bb84:	2102      	movs	r1, #2
 800bb86:	f7ff f969 	bl	800ae5c <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800bb8a:	2319      	movs	r3, #25
 800bb8c:	703b      	strb	r3, [r7, #0]
 800bb8e:	23ed      	movs	r3, #237	; 0xed
 800bb90:	707b      	strb	r3, [r7, #1]
 800bb92:	2382      	movs	r3, #130	; 0x82
 800bb94:	70bb      	strb	r3, [r7, #2]
 800bb96:	23ae      	movs	r3, #174	; 0xae
 800bb98:	70fb      	strb	r3, [r7, #3]
 800bb9a:	23ed      	movs	r3, #237	; 0xed
 800bb9c:	713b      	strb	r3, [r7, #4]
 800bb9e:	2321      	movs	r3, #33	; 0x21
 800bba0:	717b      	strb	r3, [r7, #5]
 800bba2:	234c      	movs	r3, #76	; 0x4c
 800bba4:	71bb      	strb	r3, [r7, #6]
 800bba6:	239d      	movs	r3, #157	; 0x9d
 800bba8:	71fb      	strb	r3, [r7, #7]
 800bbaa:	2341      	movs	r3, #65	; 0x41
 800bbac:	723b      	strb	r3, [r7, #8]
 800bbae:	2345      	movs	r3, #69	; 0x45
 800bbb0:	727b      	strb	r3, [r7, #9]
 800bbb2:	2322      	movs	r3, #34	; 0x22
 800bbb4:	72bb      	strb	r3, [r7, #10]
 800bbb6:	238e      	movs	r3, #142	; 0x8e
 800bbb8:	72fb      	strb	r3, [r7, #11]
 800bbba:	23dd      	movs	r3, #221	; 0xdd
 800bbbc:	733b      	strb	r3, [r7, #12]
 800bbbe:	23aa      	movs	r3, #170	; 0xaa
 800bbc0:	737b      	strb	r3, [r7, #13]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73bb      	strb	r3, [r7, #14]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <SVCCTL_InitCustomSvc+0x134>)
 800bbcc:	8818      	ldrh	r0, [r3, #0]
 800bbce:	463a      	mov	r2, r7
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <SVCCTL_InitCustomSvc+0x13c>)
 800bbd2:	9305      	str	r3, [sp, #20]
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	230a      	movs	r3, #10
 800bbda:	9303      	str	r3, [sp, #12]
 800bbdc:	2301      	movs	r3, #1
 800bbde:	9302      	str	r3, [sp, #8]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	2310      	movs	r3, #16
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	2302      	movs	r3, #2
 800bbea:	2102      	movs	r1, #2
 800bbec:	f7ff f936 	bl	800ae5c <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800bbf0:	bf00      	nop
}
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	0800b9d1 	.word	0x0800b9d1
 800bbfc:	200001c4 	.word	0x200001c4
 800bc00:	200001c6 	.word	0x200001c6
 800bc04:	200001c8 	.word	0x200001c8

0800bc08 <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800bc14:	2342      	movs	r3, #66	; 0x42
 800bc16:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d000      	beq.n	800bc20 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800bc1e:	e00c      	b.n	800bc3a <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800bc20:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bc22:	8818      	ldrh	r0, [r3, #0]
 800bc24:	4b07      	ldr	r3, [pc, #28]	; (800bc44 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bc26:	8899      	ldrh	r1, [r3, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f7ff f9fe 	bl	800b030 <aci_gatt_update_char_value>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
      break;
 800bc38:	bf00      	nop
  }

  return result;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200001c4 	.word	0x200001c4

0800bc48 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	2121      	movs	r1, #33	; 0x21
 800bc60:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bc64:	f000 fa00 	bl	800c068 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	330b      	adds	r3, #11
 800bc6c:	78db      	ldrb	r3, [r3, #3]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <hci_init+0x30>)
 800bc88:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bc8a:	4a08      	ldr	r2, [pc, #32]	; (800bcac <hci_init+0x34>)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bc90:	4806      	ldr	r0, [pc, #24]	; (800bcac <hci_init+0x34>)
 800bc92:	f000 f96f 	bl	800bf74 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f8d0 	bl	800be40 <TlInit>

  return;
 800bca0:	bf00      	nop
}
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	200003bc 	.word	0x200003bc
 800bcac:	20000394 	.word	0x20000394

0800bcb0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bcb6:	4820      	ldr	r0, [pc, #128]	; (800bd38 <hci_user_evt_proc+0x88>)
 800bcb8:	f000 fc92 	bl	800c5e0 <LST_is_empty>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d128      	bne.n	800bd14 <hci_user_evt_proc+0x64>
 800bcc2:	4b1e      	ldr	r3, [pc, #120]	; (800bd3c <hci_user_evt_proc+0x8c>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d024      	beq.n	800bd14 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bcca:	f107 030c 	add.w	r3, r7, #12
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4819      	ldr	r0, [pc, #100]	; (800bd38 <hci_user_evt_proc+0x88>)
 800bcd2:	f000 fd0c 	bl	800c6ee <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bcd6:	4b19      	ldr	r3, [pc, #100]	; (800bd3c <hci_user_evt_proc+0x8c>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800bcdc:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <hci_user_evt_proc+0x90>)
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d009      	beq.n	800bcf8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <hci_user_evt_proc+0x90>)
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	1d3a      	adds	r2, r7, #4
 800bcee:	4610      	mov	r0, r2
 800bcf0:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bcf2:	793a      	ldrb	r2, [r7, #4]
 800bcf4:	4b11      	ldr	r3, [pc, #68]	; (800bd3c <hci_user_evt_proc+0x8c>)
 800bcf6:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bcf8:	4b10      	ldr	r3, [pc, #64]	; (800bd3c <hci_user_evt_proc+0x8c>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d004      	beq.n	800bd0a <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 fbca 	bl	800c49c <TL_MM_EvtDone>
 800bd08:	e004      	b.n	800bd14 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	480a      	ldr	r0, [pc, #40]	; (800bd38 <hci_user_evt_proc+0x88>)
 800bd10:	f000 fc86 	bl	800c620 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bd14:	4808      	ldr	r0, [pc, #32]	; (800bd38 <hci_user_evt_proc+0x88>)
 800bd16:	f000 fc63 	bl	800c5e0 <LST_is_empty>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d107      	bne.n	800bd30 <hci_user_evt_proc+0x80>
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <hci_user_evt_proc+0x8c>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bd28:	4803      	ldr	r0, [pc, #12]	; (800bd38 <hci_user_evt_proc+0x88>)
 800bd2a:	f001 f800 	bl	800cd2e <hci_notify_asynch_evt>
  }


  return;
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
}
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	200001d0 	.word	0x200001d0
 800bd3c:	200001dc 	.word	0x200001dc
 800bd40:	20000394 	.word	0x20000394

0800bd44 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bd50:	2000      	movs	r0, #0
 800bd52:	f000 f8cb 	bl	800beec <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bd56:	2300      	movs	r3, #0
 800bd58:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	885b      	ldrh	r3, [r3, #2]
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd64:	b21a      	sxth	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	029b      	lsls	r3, r3, #10
 800bd6c:	b21b      	sxth	r3, r3
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	b21b      	sxth	r3, r3
 800bd72:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	b2d9      	uxtb	r1, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	689a      	ldr	r2, [r3, #8]
 800bd7e:	8bbb      	ldrh	r3, [r7, #28]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f88d 	bl	800bea0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bd86:	e04e      	b.n	800be26 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bd88:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bd8c:	f000 ffe6 	bl	800cd5c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bd90:	e043      	b.n	800be1a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bd92:	f107 030c 	add.w	r3, r7, #12
 800bd96:	4619      	mov	r1, r3
 800bd98:	4828      	ldr	r0, [pc, #160]	; (800be3c <hci_send_req+0xf8>)
 800bd9a:	f000 fca8 	bl	800c6ee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	7a5b      	ldrb	r3, [r3, #9]
 800bda2:	2b0f      	cmp	r3, #15
 800bda4:	d114      	bne.n	800bdd0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	330b      	adds	r3, #11
 800bdaa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	885b      	ldrh	r3, [r3, #2]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	8bba      	ldrh	r2, [r7, #28]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d104      	bne.n	800bdc2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	7812      	ldrb	r2, [r2, #0]
 800bdc0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	785b      	ldrb	r3, [r3, #1]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d027      	beq.n	800be1a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e024      	b.n	800be1a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	330b      	adds	r3, #11
 800bdd4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	8bba      	ldrh	r2, [r7, #28]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d114      	bne.n	800be0e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	7a9b      	ldrb	r3, [r3, #10]
 800bde8:	3b03      	subs	r3, #3
 800bdea:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695a      	ldr	r2, [r3, #20]
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bfa8      	it	ge
 800bdf6:	461a      	movge	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6918      	ldr	r0, [r3, #16]
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	1cd9      	adds	r1, r3, #3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	461a      	mov	r2, r3
 800be0a:	f001 fd33 	bl	800d874 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800be16:	2301      	movs	r3, #1
 800be18:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800be1a:	4808      	ldr	r0, [pc, #32]	; (800be3c <hci_send_req+0xf8>)
 800be1c:	f000 fbe0 	bl	800c5e0 <LST_is_empty>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0b5      	beq.n	800bd92 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800be26:	7ffb      	ldrb	r3, [r7, #31]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0ad      	beq.n	800bd88 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800be2c:	2001      	movs	r0, #1
 800be2e:	f000 f85d 	bl	800beec <NotifyCmdStatus>

  return 0;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	200003b4 	.word	0x200003b4

0800be40 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800be48:	480f      	ldr	r0, [pc, #60]	; (800be88 <TlInit+0x48>)
 800be4a:	f000 fbb9 	bl	800c5c0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800be4e:	4a0f      	ldr	r2, [pc, #60]	; (800be8c <TlInit+0x4c>)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800be54:	480e      	ldr	r0, [pc, #56]	; (800be90 <TlInit+0x50>)
 800be56:	f000 fbb3 	bl	800c5c0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800be5a:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <TlInit+0x54>)
 800be5c:	2201      	movs	r2, #1
 800be5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800be60:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <TlInit+0x58>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00a      	beq.n	800be7e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800be6c:	4b0b      	ldr	r3, [pc, #44]	; (800be9c <TlInit+0x5c>)
 800be6e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <TlInit+0x58>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f107 0208 	add.w	r2, r7, #8
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
  }

  return;
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
}
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	200003b4 	.word	0x200003b4
 800be8c:	200001d8 	.word	0x200001d8
 800be90:	200001d0 	.word	0x200001d0
 800be94:	200001dc 	.word	0x200001dc
 800be98:	20000394 	.word	0x20000394
 800be9c:	0800bf2d 	.word	0x0800bf2d

0800bea0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	603a      	str	r2, [r7, #0]
 800beaa:	80fb      	strh	r3, [r7, #6]
 800beac:	460b      	mov	r3, r1
 800beae:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800beb0:	4b0c      	ldr	r3, [pc, #48]	; (800bee4 <SendCmd+0x44>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	88fa      	ldrh	r2, [r7, #6]
 800beb6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800beba:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <SendCmd+0x44>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	797a      	ldrb	r2, [r7, #5]
 800bec0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bec2:	4b08      	ldr	r3, [pc, #32]	; (800bee4 <SendCmd+0x44>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	330c      	adds	r3, #12
 800bec8:	797a      	ldrb	r2, [r7, #5]
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f001 fcd1 	bl	800d874 <memcpy>

  hciContext.io.Send(0,0);
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <SendCmd+0x48>)
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	2100      	movs	r1, #0
 800bed8:	2000      	movs	r0, #0
 800beda:	4798      	blx	r3

  return;
 800bedc:	bf00      	nop
}
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	200001d8 	.word	0x200001d8
 800bee8:	20000394 	.word	0x20000394

0800beec <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d108      	bne.n	800bf0e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <NotifyCmdStatus+0x3c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00d      	beq.n	800bf20 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bf04:	4b08      	ldr	r3, [pc, #32]	; (800bf28 <NotifyCmdStatus+0x3c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bf0c:	e008      	b.n	800bf20 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bf0e:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <NotifyCmdStatus+0x3c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d004      	beq.n	800bf20 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bf16:	4b04      	ldr	r3, [pc, #16]	; (800bf28 <NotifyCmdStatus+0x3c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	4798      	blx	r3
  return;
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
}
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	200003bc 	.word	0x200003bc

0800bf2c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7a5b      	ldrb	r3, [r3, #9]
 800bf38:	2b0f      	cmp	r3, #15
 800bf3a:	d003      	beq.n	800bf44 <TlEvtReceived+0x18>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7a5b      	ldrb	r3, [r3, #9]
 800bf40:	2b0e      	cmp	r3, #14
 800bf42:	d107      	bne.n	800bf54 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4809      	ldr	r0, [pc, #36]	; (800bf6c <TlEvtReceived+0x40>)
 800bf48:	f000 fb8e 	bl	800c668 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f000 fefa 	bl	800cd46 <hci_cmd_resp_release>
 800bf52:	e006      	b.n	800bf62 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	4806      	ldr	r0, [pc, #24]	; (800bf70 <TlEvtReceived+0x44>)
 800bf58:	f000 fb86 	bl	800c668 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bf5c:	4804      	ldr	r0, [pc, #16]	; (800bf70 <TlEvtReceived+0x44>)
 800bf5e:	f000 fee6 	bl	800cd2e <hci_notify_asynch_evt>
  }

  return;
 800bf62:	bf00      	nop
}
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200003b4 	.word	0x200003b4
 800bf70:	200001d0 	.word	0x200001d0

0800bf74 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a05      	ldr	r2, [pc, #20]	; (800bf94 <hci_register_io_bus+0x20>)
 800bf80:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a04      	ldr	r2, [pc, #16]	; (800bf98 <hci_register_io_bus+0x24>)
 800bf86:	611a      	str	r2, [r3, #16]

  return;
 800bf88:	bf00      	nop
}
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	0800c275 	.word	0x0800c275
 800bf98:	0800c2dd 	.word	0x0800c2dd

0800bf9c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	4a08      	ldr	r2, [pc, #32]	; (800bfcc <shci_init+0x30>)
 800bfac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bfae:	4a08      	ldr	r2, [pc, #32]	; (800bfd0 <shci_init+0x34>)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bfb4:	4806      	ldr	r0, [pc, #24]	; (800bfd0 <shci_init+0x34>)
 800bfb6:	f000 f90d 	bl	800c1d4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f890 	bl	800c0e4 <TlInit>

  return;
 800bfc4:	bf00      	nop
}
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	200003e0 	.word	0x200003e0
 800bfd0:	200003c0 	.word	0x200003c0

0800bfd4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bfda:	4820      	ldr	r0, [pc, #128]	; (800c05c <shci_user_evt_proc+0x88>)
 800bfdc:	f000 fb00 	bl	800c5e0 <LST_is_empty>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d128      	bne.n	800c038 <shci_user_evt_proc+0x64>
 800bfe6:	4b1e      	ldr	r3, [pc, #120]	; (800c060 <shci_user_evt_proc+0x8c>)
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d024      	beq.n	800c038 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bfee:	f107 030c 	add.w	r3, r7, #12
 800bff2:	4619      	mov	r1, r3
 800bff4:	4819      	ldr	r0, [pc, #100]	; (800c05c <shci_user_evt_proc+0x88>)
 800bff6:	f000 fb7a 	bl	800c6ee <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bffa:	4b19      	ldr	r3, [pc, #100]	; (800c060 <shci_user_evt_proc+0x8c>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c000:	4b18      	ldr	r3, [pc, #96]	; (800c064 <shci_user_evt_proc+0x90>)
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d009      	beq.n	800c01c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c00c:	4b15      	ldr	r3, [pc, #84]	; (800c064 <shci_user_evt_proc+0x90>)
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	1d3a      	adds	r2, r7, #4
 800c012:	4610      	mov	r0, r2
 800c014:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c016:	793a      	ldrb	r2, [r7, #4]
 800c018:	4b11      	ldr	r3, [pc, #68]	; (800c060 <shci_user_evt_proc+0x8c>)
 800c01a:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c01c:	4b10      	ldr	r3, [pc, #64]	; (800c060 <shci_user_evt_proc+0x8c>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fa38 	bl	800c49c <TL_MM_EvtDone>
 800c02c:	e004      	b.n	800c038 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4619      	mov	r1, r3
 800c032:	480a      	ldr	r0, [pc, #40]	; (800c05c <shci_user_evt_proc+0x88>)
 800c034:	f000 faf4 	bl	800c620 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c038:	4808      	ldr	r0, [pc, #32]	; (800c05c <shci_user_evt_proc+0x88>)
 800c03a:	f000 fad1 	bl	800c5e0 <LST_is_empty>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d107      	bne.n	800c054 <shci_user_evt_proc+0x80>
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <shci_user_evt_proc+0x8c>)
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c04c:	4803      	ldr	r0, [pc, #12]	; (800c05c <shci_user_evt_proc+0x88>)
 800c04e:	f7f4 fab0 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800c052:	bf00      	nop
 800c054:	bf00      	nop
}
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	200001e0 	.word	0x200001e0
 800c060:	200001f0 	.word	0x200001f0
 800c064:	200003c0 	.word	0x200003c0

0800c068 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60ba      	str	r2, [r7, #8]
 800c070:	607b      	str	r3, [r7, #4]
 800c072:	4603      	mov	r3, r0
 800c074:	81fb      	strh	r3, [r7, #14]
 800c076:	460b      	mov	r3, r1
 800c078:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c07a:	2000      	movs	r0, #0
 800c07c:	f000 f864 	bl	800c148 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <shci_send+0x74>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	89fa      	ldrh	r2, [r7, #14]
 800c086:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c08a:	4b14      	ldr	r3, [pc, #80]	; (800c0dc <shci_send+0x74>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	7b7a      	ldrb	r2, [r7, #13]
 800c090:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <shci_send+0x74>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	330c      	adds	r3, #12
 800c098:	7b7a      	ldrb	r2, [r7, #13]
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f001 fbe9 	bl	800d874 <memcpy>

  shciContext.io.Send(0,0);
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <shci_send+0x78>)
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c0ac:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c0b0:	f7f4 fa96 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f103 0008 	add.w	r0, r3, #8
 800c0ba:	4b08      	ldr	r3, [pc, #32]	; (800c0dc <shci_send+0x74>)
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <shci_send+0x74>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	789b      	ldrb	r3, [r3, #2]
 800c0c4:	3303      	adds	r3, #3
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f001 fbd4 	bl	800d874 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	f000 f83b 	bl	800c148 <Cmd_SetStatus>

  return;
 800c0d2:	bf00      	nop
}
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200001ec 	.word	0x200001ec
 800c0e0:	200003c0 	.word	0x200003c0

0800c0e4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c0ec:	4a10      	ldr	r2, [pc, #64]	; (800c130 <TlInit+0x4c>)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c0f2:	4810      	ldr	r0, [pc, #64]	; (800c134 <TlInit+0x50>)
 800c0f4:	f000 fa64 	bl	800c5c0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	f000 f825 	bl	800c148 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	; (800c138 <TlInit+0x54>)
 800c100:	2201      	movs	r2, #1
 800c102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <TlInit+0x58>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00c      	beq.n	800c126 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c110:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <TlInit+0x5c>)
 800c112:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <TlInit+0x60>)
 800c116:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c118:	4b08      	ldr	r3, [pc, #32]	; (800c13c <TlInit+0x58>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f107 020c 	add.w	r2, r7, #12
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
  }

  return;
 800c124:	bf00      	nop
 800c126:	bf00      	nop
}
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	200001ec 	.word	0x200001ec
 800c134:	200001e0 	.word	0x200001e0
 800c138:	200001f0 	.word	0x200001f0
 800c13c:	200003c0 	.word	0x200003c0
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c1b1 	.word	0x0800c1b1

0800c148 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10b      	bne.n	800c170 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c158:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <Cmd_SetStatus+0x48>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c160:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <Cmd_SetStatus+0x48>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2000      	movs	r0, #0
 800c166:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <Cmd_SetStatus+0x4c>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c16e:	e00b      	b.n	800c188 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c170:	4b08      	ldr	r3, [pc, #32]	; (800c194 <Cmd_SetStatus+0x4c>)
 800c172:	2201      	movs	r2, #1
 800c174:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c176:	4b06      	ldr	r3, [pc, #24]	; (800c190 <Cmd_SetStatus+0x48>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c17e:	4b04      	ldr	r3, [pc, #16]	; (800c190 <Cmd_SetStatus+0x48>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2001      	movs	r0, #1
 800c184:	4798      	blx	r3
  return;
 800c186:	bf00      	nop
 800c188:	bf00      	nop
}
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200003e0 	.word	0x200003e0
 800c194:	200001e8 	.word	0x200001e8

0800c198 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f7f4 fa12 	bl	80005ca <shci_cmd_resp_release>

  return;
 800c1a6:	bf00      	nop
}
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4805      	ldr	r0, [pc, #20]	; (800c1d0 <TlUserEvtReceived+0x20>)
 800c1bc:	f000 fa54 	bl	800c668 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c1c0:	4803      	ldr	r0, [pc, #12]	; (800c1d0 <TlUserEvtReceived+0x20>)
 800c1c2:	f7f4 f9f6 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800c1c6:	bf00      	nop
}
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200001e0 	.word	0x200001e0

0800c1d4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a05      	ldr	r2, [pc, #20]	; (800c1f4 <shci_register_io_bus+0x20>)
 800c1e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a04      	ldr	r2, [pc, #16]	; (800c1f8 <shci_register_io_bus+0x24>)
 800c1e6:	611a      	str	r2, [r3, #16]

  return;
 800c1e8:	bf00      	nop
}
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	0800c351 	.word	0x0800c351
 800c1f8:	0800c3a5 	.word	0x0800c3a5

0800c1fc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c200:	f001 f812 	bl	800d228 <HW_IPCC_Enable>

  return;
 800c204:	bf00      	nop
}
 800c206:	bd80      	pop	{r7, pc}

0800c208 <TL_Init>:


void TL_Init( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c20c:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <TL_Init+0x44>)
 800c20e:	4a10      	ldr	r2, [pc, #64]	; (800c250 <TL_Init+0x48>)
 800c210:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c212:	4b0e      	ldr	r3, [pc, #56]	; (800c24c <TL_Init+0x44>)
 800c214:	4a0f      	ldr	r2, [pc, #60]	; (800c254 <TL_Init+0x4c>)
 800c216:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c218:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <TL_Init+0x44>)
 800c21a:	4a0f      	ldr	r2, [pc, #60]	; (800c258 <TL_Init+0x50>)
 800c21c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <TL_Init+0x44>)
 800c220:	4a0e      	ldr	r2, [pc, #56]	; (800c25c <TL_Init+0x54>)
 800c222:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c224:	4b09      	ldr	r3, [pc, #36]	; (800c24c <TL_Init+0x44>)
 800c226:	4a0e      	ldr	r2, [pc, #56]	; (800c260 <TL_Init+0x58>)
 800c228:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c22a:	4b08      	ldr	r3, [pc, #32]	; (800c24c <TL_Init+0x44>)
 800c22c:	4a0d      	ldr	r2, [pc, #52]	; (800c264 <TL_Init+0x5c>)
 800c22e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c230:	4b06      	ldr	r3, [pc, #24]	; (800c24c <TL_Init+0x44>)
 800c232:	4a0d      	ldr	r2, [pc, #52]	; (800c268 <TL_Init+0x60>)
 800c234:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c236:	4b05      	ldr	r3, [pc, #20]	; (800c24c <TL_Init+0x44>)
 800c238:	4a0c      	ldr	r2, [pc, #48]	; (800c26c <TL_Init+0x64>)
 800c23a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c23c:	4b03      	ldr	r3, [pc, #12]	; (800c24c <TL_Init+0x44>)
 800c23e:	4a0c      	ldr	r2, [pc, #48]	; (800c270 <TL_Init+0x68>)
 800c240:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c242:	f000 fff9 	bl	800d238 <HW_IPCC_Init>

  return;
 800c246:	bf00      	nop
}
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20030000 	.word	0x20030000
 800c250:	20030024 	.word	0x20030024
 800c254:	20030044 	.word	0x20030044
 800c258:	20030054 	.word	0x20030054
 800c25c:	20030060 	.word	0x20030060
 800c260:	20030068 	.word	0x20030068
 800c264:	20030070 	.word	0x20030070
 800c268:	2003008c 	.word	0x2003008c
 800c26c:	20030090 	.word	0x20030090
 800c270:	2003009c 	.word	0x2003009c

0800c274 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c280:	4811      	ldr	r0, [pc, #68]	; (800c2c8 <TL_BLE_Init+0x54>)
 800c282:	f000 f99d 	bl	800c5c0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c286:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <TL_BLE_Init+0x58>)
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689a      	ldr	r2, [r3, #8]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	4a0c      	ldr	r2, [pc, #48]	; (800c2d0 <TL_BLE_Init+0x5c>)
 800c2a0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <TL_BLE_Init+0x54>)
 800c2a6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c2a8:	f000 ffdc 	bl	800d264 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <TL_BLE_Init+0x60>)
 800c2b2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4a07      	ldr	r2, [pc, #28]	; (800c2d8 <TL_BLE_Init+0x64>)
 800c2ba:	6013      	str	r3, [r2, #0]

  return 0;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20030a34 	.word	0x20030a34
 800c2cc:	20030000 	.word	0x20030000
 800c2d0:	20030a24 	.word	0x20030a24
 800c2d4:	200003ec 	.word	0x200003ec
 800c2d8:	200003f0 	.word	0x200003f0

0800c2dc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <TL_BLE_SendCmd+0x24>)
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c2f2:	f000 ffc1 	bl	800d278 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20030000 	.word	0x20030000

0800c304 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c30a:	e009      	b.n	800c320 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c30c:	1d3b      	adds	r3, r7, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	4808      	ldr	r0, [pc, #32]	; (800c334 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c312:	f000 f9ec 	bl	800c6ee <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c316:	4b08      	ldr	r3, [pc, #32]	; (800c338 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c320:	4804      	ldr	r0, [pc, #16]	; (800c334 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c322:	f000 f95d 	bl	800c5e0 <LST_is_empty>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0ef      	beq.n	800c30c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c32c:	bf00      	nop
}
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20030a34 	.word	0x20030a34
 800c338:	200003ec 	.word	0x200003ec

0800c33c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4798      	blx	r3

  return;
 800c346:	bf00      	nop
}
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	200003f0 	.word	0x200003f0

0800c350 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c35c:	480d      	ldr	r0, [pc, #52]	; (800c394 <TL_SYS_Init+0x44>)
 800c35e:	f000 f92f 	bl	800c5c0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c362:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <TL_SYS_Init+0x48>)
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	4a08      	ldr	r2, [pc, #32]	; (800c394 <TL_SYS_Init+0x44>)
 800c374:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c376:	f000 ffa1 	bl	800d2bc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a07      	ldr	r2, [pc, #28]	; (800c39c <TL_SYS_Init+0x4c>)
 800c380:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	4a06      	ldr	r2, [pc, #24]	; (800c3a0 <TL_SYS_Init+0x50>)
 800c388:	6013      	str	r3, [r2, #0]

  return 0;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20030a3c 	.word	0x20030a3c
 800c398:	20030000 	.word	0x20030000
 800c39c:	200003f4 	.word	0x200003f4
 800c3a0:	200003f8 	.word	0x200003f8

0800c3a4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c3b0:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <TL_SYS_SendCmd+0x24>)
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2210      	movs	r2, #16
 800c3b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c3ba:	f000 ff89 	bl	800d2d0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	20030000 	.word	0x20030000

0800c3cc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a04      	ldr	r2, [pc, #16]	; (800c3e8 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c3d6:	68d2      	ldr	r2, [r2, #12]
 800c3d8:	6812      	ldr	r2, [r2, #0]
 800c3da:	4610      	mov	r0, r2
 800c3dc:	4798      	blx	r3

  return;
 800c3de:	bf00      	nop
}
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	200003f4 	.word	0x200003f4
 800c3e8:	20030000 	.word	0x20030000

0800c3ec <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c3f2:	e009      	b.n	800c408 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c3f4:	1d3b      	adds	r3, r7, #4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4808      	ldr	r0, [pc, #32]	; (800c41c <HW_IPCC_SYS_EvtNot+0x30>)
 800c3fa:	f000 f978 	bl	800c6ee <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c3fe:	4b08      	ldr	r3, [pc, #32]	; (800c420 <HW_IPCC_SYS_EvtNot+0x34>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c408:	4804      	ldr	r0, [pc, #16]	; (800c41c <HW_IPCC_SYS_EvtNot+0x30>)
 800c40a:	f000 f8e9 	bl	800c5e0 <LST_is_empty>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d0ef      	beq.n	800c3f4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c414:	bf00      	nop
}
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20030a3c 	.word	0x20030a3c
 800c420:	200003f8 	.word	0x200003f8

0800c424 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c42c:	4817      	ldr	r0, [pc, #92]	; (800c48c <TL_MM_Init+0x68>)
 800c42e:	f000 f8c7 	bl	800c5c0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c432:	4817      	ldr	r0, [pc, #92]	; (800c490 <TL_MM_Init+0x6c>)
 800c434:	f000 f8c4 	bl	800c5c0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c438:	4b16      	ldr	r3, [pc, #88]	; (800c494 <TL_MM_Init+0x70>)
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	4a16      	ldr	r2, [pc, #88]	; (800c498 <TL_MM_Init+0x74>)
 800c43e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c440:	4b15      	ldr	r3, [pc, #84]	; (800c498 <TL_MM_Init+0x74>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	6892      	ldr	r2, [r2, #8]
 800c448:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c44a:	4b13      	ldr	r3, [pc, #76]	; (800c498 <TL_MM_Init+0x74>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	68d2      	ldr	r2, [r2, #12]
 800c452:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c454:	4b10      	ldr	r3, [pc, #64]	; (800c498 <TL_MM_Init+0x74>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a0c      	ldr	r2, [pc, #48]	; (800c48c <TL_MM_Init+0x68>)
 800c45a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c45c:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <TL_MM_Init+0x74>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	6812      	ldr	r2, [r2, #0]
 800c464:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <TL_MM_Init+0x74>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	6852      	ldr	r2, [r2, #4]
 800c46e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c470:	4b09      	ldr	r3, [pc, #36]	; (800c498 <TL_MM_Init+0x74>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6912      	ldr	r2, [r2, #16]
 800c478:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <TL_MM_Init+0x74>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	6952      	ldr	r2, [r2, #20]
 800c482:	619a      	str	r2, [r3, #24]

  return;
 800c484:	bf00      	nop
}
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	200300a8 	.word	0x200300a8
 800c490:	200003e4 	.word	0x200003e4
 800c494:	20030000 	.word	0x20030000
 800c498:	200003fc 	.word	0x200003fc

0800c49c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	4805      	ldr	r0, [pc, #20]	; (800c4bc <TL_MM_EvtDone+0x20>)
 800c4a8:	f000 f8de 	bl	800c668 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c4ac:	4804      	ldr	r0, [pc, #16]	; (800c4c0 <TL_MM_EvtDone+0x24>)
 800c4ae:	f000 ff35 	bl	800d31c <HW_IPCC_MM_SendFreeBuf>

  return;
 800c4b2:	bf00      	nop
}
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200003e4 	.word	0x200003e4
 800c4c0:	0800c4c5 	.word	0x0800c4c5

0800c4c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4ca:	e00c      	b.n	800c4e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c4cc:	1d3b      	adds	r3, r7, #4
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	480a      	ldr	r0, [pc, #40]	; (800c4fc <SendFreeBuf+0x38>)
 800c4d2:	f000 f90c 	bl	800c6ee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <SendFreeBuf+0x3c>)
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f8c1 	bl	800c668 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4e6:	4805      	ldr	r0, [pc, #20]	; (800c4fc <SendFreeBuf+0x38>)
 800c4e8:	f000 f87a 	bl	800c5e0 <LST_is_empty>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0ec      	beq.n	800c4cc <SendFreeBuf+0x8>
  }

  return;
 800c4f2:	bf00      	nop
}
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	200003e4 	.word	0x200003e4
 800c500:	20030000 	.word	0x20030000

0800c504 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c508:	4805      	ldr	r0, [pc, #20]	; (800c520 <TL_TRACES_Init+0x1c>)
 800c50a:	f000 f859 	bl	800c5c0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <TL_TRACES_Init+0x20>)
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	4a03      	ldr	r2, [pc, #12]	; (800c520 <TL_TRACES_Init+0x1c>)
 800c514:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c516:	f000 ff37 	bl	800d388 <HW_IPCC_TRACES_Init>

  return;
 800c51a:	bf00      	nop
}
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	200300b0 	.word	0x200300b0
 800c524:	20030000 	.word	0x20030000

0800c528 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c52e:	e008      	b.n	800c542 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c530:	1d3b      	adds	r3, r7, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4808      	ldr	r0, [pc, #32]	; (800c558 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c536:	f000 f8da 	bl	800c6ee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 f80d 	bl	800c55c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c544:	f000 f84c 	bl	800c5e0 <LST_is_empty>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0f0      	beq.n	800c530 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c54e:	bf00      	nop
}
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	200300b0 	.word	0x200300b0

0800c55c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c57a:	4b0f      	ldr	r3, [pc, #60]	; (800c5b8 <OTP_Read+0x48>)
 800c57c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c57e:	e002      	b.n	800c586 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3b08      	subs	r3, #8
 800c584:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3307      	adds	r3, #7
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	79fa      	ldrb	r2, [r7, #7]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d003      	beq.n	800c59a <OTP_Read+0x2a>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	4a09      	ldr	r2, [pc, #36]	; (800c5bc <OTP_Read+0x4c>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d1f2      	bne.n	800c580 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3307      	adds	r3, #7
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	79fa      	ldrb	r2, [r7, #7]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d001      	beq.n	800c5aa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	1fff73f8 	.word	0x1fff73f8
 800c5bc:	1fff7000 	.word	0x1fff7000

0800c5c0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	605a      	str	r2, [r3, #4]
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b087      	sub	sp, #28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5f2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d102      	bne.n	800c604 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	75fb      	strb	r3, [r7, #23]
 800c602:	e001      	b.n	800c608 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c604:	2300      	movs	r3, #0
 800c606:	75fb      	strb	r3, [r7, #23]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c612:	7dfb      	ldrb	r3, [r7, #23]
}
 800c614:	4618      	mov	r0, r3
 800c616:	371c      	adds	r7, #28
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c62a:	f3ef 8310 	mrs	r3, PRIMASK
 800c62e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c630:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c634:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	605a      	str	r2, [r3, #4]
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c65c:	bf00      	nop
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c672:	f3ef 8310 	mrs	r3, PRIMASK
 800c676:	60fb      	str	r3, [r7, #12]
  return(result);
 800c678:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c67a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c67c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6a4:	bf00      	nop
 800c6a6:	371c      	adds	r7, #28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c6c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6c2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6852      	ldr	r2, [r2, #4]
 800c6d6:	605a      	str	r2, [r3, #4]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6e2:	bf00      	nop
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b086      	sub	sp, #24
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c702:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff ffcd 	bl	800c6b0 <LST_remove_node>
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c720:	bf00      	nop
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c728:	b480      	push	{r7}
 800c72a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c72c:	4b03      	ldr	r3, [pc, #12]	; (800c73c <LL_FLASH_GetUDN+0x14>)
 800c72e:	681b      	ldr	r3, [r3, #0]
}
 800c730:	4618      	mov	r0, r3
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	1fff7580 	.word	0x1fff7580

0800c740 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c740:	b480      	push	{r7}
 800c742:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c744:	4b03      	ldr	r3, [pc, #12]	; (800c754 <LL_FLASH_GetDeviceID+0x14>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	b2db      	uxtb	r3, r3
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	1fff7584 	.word	0x1fff7584

0800c758 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c758:	b480      	push	{r7}
 800c75a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c75c:	4b03      	ldr	r3, [pc, #12]	; (800c76c <LL_FLASH_GetSTCompanyID+0x14>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	0a1b      	lsrs	r3, r3, #8
}
 800c762:	4618      	mov	r0, r3
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	1fff7584 	.word	0x1fff7584

0800c770 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c770:	b5b0      	push	{r4, r5, r7, lr}
 800c772:	b08c      	sub	sp, #48	; 0x30
 800c774:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c776:	4b29      	ldr	r3, [pc, #164]	; (800c81c <APP_BLE_Init+0xac>)
 800c778:	463c      	mov	r4, r7
 800c77a:	461d      	mov	r5, r3
 800c77c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c77e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c788:	c407      	stmia	r4!, {r0, r1, r2}
 800c78a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c78c:	f000 f900 	bl	800c990 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c790:	2101      	movs	r1, #1
 800c792:	2002      	movs	r0, #2
 800c794:	f000 fe20 	bl	800d3d8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c798:	4a21      	ldr	r2, [pc, #132]	; (800c820 <APP_BLE_Init+0xb0>)
 800c79a:	2100      	movs	r1, #0
 800c79c:	2004      	movs	r0, #4
 800c79e:	f000 ff25 	bl	800d5ec <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800c7a2:	463b      	mov	r3, r7
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff fa4f 	bl	800bc48 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c7aa:	f000 f907 	bl	800c9bc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c7ae:	f7ff f86f 	bl	800b890 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <APP_BLE_Init+0xb4>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <APP_BLE_Init+0xb4>)
 800c7bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7c0:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c7c2:	4a19      	ldr	r2, [pc, #100]	; (800c828 <APP_BLE_Init+0xb8>)
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	2001      	movs	r0, #1
 800c7c8:	f000 ff10 	bl	800d5ec <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800c7cc:	2006      	movs	r0, #6
 800c7ce:	f7fe fd8b 	bl	800b2e8 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800c7d2:	f000 fb31 	bl	800ce38 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800c7d6:	f000 fb67 	bl	800cea8 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800c7da:	4b14      	ldr	r3, [pc, #80]	; (800c82c <APP_BLE_Init+0xbc>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4914      	ldr	r1, [pc, #80]	; (800c830 <APP_BLE_Init+0xc0>)
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f7f4 fc0f 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c7e6:	4b13      	ldr	r3, [pc, #76]	; (800c834 <APP_BLE_Init+0xc4>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4913      	ldr	r1, [pc, #76]	; (800c838 <APP_BLE_Init+0xc8>)
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	f7f4 fc09 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <APP_BLE_Init+0xb4>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <APP_BLE_Init+0xb4>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c802:	4b0e      	ldr	r3, [pc, #56]	; (800c83c <APP_BLE_Init+0xcc>)
 800c804:	2280      	movs	r2, #128	; 0x80
 800c806:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c808:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <APP_BLE_Init+0xd0>)
 800c80a:	22a0      	movs	r2, #160	; 0xa0
 800c80c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800c80e:	2001      	movs	r0, #1
 800c810:	f000 f9ae 	bl	800cb70 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800c814:	bf00      	nop
}
 800c816:	3730      	adds	r7, #48	; 0x30
 800c818:	46bd      	mov	sp, r7
 800c81a:	bdb0      	pop	{r4, r5, r7, pc}
 800c81c:	0800d8f0 	.word	0x0800d8f0
 800c820:	0800bcb1 	.word	0x0800bcb1
 800c824:	200001f4 	.word	0x200001f4
 800c828:	0800ccdd 	.word	0x0800ccdd
 800c82c:	0800cd11 	.word	0x0800cd11
 800c830:	20000285 	.word	0x20000285
 800c834:	0800cd21 	.word	0x0800cd21
 800c838:	20000286 	.word	0x20000286
 800c83c:	20000288 	.word	0x20000288
 800c840:	2000028a 	.word	0x2000028a

0800c844 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b08a      	sub	sp, #40	; 0x28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c84c:	2342      	movs	r3, #66	; 0x42
 800c84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	3301      	adds	r3, #1
 800c856:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b3e      	cmp	r3, #62	; 0x3e
 800c85e:	d024      	beq.n	800c8aa <SVCCTL_App_Notification+0x66>
 800c860:	2bff      	cmp	r3, #255	; 0xff
 800c862:	d070      	beq.n	800c946 <SVCCTL_App_Notification+0x102>
 800c864:	2b05      	cmp	r3, #5
 800c866:	d000      	beq.n	800c86a <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800c868:	e086      	b.n	800c978 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	3302      	adds	r3, #2
 800c86e:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c876:	b29a      	uxth	r2, r3
 800c878:	4b42      	ldr	r3, [pc, #264]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c87a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d106      	bne.n	800c88e <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c880:	4b40      	ldr	r3, [pc, #256]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c882:	2200      	movs	r2, #0
 800c884:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c886:	4b3f      	ldr	r3, [pc, #252]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800c88e:	2001      	movs	r0, #1
 800c890:	f000 f96e 	bl	800cb70 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c894:	4b3c      	ldr	r3, [pc, #240]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c896:	2201      	movs	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c89a:	4b3a      	ldr	r3, [pc, #232]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c89c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c89e:	4b3a      	ldr	r3, [pc, #232]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c8a0:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800c8a2:	4839      	ldr	r0, [pc, #228]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c8a4:	f000 fab4 	bl	800ce10 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800c8a8:	e066      	b.n	800c978 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d042      	beq.n	800c93e <SVCCTL_App_Notification+0xfa>
 800c8b8:	2b0c      	cmp	r3, #12
 800c8ba:	d002      	beq.n	800c8c2 <SVCCTL_App_Notification+0x7e>
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d016      	beq.n	800c8ee <SVCCTL_App_Notification+0xaa>
          break;
 800c8c0:	e040      	b.n	800c944 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800c8c8:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c8ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c8cc:	f107 020a 	add.w	r2, r7, #10
 800c8d0:	f107 010b 	add.w	r1, r7, #11
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe fd81 	bl	800b3dc <hci_le_read_phy>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800c8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d12c      	bne.n	800c942 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
 800c8ea:	2b02      	cmp	r3, #2
          break;
 800c8ec:	e029      	b.n	800c942 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c8f4:	4b23      	ldr	r3, [pc, #140]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c8f6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7f4 fbf8 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c900:	4b20      	ldr	r3, [pc, #128]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c902:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c906:	2b04      	cmp	r3, #4
 800c908:	d104      	bne.n	800c914 <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c90a:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c90c:	2206      	movs	r2, #6
 800c90e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800c912:	e003      	b.n	800c91c <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c914:	4b1b      	ldr	r3, [pc, #108]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c916:	2205      	movs	r2, #5
 800c918:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c922:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800c924:	4b17      	ldr	r3, [pc, #92]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c926:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c928:	4b17      	ldr	r3, [pc, #92]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c92e:	4b15      	ldr	r3, [pc, #84]	; (800c984 <SVCCTL_App_Notification+0x140>)
 800c930:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c934:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800c936:	4814      	ldr	r0, [pc, #80]	; (800c988 <SVCCTL_App_Notification+0x144>)
 800c938:	f000 fa6a 	bl	800ce10 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800c93c:	e002      	b.n	800c944 <SVCCTL_App_Notification+0x100>
          break;
 800c93e:	bf00      	nop
 800c940:	e01a      	b.n	800c978 <SVCCTL_App_Notification+0x134>
          break;
 800c942:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800c944:	e018      	b.n	800c978 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	3302      	adds	r3, #2
 800c94a:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	b29b      	uxth	r3, r3
 800c952:	f240 4207 	movw	r2, #1031	; 0x407
 800c956:	4293      	cmp	r3, r2
 800c958:	d00a      	beq.n	800c970 <SVCCTL_App_Notification+0x12c>
 800c95a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c95e:	d009      	beq.n	800c974 <SVCCTL_App_Notification+0x130>
 800c960:	2b04      	cmp	r3, #4
 800c962:	d000      	beq.n	800c966 <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800c964:	e007      	b.n	800c976 <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800c966:	2101      	movs	r1, #1
 800c968:	4808      	ldr	r0, [pc, #32]	; (800c98c <SVCCTL_App_Notification+0x148>)
 800c96a:	f7f9 f953 	bl	8005c14 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800c96e:	e002      	b.n	800c976 <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <SVCCTL_App_Notification+0x132>
      break;
 800c974:	bf00      	nop
      break; /* EVT_VENDOR */
 800c976:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c978:	2301      	movs	r3, #1
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3728      	adds	r7, #40	; 0x28
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	200001f4 	.word	0x200001f4
 800c988:	20000648 	.word	0x20000648
 800c98c:	48000400 	.word	0x48000400

0800c990 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c996:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <Ble_Tl_Init+0x20>)
 800c998:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c99a:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <Ble_Tl_Init+0x24>)
 800c99c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c99e:	463b      	mov	r3, r7
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <Ble_Tl_Init+0x28>)
 800c9a4:	f7ff f968 	bl	800bc78 <hci_init>

  return;
 800c9a8:	bf00      	nop
}
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	200300b8 	.word	0x200300b8
 800c9b4:	0800cdab 	.word	0x0800cdab
 800c9b8:	0800cd73 	.word	0x0800cd73

0800c9bc <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9be:	b091      	sub	sp, #68	; 0x44
 800c9c0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800c9c6:	f7fe fce0 	bl	800b38a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800c9ca:	f000 f943 	bl	800cc54 <BleGetBdAddress>
 800c9ce:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c9d0:	6a3a      	ldr	r2, [r7, #32]
 800c9d2:	2106      	movs	r1, #6
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	f7fe fbb9 	bl	800b14c <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	795a      	ldrb	r2, [r3, #5]
 800c9de:	4b5e      	ldr	r3, [pc, #376]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c9e0:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	791a      	ldrb	r2, [r3, #4]
 800c9e6:	4b5c      	ldr	r3, [pc, #368]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c9e8:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	78da      	ldrb	r2, [r3, #3]
 800c9ee:	4b5a      	ldr	r3, [pc, #360]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c9f0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	789a      	ldrb	r2, [r3, #2]
 800c9f6:	4b58      	ldr	r3, [pc, #352]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800c9f8:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	785a      	ldrb	r2, [r3, #1]
 800c9fe:	4b56      	ldr	r3, [pc, #344]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ca00:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	4b54      	ldr	r3, [pc, #336]	; (800cb58 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ca08:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ca0a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ca0e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ca10:	f7ff fe8a 	bl	800c728 <LL_FLASH_GetUDN>
 800ca14:	4603      	mov	r3, r0
 800ca16:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800ca18:	f107 0308 	add.w	r3, r7, #8
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	2106      	movs	r1, #6
 800ca20:	202e      	movs	r0, #46	; 0x2e
 800ca22:	f7fe fb93 	bl	800b14c <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ca26:	4a4d      	ldr	r2, [pc, #308]	; (800cb5c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800ca28:	2110      	movs	r1, #16
 800ca2a:	2018      	movs	r0, #24
 800ca2c:	f7fe fb8e 	bl	800b14c <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800ca30:	4a4b      	ldr	r2, [pc, #300]	; (800cb60 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800ca32:	2110      	movs	r1, #16
 800ca34:	2008      	movs	r0, #8
 800ca36:	f7fe fb89 	bl	800b14c <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ca3a:	2118      	movs	r1, #24
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	f7fe fbf5 	bl	800b22c <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ca42:	f7fe f932 	bl	800acaa <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ca4a:	7ffb      	ldrb	r3, [r7, #31]
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800ca52:	7ffb      	ldrb	r3, [r7, #31]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01e      	beq.n	800ca96 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800ca58:	4b42      	ldr	r3, [pc, #264]	; (800cb64 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800ca5a:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800ca5c:	f107 0216 	add.w	r2, r7, #22
 800ca60:	7ff8      	ldrb	r0, [r7, #31]
 800ca62:	f107 0312 	add.w	r3, r7, #18
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	f107 0314 	add.w	r3, r7, #20
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	2207      	movs	r2, #7
 800ca72:	2100      	movs	r1, #0
 800ca74:	f7fe f802 	bl	800aa7c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800ca78:	8afc      	ldrh	r4, [r7, #22]
 800ca7a:	8abd      	ldrh	r5, [r7, #20]
 800ca7c:	69b8      	ldr	r0, [r7, #24]
 800ca7e:	f7f3 fb7f 	bl	8000180 <strlen>
 800ca82:	4603      	mov	r3, r0
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7fe facd 	bl	800b030 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800ca96:	8af8      	ldrh	r0, [r7, #22]
 800ca98:	8a79      	ldrh	r1, [r7, #18]
 800ca9a:	1d3b      	adds	r3, r7, #4
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	2302      	movs	r3, #2
 800caa0:	2200      	movs	r2, #0
 800caa2:	f7fe fac5 	bl	800b030 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800caa6:	2202      	movs	r2, #2
 800caa8:	2102      	movs	r1, #2
 800caaa:	2000      	movs	r0, #0
 800caac:	f7fe fcfe 	bl	800b4ac <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cab0:	4b2d      	ldr	r3, [pc, #180]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cab6:	4b2c      	ldr	r3, [pc, #176]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fd fede 	bl	800a87c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cac0:	4b29      	ldr	r3, [pc, #164]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cac6:	4b28      	ldr	r3, [pc, #160]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cac8:	2200      	movs	r2, #0
 800caca:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cacc:	4b26      	ldr	r3, [pc, #152]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cace:	2208      	movs	r2, #8
 800cad0:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cad2:	4b25      	ldr	r3, [pc, #148]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cad4:	2210      	movs	r2, #16
 800cad6:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cad8:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cada:	2201      	movs	r2, #1
 800cadc:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cae0:	4a22      	ldr	r2, [pc, #136]	; (800cb6c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800cae2:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cae4:	4b20      	ldr	r3, [pc, #128]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800caea:	2300      	movs	r3, #0
 800caec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800caf0:	e00b      	b.n	800cb0a <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800caf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf6:	4a1c      	ldr	r2, [pc, #112]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800caf8:	4413      	add	r3, r2
 800cafa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cafe:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800cb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb04:	3301      	adds	r3, #1
 800cb06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb0e:	2b0f      	cmp	r3, #15
 800cb10:	d9ef      	bls.n	800caf2 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb14:	789d      	ldrb	r5, [r3, #2]
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb18:	785e      	ldrb	r6, [r3, #1]
 800cb1a:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb1c:	7d5b      	ldrb	r3, [r3, #21]
 800cb1e:	4a12      	ldr	r2, [pc, #72]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb20:	7d92      	ldrb	r2, [r2, #22]
 800cb22:	4911      	ldr	r1, [pc, #68]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb24:	7d09      	ldrb	r1, [r1, #20]
 800cb26:	4810      	ldr	r0, [pc, #64]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb28:	6980      	ldr	r0, [r0, #24]
 800cb2a:	2400      	movs	r4, #0
 800cb2c:	9404      	str	r4, [sp, #16]
 800cb2e:	9003      	str	r0, [sp, #12]
 800cb30:	9102      	str	r1, [sp, #8]
 800cb32:	9201      	str	r2, [sp, #4]
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	2300      	movs	r3, #0
 800cb38:	2201      	movs	r2, #1
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f7fd feee 	bl	800a91e <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cb42:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cb44:	789b      	ldrb	r3, [r3, #2]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800cb4a:	f7fe f885 	bl	800ac58 <aci_gap_configure_whitelist>
   }
}
 800cb4e:	bf00      	nop
 800cb50:	372c      	adds	r7, #44	; 0x2c
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb56:	bf00      	nop
 800cb58:	200000e4 	.word	0x200000e4
 800cb5c:	0800d9d0 	.word	0x0800d9d0
 800cb60:	0800d9e0 	.word	0x0800d9e0
 800cb64:	0800d920 	.word	0x0800d920
 800cb68:	200001f4 	.word	0x200001f4
 800cb6c:	0001b207 	.word	0x0001b207

0800cb70 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08c      	sub	sp, #48	; 0x30
 800cb74:	af08      	add	r7, sp, #32
 800cb76:	4603      	mov	r3, r0
 800cb78:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cb7a:	2342      	movs	r3, #66	; 0x42
 800cb7c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d106      	bne.n	800cb92 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800cb84:	4b2c      	ldr	r3, [pc, #176]	; (800cc38 <Adv_Request+0xc8>)
 800cb86:	881b      	ldrh	r3, [r3, #0]
 800cb88:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800cb8a:	4b2c      	ldr	r3, [pc, #176]	; (800cc3c <Adv_Request+0xcc>)
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	81bb      	strh	r3, [r7, #12]
 800cb90:	e005      	b.n	800cb9e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800cb92:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800cb96:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800cb98:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cb9c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cb9e:	4b28      	ldr	r3, [pc, #160]	; (800cc40 <Adv_Request+0xd0>)
 800cba0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7f4 faa3 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d10d      	bne.n	800cbcc <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800cbb0:	4b23      	ldr	r3, [pc, #140]	; (800cc40 <Adv_Request+0xd0>)
 800cbb2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d004      	beq.n	800cbc4 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800cbba:	4b21      	ldr	r3, [pc, #132]	; (800cc40 <Adv_Request+0xd0>)
 800cbbc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d103      	bne.n	800cbcc <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800cbc4:	f7fd fd4c 	bl	800a660 <aci_gap_set_non_discoverable>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800cbcc:	4a1c      	ldr	r2, [pc, #112]	; (800cc40 <Adv_Request+0xd0>)
 800cbce:	79fb      	ldrb	r3, [r7, #7]
 800cbd0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800cbd4:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <Adv_Request+0xd0>)
 800cbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbda:	89b8      	ldrh	r0, [r7, #12]
 800cbdc:	89f9      	ldrh	r1, [r7, #14]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	9206      	str	r2, [sp, #24]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	9205      	str	r2, [sp, #20]
 800cbe6:	4a17      	ldr	r2, [pc, #92]	; (800cc44 <Adv_Request+0xd4>)
 800cbe8:	9204      	str	r2, [sp, #16]
 800cbea:	9303      	str	r3, [sp, #12]
 800cbec:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <Adv_Request+0xd8>)
 800cbee:	9302      	str	r3, [sp, #8]
 800cbf0:	2306      	movs	r3, #6
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	f7fd fd58 	bl	800a6b2 <aci_gap_set_discoverable>
 800cc02:	4603      	mov	r3, r0
 800cc04:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800cc06:	4911      	ldr	r1, [pc, #68]	; (800cc4c <Adv_Request+0xdc>)
 800cc08:	200e      	movs	r0, #14
 800cc0a:	f7fd ffc2 	bl	800ab92 <aci_gap_update_adv_data>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800cc12:	7afb      	ldrb	r3, [r7, #11]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d107      	bne.n	800cc2e <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800cc1e:	4b08      	ldr	r3, [pc, #32]	; (800cc40 <Adv_Request+0xd0>)
 800cc20:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cc24:	490a      	ldr	r1, [pc, #40]	; (800cc50 <Adv_Request+0xe0>)
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f4 faec 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800cc2c:	bf00      	nop
 800cc2e:	bf00      	nop
}
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20000288 	.word	0x20000288
 800cc3c:	2000028a 	.word	0x2000028a
 800cc40:	200001f4 	.word	0x200001f4
 800cc44:	2000021d 	.word	0x2000021d
 800cc48:	0800d9f0 	.word	0x0800d9f0
 800cc4c:	200000e4 	.word	0x200000e4
 800cc50:	0001e046 	.word	0x0001e046

0800cc54 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cc5a:	f7ff fd65 	bl	800c728 <LL_FLASH_GetUDN>
 800cc5e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc66:	d023      	beq.n	800ccb0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800cc68:	f7ff fd76 	bl	800c758 <LL_FLASH_GetSTCompanyID>
 800cc6c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800cc6e:	f7ff fd67 	bl	800c740 <LL_FLASH_GetDeviceID>
 800cc72:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	4b16      	ldr	r3, [pc, #88]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cc7a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cc84:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	0c1b      	lsrs	r3, r3, #16
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cc8e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	4b0f      	ldr	r3, [pc, #60]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cc96:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cc9e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	0a1b      	lsrs	r3, r3, #8
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	4b0b      	ldr	r3, [pc, #44]	; (800ccd4 <BleGetBdAddress+0x80>)
 800cca8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800ccaa:	4b0a      	ldr	r3, [pc, #40]	; (800ccd4 <BleGetBdAddress+0x80>)
 800ccac:	617b      	str	r3, [r7, #20]
 800ccae:	e00b      	b.n	800ccc8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	f7ff fc5d 	bl	800c570 <OTP_Read>
 800ccb6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	e001      	b.n	800ccc8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800ccc4:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <BleGetBdAddress+0x84>)
 800ccc6:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800ccc8:	697b      	ldr	r3, [r7, #20]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20000400 	.word	0x20000400
 800ccd8:	0800d9c8 	.word	0x0800d9c8

0800ccdc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cce2:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <Adv_Cancel+0x30>)
 800cce4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cce8:	2b05      	cmp	r3, #5
 800ccea:	d00a      	beq.n	800cd02 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800ccec:	2300      	movs	r3, #0
 800ccee:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800ccf0:	f7fd fcb6 	bl	800a660 <aci_gap_set_non_discoverable>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ccf8:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <Adv_Cancel+0x30>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800cd00:	bf00      	nop
 800cd02:	bf00      	nop
}
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200001f4 	.word	0x200001f4

0800cd10 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800cd14:	2100      	movs	r1, #0
 800cd16:	2001      	movs	r0, #1
 800cd18:	f000 fc88 	bl	800d62c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800cd1c:	bf00      	nop
}
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800cd20:	b480      	push	{r7}
 800cd22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800cd24:	bf00      	nop
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cd36:	2100      	movs	r1, #0
 800cd38:	2004      	movs	r0, #4
 800cd3a:	f000 fc77 	bl	800d62c <UTIL_SEQ_SetTask>
  return;
 800cd3e:	bf00      	nop
}
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cd4e:	2001      	movs	r0, #1
 800cd50:	f000 fcd2 	bl	800d6f8 <UTIL_SEQ_SetEvt>
  return;
 800cd54:	bf00      	nop
}
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cd64:	2001      	movs	r0, #1
 800cd66:	f000 fce5 	bl	800d734 <UTIL_SEQ_WaitEvt>
  return;
 800cd6a:	bf00      	nop
}
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	3308      	adds	r3, #8
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe fdd1 	bl	800b92c <SVCCTL_UserEvtRx>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800cd8e:	7afb      	ldrb	r3, [r7, #11]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2201      	movs	r2, #1
 800cd98:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800cd9a:	e002      	b.n	800cda2 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	701a      	strb	r2, [r3, #0]
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <BLE_StatusNot+0x16>
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d006      	beq.n	800cdcc <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800cdbe:	e00b      	b.n	800cdd8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cdc0:	231f      	movs	r3, #31
 800cdc2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 fc5b 	bl	800d680 <UTIL_SEQ_PauseTask>
      break;
 800cdca:	e005      	b.n	800cdd8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cdcc:	231f      	movs	r3, #31
 800cdce:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 fc73 	bl	800d6bc <UTIL_SEQ_ResumeTask>
      break;
 800cdd6:	bf00      	nop
  }
  return;
 800cdd8:	bf00      	nop
}
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d004      	beq.n	800cdfa <P2PS_STM_App_Notification+0x1a>
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d004      	beq.n	800cdfe <P2PS_STM_App_Notification+0x1e>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800cdf8:	e004      	b.n	800ce04 <P2PS_STM_App_Notification+0x24>
      break;
 800cdfa:	bf00      	nop
 800cdfc:	e002      	b.n	800ce04 <P2PS_STM_App_Notification+0x24>
      break;
 800cdfe:	bf00      	nop
 800ce00:	e000      	b.n	800ce04 <P2PS_STM_App_Notification+0x24>
      break;
 800ce02:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800ce04:	bf00      	nop
}
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d002      	beq.n	800ce26 <P2PS_APP_Notification+0x16>
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d002      	beq.n	800ce2a <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800ce24:	e002      	b.n	800ce2c <P2PS_APP_Notification+0x1c>
    break;
 800ce26:	bf00      	nop
 800ce28:	e000      	b.n	800ce2c <P2PS_APP_Notification+0x1c>
    break;
 800ce2a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800ce2c:	bf00      	nop
}
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800ce3c:	bf00      	nop
}
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	af00      	add	r7, sp, #0
UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	f000 fbed 	bl	800d62c <UTIL_SEQ_SetTask>
}
 800ce52:	bf00      	nop
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d00e      	beq.n	800ce86 <TEMPLATE_STM_App_Notification+0x2e>
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d015      	beq.n	800ce98 <TEMPLATE_STM_App_Notification+0x40>
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d000      	beq.n	800ce72 <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800ce70:	e013      	b.n	800ce9a <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800ce72:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <TEMPLATE_STM_App_Notification+0x4c>)
 800ce74:	2201      	movs	r2, #1
 800ce76:	701a      	strb	r2, [r3, #0]
HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 800ce78:	4b0a      	ldr	r3, [pc, #40]	; (800cea4 <TEMPLATE_STM_App_Notification+0x4c>)
 800ce7a:	7a1b      	ldrb	r3, [r3, #8]
 800ce7c:	21cc      	movs	r1, #204	; 0xcc
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f4 f9c0 	bl	8001204 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800ce84:	e009      	b.n	800ce9a <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <TEMPLATE_STM_App_Notification+0x4c>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 800ce8c:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <TEMPLATE_STM_App_Notification+0x4c>)
 800ce8e:	7a1b      	ldrb	r3, [r3, #8]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7f4 f92d 	bl	80010f0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800ce96:	e000      	b.n	800ce9a <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800ce98:	bf00      	nop
  }

  return;
 800ce9a:	bf00      	nop
}
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000028c 	.word	0x2000028c

0800cea8 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <TEMPLATE_APP_Init+0x28>)
 800ceae:	2100      	movs	r1, #0
 800ceb0:	2010      	movs	r0, #16
 800ceb2:	f000 fb9b 	bl	800d5ec <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <TEMPLATE_APP_Init+0x2c>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	4907      	ldr	r1, [pc, #28]	; (800ced8 <TEMPLATE_APP_Init+0x30>)
 800cebc:	2000      	movs	r0, #0
 800cebe:	f7f4 f8a1 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800cec2:	4b06      	ldr	r3, [pc, #24]	; (800cedc <TEMPLATE_APP_Init+0x34>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800cec8:	f000 f80a 	bl	800cee0 <TEMPLATE_APP_context_Init>
  return;
 800cecc:	bf00      	nop
}
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	0800cf05 	.word	0x0800cf05
 800ced4:	0800ce47 	.word	0x0800ce47
 800ced8:	20000294 	.word	0x20000294
 800cedc:	2000028c 	.word	0x2000028c

0800cee0 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 800cee4:	4b06      	ldr	r3, [pc, #24]	; (800cf00 <TEMPLATE_APP_context_Init+0x20>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800ceea:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <TEMPLATE_APP_context_Init+0x20>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800cef0:	4b03      	ldr	r3, [pc, #12]	; (800cf00 <TEMPLATE_APP_context_Init+0x20>)
 800cef2:	220a      	movs	r2, #10
 800cef4:	80da      	strh	r2, [r3, #6]
}
 800cef6:	bf00      	nop
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	2000028c 	.word	0x2000028c

0800cf04 <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
  uint8_t value[4];
  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
 800cf0a:	4b21      	ldr	r3, [pc, #132]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf0c:	885b      	ldrh	r3, [r3, #2]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
 800cf12:	4b1f      	ldr	r3, [pc, #124]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf14:	885b      	ldrh	r3, [r3, #2]
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	717b      	strb	r3, [r7, #5]
  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
 800cf1e:	4b1c      	ldr	r3, [pc, #112]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf20:	889b      	ldrh	r3, [r3, #4]
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	71bb      	strb	r3, [r7, #6]
  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
 800cf26:	4b1a      	ldr	r3, [pc, #104]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf28:	889b      	ldrh	r3, [r3, #4]
 800cf2a:	0a1b      	lsrs	r3, r3, #8
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	71fb      	strb	r3, [r7, #7]
  TEMPLATE_Server_App_Context.Parameter.Temperature += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800cf32:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf34:	889a      	ldrh	r2, [r3, #4]
 800cf36:	4b16      	ldr	r3, [pc, #88]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4413      	add	r3, r2
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf44:	809a      	strh	r2, [r3, #4]
  TEMPLATE_Server_App_Context.Parameter.TimeStamp += PARAMETER_CHANGE_STEP;
 800cf46:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf48:	885b      	ldrh	r3, [r3, #2]
 800cf4a:	330a      	adds	r3, #10
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf50:	805a      	strh	r2, [r3, #2]
  if (TEMPLATE_Server_App_Context.Parameter.Temperature > PARAMETER_VALUE_MAX_THRESHOLD) {
 800cf52:	4b0f      	ldr	r3, [pc, #60]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf54:	889b      	ldrh	r3, [r3, #4]
 800cf56:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800cf5a:	d904      	bls.n	800cf66 <TEMPLATE_Send_Notification_Task+0x62>
    TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf5e:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800cf62:	80da      	strh	r2, [r3, #6]
 800cf64:	e006      	b.n	800cf74 <TEMPLATE_Send_Notification_Task+0x70>
  }
  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
 800cf66:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf68:	889b      	ldrh	r3, [r3, #4]
 800cf6a:	2b63      	cmp	r3, #99	; 0x63
 800cf6c:	d802      	bhi.n	800cf74 <TEMPLATE_Send_Notification_Task+0x70>
  {
    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 800cf6e:	4b08      	ldr	r3, [pc, #32]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf70:	220a      	movs	r2, #10
 800cf72:	80da      	strh	r2, [r3, #6]
  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800cf74:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <TEMPLATE_Send_Notification_Task+0x8c>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d005      	beq.n	800cf88 <TEMPLATE_Send_Notification_Task+0x84>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800cf7c:	1d3b      	adds	r3, r7, #4
 800cf7e:	4619      	mov	r1, r3
 800cf80:	2000      	movs	r0, #0
 800cf82:	f7fe fe41 	bl	800bc08 <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800cf86:	bf00      	nop
 800cf88:	bf00      	nop
}
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	2000028c 	.word	0x2000028c

0800cf94 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cf98:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <LL_PWR_EnableBootC2+0x1c>)
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	4a04      	ldr	r2, [pc, #16]	; (800cfb0 <LL_PWR_EnableBootC2+0x1c>)
 800cf9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfa2:	60d3      	str	r3, [r2, #12]
}
 800cfa4:	bf00      	nop
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	58000400 	.word	0x58000400

0800cfb4 <LL_AHB3_GRP1_EnableClock>:
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cfbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cfcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
}
 800cfda:	bf00      	nop
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b083      	sub	sp, #12
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	601a      	str	r2, [r3, #0]
}
 800cffa:	bf00      	nop
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f043 0201 	orr.w	r2, r3, #1
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	601a      	str	r2, [r3, #0]
}
 800d01a:	bf00      	nop
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	041b      	lsls	r3, r3, #16
 800d038:	43db      	mvns	r3, r3
 800d03a:	401a      	ands	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	605a      	str	r2, [r3, #4]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	685a      	ldr	r2, [r3, #4]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	041b      	lsls	r3, r3, #16
 800d05e:	431a      	orrs	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	605a      	str	r2, [r3, #4]
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	43db      	mvns	r3, r3
 800d082:	401a      	ands	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	605a      	str	r2, [r3, #4]
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	609a      	str	r2, [r3, #8]
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	041a      	lsls	r2, r3, #16
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	609a      	str	r2, [r3, #8]
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68da      	ldr	r2, [r3, #12]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	4013      	ands	r3, r2
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d101      	bne.n	800d0ea <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e000      	b.n	800d0ec <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69da      	ldr	r2, [r3, #28]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	4013      	ands	r3, r2
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d101      	bne.n	800d114 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
	...

0800d124 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d128:	2102      	movs	r1, #2
 800d12a:	4819      	ldr	r0, [pc, #100]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d12c:	f7ff ffe4 	bl	800d0f8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d009      	beq.n	800d14a <HW_IPCC_Rx_Handler+0x26>
 800d136:	4b16      	ldr	r3, [pc, #88]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	43db      	mvns	r3, r3
 800d13c:	f003 0302 	and.w	r3, r3, #2
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d144:	f000 f8de 	bl	800d304 <HW_IPCC_SYS_EvtHandler>
 800d148:	e01f      	b.n	800d18a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d14a:	2101      	movs	r1, #1
 800d14c:	4810      	ldr	r0, [pc, #64]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d14e:	f7ff ffd3 	bl	800d0f8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d008      	beq.n	800d16a <HW_IPCC_Rx_Handler+0x46>
 800d158:	4b0d      	ldr	r3, [pc, #52]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f003 0301 	and.w	r3, r3, #1
 800d160:	2b00      	cmp	r3, #0
 800d162:	d102      	bne.n	800d16a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d164:	f000 f892 	bl	800d28c <HW_IPCC_BLE_EvtHandler>
 800d168:	e00f      	b.n	800d18a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d16a:	2108      	movs	r1, #8
 800d16c:	4808      	ldr	r0, [pc, #32]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d16e:	f7ff ffc3 	bl	800d0f8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d009      	beq.n	800d18c <HW_IPCC_Rx_Handler+0x68>
 800d178:	4b05      	ldr	r3, [pc, #20]	; (800d190 <HW_IPCC_Rx_Handler+0x6c>)
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	43db      	mvns	r3, r3
 800d17e:	f003 0308 	and.w	r3, r3, #8
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d186:	f000 f909 	bl	800d39c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d18a:	bf00      	nop
 800d18c:	bf00      	nop
}
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	58000c00 	.word	0x58000c00

0800d194 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d198:	2102      	movs	r1, #2
 800d19a:	4822      	ldr	r0, [pc, #136]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d19c:	f7ff ff97 	bl	800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d109      	bne.n	800d1ba <HW_IPCC_Tx_Handler+0x26>
 800d1a6:	4b1f      	ldr	r3, [pc, #124]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	43db      	mvns	r3, r3
 800d1ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d1b4:	f000 f89a 	bl	800d2ec <HW_IPCC_SYS_CmdEvtHandler>
 800d1b8:	e031      	b.n	800d21e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d1ba:	2102      	movs	r1, #2
 800d1bc:	4819      	ldr	r0, [pc, #100]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d1be:	f7ff ff86 	bl	800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <HW_IPCC_Tx_Handler+0x48>
 800d1c8:	4b16      	ldr	r3, [pc, #88]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	43db      	mvns	r3, r3
 800d1ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d1d6:	f000 f889 	bl	800d2ec <HW_IPCC_SYS_CmdEvtHandler>
 800d1da:	e020      	b.n	800d21e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d1dc:	2108      	movs	r1, #8
 800d1de:	4811      	ldr	r0, [pc, #68]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d1e0:	f7ff ff75 	bl	800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d109      	bne.n	800d1fe <HW_IPCC_Tx_Handler+0x6a>
 800d1ea:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	43db      	mvns	r3, r3
 800d1f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d1f8:	f000 f8b2 	bl	800d360 <HW_IPCC_MM_FreeBufHandler>
 800d1fc:	e00f      	b.n	800d21e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d1fe:	2120      	movs	r1, #32
 800d200:	4808      	ldr	r0, [pc, #32]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d202:	f7ff ff64 	bl	800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d109      	bne.n	800d220 <HW_IPCC_Tx_Handler+0x8c>
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <HW_IPCC_Tx_Handler+0x90>)
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	43db      	mvns	r3, r3
 800d212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d21a:	f000 f843 	bl	800d2a4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d21e:	bf00      	nop
 800d220:	bf00      	nop
}
 800d222:	bd80      	pop	{r7, pc}
 800d224:	58000c00 	.word	0x58000c00

0800d228 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d22c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d22e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d230:	f7ff feb0 	bl	800cf94 <LL_PWR_EnableBootC2>

  return;
 800d234:	bf00      	nop
}
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d23c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d240:	f7ff feb8 	bl	800cfb4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d244:	4806      	ldr	r0, [pc, #24]	; (800d260 <HW_IPCC_Init+0x28>)
 800d246:	f7ff fede 	bl	800d006 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d24a:	4805      	ldr	r0, [pc, #20]	; (800d260 <HW_IPCC_Init+0x28>)
 800d24c:	f7ff fecb 	bl	800cfe6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d250:	202c      	movs	r0, #44	; 0x2c
 800d252:	f7f8 f9d6 	bl	8005602 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d256:	202d      	movs	r0, #45	; 0x2d
 800d258:	f7f8 f9d3 	bl	8005602 <HAL_NVIC_EnableIRQ>

  return;
 800d25c:	bf00      	nop
}
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	58000c00 	.word	0x58000c00

0800d264 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d268:	2101      	movs	r1, #1
 800d26a:	4802      	ldr	r0, [pc, #8]	; (800d274 <HW_IPCC_BLE_Init+0x10>)
 800d26c:	f7ff ff00 	bl	800d070 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d270:	bf00      	nop
}
 800d272:	bd80      	pop	{r7, pc}
 800d274:	58000c00 	.word	0x58000c00

0800d278 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d27c:	2101      	movs	r1, #1
 800d27e:	4802      	ldr	r0, [pc, #8]	; (800d288 <HW_IPCC_BLE_SendCmd+0x10>)
 800d280:	f7ff ff16 	bl	800d0b0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d284:	bf00      	nop
}
 800d286:	bd80      	pop	{r7, pc}
 800d288:	58000c00 	.word	0x58000c00

0800d28c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d290:	f7ff f838 	bl	800c304 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d294:	2101      	movs	r1, #1
 800d296:	4802      	ldr	r0, [pc, #8]	; (800d2a0 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d298:	f7ff fefc 	bl	800d094 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d29c:	bf00      	nop
}
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	58000c00 	.word	0x58000c00

0800d2a4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d2a8:	2120      	movs	r1, #32
 800d2aa:	4803      	ldr	r0, [pc, #12]	; (800d2b8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d2ac:	f7ff fece 	bl	800d04c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d2b0:	f7ff f844 	bl	800c33c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d2b4:	bf00      	nop
}
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	58000c00 	.word	0x58000c00

0800d2bc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d2c0:	2102      	movs	r1, #2
 800d2c2:	4802      	ldr	r0, [pc, #8]	; (800d2cc <HW_IPCC_SYS_Init+0x10>)
 800d2c4:	f7ff fed4 	bl	800d070 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d2c8:	bf00      	nop
}
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	58000c00 	.word	0x58000c00

0800d2d0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2d4:	2102      	movs	r1, #2
 800d2d6:	4804      	ldr	r0, [pc, #16]	; (800d2e8 <HW_IPCC_SYS_SendCmd+0x18>)
 800d2d8:	f7ff feea 	bl	800d0b0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2dc:	2102      	movs	r1, #2
 800d2de:	4802      	ldr	r0, [pc, #8]	; (800d2e8 <HW_IPCC_SYS_SendCmd+0x18>)
 800d2e0:	f7ff fea1 	bl	800d026 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d2e4:	bf00      	nop
}
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	58000c00 	.word	0x58000c00

0800d2ec <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2f0:	2102      	movs	r1, #2
 800d2f2:	4803      	ldr	r0, [pc, #12]	; (800d300 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d2f4:	f7ff feaa 	bl	800d04c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d2f8:	f7ff f868 	bl	800c3cc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d2fc:	bf00      	nop
}
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	58000c00 	.word	0x58000c00

0800d304 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d308:	f7ff f870 	bl	800c3ec <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d30c:	2102      	movs	r1, #2
 800d30e:	4802      	ldr	r0, [pc, #8]	; (800d318 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d310:	f7ff fec0 	bl	800d094 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d314:	bf00      	nop
}
 800d316:	bd80      	pop	{r7, pc}
 800d318:	58000c00 	.word	0x58000c00

0800d31c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d324:	2108      	movs	r1, #8
 800d326:	480c      	ldr	r0, [pc, #48]	; (800d358 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d328:	f7ff fed1 	bl	800d0ce <LL_C1_IPCC_IsActiveFlag_CHx>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d007      	beq.n	800d342 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d332:	4a0a      	ldr	r2, [pc, #40]	; (800d35c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d338:	2108      	movs	r1, #8
 800d33a:	4807      	ldr	r0, [pc, #28]	; (800d358 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d33c:	f7ff fe73 	bl	800d026 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d340:	e006      	b.n	800d350 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d346:	2108      	movs	r1, #8
 800d348:	4803      	ldr	r0, [pc, #12]	; (800d358 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d34a:	f7ff feb1 	bl	800d0b0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d34e:	bf00      	nop
}
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	58000c00 	.word	0x58000c00
 800d35c:	20000408 	.word	0x20000408

0800d360 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d364:	2108      	movs	r1, #8
 800d366:	4806      	ldr	r0, [pc, #24]	; (800d380 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d368:	f7ff fe70 	bl	800d04c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d36c:	4b05      	ldr	r3, [pc, #20]	; (800d384 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d372:	2108      	movs	r1, #8
 800d374:	4802      	ldr	r0, [pc, #8]	; (800d380 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d376:	f7ff fe9b 	bl	800d0b0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d37a:	bf00      	nop
}
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	58000c00 	.word	0x58000c00
 800d384:	20000408 	.word	0x20000408

0800d388 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d38c:	2108      	movs	r1, #8
 800d38e:	4802      	ldr	r0, [pc, #8]	; (800d398 <HW_IPCC_TRACES_Init+0x10>)
 800d390:	f7ff fe6e 	bl	800d070 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d394:	bf00      	nop
}
 800d396:	bd80      	pop	{r7, pc}
 800d398:	58000c00 	.word	0x58000c00

0800d39c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d3a0:	f7ff f8c2 	bl	800c528 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d3a4:	2108      	movs	r1, #8
 800d3a6:	4802      	ldr	r0, [pc, #8]	; (800d3b0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d3a8:	f7ff fe74 	bl	800d094 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d3ac:	bf00      	nop
}
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	58000c00 	.word	0x58000c00

0800d3b4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <UTIL_LPM_Init+0x1c>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d3be:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <UTIL_LPM_Init+0x20>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d3c4:	bf00      	nop
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	2000040c 	.word	0x2000040c
 800d3d4:	20000410 	.word	0x20000410

0800d3d8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b087      	sub	sp, #28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e8:	613b      	str	r3, [r7, #16]
  return(result);
 800d3ea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d3ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3ee:	b672      	cpsid	i
  
  switch(state)
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <UTIL_LPM_SetOffMode+0x32>
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d000      	beq.n	800d3fc <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800d3fa:	e00e      	b.n	800d41a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d3fc:	4b0c      	ldr	r3, [pc, #48]	; (800d430 <UTIL_LPM_SetOffMode+0x58>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4313      	orrs	r3, r2
 800d404:	4a0a      	ldr	r2, [pc, #40]	; (800d430 <UTIL_LPM_SetOffMode+0x58>)
 800d406:	6013      	str	r3, [r2, #0]
      break;
 800d408:	e007      	b.n	800d41a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	43da      	mvns	r2, r3
 800d40e:	4b08      	ldr	r3, [pc, #32]	; (800d430 <UTIL_LPM_SetOffMode+0x58>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4013      	ands	r3, r2
 800d414:	4a06      	ldr	r2, [pc, #24]	; (800d430 <UTIL_LPM_SetOffMode+0x58>)
 800d416:	6013      	str	r3, [r2, #0]
      break;
 800d418:	bf00      	nop
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d424:	bf00      	nop
 800d426:	371c      	adds	r7, #28
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	20000410 	.word	0x20000410

0800d434 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08c      	sub	sp, #48	; 0x30
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d43c:	4b63      	ldr	r3, [pc, #396]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800d442:	4b62      	ldr	r3, [pc, #392]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4013      	ands	r3, r2
 800d44a:	4a60      	ldr	r2, [pc, #384]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d44c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d44e:	e082      	b.n	800d556 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d454:	e002      	b.n	800d45c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	3301      	adds	r3, #1
 800d45a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d45c:	4a5c      	ldr	r2, [pc, #368]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d464:	4b5b      	ldr	r3, [pc, #364]	; (800d5d4 <UTIL_SEQ_Run+0x1a0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	401a      	ands	r2, r3
 800d46a:	4b58      	ldr	r3, [pc, #352]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4013      	ands	r3, r2
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0f0      	beq.n	800d456 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d474:	4a56      	ldr	r2, [pc, #344]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d47c:	4b55      	ldr	r3, [pc, #340]	; (800d5d4 <UTIL_SEQ_Run+0x1a0>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	401a      	ands	r2, r3
 800d482:	4b52      	ldr	r3, [pc, #328]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4013      	ands	r3, r2
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800d48a:	4a51      	ldr	r2, [pc, #324]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	4413      	add	r3, r2
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	4013      	ands	r3, r2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d106      	bne.n	800d4aa <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d49c:	4a4c      	ldr	r2, [pc, #304]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	4413      	add	r3, r2
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800d4aa:	4a49      	ldr	r2, [pc, #292]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	4413      	add	r3, r2
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 f97d 	bl	800d7b8 <bit_position>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	4b45      	ldr	r3, [pc, #276]	; (800d5d8 <UTIL_SEQ_Run+0x1a4>)
 800d4c2:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800d4c4:	4a42      	ldr	r2, [pc, #264]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	4413      	add	r3, r2
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	4a42      	ldr	r2, [pc, #264]	; (800d5d8 <UTIL_SEQ_Run+0x1a4>)
 800d4d0:	6812      	ldr	r2, [r2, #0]
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	fa01 f202 	lsl.w	r2, r1, r2
 800d4d8:	43d2      	mvns	r2, r2
 800d4da:	401a      	ands	r2, r3
 800d4dc:	493c      	ldr	r1, [pc, #240]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	440b      	add	r3, r1
 800d4e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4ec:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d4ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d4f0:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800d4f2:	4b39      	ldr	r3, [pc, #228]	; (800d5d8 <UTIL_SEQ_Run+0x1a4>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fc:	43db      	mvns	r3, r3
 800d4fe:	461a      	mov	r2, r3
 800d500:	4b36      	ldr	r3, [pc, #216]	; (800d5dc <UTIL_SEQ_Run+0x1a8>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4013      	ands	r3, r2
 800d506:	4a35      	ldr	r2, [pc, #212]	; (800d5dc <UTIL_SEQ_Run+0x1a8>)
 800d508:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d50a:	2302      	movs	r3, #2
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d50e:	e014      	b.n	800d53a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	3b01      	subs	r3, #1
 800d514:	4a2e      	ldr	r2, [pc, #184]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d516:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d51a:	4b2f      	ldr	r3, [pc, #188]	; (800d5d8 <UTIL_SEQ_Run+0x1a4>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2101      	movs	r1, #1
 800d520:	fa01 f303 	lsl.w	r3, r1, r3
 800d524:	43db      	mvns	r3, r3
 800d526:	4619      	mov	r1, r3
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	3b01      	subs	r3, #1
 800d52c:	400a      	ands	r2, r1
 800d52e:	4928      	ldr	r1, [pc, #160]	; (800d5d0 <UTIL_SEQ_Run+0x19c>)
 800d530:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	3b01      	subs	r3, #1
 800d538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1e7      	bne.n	800d510 <UTIL_SEQ_Run+0xdc>
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d54a:	4b23      	ldr	r3, [pc, #140]	; (800d5d8 <UTIL_SEQ_Run+0x1a4>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a24      	ldr	r2, [pc, #144]	; (800d5e0 <UTIL_SEQ_Run+0x1ac>)
 800d550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d554:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d556:	4b21      	ldr	r3, [pc, #132]	; (800d5dc <UTIL_SEQ_Run+0x1a8>)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	4b1e      	ldr	r3, [pc, #120]	; (800d5d4 <UTIL_SEQ_Run+0x1a0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	401a      	ands	r2, r3
 800d560:	4b1a      	ldr	r3, [pc, #104]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4013      	ands	r3, r2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d007      	beq.n	800d57a <UTIL_SEQ_Run+0x146>
 800d56a:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <UTIL_SEQ_Run+0x1b0>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b1e      	ldr	r3, [pc, #120]	; (800d5e8 <UTIL_SEQ_Run+0x1b4>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4013      	ands	r3, r2
 800d574:	2b00      	cmp	r3, #0
 800d576:	f43f af6b 	beq.w	800d450 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800d57a:	f000 f90f 	bl	800d79c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d57e:	f3ef 8310 	mrs	r3, PRIMASK
 800d582:	613b      	str	r3, [r7, #16]
  return(result);
 800d584:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d586:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d588:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800d58a:	4b14      	ldr	r3, [pc, #80]	; (800d5dc <UTIL_SEQ_Run+0x1a8>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4b11      	ldr	r3, [pc, #68]	; (800d5d4 <UTIL_SEQ_Run+0x1a0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	401a      	ands	r2, r3
 800d594:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4013      	ands	r3, r2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d108      	bne.n	800d5b0 <UTIL_SEQ_Run+0x17c>
 800d59e:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <UTIL_SEQ_Run+0x1b0>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	4b11      	ldr	r3, [pc, #68]	; (800d5e8 <UTIL_SEQ_Run+0x1b4>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800d5ac:	f7f2 ffed 	bl	800058a <UTIL_SEQ_Idle>
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800d5ba:	f000 f8f6 	bl	800d7aa <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d5be:	4a03      	ldr	r2, [pc, #12]	; (800d5cc <UTIL_SEQ_Run+0x198>)
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	6013      	str	r3, [r2, #0]

  return;
 800d5c4:	bf00      	nop
}
 800d5c6:	3730      	adds	r7, #48	; 0x30
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	200000f8 	.word	0x200000f8
 800d5d0:	200004a4 	.word	0x200004a4
 800d5d4:	200000f4 	.word	0x200000f4
 800d5d8:	20000420 	.word	0x20000420
 800d5dc:	20000414 	.word	0x20000414
 800d5e0:	20000424 	.word	0x20000424
 800d5e4:	20000418 	.word	0x20000418
 800d5e8:	2000041c 	.word	0x2000041c

0800d5ec <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5fc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5fe:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d600:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d602:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f8d7 	bl	800d7b8 <bit_position>
 800d60a:	4601      	mov	r1, r0
 800d60c:	4a06      	ldr	r2, [pc, #24]	; (800d628 <UTIL_SEQ_RegTask+0x3c>)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d61e:	bf00      	nop
}
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20000424 	.word	0x20000424

0800d62c <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d636:	f3ef 8310 	mrs	r3, PRIMASK
 800d63a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d63c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d63e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d640:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800d642:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <UTIL_SEQ_SetTask+0x4c>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4313      	orrs	r3, r2
 800d64a:	4a0b      	ldr	r2, [pc, #44]	; (800d678 <UTIL_SEQ_SetTask+0x4c>)
 800d64c:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800d64e:	4a0b      	ldr	r2, [pc, #44]	; (800d67c <UTIL_SEQ_SetTask+0x50>)
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	431a      	orrs	r2, r3
 800d65a:	4908      	ldr	r1, [pc, #32]	; (800d67c <UTIL_SEQ_SetTask+0x50>)
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d66c:	bf00      	nop
}
 800d66e:	371c      	adds	r7, #28
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	20000414 	.word	0x20000414
 800d67c:	200004a4 	.word	0x200004a4

0800d680 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d688:	f3ef 8310 	mrs	r3, PRIMASK
 800d68c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d68e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d692:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	43da      	mvns	r2, r3
 800d698:	4b07      	ldr	r3, [pc, #28]	; (800d6b8 <UTIL_SEQ_PauseTask+0x38>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4013      	ands	r3, r2
 800d69e:	4a06      	ldr	r2, [pc, #24]	; (800d6b8 <UTIL_SEQ_PauseTask+0x38>)
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d6ac:	bf00      	nop
}
 800d6ae:	371c      	adds	r7, #28
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr
 800d6b8:	200000f4 	.word	0x200000f4

0800d6bc <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b087      	sub	sp, #28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d6c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d6cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6ce:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800d6d0:	4b08      	ldr	r3, [pc, #32]	; (800d6f4 <UTIL_SEQ_ResumeTask+0x38>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	4a06      	ldr	r2, [pc, #24]	; (800d6f4 <UTIL_SEQ_ResumeTask+0x38>)
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d6e6:	bf00      	nop
}
 800d6e8:	371c      	adds	r7, #28
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	200000f4 	.word	0x200000f4

0800d6f8 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d700:	f3ef 8310 	mrs	r3, PRIMASK
 800d704:	60fb      	str	r3, [r7, #12]
  return(result);
 800d706:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d70a:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800d70c:	4b08      	ldr	r3, [pc, #32]	; (800d730 <UTIL_SEQ_SetEvt+0x38>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4313      	orrs	r3, r2
 800d714:	4a06      	ldr	r2, [pc, #24]	; (800d730 <UTIL_SEQ_SetEvt+0x38>)
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d722:	bf00      	nop
}
 800d724:	371c      	adds	r7, #28
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	20000418 	.word	0x20000418

0800d734 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800d73c:	4b14      	ldr	r3, [pc, #80]	; (800d790 <UTIL_SEQ_WaitEvt+0x5c>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2201      	movs	r2, #1
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d748:	4b12      	ldr	r3, [pc, #72]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800d74e:	4a11      	ldr	r2, [pc, #68]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800d754:	e005      	b.n	800d762 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800d756:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4619      	mov	r1, r3
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7f2 ff1b 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800d762:	4b0d      	ldr	r3, [pc, #52]	; (800d798 <UTIL_SEQ_WaitEvt+0x64>)
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4013      	ands	r3, r2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d0f2      	beq.n	800d756 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800d770:	4b08      	ldr	r3, [pc, #32]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	43da      	mvns	r2, r3
 800d776:	4b08      	ldr	r3, [pc, #32]	; (800d798 <UTIL_SEQ_WaitEvt+0x64>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4013      	ands	r3, r2
 800d77c:	4a06      	ldr	r2, [pc, #24]	; (800d798 <UTIL_SEQ_WaitEvt+0x64>)
 800d77e:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800d780:	4a04      	ldr	r2, [pc, #16]	; (800d794 <UTIL_SEQ_WaitEvt+0x60>)
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6013      	str	r3, [r2, #0]

  return;
 800d786:	bf00      	nop
}
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	20000420 	.word	0x20000420
 800d794:	2000041c 	.word	0x2000041c
 800d798:	20000418 	.word	0x20000418

0800d79c <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d7a0:	bf00      	nop
}
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d7ae:	bf00      	nop
}
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	0c1b      	lsrs	r3, r3, #16
 800d7c8:	041b      	lsls	r3, r3, #16
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d104      	bne.n	800d7d8 <bit_position+0x20>
 800d7ce:	2310      	movs	r3, #16
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	041b      	lsls	r3, r3, #16
 800d7d6:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <bit_position+0x36>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	021b      	lsls	r3, r3, #8
 800d7ec:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d105      	bne.n	800d804 <bit_position+0x4c>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	011b      	lsls	r3, r3, #4
 800d802:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	0f1b      	lsrs	r3, r3, #28
 800d808:	4a07      	ldr	r2, [pc, #28]	; (800d828 <bit_position+0x70>)
 800d80a:	5cd3      	ldrb	r3, [r2, r3]
 800d80c:	461a      	mov	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	4413      	add	r3, r2
 800d812:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f1c3 031f 	rsb	r3, r3, #31
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	0800d9f8 	.word	0x0800d9f8

0800d82c <__libc_init_array>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	4e0d      	ldr	r6, [pc, #52]	; (800d864 <__libc_init_array+0x38>)
 800d830:	4c0d      	ldr	r4, [pc, #52]	; (800d868 <__libc_init_array+0x3c>)
 800d832:	1ba4      	subs	r4, r4, r6
 800d834:	10a4      	asrs	r4, r4, #2
 800d836:	2500      	movs	r5, #0
 800d838:	42a5      	cmp	r5, r4
 800d83a:	d109      	bne.n	800d850 <__libc_init_array+0x24>
 800d83c:	4e0b      	ldr	r6, [pc, #44]	; (800d86c <__libc_init_array+0x40>)
 800d83e:	4c0c      	ldr	r4, [pc, #48]	; (800d870 <__libc_init_array+0x44>)
 800d840:	f000 f82c 	bl	800d89c <_init>
 800d844:	1ba4      	subs	r4, r4, r6
 800d846:	10a4      	asrs	r4, r4, #2
 800d848:	2500      	movs	r5, #0
 800d84a:	42a5      	cmp	r5, r4
 800d84c:	d105      	bne.n	800d85a <__libc_init_array+0x2e>
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d854:	4798      	blx	r3
 800d856:	3501      	adds	r5, #1
 800d858:	e7ee      	b.n	800d838 <__libc_init_array+0xc>
 800d85a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d85e:	4798      	blx	r3
 800d860:	3501      	adds	r5, #1
 800d862:	e7f2      	b.n	800d84a <__libc_init_array+0x1e>
 800d864:	0800da10 	.word	0x0800da10
 800d868:	0800da10 	.word	0x0800da10
 800d86c:	0800da10 	.word	0x0800da10
 800d870:	0800da14 	.word	0x0800da14

0800d874 <memcpy>:
 800d874:	b510      	push	{r4, lr}
 800d876:	1e43      	subs	r3, r0, #1
 800d878:	440a      	add	r2, r1
 800d87a:	4291      	cmp	r1, r2
 800d87c:	d100      	bne.n	800d880 <memcpy+0xc>
 800d87e:	bd10      	pop	{r4, pc}
 800d880:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d884:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d888:	e7f7      	b.n	800d87a <memcpy+0x6>

0800d88a <memset>:
 800d88a:	4402      	add	r2, r0
 800d88c:	4603      	mov	r3, r0
 800d88e:	4293      	cmp	r3, r2
 800d890:	d100      	bne.n	800d894 <memset+0xa>
 800d892:	4770      	bx	lr
 800d894:	f803 1b01 	strb.w	r1, [r3], #1
 800d898:	e7f9      	b.n	800d88e <memset+0x4>
	...

0800d89c <_init>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <_fini>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	bf00      	nop
 800d8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ae:	bc08      	pop	{r3}
 800d8b0:	469e      	mov	lr, r3
 800d8b2:	4770      	bx	lr
