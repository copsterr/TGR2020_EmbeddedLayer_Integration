
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db3c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ddd8  0800ddd8  0001ddd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dddc  0800dddc  0001dddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000004  0800dde0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000160  0800df3c  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  200001fc  0800dfd5  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000244  0800e01a  00020244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a2  20000258  0800e02b  00020258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003c8  200002fc  0800e0cd  000202fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006c4  0800e0cd  000206c4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   000537c2  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000769b  00000000  00000000  00073aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003d88  00000000  00000000  0007b188  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003a40  00000000  00000000  0007ef10  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e86f  00000000  00000000  00082950  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002c025  00000000  00000000  000b11bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001075c6  00000000  00000000  000dd1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e47aa  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000105d4  00000000  00000000  001e4828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002fc 	.word	0x200002fc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dc64 	.word	0x0800dc64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000300 	.word	0x20000300
 800017c:	0800dc64 	.word	0x0800dc64

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000600 	.word	0x20000600

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f00d f94c 	bl	800d77c <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f00c f86f 	bl	800c5d0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f00d fa5c 	bl	800d9b4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f00b ff2b 	bl	800c364 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f00c f961 	bl	800c7ec <TL_MM_Init>

  TL_Enable();
 800052a:	f00c f84b 	bl	800c5c4 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	0800c39d 	.word	0x0800c39d
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f00c f9ab 	bl	800c8cc <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f00c fadf 	bl	800cb38 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f00d f90f 	bl	800d7a0 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f00d f929 	bl	800d7fc <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f00d fa19 	bl	800d9f4 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f00d fa74 	bl	800dac0 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f00d fa87 	bl	800dafc <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000160 	.word	0x20000160

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	20000160 	.word	0x20000160

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200001f0 	.word	0x200001f0
 8000918:	200001f1 	.word	0x200001f1
 800091c:	20000160 	.word	0x20000160
 8000920:	200001f4 	.word	0x200001f4

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200001f0 	.word	0x200001f0
 8000a20:	200001f1 	.word	0x200001f1
 8000a24:	20000160 	.word	0x20000160
 8000a28:	200001f4 	.word	0x200001f4

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001f4 	.word	0x200001f4
 8000aa0:	2000031e 	.word	0x2000031e
 8000aa4:	2000031d 	.word	0x2000031d
 8000aa8:	2000031c 	.word	0x2000031c

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f004 feef 	bl	80058aa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f004 fed7 	bl	80058c6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001f4 	.word	0x200001f4
 8000b58:	2000031c 	.word	0x2000031c
 8000b5c:	20000318 	.word	0x20000318
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	20000318 	.word	0x20000318
 8000c94:	200001f0 	.word	0x200001f0
 8000c98:	20000160 	.word	0x20000160
 8000c9c:	200001f8 	.word	0x200001f8
 8000ca0:	20000320 	.word	0x20000320

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000318 	.word	0x20000318
 8000e34:	200001f0 	.word	0x200001f0
 8000e38:	20000160 	.word	0x20000160
 8000e3c:	200001f8 	.word	0x200001f8
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f004 fc9f 	bl	80058c6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f004 fc7b 	bl	80058aa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fc2f 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f004 fc46 	bl	800585a <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000318 	.word	0x20000318
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	2000031c 	.word	0x2000031c
 8000fe4:	2000031d 	.word	0x2000031d
 8000fe8:	2000031e 	.word	0x2000031e
 8000fec:	20000320 	.word	0x20000320
 8000ff0:	200001f8 	.word	0x200001f8
 8000ff4:	200001f4 	.word	0x200001f4
 8000ff8:	20000160 	.word	0x20000160
 8000ffc:	200001f0 	.word	0x200001f0
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000160 	.word	0x20000160

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f004 fbb5 	bl	8005876 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f004 fb87 	bl	80058c6 <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 fb40 	bl	800585a <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000318 	.word	0x20000318
 80011f0:	20000160 	.word	0x20000160
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	200001f1 	.word	0x200001f1

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f004 fb1a 	bl	8005876 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f004 fab6 	bl	800585a <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000160 	.word	0x20000160
 8001304:	20000318 	.word	0x20000318
 8001308:	200001f0 	.word	0x200001f0
 800130c:	200001f1 	.word	0x200001f1

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	20000530 	.word	0x20000530

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f004 f870 	bl	80054ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f898 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 80013d0:	f000 f946 	bl	8001660 <MX_TIM16_Init>
  MX_TIM17_Init();
 80013d4:	f000 f96c 	bl	80016b0 <MX_TIM17_Init>
  MX_GPIO_Init();
 80013d8:	f000 f9dc 	bl	8001794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 f98e 	bl	80016fc <MX_USART1_UART_Init>
  MX_RF_Init();
 80013e0:	f000 f90e 	bl	8001600 <MX_RF_Init>
  MX_RTC_Init();
 80013e4:	f000 f914 	bl	8001610 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e8:	f7ff f866 	bl	80004b8 <APPE_Init>

  MX_MEMS_Init();
 80013ec:	f009 fb04 	bl	800a9f8 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f00c fa02 	bl	800d7fc <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

    MX_MEMS_Process();
 80013f8:	f009 fb0a 	bl	800aa10 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */

    if (run_this_once) {
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <main+0x110>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <main+0x52>
      HAL_TIM_Base_Start_IT(&htim16);
 8001404:	4834      	ldr	r0, [pc, #208]	; (80014d8 <main+0x114>)
 8001406:	f007 fb15 	bl	8008a34 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim17);
 800140a:	4834      	ldr	r0, [pc, #208]	; (80014dc <main+0x118>)
 800140c:	f007 fb12 	bl	8008a34 <HAL_TIM_Base_Start_IT>
      run_this_once = 0;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <main+0x110>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    }


    /* STATE SWITCHING ------------------------------------------------------ */
    switch (state)
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <main+0x11c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d856      	bhi.n	80014cc <main+0x108>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <main+0x60>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	08001435 	.word	0x08001435
 8001428:	08001485 	.word	0x08001485
 800142c:	0800149d 	.word	0x0800149d
 8001430:	080014b5 	.word	0x080014b5
    {
    case NORMAL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_moving, strlen(prompt_moving), 1000);
 8001434:	482b      	ldr	r0, [pc, #172]	; (80014e4 <main+0x120>)
 8001436:	f7fe fea3 	bl	8000180 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	4928      	ldr	r1, [pc, #160]	; (80014e4 <main+0x120>)
 8001444:	4828      	ldr	r0, [pc, #160]	; (80014e8 <main+0x124>)
 8001446:	f007 fd59 	bl	8008efc <HAL_UART_Transmit>

      if (still_timeout_count == 10) {
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <main+0x128>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d105      	bne.n	8001460 <main+0x9c>
    	motion_status = MAYBE_DEAD;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <main+0x12c>)
 8001456:	2208      	movs	r2, #8
 8001458:	701a      	strb	r2, [r3, #0]
        state = UNCONCIOUS;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <main+0x11c>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
      }

      if (motion_status == MAN_DOWN) {
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <main+0x12c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b80      	cmp	r3, #128	; 0x80
 8001468:	d103      	bne.n	8001472 <main+0xae>
        state = FLY;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <main+0x11c>)
 800146c:	2203      	movs	r2, #3
 800146e:	701a      	strb	r2, [r3, #0]
      }
      else if (motion_status == MAN_FLY) {
        state = FALL;
      }

      break;
 8001470:	e02e      	b.n	80014d0 <main+0x10c>
      else if (motion_status == MAN_FLY) {
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <main+0x12c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b81      	cmp	r3, #129	; 0x81
 800147a:	d129      	bne.n	80014d0 <main+0x10c>
        state = FALL;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <main+0x11c>)
 800147e:	2202      	movs	r2, #2
 8001480:	701a      	strb	r2, [r3, #0]
      break;
 8001482:	e025      	b.n	80014d0 <main+0x10c>
    
    case UNCONCIOUS:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_dead, strlen(prompt_dead), 1000);
 8001484:	481b      	ldr	r0, [pc, #108]	; (80014f4 <main+0x130>)
 8001486:	f7fe fe7b 	bl	8000180 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	4918      	ldr	r1, [pc, #96]	; (80014f4 <main+0x130>)
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <main+0x124>)
 8001496:	f007 fd31 	bl	8008efc <HAL_UART_Transmit>
      break;
 800149a:	e01a      	b.n	80014d2 <main+0x10e>

    case FALL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_fall, strlen(prompt_fall), 1000);
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <main+0x134>)
 800149e:	f7fe fe6f 	bl	8000180 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	4913      	ldr	r1, [pc, #76]	; (80014f8 <main+0x134>)
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <main+0x124>)
 80014ae:	f007 fd25 	bl	8008efc <HAL_UART_Transmit>
      break;
 80014b2:	e00e      	b.n	80014d2 <main+0x10e>
    
    case FLY:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_up, strlen(prompt_up), 1000);
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <main+0x138>)
 80014b6:	f7fe fe63 	bl	8000180 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <main+0x138>)
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <main+0x124>)
 80014c6:	f007 fd19 	bl	8008efc <HAL_UART_Transmit>
      break;
 80014ca:	e002      	b.n	80014d2 <main+0x10e>

    default:
      break;
 80014cc:	bf00      	nop
 80014ce:	e78f      	b.n	80013f0 <main+0x2c>
      break;
 80014d0:	bf00      	nop
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014d2:	e78d      	b.n	80013f0 <main+0x2c>
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000624 	.word	0x20000624
 80014dc:	20000534 	.word	0x20000534
 80014e0:	20000331 	.word	0x20000331
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000574 	.word	0x20000574
 80014ec:	20000330 	.word	0x20000330
 80014f0:	20000332 	.word	0x20000332
 80014f4:	20000020 	.word	0x20000020
 80014f8:	20000038 	.word	0x20000038
 80014fc:	20000050 	.word	0x20000050

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0ae      	sub	sp, #184	; 0xb8
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800150a:	2248      	movs	r2, #72	; 0x48
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00c fb9f 	bl	800dc52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2250      	movs	r2, #80	; 0x50
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f00c fb8f 	bl	800dc52 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff ff15 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153a:	4b30      	ldr	r3, [pc, #192]	; (80015fc <SystemClock_Config+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <SystemClock_Config+0xfc>)
 8001544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <SystemClock_Config+0xfc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001556:	2307      	movs	r3, #7
 8001558:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fe34 	bl	80071e8 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001586:	f000 fa13 	bl	80019b0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800158a:	236f      	movs	r3, #111	; 0x6f
 800158c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800158e:	2302      	movs	r3, #2
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 f979 	bl	80078a4 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80015b8:	f000 f9fa 	bl	80019b0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80015bc:	f643 0305 	movw	r3, #14341	; 0x3805
 80015c0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80015d8:	2302      	movs	r3, #2
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015dc:	2300      	movs	r3, #0
 80015de:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f006 fd99 	bl	800811a <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015ee:	f000 f9df 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015f2:	bf00      	nop
 80015f4:	37b8      	adds	r7, #184	; 0xb8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	58000400 	.word	0x58000400

08001600 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_RTC_Init+0x48>)
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <MX_RTC_Init+0x4c>)
 8001618:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_RTC_Init+0x48>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_RTC_Init+0x48>)
 8001622:	220f      	movs	r2, #15
 8001624:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_RTC_Init+0x48>)
 8001628:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800162c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <MX_RTC_Init+0x48>)
 8001630:	f006 fff9 	bl	8008626 <HAL_RTC_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800163a:	f000 f9b9 	bl	80019b0 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_RTC_Init+0x48>)
 8001644:	f007 f8de 	bl	8008804 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800164e:	f000 f9af 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000600 	.word	0x20000600
 800165c:	40002800 	.word	0x40002800

08001660 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <MX_TIM16_Init+0x4c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16001;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_TIM16_Init+0x48>)
 800166c:	f643 6281 	movw	r2, #16001	; 0x3e81
 8001670:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2001;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_TIM16_Init+0x48>)
 800167a:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800167e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_TIM16_Init+0x48>)
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001694:	f007 f9a2 	bl	80089dc <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800169e:	f000 f987 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000624 	.word	0x20000624
 80016ac:	40014400 	.word	0x40014400

080016b0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 161;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016bc:	22a1      	movs	r2, #161	; 0xa1
 80016be:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2001;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016c8:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80016cc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_TIM17_Init+0x44>)
 80016e2:	f007 f97b 	bl	80089dc <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80016ec:	f000 f960 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000534 	.word	0x20000534
 80016f8:	40014800 	.word	0x40014800

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <MX_USART1_UART_Init+0x94>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_USART1_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_USART1_UART_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_USART1_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001746:	f007 fb89 	bl	8008e5c <HAL_UART_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001750:	f000 f92e 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_USART1_UART_Init+0x90>)
 8001758:	f009 f86a 	bl	800a830 <HAL_UARTEx_SetTxFifoThreshold>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001762:	f000 f925 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <MX_USART1_UART_Init+0x90>)
 800176a:	f009 f89f 	bl	800a8ac <HAL_UARTEx_SetRxFifoThreshold>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001774:	f000 f91c 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_USART1_UART_Init+0x90>)
 800177a:	f009 f820 	bl	800a7be <HAL_UARTEx_DisableFifoMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001784:	f000 f914 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000574 	.word	0x20000574
 8001790:	40013800 	.word	0x40013800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	2004      	movs	r0, #4
 80017aa:	f7ff fdf1 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fdee 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fdeb 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	2008      	movs	r0, #8
 80017bc:	f7ff fde8 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2123      	movs	r1, #35	; 0x23
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <MX_GPIO_Init+0xb8>)
 80017c6:	f004 fb39 	bl	8005e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 80017ca:	2310      	movs	r3, #16
 80017cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_GPIO_Init+0xbc>)
 80017d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	481e      	ldr	r0, [pc, #120]	; (8001854 <MX_GPIO_Init+0xc0>)
 80017dc:	f004 f8e0 	bl	80059a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80017e0:	2323      	movs	r3, #35	; 0x23
 80017e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4815      	ldr	r0, [pc, #84]	; (800184c <MX_GPIO_Init+0xb8>)
 80017f6:	f004 f8d3 	bl	80059a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800180c:	230a      	movs	r3, #10
 800180e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f004 f8c2 	bl	80059a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800181c:	2303      	movs	r3, #3
 800181e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <MX_GPIO_Init+0xc4>)
 800182e:	f004 f8b7 	bl	80059a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	200a      	movs	r0, #10
 8001838:	f003 fff5 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800183c:	200a      	movs	r0, #10
 800183e:	f004 f80c 	bl	800585a <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	48000400 	.word	0x48000400
 8001850:	10210000 	.word	0x10210000
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00

0800185c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* ISR ---------------------------------------------------------------------- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d11f      	bne.n	80018ac <HAL_TIM_PeriodElapsedCallback+0x50>
    
    if (!is_moving(&old_axe_x, &old_axe_y, &old_axe_z)) {
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800186e:	4921      	ldr	r1, [pc, #132]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001872:	f000 f84d 	bl	8001910 <is_moving>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_TIM_PeriodElapsedCallback+0x30>
      still_timeout_count++;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e002      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x36>
    } else {
      still_timeout_count = 0;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
    }

    old_axe_x = accelero_val.x;
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001898:	6013      	str	r3, [r2, #0]
    old_axe_y = accelero_val.y;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80018a0:	6013      	str	r3, [r2, #0]
    old_axe_z = accelero_val.z;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80018a8:	6013      	str	r3, [r2, #0]
    else if (axe_z_diff < -700) {
      motion_status = MAN_FLY;
    }

  }
}
 80018aa:	e01b      	b.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0x88>
  else if (htim == &htim17) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d117      	bne.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0x88>
	axe_z_diff = accelero_val.z - old_axe_z;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80018c0:	6013      	str	r3, [r2, #0]
    if (axe_z_diff > 700) {
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80018ca:	dd03      	ble.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x78>
      motion_status = MAN_DOWN;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	701a      	strb	r2, [r3, #0]
}
 80018d2:	e007      	b.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0x88>
    else if (axe_z_diff < -700) {
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 80018dc:	da02      	bge.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0x88>
      motion_status = MAN_FLY;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018e0:	2281      	movs	r2, #129	; 0x81
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000624 	.word	0x20000624
 80018f0:	2000033c 	.word	0x2000033c
 80018f4:	20000338 	.word	0x20000338
 80018f8:	20000334 	.word	0x20000334
 80018fc:	20000330 	.word	0x20000330
 8001900:	20000324 	.word	0x20000324
 8001904:	20000534 	.word	0x20000534
 8001908:	20000340 	.word	0x20000340
 800190c:	20000332 	.word	0x20000332

08001910 <is_moving>:


/* USER DEFINED ------------------------------------------------------------- */
code_status is_moving(int32_t* x, int32_t* y, int32_t* z)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint8_t is_really_moving = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]

  if (accelero_val.x - *x > 20 || accelero_val.x - *x < -20) {
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <is_moving+0x98>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b14      	cmp	r3, #20
 800192c:	dc07      	bgt.n	800193e <is_moving+0x2e>
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <is_moving+0x98>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f113 0f14 	cmn.w	r3, #20
 800193c:	da02      	bge.n	8001944 <is_moving+0x34>
    is_really_moving = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	e022      	b.n	800198a <is_moving+0x7a>
  }
  else if (accelero_val.y - *y > 20 || accelero_val.y - *y < -20) {
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <is_moving+0x98>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b14      	cmp	r3, #20
 8001950:	dc07      	bgt.n	8001962 <is_moving+0x52>
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <is_moving+0x98>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f113 0f14 	cmn.w	r3, #20
 8001960:	da02      	bge.n	8001968 <is_moving+0x58>
    is_really_moving = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
 8001966:	e010      	b.n	800198a <is_moving+0x7a>
  }
  else if (accelero_val.z - *z > 20 || accelero_val.z - *z < -20) {
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <is_moving+0x98>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b14      	cmp	r3, #20
 8001974:	dc07      	bgt.n	8001986 <is_moving+0x76>
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <is_moving+0x98>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f113 0f14 	cmn.w	r3, #20
 8001984:	da01      	bge.n	800198a <is_moving+0x7a>
    is_really_moving = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
  }

  if (is_really_moving) {
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <is_moving+0x8a>
    motion_status = OK;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <is_moving+0x9c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    return 1;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <is_moving+0x8c>
  }

  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	20000324 	.word	0x20000324
 80019ac:	20000332 	.word	0x20000332

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_AHB2_GRP1_EnableClock>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a7e:	f7ff ffc8 	bl	8001a12 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_RTC_MspInit+0x30>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d109      	bne.n	8001aae <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a9a:	f7ff ff90 	bl	80019be <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f003 febf 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f003 fed6 	bl	800585a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40002800 	.word	0x40002800

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_TIM_Base_MspInit+0x58>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10c      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ace:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ad2:	f7ff ffb7 	bl	8001a44 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2019      	movs	r0, #25
 8001adc:	f003 fea3 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ae0:	2019      	movs	r0, #25
 8001ae2:	f003 feba 	bl	800585a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001ae6:	e010      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_TIM_Base_MspInit+0x5c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10b      	bne.n	8001b0a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001af2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001af6:	f7ff ffa5 	bl	8001a44 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	201a      	movs	r0, #26
 8001b00:	f003 fe91 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b04:	201a      	movs	r0, #26
 8001b06:	f003 fea8 	bl	800585a <HAL_NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40014400 	.word	0x40014400
 8001b18:	40014800 	.word	0x40014800

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_UART_MspInit+0x68>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d11e      	bne.n	8001b7c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b42:	f7ff ff7f 	bl	8001a44 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2002      	movs	r0, #2
 8001b48:	f7ff ff4a 	bl	80019e0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b4c:	23c0      	movs	r3, #192	; 0xc0
 8001b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <HAL_UART_MspInit+0x6c>)
 8001b68:	f003 ff1a 	bl	80059a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2024      	movs	r0, #36	; 0x24
 8001b72:	f003 fe58 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b76:	2024      	movs	r0, #36	; 0x24
 8001b78:	f003 fe6f 	bl	800585a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013800 	.word	0x40013800
 8001b88:	48000400 	.word	0x48000400

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f003 fcbe 	bl	8005560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <RTC_WKUP_IRQHandler+0x14>)
 8001bee:	f006 fec5 	bl	800897c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001bf2:	f7ff f857 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000600 	.word	0x20000600

08001c00 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c04:	2010      	movs	r0, #16
 8001c06:	f004 f94b 	bl	8005ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c16:	f006 ff37 	bl	8008a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000624 	.word	0x20000624

08001c24 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c2a:	f006 ff2d 	bl	8008a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000534 	.word	0x20000534

08001c38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART1_IRQHandler+0x10>)
 8001c3e:	f007 f9f3 	bl	8009028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000574 	.word	0x20000574

08001c4c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001c50:	f00b fc84 	bl	800d55c <HW_IPCC_Tx_Handler>
  return;
 8001c54:	bf00      	nop
}
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001c5c:	f00b fc46 	bl	800d4ec <HW_IPCC_Rx_Handler>
  return;
 8001c60:	bf00      	nop
}
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <LL_AHB2_GRP1_EnableClock>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c88:	68fb      	ldr	r3, [r7, #12]
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_APB1_GRP1_EnableClock>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_APB1_GRP1_DisableClock>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	4013      	ands	r3, r2
 8001ce0:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <BSP_I2C1_Init+0x70>)
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <BSP_I2C1_Init+0x74>)
 8001cfe:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <BSP_I2C1_Init+0x78>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	4918      	ldr	r1, [pc, #96]	; (8001d68 <BSP_I2C1_Init+0x78>)
 8001d08:	600a      	str	r2, [r1, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d122      	bne.n	8001d54 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <BSP_I2C1_Init+0x70>)
 8001d10:	f004 fbea 	bl	80064e8 <HAL_I2C_GetState>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11c      	bne.n	8001d54 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001d1a:	4811      	ldr	r0, [pc, #68]	; (8001d60 <BSP_I2C1_Init+0x70>)
 8001d1c:	f000 f8fe 	bl	8001f1c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d116      	bne.n	8001d54 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <BSP_I2C1_Init+0x70>)
 8001d28:	f000 f8b4 	bl	8001e94 <MX_I2C1_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8001d32:	f06f 0307 	mvn.w	r3, #7
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	e00c      	b.n	8001d54 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <BSP_I2C1_Init+0x70>)
 8001d3e:	f004 fe09 	bl	8006954 <HAL_I2CEx_ConfigAnalogFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8001d48:	f06f 0307 	mvn.w	r3, #7
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e001      	b.n	8001d54 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000664 	.word	0x20000664
 8001d64:	40005400 	.word	0x40005400
 8001d68:	20000344 	.word	0x20000344

08001d6c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <BSP_I2C1_DeInit+0x48>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d014      	beq.n	8001da8 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <BSP_I2C1_DeInit+0x48>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <BSP_I2C1_DeInit+0x48>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <BSP_I2C1_DeInit+0x48>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <BSP_I2C1_DeInit+0x4c>)
 8001d92:	f000 f8e5 	bl	8001f60 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001d96:	4808      	ldr	r0, [pc, #32]	; (8001db8 <BSP_I2C1_DeInit+0x4c>)
 8001d98:	f004 f934 	bl	8006004 <HAL_I2C_DeInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8001da2:	f06f 0307 	mvn.w	r3, #7
 8001da6:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000344 	.word	0x20000344
 8001db8:	20000664 	.word	0x20000664

08001dbc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	81fb      	strh	r3, [r7, #14]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	81bb      	strh	r3, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001dd6:	89ba      	ldrh	r2, [r7, #12]
 8001dd8:	89f9      	ldrh	r1, [r7, #14]
 8001dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	480c      	ldr	r0, [pc, #48]	; (8001e1c <BSP_I2C1_WriteReg+0x60>)
 8001dec:	f004 f94e 	bl	800608c <HAL_I2C_Mem_Write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001df6:	4809      	ldr	r0, [pc, #36]	; (8001e1c <BSP_I2C1_WriteReg+0x60>)
 8001df8:	f004 fb84 	bl	8006504 <HAL_I2C_GetError>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d103      	bne.n	8001e0a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001e02:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e002      	b.n	8001e10 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001e0a:	f06f 0303 	mvn.w	r3, #3
 8001e0e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001e10:	697b      	ldr	r3, [r7, #20]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000664 	.word	0x20000664

08001e20 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	60ba      	str	r2, [r7, #8]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	81fb      	strh	r3, [r7, #14]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	81bb      	strh	r3, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001e3a:	89ba      	ldrh	r2, [r7, #12]
 8001e3c:	89f9      	ldrh	r1, [r7, #14]
 8001e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <BSP_I2C1_ReadReg+0x60>)
 8001e50:	f004 fa30 	bl	80062b4 <HAL_I2C_Mem_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001e5a:	4809      	ldr	r0, [pc, #36]	; (8001e80 <BSP_I2C1_ReadReg+0x60>)
 8001e5c:	f004 fb52 	bl	8006504 <HAL_I2C_GetError>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d103      	bne.n	8001e6e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001e66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e002      	b.n	8001e74 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e6e:	f06f 0303 	mvn.w	r3, #3
 8001e72:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001e74:	697b      	ldr	r3, [r7, #20]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000664 	.word	0x20000664

08001e84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001e88:	f003 fb7c 	bl	8005584 <HAL_GetTick>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <MX_I2C1_Init+0x80>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <MX_I2C1_Init+0x84>)
 8001eaa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f004 f805 	bl	8005ee6 <HAL_I2C_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f004 fd33 	bl	8006954 <HAL_I2CEx_ConfigAnalogFilter>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f004 fd75 	bl	80069ea <HAL_I2CEx_ConfigDigitalFilter>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40005400 	.word	0x40005400
 8001f18:	00707cbb 	.word	0x00707cbb

08001f1c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7ff fe9d 	bl	8001c64 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <I2C1_MspInit+0x40>)
 8001f48:	f003 fd2a 	bl	80059a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f50:	f7ff fea1 	bl	8001c96 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	48000400 	.word	0x48000400

08001f60 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f68:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f6c:	f7ff feac 	bl	8001cc8 <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001f70:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <I2C1_MspDeInit+0x24>)
 8001f76:	f003 fe83 	bl	8005c80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	48000400 	.word	0x48000400

08001f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <SystemInit+0xa0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <SystemInit+0xa0>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <SystemInit+0xa0>)
 8001f9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001fba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <SystemInit+0xa4>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd8:	f023 0305 	bic.w	r3, r3, #5
 8001fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <SystemInit+0xa8>)
 8001ffa:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <SystemInit+0xa8>)
 8002002:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	faf6fefb 	.word	0xfaf6fefb
 8002030:	22041000 	.word	0x22041000

08002034 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	4a47      	ldr	r2, [pc, #284]	; (8002164 <SystemCoreClockUpdate+0x130>)
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d867      	bhi.n	800212c <SystemCoreClockUpdate+0xf8>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <SystemCoreClockUpdate+0x30>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002099 	.word	0x08002099
 8002068:	0800212d 	.word	0x0800212d
 800206c:	0800212d 	.word	0x0800212d
 8002070:	0800212d 	.word	0x0800212d
 8002074:	080020a1 	.word	0x080020a1
 8002078:	0800212d 	.word	0x0800212d
 800207c:	0800212d 	.word	0x0800212d
 8002080:	0800212d 	.word	0x0800212d
 8002084:	080020a9 	.word	0x080020a9
 8002088:	0800212d 	.word	0x0800212d
 800208c:	0800212d 	.word	0x0800212d
 8002090:	0800212d 	.word	0x0800212d
 8002094:	080020b1 	.word	0x080020b1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <SystemCoreClockUpdate+0x134>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]
      break;
 800209e:	e049      	b.n	8002134 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <SystemCoreClockUpdate+0x134>)
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <SystemCoreClockUpdate+0x138>)
 80020a4:	601a      	str	r2, [r3, #0]
      break;
 80020a6:	e045      	b.n	8002134 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <SystemCoreClockUpdate+0x134>)
 80020aa:	4a31      	ldr	r2, [pc, #196]	; (8002170 <SystemCoreClockUpdate+0x13c>)
 80020ac:	601a      	str	r2, [r3, #0]
      break;
 80020ae:	e041      	b.n	8002134 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	3301      	adds	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d105      	bne.n	80020de <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80020d2:	4a26      	ldr	r2, [pc, #152]	; (800216c <SystemCoreClockUpdate+0x138>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00d      	b.n	80020fa <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d105      	bne.n	80020f0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <SystemCoreClockUpdate+0x13c>)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e004      	b.n	80020fa <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0f5b      	lsrs	r3, r3, #29
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	3301      	adds	r3, #1
 800211c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <SystemCoreClockUpdate+0x134>)
 8002128:	6013      	str	r3, [r2, #0]
      break;
 800212a:	e003      	b.n	8002134 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <SystemCoreClockUpdate+0x134>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6013      	str	r3, [r2, #0]
      break;
 8002132:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <SystemCoreClockUpdate+0x140>)
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <SystemCoreClockUpdate+0x134>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <SystemCoreClockUpdate+0x134>)
 8002154:	6013      	str	r3, [r2, #0]

}
 8002156:	bf00      	nop
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	0800dd50 	.word	0x0800dd50
 8002168:	20000068 	.word	0x20000068
 800216c:	00f42400 	.word	0x00f42400
 8002170:	01e84800 	.word	0x01e84800
 8002174:	0800dcf0 	.word	0x0800dcf0

08002178 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002178:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217c:	3304      	adds	r3, #4

0800217e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002180:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002182:	d3f9      	bcc.n	8002178 <CopyDataInit>
  bx lr
 8002184:	4770      	bx	lr

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002186:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002188:	3004      	adds	r0, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800218a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>
  bx lr
 800218e:	4770      	bx	lr

08002190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopForever+0x8>)
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopForever+0xc>)
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopForever+0x10>)
 800219a:	2300      	movs	r3, #0
 800219c:	f7ff ffef 	bl	800217e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopForever+0x14>)
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopForever+0x18>)
 80021a4:	2300      	movs	r3, #0
 80021a6:	f7ff fff0 	bl	800218a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021aa:	480c      	ldr	r0, [pc, #48]	; (80021dc <LoopForever+0x1c>)
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <LoopForever+0x20>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	f7ff ffeb 	bl	800218a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021b4:	f7ff fee8 	bl	8001f88 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021b8:	f00b fd1c 	bl	800dbf4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80021bc:	f7ff f902 	bl	80013c4 <main>

080021c0 <LoopForever>:

LoopForever:
  b LoopForever
 80021c0:	e7fe      	b.n	80021c0 <LoopForever>
 80021c2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80021c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000160 	.word	0x20000160
 80021d0:	0800dde0 	.word	0x0800dde0
  INIT_BSS _sbss, _ebss
 80021d4:	200002fc 	.word	0x200002fc
 80021d8:	200006c4 	.word	0x200006c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021dc:	200301c4 	.word	0x200301c4
 80021e0:	20030a44 	.word	0x20030a44

080021e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC1_IRQHandler>
	...

080021e8 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e04d      	b.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7b1a      	ldrb	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002240:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002246:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e020      	b.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4798      	blx	r3
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e016      	b.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d112      	bne.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10d      	bne.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002284:	2301      	movs	r3, #1
 8002286:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	461a      	mov	r2, r3
 800228c:	2123      	movs	r1, #35	; 0x23
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb52 	bl	8002938 <LSM303AGR_ACC_Write_Reg>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e000      	b.n	80022a2 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08003149 	.word	0x08003149
 80022b0:	080031ab 	.word	0x080031ab

080022b4 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	331c      	adds	r3, #28
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 f948 	bl	8003558 <lsm303agr_xl_block_data_update_set>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e02c      	b.n	800232e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	331c      	adds	r3, #28
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 fa77 	bl	80037ce <lsm303agr_xl_fifo_mode_set>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	e020      	b.n	800232e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2205      	movs	r2, #5
 80022f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	331c      	adds	r3, #28
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 f84c 	bl	8003398 <lsm303agr_xl_data_rate_set>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e010      	b.n	800232e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	331c      	adds	r3, #28
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f001 f8c2 	bl	800349c <lsm303agr_xl_full_scale_set>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	e004      	b.n	800232e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f87c 	bl	800243c <LSM303AGR_ACC_Disable>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e008      	b.n	8002362 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	331c      	adds	r3, #28
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f001 f9df 	bl	800373e <lsm303agr_xl_device_id_get>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e000      	b.n	800238e <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2210      	movs	r2, #16
 80023c4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80023d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	43c80000 	.word	0x43c80000

080023f4 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e014      	b.n	8002434 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f103 021c 	add.w	r2, r3, #28
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f000 ffbd 	bl	8003398 <lsm303agr_xl_data_rate_set>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	e004      	b.n	8002434 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e01f      	b.n	8002492 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 021c 	add.w	r2, r3, #28
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	332a      	adds	r3, #42	; 0x2a
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 ffc0 	bl	80033e4 <lsm303agr_xl_data_rate_get>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e010      	b.n	8002492 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	331c      	adds	r3, #28
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 ff8e 	bl	8003398 <lsm303agr_xl_data_rate_set>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e004      	b.n	8002492 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	331c      	adds	r3, #28
 80024ac:	f107 020b 	add.w	r2, r7, #11
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 ff3c 	bl	8003330 <lsm303agr_xl_operating_mode_get>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e02e      	b.n	8002522 <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d00d      	beq.n	80024e6 <LSM303AGR_ACC_GetSensitivity+0x4c>
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d015      	beq.n	80024fa <LSM303AGR_ACC_GetSensitivity+0x60>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fca9 	bl	8002e2c <LSM303AGR_ACC_GetSensitivityHR>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01a      	beq.n	8002516 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	e01d      	b.n	8002522 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fce5 	bl	8002eb8 <LSM303AGR_ACC_GetSensitivityNM>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
 80024f8:	e013      	b.n	8002522 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fd21 	bl	8002f44 <LSM303AGR_ACC_GetSensitivityLP>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	e009      	b.n	8002522 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	60fb      	str	r3, [r7, #12]
      break;
 8002514:	e004      	b.n	8002520 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800251e:	bf00      	nop
  }

  return ret;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	331c      	adds	r3, #28
 800253e:	f107 020b 	add.w	r2, r7, #11
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fef3 	bl	8003330 <lsm303agr_xl_operating_mode_get>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	e09f      	b.n	8002696 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	331c      	adds	r3, #28
 800255a:	f107 020a 	add.w	r2, r7, #10
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 ff3f 	bl	80033e4 <lsm303agr_xl_data_rate_get>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e091      	b.n	8002696 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d148      	bne.n	800260a <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8002578:	7abb      	ldrb	r3, [r7, #10]
 800257a:	2b09      	cmp	r3, #9
 800257c:	d840      	bhi.n	8002600 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025ad 	.word	0x080025ad
 8002588:	080025b7 	.word	0x080025b7
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025c9 	.word	0x080025c9
 8002594:	080025d1 	.word	0x080025d1
 8002598:	080025d9 	.word	0x080025d9
 800259c:	080025e1 	.word	0x080025e1
 80025a0:	080025e9 	.word	0x080025e9
 80025a4:	080025f1 	.word	0x080025f1
 80025a8:	080025f9 	.word	0x080025f9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
        break;
 80025b4:	e06e      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025bc:	601a      	str	r2, [r3, #0]
        break;
 80025be:	e069      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80025c4:	601a      	str	r2, [r3, #0]
        break;
 80025c6:	e065      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4a36      	ldr	r2, [pc, #216]	; (80026a4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80025cc:	601a      	str	r2, [r3, #0]
        break;
 80025ce:	e061      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80025d4:	601a      	str	r2, [r3, #0]
        break;
 80025d6:	e05d      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80025dc:	601a      	str	r2, [r3, #0]
        break;
 80025de:	e059      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80025e4:	601a      	str	r2, [r3, #0]
        break;
 80025e6:	e055      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80025ec:	601a      	str	r2, [r3, #0]
        break;
 80025ee:	e051      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80025f4:	601a      	str	r2, [r3, #0]
        break;
 80025f6:	e04d      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4a30      	ldr	r2, [pc, #192]	; (80026bc <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80025fc:	601a      	str	r2, [r3, #0]
        break;
 80025fe:	e049      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	60fb      	str	r3, [r7, #12]
        break;
 8002606:	bf00      	nop
 8002608:	e044      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800260a:	7abb      	ldrb	r3, [r7, #10]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d83d      	bhi.n	800268c <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8002610:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8002612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002616:	bf00      	nop
 8002618:	08002641 	.word	0x08002641
 800261c:	0800264b 	.word	0x0800264b
 8002620:	08002655 	.word	0x08002655
 8002624:	0800265d 	.word	0x0800265d
 8002628:	08002665 	.word	0x08002665
 800262c:	0800266d 	.word	0x0800266d
 8002630:	08002675 	.word	0x08002675
 8002634:	0800267d 	.word	0x0800267d
 8002638:	0800268d 	.word	0x0800268d
 800263c:	08002685 	.word	0x08002685
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
        break;
 8002648:	e024      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002650:	601a      	str	r2, [r3, #0]
        break;
 8002652:	e01f      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002658:	601a      	str	r2, [r3, #0]
        break;
 800265a:	e01b      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002660:	601a      	str	r2, [r3, #0]
        break;
 8002662:	e017      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002668:	601a      	str	r2, [r3, #0]
        break;
 800266a:	e013      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002670:	601a      	str	r2, [r3, #0]
        break;
 8002672:	e00f      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002678:	601a      	str	r2, [r3, #0]
        break;
 800267a:	e00b      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002680:	601a      	str	r2, [r3, #0]
        break;
 8002682:	e007      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8002688:	601a      	str	r2, [r3, #0]
        break;
 800268a:	e003      	b.n	8002694 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	60fb      	str	r3, [r7, #12]
        break;
 8002692:	bf00      	nop
    }
  }

  return ret;
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	41200000 	.word	0x41200000
 80026a4:	41c80000 	.word	0x41c80000
 80026a8:	42480000 	.word	0x42480000
 80026ac:	42c80000 	.word	0x42c80000
 80026b0:	43480000 	.word	0x43480000
 80026b4:	43c80000 	.word	0x43c80000
 80026b8:	44ca8000 	.word	0x44ca8000
 80026bc:	45a80000 	.word	0x45a80000
 80026c0:	44a80000 	.word	0x44a80000

080026c4 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d106      	bne.n	80026e8 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80026da:	ed97 0a00 	vldr	s0, [r7]
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fc76 	bl	8002fd0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	e005      	b.n	80026f4 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80026e8:	ed97 0a00 	vldr	s0, [r7]
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fcd1 	bl	8003094 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80026f2:	4603      	mov	r3, r0
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	331c      	adds	r3, #28
 800270e:	f107 020b 	add.w	r2, r7, #11
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fee7 	bl	80034e8 <lsm303agr_xl_full_scale_get>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	e023      	b.n	800276e <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d81b      	bhi.n	8002764 <LSM303AGR_ACC_GetFullScale+0x68>
 800272c:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <LSM303AGR_ACC_GetFullScale+0x38>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002745 	.word	0x08002745
 8002738:	0800274d 	.word	0x0800274d
 800273c:	08002755 	.word	0x08002755
 8002740:	0800275d 	.word	0x0800275d
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
      break;
 800274a:	e00f      	b.n	800276c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2204      	movs	r2, #4
 8002750:	601a      	str	r2, [r3, #0]
      break;
 8002752:	e00b      	b.n	800276c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2208      	movs	r2, #8
 8002758:	601a      	str	r2, [r3, #0]
      break;
 800275a:	e007      	b.n	800276c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	601a      	str	r2, [r3, #0]
      break;
 8002762:	e003      	b.n	800276c <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	60fb      	str	r3, [r7, #12]
      break;
 800276a:	bf00      	nop
  }

  return ret;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop

08002778 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	dd0b      	ble.n	80027a0 <LSM303AGR_ACC_SetFullScale+0x28>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	dd06      	ble.n	800279c <LSM303AGR_ACC_SetFullScale+0x24>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	dc01      	bgt.n	8002798 <LSM303AGR_ACC_SetFullScale+0x20>
 8002794:	2302      	movs	r3, #2
 8002796:	e004      	b.n	80027a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002798:	2303      	movs	r3, #3
 800279a:	e002      	b.n	80027a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LSM303AGR_ACC_SetFullScale+0x2a>
 80027a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 80027a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	331c      	adds	r3, #28
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fe75 	bl	800349c <lsm303agr_xl_full_scale_set>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	e000      	b.n	80027c0 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	331c      	adds	r3, #28
 80027de:	f107 020f 	add.w	r2, r7, #15
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fda3 	bl	8003330 <lsm303agr_xl_operating_mode_get>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	e047      	b.n	8002886 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d006      	beq.n	800280a <LSM303AGR_ACC_GetAxesRaw+0x42>
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d007      	beq.n	8002810 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002804:	2310      	movs	r3, #16
 8002806:	83fb      	strh	r3, [r7, #30]
      break;
 8002808:	e00a      	b.n	8002820 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800280a:	2340      	movs	r3, #64	; 0x40
 800280c:	83fb      	strh	r3, [r7, #30]
      break;
 800280e:	e007      	b.n	8002820 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002814:	83fb      	strh	r3, [r7, #30]
      break;
 8002816:	e003      	b.n	8002820 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	61bb      	str	r3, [r7, #24]
      break;
 800281e:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d101      	bne.n	800282c <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	e02c      	b.n	8002886 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	331c      	adds	r3, #28
 8002830:	f107 0210 	add.w	r2, r7, #16
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 feb4 	bl	80035a4 <lsm303agr_acceleration_raw_get>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e01e      	b.n	8002886 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002848:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800284c:	461a      	mov	r2, r3
 800284e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002852:	fb92 f3f3 	sdiv	r3, r2, r3
 8002856:	b21a      	sxth	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800285c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002860:	461a      	mov	r2, r3
 8002862:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002866:	fb92 f3f3 	sdiv	r3, r2, r3
 800286a:	b21a      	sxth	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002870:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002874:	461a      	mov	r2, r3
 8002876:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800287a:	fb92 f3f3 	sdiv	r3, r2, r3
 800287e:	b21a      	sxth	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	809a      	strh	r2, [r3, #4]

  return ret;
 8002884:	69bb      	ldr	r3, [r7, #24]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff8f 	bl	80027c8 <LSM303AGR_ACC_GetAxesRaw>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	e03c      	b.n	8002930 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fdec 	bl	800249a <LSM303AGR_ACC_GetSensitivity>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e030      	b.n	8002930 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80028ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028da:	edd7 7a03 	vldr	s15, [r7, #12]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e6:	ee17 2a90 	vmov	r2, s15
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80028ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002906:	ee17 2a90 	vmov	r2, s15
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800290e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291a:	edd7 7a03 	vldr	s15, [r7, #12]
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002926:	ee17 2a90 	vmov	r2, s15
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
 8002944:	4613      	mov	r3, r2
 8002946:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 001c 	add.w	r0, r3, #28
 800294e:	1cba      	adds	r2, r7, #2
 8002950:	78f9      	ldrb	r1, [r7, #3]
 8002952:	2301      	movs	r3, #1
 8002954:	f000 fcd4 	bl	8003300 <lsm303agr_write_reg>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e000      	b.n	8002966 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e04b      	b.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	7b1a      	ldrb	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 80029c8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 80029ce:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e01e      	b.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4798      	blx	r3
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e014      	b.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	331c      	adds	r3, #28
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 ff01 	bl	800381a <lsm303agr_mag_i2c_interface_set>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e000      	b.n	8002a26 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0800320d 	.word	0x0800320d
 8002a34:	0800326f 	.word	0x0800326f

08002a38 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	331c      	adds	r3, #28
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe42 	bl	80036d0 <lsm303agr_mag_block_data_update_set>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e028      	b.n	8002aaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	331c      	adds	r3, #28
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fdb1 	bl	80035c6 <lsm303agr_mag_operating_mode_set>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e01c      	b.n	8002aaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	331c      	adds	r3, #28
 8002a74:	2103      	movs	r1, #3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fdcb 	bl	8003612 <lsm303agr_mag_data_rate_set>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e010      	b.n	8002aaa <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	331c      	adds	r3, #28
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fe77 	bl	8003782 <lsm303agr_mag_self_test_set>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e004      	b.n	8002aaa <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f874 	bl	8002ba8 <LSM303AGR_MAG_Disable>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e004      	b.n	8002ad6 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	331c      	adds	r3, #28
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fe36 	bl	8003760 <lsm303agr_mag_device_id_get>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e000      	b.n	8002b02 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2201      	movs	r2, #1
 8002b26:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2232      	movs	r2, #50	; 0x32
 8002b3e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002b54:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	42c80000 	.word	0x42c80000

08002b68 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e010      	b.n	8002ba0 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	331c      	adds	r3, #28
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd1e 	bl	80035c6 <lsm303agr_mag_operating_mode_set>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	e004      	b.n	8002ba0 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e010      	b.n	8002be0 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	331c      	adds	r3, #28
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fcfe 	bl	80035c6 <lsm303agr_mag_operating_mode_set>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd4:	e004      	b.n	8002be0 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002bf8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	331c      	adds	r3, #28
 8002c1a:	f107 020b 	add.w	r2, r7, #11
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd1d 	bl	8003660 <lsm303agr_mag_data_rate_get>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	e023      	b.n	8002c7a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d81b      	bhi.n	8002c70 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c59 	.word	0x08002c59
 8002c48:	08002c61 	.word	0x08002c61
 8002c4c:	08002c69 	.word	0x08002c69
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002c54:	601a      	str	r2, [r3, #0]
      break;
 8002c56:	e00f      	b.n	8002c78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002c5c:	601a      	str	r2, [r3, #0]
      break;
 8002c5e:	e00b      	b.n	8002c78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002c64:	601a      	str	r2, [r3, #0]
      break;
 8002c66:	e007      	b.n	8002c78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002c6c:	601a      	str	r2, [r3, #0]
      break;
 8002c6e:	e003      	b.n	8002c78 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	60fb      	str	r3, [r7, #12]
      break;
 8002c76:	bf00      	nop
  }

  return ret;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	41200000 	.word	0x41200000
 8002c88:	41a00000 	.word	0x41a00000
 8002c8c:	42480000 	.word	0x42480000
 8002c90:	42c80000 	.word	0x42c80000

08002c94 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002ca0:	edd7 7a00 	vldr	s15, [r7]
 8002ca4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d801      	bhi.n	8002cb6 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e016      	b.n	8002ce4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002cb6:	edd7 7a00 	vldr	s15, [r7]
 8002cba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	d801      	bhi.n	8002ccc <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e00b      	b.n	8002ce4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002ccc:	edd7 7a00 	vldr	s15, [r7]
 8002cd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002d0c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d801      	bhi.n	8002ce2 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e000      	b.n	8002ce4 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002ce2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002ce4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	331c      	adds	r3, #28
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fc8f 	bl	8003612 <lsm303agr_mag_data_rate_set>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e000      	b.n	8002d02 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	42480000 	.word	0x42480000

08002d10 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2232      	movs	r2, #50	; 0x32
 8002d1e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	331c      	adds	r3, #28
 8002d54:	f107 0208 	add.w	r2, r7, #8
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fcde 	bl	800371c <lsm303agr_magnetic_raw_get>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e00c      	b.n	8002d86 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002d74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002d7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	331c      	adds	r3, #28
 8002d9c:	f107 0210 	add.w	r2, r7, #16
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fcba 	bl	800371c <lsm303agr_magnetic_raw_get>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e036      	b.n	8002e22 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff14 	bl	8002be8 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002dc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd8:	ee17 2a90 	vmov	r2, s15
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002de0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df8:	ee17 2a90 	vmov	r2, s15
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002e00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e18:	ee17 2a90 	vmov	r2, s15
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	331c      	adds	r3, #28
 8002e3e:	f107 020b 	add.w	r2, r7, #11
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fb4f 	bl	80034e8 <lsm303agr_xl_full_scale_get>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	e023      	b.n	8002e9e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d81b      	bhi.n	8002e94 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e7d 	.word	0x08002e7d
 8002e6c:	08002e85 	.word	0x08002e85
 8002e70:	08002e8d 	.word	0x08002e8d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8002e78:	601a      	str	r2, [r3, #0]
      break;
 8002e7a:	e00f      	b.n	8002e9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8002e80:	601a      	str	r2, [r3, #0]
      break;
 8002e82:	e00b      	b.n	8002e9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8002e88:	601a      	str	r2, [r3, #0]
      break;
 8002e8a:	e007      	b.n	8002e9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8002e90:	601a      	str	r2, [r3, #0]
      break;
 8002e92:	e003      	b.n	8002e9c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	60fb      	str	r3, [r7, #12]
      break;
 8002e9a:	bf00      	nop
  }

  return ret;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	3f7ae148 	.word	0x3f7ae148
 8002eac:	3ff9999a 	.word	0x3ff9999a
 8002eb0:	4079999a 	.word	0x4079999a
 8002eb4:	413b851f 	.word	0x413b851f

08002eb8 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	331c      	adds	r3, #28
 8002eca:	f107 020b 	add.w	r2, r7, #11
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fb09 	bl	80034e8 <lsm303agr_xl_full_scale_get>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8002edc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee0:	e023      	b.n	8002f2a <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d81b      	bhi.n	8002f20 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f09 	.word	0x08002f09
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f19 	.word	0x08002f19
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8002f04:	601a      	str	r2, [r3, #0]
      break;
 8002f06:	e00f      	b.n	8002f28 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8002f0c:	601a      	str	r2, [r3, #0]
      break;
 8002f0e:	e00b      	b.n	8002f28 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8002f14:	601a      	str	r2, [r3, #0]
      break;
 8002f16:	e007      	b.n	8002f28 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8002f1c:	601a      	str	r2, [r3, #0]
      break;
 8002f1e:	e003      	b.n	8002f28 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	60fb      	str	r3, [r7, #12]
      break;
 8002f26:	bf00      	nop
  }

  return ret;
 8002f28:	68fb      	ldr	r3, [r7, #12]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	4079999a 	.word	0x4079999a
 8002f38:	40fa3d71 	.word	0x40fa3d71
 8002f3c:	417a147b 	.word	0x417a147b
 8002f40:	423b999a 	.word	0x423b999a

08002f44 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	331c      	adds	r3, #28
 8002f56:	f107 020b 	add.w	r2, r7, #11
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fac3 	bl	80034e8 <lsm303agr_xl_full_scale_get>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	e023      	b.n	8002fb6 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d81b      	bhi.n	8002fac <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f95 	.word	0x08002f95
 8002f84:	08002f9d 	.word	0x08002f9d
 8002f88:	08002fa5 	.word	0x08002fa5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8002f90:	601a      	str	r2, [r3, #0]
      break;
 8002f92:	e00f      	b.n	8002fb4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8002f98:	601a      	str	r2, [r3, #0]
      break;
 8002f9a:	e00b      	b.n	8002fb4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8002fa0:	601a      	str	r2, [r3, #0]
      break;
 8002fa2:	e007      	b.n	8002fb4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8002fa8:	601a      	str	r2, [r3, #0]
      break;
 8002faa:	e003      	b.n	8002fb4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb0:	60fb      	str	r3, [r7, #12]
      break;
 8002fb2:	bf00      	nop
  }

  return ret;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	417a147b 	.word	0x417a147b
 8002fc4:	41fa147b 	.word	0x41fa147b
 8002fc8:	427a147b 	.word	0x427a147b
 8002fcc:	433b947b 	.word	0x433b947b

08002fd0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8002fdc:	edd7 7a00 	vldr	s15, [r7]
 8002fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fec:	d801      	bhi.n	8002ff2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e037      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8002ff2:	edd7 7a00 	vldr	s15, [r7]
 8002ff6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d801      	bhi.n	8003008 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003004:	2302      	movs	r3, #2
 8003006:	e02c      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003008:	edd7 7a00 	vldr	s15, [r7]
 800300c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d801      	bhi.n	800301e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800301a:	2303      	movs	r3, #3
 800301c:	e021      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800301e:	edd7 7a00 	vldr	s15, [r7]
 8003022:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003088 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302e:	d801      	bhi.n	8003034 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003030:	2304      	movs	r3, #4
 8003032:	e016      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003034:	edd7 7a00 	vldr	s15, [r7]
 8003038:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800308c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800303c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d801      	bhi.n	800304a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003046:	2305      	movs	r3, #5
 8003048:	e00b      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800304a:	edd7 7a00 	vldr	s15, [r7]
 800304e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003090 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d801      	bhi.n	8003060 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800305c:	2306      	movs	r3, #6
 800305e:	e000      	b.n	8003062 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003060:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003062:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	331c      	adds	r3, #28
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f993 	bl	8003398 <lsm303agr_xl_data_rate_set>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	e000      	b.n	8003080 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	42480000 	.word	0x42480000
 800308c:	42c80000 	.word	0x42c80000
 8003090:	43480000 	.word	0x43480000

08003094 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80030a0:	edd7 7a00 	vldr	s15, [r7]
 80030a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d801      	bhi.n	80030b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e037      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80030b6:	edd7 7a00 	vldr	s15, [r7]
 80030ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	d801      	bhi.n	80030cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e02c      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80030cc:	edd7 7a00 	vldr	s15, [r7]
 80030d0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80030d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	d801      	bhi.n	80030e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80030de:	2303      	movs	r3, #3
 80030e0:	e021      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80030e2:	edd7 7a00 	vldr	s15, [r7]
 80030e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800313c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80030ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d801      	bhi.n	80030f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80030f4:	2304      	movs	r3, #4
 80030f6:	e016      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80030f8:	edd7 7a00 	vldr	s15, [r7]
 80030fc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003140 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d801      	bhi.n	800310e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800310a:	2305      	movs	r3, #5
 800310c:	e00b      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800310e:	edd7 7a00 	vldr	s15, [r7]
 8003112:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003144 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	d801      	bhi.n	8003124 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003120:	2306      	movs	r3, #6
 8003122:	e000      	b.n	8003126 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003124:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	42480000 	.word	0x42480000
 8003140:	42c80000 	.word	0x42c80000
 8003144:	43480000 	.word	0x43480000

08003148 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	460b      	mov	r3, r1
 8003156:	72fb      	strb	r3, [r7, #11]
 8003158:	4613      	mov	r3, r2
 800315a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10e      	bne.n	8003186 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	695c      	ldr	r4, [r3, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	7b1b      	ldrb	r3, [r3, #12]
 8003170:	b298      	uxth	r0, r3
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003178:	b2db      	uxtb	r3, r3
 800317a:	b299      	uxth	r1, r3
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	47a0      	blx	r4
 8003182:	4603      	mov	r3, r0
 8003184:	e00d      	b.n	80031a2 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	695c      	ldr	r4, [r3, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	7b1b      	ldrb	r3, [r3, #12]
 800318e:	b298      	uxth	r0, r3
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003196:	b2db      	uxtb	r3, r3
 8003198:	b299      	uxth	r1, r3
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	47a0      	blx	r4
 80031a0:	4603      	mov	r3, r0
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b087      	sub	sp, #28
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	461a      	mov	r2, r3
 80031b6:	460b      	mov	r3, r1
 80031b8:	72fb      	strb	r3, [r7, #11]
 80031ba:	4613      	mov	r3, r2
 80031bc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	691c      	ldr	r4, [r3, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	7b1b      	ldrb	r3, [r3, #12]
 80031d2:	b298      	uxth	r0, r3
 80031d4:	7afb      	ldrb	r3, [r7, #11]
 80031d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	b299      	uxth	r1, r3
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	47a0      	blx	r4
 80031e4:	4603      	mov	r3, r0
 80031e6:	e00d      	b.n	8003204 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	691c      	ldr	r4, [r3, #16]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
 80031f0:	b298      	uxth	r0, r3
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	b299      	uxth	r1, r3
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	47a0      	blx	r4
 8003202:	4603      	mov	r3, r0
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	72fb      	strb	r3, [r7, #11]
 800321c:	4613      	mov	r3, r2
 800321e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10e      	bne.n	800324a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	695c      	ldr	r4, [r3, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	7b1b      	ldrb	r3, [r3, #12]
 8003234:	b298      	uxth	r0, r3
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800323c:	b2db      	uxtb	r3, r3
 800323e:	b299      	uxth	r1, r3
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	47a0      	blx	r4
 8003246:	4603      	mov	r3, r0
 8003248:	e00d      	b.n	8003266 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	695c      	ldr	r4, [r3, #20]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	7b1b      	ldrb	r3, [r3, #12]
 8003252:	b298      	uxth	r0, r3
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325a:	b2db      	uxtb	r3, r3
 800325c:	b299      	uxth	r1, r3
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	47a0      	blx	r4
 8003264:	4603      	mov	r3, r0
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd90      	pop	{r4, r7, pc}

0800326e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800326e:	b590      	push	{r4, r7, lr}
 8003270:	b087      	sub	sp, #28
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	461a      	mov	r2, r3
 800327a:	460b      	mov	r3, r1
 800327c:	72fb      	strb	r3, [r7, #11]
 800327e:	4613      	mov	r3, r2
 8003280:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10e      	bne.n	80032ac <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	691c      	ldr	r4, [r3, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	7b1b      	ldrb	r3, [r3, #12]
 8003296:	b298      	uxth	r0, r3
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	b299      	uxth	r1, r3
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	47a0      	blx	r4
 80032a8:	4603      	mov	r3, r0
 80032aa:	e00d      	b.n	80032c8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	691c      	ldr	r4, [r3, #16]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	7b1b      	ldrb	r3, [r3, #12]
 80032b4:	b298      	uxth	r0, r3
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	b299      	uxth	r1, r3
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	47a0      	blx	r4
 80032c6:	4603      	mov	r3, r0
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}

080032d0 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	461a      	mov	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	72fb      	strb	r3, [r7, #11]
 80032e0:	4613      	mov	r3, r2
 80032e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685c      	ldr	r4, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6898      	ldr	r0, [r3, #8]
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	7af9      	ldrb	r1, [r7, #11]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	47a0      	blx	r4
 80032f4:	6178      	str	r0, [r7, #20]
  return ret;
 80032f6:	697b      	ldr	r3, [r7, #20]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd90      	pop	{r4, r7, pc}

08003300 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	460b      	mov	r3, r1
 800330e:	72fb      	strb	r3, [r7, #11]
 8003310:	4613      	mov	r3, r2
 8003312:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681c      	ldr	r4, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6898      	ldr	r0, [r3, #8]
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	7af9      	ldrb	r1, [r7, #11]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	47a0      	blx	r4
 8003324:	6178      	str	r0, [r7, #20]
  return ret;
 8003326:	697b      	ldr	r3, [r7, #20]
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800333a:	f107 020c 	add.w	r2, r7, #12
 800333e:	2301      	movs	r3, #1
 8003340:	2120      	movs	r1, #32
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffc4 	bl	80032d0 <lsm303agr_read_reg>
 8003348:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003350:	f107 0210 	add.w	r2, r7, #16
 8003354:	2301      	movs	r3, #1
 8003356:	2123      	movs	r1, #35	; 0x23
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ffb9 	bl	80032d0 <lsm303agr_read_reg>
 800335e:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8003360:	7b3b      	ldrb	r3, [r7, #12]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e00c      	b.n	800338e <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003374:	7c3b      	ldrb	r3, [r7, #16]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e002      	b.n	800338e <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800338e:	697b      	ldr	r3, [r7, #20]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80033a4:	f107 0208 	add.w	r2, r7, #8
 80033a8:	2301      	movs	r3, #1
 80033aa:	2120      	movs	r1, #32
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff8f 	bl	80032d0 <lsm303agr_read_reg>
 80033b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	7a3b      	ldrb	r3, [r7, #8]
 80033c4:	f362 1307 	bfi	r3, r2, #4, #4
 80033c8:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	2301      	movs	r3, #1
 80033d0:	2120      	movs	r1, #32
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff94 	bl	8003300 <lsm303agr_write_reg>
 80033d8:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80033ee:	f107 0208 	add.w	r2, r7, #8
 80033f2:	2301      	movs	r3, #1
 80033f4:	2120      	movs	r1, #32
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff6a 	bl	80032d0 <lsm303agr_read_reg>
 80033fc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 80033fe:	7a3b      	ldrb	r3, [r7, #8]
 8003400:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b09      	cmp	r3, #9
 8003408:	d83e      	bhi.n	8003488 <lsm303agr_xl_data_rate_get+0xa4>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <lsm303agr_xl_data_rate_get+0x2c>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003439 	.word	0x08003439
 8003414:	08003441 	.word	0x08003441
 8003418:	08003449 	.word	0x08003449
 800341c:	08003451 	.word	0x08003451
 8003420:	08003459 	.word	0x08003459
 8003424:	08003461 	.word	0x08003461
 8003428:	08003469 	.word	0x08003469
 800342c:	08003471 	.word	0x08003471
 8003430:	08003479 	.word	0x08003479
 8003434:	08003481 	.word	0x08003481
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
      break;
 800343e:	e027      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
      break;
 8003446:	e023      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
      break;
 800344e:	e01f      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2203      	movs	r2, #3
 8003454:	701a      	strb	r2, [r3, #0]
      break;
 8003456:	e01b      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
      break;
 800345e:	e017      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2205      	movs	r2, #5
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e013      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2206      	movs	r2, #6
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e00f      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2207      	movs	r2, #7
 8003474:	701a      	strb	r2, [r3, #0]
      break;
 8003476:	e00b      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
      break;
 800347e:	e007      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2209      	movs	r2, #9
 8003484:	701a      	strb	r2, [r3, #0]
      break;
 8003486:	e003      	b.n	8003490 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	bf00      	nop
  }

  return ret;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop

0800349c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	2301      	movs	r3, #1
 80034ae:	2123      	movs	r1, #35	; 0x23
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff0d 	bl	80032d0 <lsm303agr_read_reg>
 80034b6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	7a3b      	ldrb	r3, [r7, #8]
 80034c8:	f362 1305 	bfi	r3, r2, #4, #2
 80034cc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80034ce:	f107 0208 	add.w	r2, r7, #8
 80034d2:	2301      	movs	r3, #1
 80034d4:	2123      	movs	r1, #35	; 0x23
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff12 	bl	8003300 <lsm303agr_write_reg>
 80034dc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80034f2:	f107 0208 	add.w	r2, r7, #8
 80034f6:	2301      	movs	r3, #1
 80034f8:	2123      	movs	r1, #35	; 0x23
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fee8 	bl	80032d0 <lsm303agr_read_reg>
 8003500:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8003502:	7a3b      	ldrb	r3, [r7, #8]
 8003504:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b03      	cmp	r3, #3
 800350c:	d81a      	bhi.n	8003544 <lsm303agr_xl_full_scale_get+0x5c>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <lsm303agr_xl_full_scale_get+0x2c>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003525 	.word	0x08003525
 8003518:	0800352d 	.word	0x0800352d
 800351c:	08003535 	.word	0x08003535
 8003520:	0800353d 	.word	0x0800353d
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e00f      	b.n	800354c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
      break;
 8003532:	e00b      	b.n	800354c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	e007      	b.n	800354c <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2203      	movs	r2, #3
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e003      	b.n	800354c <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
      break;
 800354a:	bf00      	nop
  }
  return ret;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003564:	f107 0208 	add.w	r2, r7, #8
 8003568:	2301      	movs	r3, #1
 800356a:	2123      	movs	r1, #35	; 0x23
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff feaf 	bl	80032d0 <lsm303agr_read_reg>
 8003572:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	7a3b      	ldrb	r3, [r7, #8]
 8003584:	f362 13c7 	bfi	r3, r2, #7, #1
 8003588:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800358a:	f107 0208 	add.w	r2, r7, #8
 800358e:	2301      	movs	r3, #1
 8003590:	2123      	movs	r1, #35	; 0x23
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff feb4 	bl	8003300 <lsm303agr_write_reg>
 8003598:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80035ae:	2306      	movs	r3, #6
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	2128      	movs	r1, #40	; 0x28
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fe8b 	bl	80032d0 <lsm303agr_read_reg>
 80035ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80035d2:	f107 0208 	add.w	r2, r7, #8
 80035d6:	2301      	movs	r3, #1
 80035d8:	2160      	movs	r1, #96	; 0x60
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fe78 	bl	80032d0 <lsm303agr_read_reg>
 80035e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	7a3b      	ldrb	r3, [r7, #8]
 80035f2:	f362 0301 	bfi	r3, r2, #0, #2
 80035f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80035f8:	f107 0208 	add.w	r2, r7, #8
 80035fc:	2301      	movs	r3, #1
 80035fe:	2160      	movs	r1, #96	; 0x60
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fe7d 	bl	8003300 <lsm303agr_write_reg>
 8003606:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	2301      	movs	r3, #1
 8003624:	2160      	movs	r1, #96	; 0x60
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fe52 	bl	80032d0 <lsm303agr_read_reg>
 800362c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10f      	bne.n	8003654 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	b2da      	uxtb	r2, r3
 800363c:	7a3b      	ldrb	r3, [r7, #8]
 800363e:	f362 0383 	bfi	r3, r2, #2, #2
 8003642:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003644:	f107 0208 	add.w	r2, r7, #8
 8003648:	2301      	movs	r3, #1
 800364a:	2160      	movs	r1, #96	; 0x60
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fe57 	bl	8003300 <lsm303agr_write_reg>
 8003652:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800366a:	f107 0208 	add.w	r2, r7, #8
 800366e:	2301      	movs	r3, #1
 8003670:	2160      	movs	r1, #96	; 0x60
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe2c 	bl	80032d0 <lsm303agr_read_reg>
 8003678:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 800367a:	7a3b      	ldrb	r3, [r7, #8]
 800367c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d81a      	bhi.n	80036bc <lsm303agr_mag_data_rate_get+0x5c>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <lsm303agr_mag_data_rate_get+0x2c>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a5 	.word	0x080036a5
 8003694:	080036ad 	.word	0x080036ad
 8003698:	080036b5 	.word	0x080036b5
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e00f      	b.n	80036c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
      break;
 80036aa:	e00b      	b.n	80036c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e007      	b.n	80036c4 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2203      	movs	r2, #3
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e003      	b.n	80036c4 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	bf00      	nop
  }
  return ret;
 80036c4:	68fb      	ldr	r3, [r7, #12]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop

080036d0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80036dc:	f107 0208 	add.w	r2, r7, #8
 80036e0:	2301      	movs	r3, #1
 80036e2:	2162      	movs	r1, #98	; 0x62
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fdf3 	bl	80032d0 <lsm303agr_read_reg>
 80036ea:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	7a3b      	ldrb	r3, [r7, #8]
 80036fc:	f362 1304 	bfi	r3, r2, #4, #1
 8003700:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003702:	f107 0208 	add.w	r2, r7, #8
 8003706:	2301      	movs	r3, #1
 8003708:	2162      	movs	r1, #98	; 0x62
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fdf8 	bl	8003300 <lsm303agr_write_reg>
 8003710:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003726:	2306      	movs	r3, #6
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	2168      	movs	r1, #104	; 0x68
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fdcf 	bl	80032d0 <lsm303agr_read_reg>
 8003732:	60f8      	str	r0, [r7, #12]
  return ret;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003748:	2301      	movs	r3, #1
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	210f      	movs	r1, #15
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdbe 	bl	80032d0 <lsm303agr_read_reg>
 8003754:	60f8      	str	r0, [r7, #12]
  return ret;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800376a:	2301      	movs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	214f      	movs	r1, #79	; 0x4f
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fdad 	bl	80032d0 <lsm303agr_read_reg>
 8003776:	60f8      	str	r0, [r7, #12]
  return ret;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2162      	movs	r1, #98	; 0x62
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fd9a 	bl	80032d0 <lsm303agr_read_reg>
 800379c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	7a3b      	ldrb	r3, [r7, #8]
 80037ae:	f362 0341 	bfi	r3, r2, #1, #1
 80037b2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80037b4:	f107 0208 	add.w	r2, r7, #8
 80037b8:	2301      	movs	r3, #1
 80037ba:	2162      	movs	r1, #98	; 0x62
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fd9f 	bl	8003300 <lsm303agr_write_reg>
 80037c2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80037da:	f107 0208 	add.w	r2, r7, #8
 80037de:	2301      	movs	r3, #1
 80037e0:	212e      	movs	r1, #46	; 0x2e
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fd74 	bl	80032d0 <lsm303agr_read_reg>
 80037e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	7a3b      	ldrb	r3, [r7, #8]
 80037fa:	f362 1387 	bfi	r3, r2, #6, #2
 80037fe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	2301      	movs	r3, #1
 8003806:	212e      	movs	r1, #46	; 0x2e
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fd79 	bl	8003300 <lsm303agr_write_reg>
 800380e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003810:	68fb      	ldr	r3, [r7, #12]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003826:	f107 0208 	add.w	r2, r7, #8
 800382a:	2301      	movs	r3, #1
 800382c:	2162      	movs	r1, #98	; 0x62
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fd4e 	bl	80032d0 <lsm303agr_read_reg>
 8003834:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	7a3b      	ldrb	r3, [r7, #8]
 8003846:	f362 1345 	bfi	r3, r2, #5, #1
 800384a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800384c:	f107 0208 	add.w	r2, r7, #8
 8003850:	2301      	movs	r3, #1
 8003852:	2162      	movs	r1, #98	; 0x62
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fd53 	bl	8003300 <lsm303agr_write_reg>
 800385a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e04d      	b.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	7b1a      	ldrb	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <LSM6DSL_RegisterBusIO+0xc4>)
 80038c0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <LSM6DSL_RegisterBusIO+0xc8>)
 80038c6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e020      	b.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4798      	blx	r3
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e016      	b.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d112      	bne.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10d      	bne.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003904:	230c      	movs	r3, #12
 8003906:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	461a      	mov	r2, r3
 800390c:	2112      	movs	r1, #18
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fd2d 	bl	800436e <LSM6DSL_Write_Reg>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003920:	68fb      	ldr	r3, [r7, #12]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	080047dd 	.word	0x080047dd
 8003930:	08004813 	.word	0x08004813

08003934 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	331c      	adds	r3, #28
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f9e5 	bl	8004d12 <lsm6dsl_auto_increment_set>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e054      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	331c      	adds	r3, #28
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f001 f980 	bl	8004c60 <lsm6dsl_block_data_update_set>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e048      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	331c      	adds	r3, #28
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f9f3 	bl	8004d5e <lsm6dsl_fifo_mode_set>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e03c      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	331c      	adds	r3, #28
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ffe6 	bl	8004964 <lsm6dsl_xl_data_rate_set>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	e02c      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	331c      	adds	r3, #28
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 ff7c 	bl	80048a8 <lsm6dsl_xl_full_scale_set>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ba:	e020      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	331c      	adds	r3, #28
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f8c0 	bl	8004b50 <lsm6dsl_gy_data_rate_set>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	e010      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	331c      	adds	r3, #28
 80039e0:	2106      	movs	r1, #6
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f84c 	bl	8004a80 <lsm6dsl_gy_full_scale_set>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	e004      	b.n	80039fe <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f888 	bl	8003b24 <LSM6DSL_ACC_Disable>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e015      	b.n	8003a4c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa9a 	bl	8003f5a <LSM6DSL_GYRO_Disable>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	e00c      	b.n	8003a4c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	331c      	adds	r3, #28
 8003a62:	6839      	ldr	r1, [r7, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f943 	bl	8004cf0 <lsm6dsl_device_id_get>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	e000      	b.n	8003a78 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003aa8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <LSM6DSL_GetCapabilities+0x58>)
 8003aba:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <LSM6DSL_GetCapabilities+0x58>)
 8003ac0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	45d02000 	.word	0x45d02000

08003adc <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e014      	b.n	8003b1c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f103 021c 	add.w	r2, r3, #28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 ff2f 	bl	8004964 <lsm6dsl_xl_data_rate_set>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	e004      	b.n	8003b1c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e01f      	b.n	8003b7a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f103 021c 	add.w	r2, r3, #28
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	332b      	adds	r3, #43	; 0x2b
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 ff32 	bl	80049b0 <lsm6dsl_xl_data_rate_get>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	e010      	b.n	8003b7a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 ff00 	bl	8004964 <lsm6dsl_xl_data_rate_set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e004      	b.n	8003b7a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	331c      	adds	r3, #28
 8003b96:	f107 020b 	add.w	r2, r7, #11
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fea9 	bl	80048f4 <lsm6dsl_xl_full_scale_get>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e023      	b.n	8003bf6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d81b      	bhi.n	8003bec <LSM6DSL_ACC_GetSensitivity+0x68>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003bdd 	.word	0x08003bdd
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003bd0:	601a      	str	r2, [r3, #0]
      break;
 8003bd2:	e00f      	b.n	8003bf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003bd8:	601a      	str	r2, [r3, #0]
      break;
 8003bda:	e00b      	b.n	8003bf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003be0:	601a      	str	r2, [r3, #0]
      break;
 8003be2:	e007      	b.n	8003bf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003be8:	601a      	str	r2, [r3, #0]
      break;
 8003bea:	e003      	b.n	8003bf4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	60fb      	str	r3, [r7, #12]
      break;
 8003bf2:	bf00      	nop
  }

  return ret;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	3d79db23 	.word	0x3d79db23
 8003c04:	3df9db23 	.word	0x3df9db23
 8003c08:	3e79db23 	.word	0x3e79db23
 8003c0c:	3ef9db23 	.word	0x3ef9db23

08003c10 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	331c      	adds	r3, #28
 8003c22:	f107 020b 	add.w	r2, r7, #11
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fec1 	bl	80049b0 <lsm6dsl_xl_data_rate_get>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	e054      	b.n	8003ce4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	2b0b      	cmp	r3, #11
 8003c3e:	d84c      	bhi.n	8003cda <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c93 	.word	0x08003c93
 8003c54:	08003c9b 	.word	0x08003c9b
 8003c58:	08003ca3 	.word	0x08003ca3
 8003c5c:	08003cab 	.word	0x08003cab
 8003c60:	08003cb3 	.word	0x08003cb3
 8003c64:	08003cbb 	.word	0x08003cbb
 8003c68:	08003cc3 	.word	0x08003cc3
 8003c6c:	08003ccb 	.word	0x08003ccb
 8003c70:	08003cd3 	.word	0x08003cd3
 8003c74:	08003c83 	.word	0x08003c83
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
      break;
 8003c80:	e02f      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003c86:	601a      	str	r2, [r3, #0]
      break;
 8003c88:	e02b      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003c8e:	601a      	str	r2, [r3, #0]
      break;
 8003c90:	e027      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003c96:	601a      	str	r2, [r3, #0]
      break;
 8003c98:	e023      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003c9e:	601a      	str	r2, [r3, #0]
      break;
 8003ca0:	e01f      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003ca6:	601a      	str	r2, [r3, #0]
      break;
 8003ca8:	e01b      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003cae:	601a      	str	r2, [r3, #0]
      break;
 8003cb0:	e017      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003cb6:	601a      	str	r2, [r3, #0]
      break;
 8003cb8:	e013      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003cbe:	601a      	str	r2, [r3, #0]
      break;
 8003cc0:	e00f      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003cc6:	601a      	str	r2, [r3, #0]
      break;
 8003cc8:	e00b      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003cce:	601a      	str	r2, [r3, #0]
      break;
 8003cd0:	e007      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003cd6:	601a      	str	r2, [r3, #0]
      break;
 8003cd8:	e003      	b.n	8003ce2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	60fb      	str	r3, [r7, #12]
      break;
 8003ce0:	bf00      	nop
  }

  return ret;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	3fcccccd 	.word	0x3fcccccd
 8003cf0:	41480000 	.word	0x41480000
 8003cf4:	41d00000 	.word	0x41d00000
 8003cf8:	42500000 	.word	0x42500000
 8003cfc:	42d00000 	.word	0x42d00000
 8003d00:	43500000 	.word	0x43500000
 8003d04:	43d00000 	.word	0x43d00000
 8003d08:	44504000 	.word	0x44504000
 8003d0c:	44cf8000 	.word	0x44cf8000
 8003d10:	45502000 	.word	0x45502000
 8003d14:	45d02000 	.word	0x45d02000

08003d18 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d106      	bne.n	8003d3c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003d2e:	ed97 0a00 	vldr	s0, [r7]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fb36 	bl	80043a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	e005      	b.n	8003d48 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003d3c:	ed97 0a00 	vldr	s0, [r7]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fbbb 	bl	80044bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003d46:	4603      	mov	r3, r0
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	331c      	adds	r3, #28
 8003d62:	f107 020b 	add.w	r2, r7, #11
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fdc3 	bl	80048f4 <lsm6dsl_xl_full_scale_get>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	e023      	b.n	8003dc2 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d81b      	bhi.n	8003db8 <LSM6DSL_ACC_GetFullScale+0x68>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <LSM6DSL_ACC_GetFullScale+0x38>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da9 	.word	0x08003da9
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	601a      	str	r2, [r3, #0]
      break;
 8003d9e:	e00f      	b.n	8003dc0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2204      	movs	r2, #4
 8003da4:	601a      	str	r2, [r3, #0]
      break;
 8003da6:	e00b      	b.n	8003dc0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	601a      	str	r2, [r3, #0]
      break;
 8003dae:	e007      	b.n	8003dc0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2210      	movs	r2, #16
 8003db4:	601a      	str	r2, [r3, #0]
      break;
 8003db6:	e003      	b.n	8003dc0 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	60fb      	str	r3, [r7, #12]
      break;
 8003dbe:	bf00      	nop
  }

  return ret;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	dd0b      	ble.n	8003df4 <LSM6DSL_ACC_SetFullScale+0x28>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	dd06      	ble.n	8003df0 <LSM6DSL_ACC_SetFullScale+0x24>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	dc01      	bgt.n	8003dec <LSM6DSL_ACC_SetFullScale+0x20>
 8003de8:	2303      	movs	r3, #3
 8003dea:	e004      	b.n	8003df6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e002      	b.n	8003df6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e000      	b.n	8003df6 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003df4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003df6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	331c      	adds	r3, #28
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fd51 	bl	80048a8 <lsm6dsl_xl_full_scale_set>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e000      	b.n	8003e14 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	331c      	adds	r3, #28
 8003e2a:	f107 0208 	add.w	r2, r7, #8
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 ff4c 	bl	8004cce <lsm6dsl_acceleration_raw_get>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e00c      	b.n	8003e5c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003e42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003e4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003e52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	331c      	adds	r3, #28
 8003e78:	f107 0210 	add.w	r2, r7, #16
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 ff25 	bl	8004cce <lsm6dsl_acceleration_raw_get>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e03c      	b.n	8003f0a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fe74 	bl	8003b84 <LSM6DSL_ACC_GetSensitivity>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e030      	b.n	8003f0a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003ea8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec0:	ee17 2a90 	vmov	r2, s15
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ec8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee0:	ee17 2a90 	vmov	r2, s15
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003ee8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f00:	ee17 2a90 	vmov	r2, s15
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e014      	b.n	8003f52 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 021c 	add.w	r2, r3, #28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 fe0a 	bl	8004b50 <lsm6dsl_gy_data_rate_set>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003f42:	f04f 33ff 	mov.w	r3, #4294967295
 8003f46:	e004      	b.n	8003f52 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e01f      	b.n	8003fb0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f103 021c 	add.w	r2, r3, #28
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	332c      	adds	r3, #44	; 0x2c
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f000 fe0d 	bl	8004b9c <lsm6dsl_gy_data_rate_get>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	e010      	b.n	8003fb0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	331c      	adds	r3, #28
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fddb 	bl	8004b50 <lsm6dsl_gy_data_rate_set>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e004      	b.n	8003fb0 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	331c      	adds	r3, #28
 8003fca:	f107 020b 	add.w	r2, r7, #11
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd7b 	bl	8004acc <lsm6dsl_gy_full_scale_get>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e02d      	b.n	800403e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d825      	bhi.n	8004034 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800400d 	.word	0x0800400d
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004025 	.word	0x08004025
 8004004:	08004035 	.word	0x08004035
 8004008:	0800402d 	.word	0x0800402d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004010:	601a      	str	r2, [r3, #0]
      break;
 8004012:	e013      	b.n	800403c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004018:	601a      	str	r2, [r3, #0]
      break;
 800401a:	e00f      	b.n	800403c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004020:	601a      	str	r2, [r3, #0]
      break;
 8004022:	e00b      	b.n	800403c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004028:	601a      	str	r2, [r3, #0]
      break;
 800402a:	e007      	b.n	800403c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004030:	601a      	str	r2, [r3, #0]
      break;
 8004032:	e003      	b.n	800403c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
 8004038:	60fb      	str	r3, [r7, #12]
      break;
 800403a:	bf00      	nop
  }

  return ret;
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	408c0000 	.word	0x408c0000
 800404c:	410c0000 	.word	0x410c0000
 8004050:	418c0000 	.word	0x418c0000
 8004054:	420c0000 	.word	0x420c0000
 8004058:	428c0000 	.word	0x428c0000

0800405c <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	331c      	adds	r3, #28
 800406e:	f107 020b 	add.w	r2, r7, #11
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fd91 	bl	8004b9c <lsm6dsl_gy_data_rate_get>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	e04e      	b.n	8004124 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004086:	7afb      	ldrb	r3, [r7, #11]
 8004088:	2b0a      	cmp	r3, #10
 800408a:	d846      	bhi.n	800411a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040c1 	.word	0x080040c1
 8004098:	080040cb 	.word	0x080040cb
 800409c:	080040d3 	.word	0x080040d3
 80040a0:	080040db 	.word	0x080040db
 80040a4:	080040e3 	.word	0x080040e3
 80040a8:	080040eb 	.word	0x080040eb
 80040ac:	080040f3 	.word	0x080040f3
 80040b0:	080040fb 	.word	0x080040fb
 80040b4:	08004103 	.word	0x08004103
 80040b8:	0800410b 	.word	0x0800410b
 80040bc:	08004113 	.word	0x08004113
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
      break;
 80040c8:	e02b      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80040ce:	601a      	str	r2, [r3, #0]
      break;
 80040d0:	e027      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	4a16      	ldr	r2, [pc, #88]	; (8004130 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80040d6:	601a      	str	r2, [r3, #0]
      break;
 80040d8:	e023      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80040de:	601a      	str	r2, [r3, #0]
      break;
 80040e0:	e01f      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80040e6:	601a      	str	r2, [r3, #0]
      break;
 80040e8:	e01b      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80040ee:	601a      	str	r2, [r3, #0]
      break;
 80040f0:	e017      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80040f6:	601a      	str	r2, [r3, #0]
      break;
 80040f8:	e013      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80040fe:	601a      	str	r2, [r3, #0]
      break;
 8004100:	e00f      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4a10      	ldr	r2, [pc, #64]	; (8004148 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004106:	601a      	str	r2, [r3, #0]
      break;
 8004108:	e00b      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800410e:	601a      	str	r2, [r3, #0]
      break;
 8004110:	e007      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004116:	601a      	str	r2, [r3, #0]
      break;
 8004118:	e003      	b.n	8004122 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	60fb      	str	r3, [r7, #12]
      break;
 8004120:	bf00      	nop
  }

  return ret;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	41480000 	.word	0x41480000
 8004130:	41d00000 	.word	0x41d00000
 8004134:	42500000 	.word	0x42500000
 8004138:	42d00000 	.word	0x42d00000
 800413c:	43500000 	.word	0x43500000
 8004140:	43d00000 	.word	0x43d00000
 8004144:	44504000 	.word	0x44504000
 8004148:	44cf8000 	.word	0x44cf8000
 800414c:	45502000 	.word	0x45502000
 8004150:	45d02000 	.word	0x45d02000

08004154 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004166:	2b01      	cmp	r3, #1
 8004168:	d106      	bne.n	8004178 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800416a:	ed97 0a00 	vldr	s0, [r7]
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa26 	bl	80045c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004174:	4603      	mov	r3, r0
 8004176:	e005      	b.n	8004184 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004178:	ed97 0a00 	vldr	s0, [r7]
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 faab 	bl	80046d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004182:	4603      	mov	r3, r0
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	331c      	adds	r3, #28
 800419e:	f107 020b 	add.w	r2, r7, #11
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fc91 	bl	8004acc <lsm6dsl_gy_full_scale_get>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	e030      	b.n	8004218 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d828      	bhi.n	800420e <LSM6DSL_GYRO_GetFullScale+0x82>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041fb 	.word	0x080041fb
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	08004205 	.word	0x08004205
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	227d      	movs	r2, #125	; 0x7d
 80041e4:	601a      	str	r2, [r3, #0]
      break;
 80041e6:	e016      	b.n	8004216 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	22fa      	movs	r2, #250	; 0xfa
 80041ec:	601a      	str	r2, [r3, #0]
      break;
 80041ee:	e012      	b.n	8004216 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041f6:	601a      	str	r2, [r3, #0]
      break;
 80041f8:	e00d      	b.n	8004216 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004200:	601a      	str	r2, [r3, #0]
      break;
 8004202:	e008      	b.n	8004216 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800420a:	601a      	str	r2, [r3, #0]
      break;
 800420c:	e003      	b.n	8004216 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	60fb      	str	r3, [r7, #12]
      break;
 8004214:	bf00      	nop
  }

  return ret;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b7d      	cmp	r3, #125	; 0x7d
 800422e:	dd12      	ble.n	8004256 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2bfa      	cmp	r3, #250	; 0xfa
 8004234:	dd0d      	ble.n	8004252 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800423c:	dd07      	ble.n	800424e <LSM6DSL_GYRO_SetFullScale+0x2e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004244:	dc01      	bgt.n	800424a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004246:	2304      	movs	r3, #4
 8004248:	e006      	b.n	8004258 <LSM6DSL_GYRO_SetFullScale+0x38>
 800424a:	2306      	movs	r3, #6
 800424c:	e004      	b.n	8004258 <LSM6DSL_GYRO_SetFullScale+0x38>
 800424e:	2302      	movs	r3, #2
 8004250:	e002      	b.n	8004258 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004256:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004258:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	331c      	adds	r3, #28
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fc0c 	bl	8004a80 <lsm6dsl_gy_full_scale_set>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	e000      	b.n	8004276 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	331c      	adds	r3, #28
 800428c:	f107 0208 	add.w	r2, r7, #8
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd0a 	bl	8004cac <lsm6dsl_angular_rate_raw_get>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	e00c      	b.n	80042be <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80042a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80042ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80042b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	331c      	adds	r3, #28
 80042d4:	f107 0210 	add.w	r2, r7, #16
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fce6 	bl	8004cac <lsm6dsl_angular_rate_raw_get>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e03c      	b.n	8004366 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe60 	bl	8003fb8 <LSM6DSL_GYRO_GetSensitivity>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e030      	b.n	8004366 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004304:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004310:	edd7 7a03 	vldr	s15, [r7, #12]
 8004314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800431c:	ee17 2a90 	vmov	r2, s15
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004328:	ee07 3a90 	vmov	s15, r3
 800432c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004330:	edd7 7a03 	vldr	s15, [r7, #12]
 8004334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800433c:	ee17 2a90 	vmov	r2, s15
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004350:	edd7 7a03 	vldr	s15, [r7, #12]
 8004354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800435c:	ee17 2a90 	vmov	r2, s15
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
 800437a:	4613      	mov	r3, r2
 800437c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f103 001c 	add.w	r0, r3, #28
 8004384:	1cba      	adds	r2, r7, #2
 8004386:	78f9      	ldrb	r1, [r7, #3]
 8004388:	2301      	movs	r3, #1
 800438a:	f000 fa75 	bl	8004878 <lsm6dsl_write_reg>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295
 8004398:	e000      	b.n	800439c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80043b0:	edd7 7a00 	vldr	s15, [r7]
 80043b4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80043b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d801      	bhi.n	80043c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e058      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043c6:	edd7 7a00 	vldr	s15, [r7]
 80043ca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80043ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d801      	bhi.n	80043dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80043d8:	2302      	movs	r3, #2
 80043da:	e04d      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043dc:	edd7 7a00 	vldr	s15, [r7]
 80043e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80044a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80043e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d801      	bhi.n	80043f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80043ee:	2303      	movs	r3, #3
 80043f0:	e042      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043f2:	edd7 7a00 	vldr	s15, [r7]
 80043f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80044a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80043fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	d801      	bhi.n	8004408 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004404:	2304      	movs	r3, #4
 8004406:	e037      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004408:	edd7 7a00 	vldr	s15, [r7]
 800440c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80044a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	d801      	bhi.n	800441e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800441a:	2305      	movs	r3, #5
 800441c:	e02c      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800441e:	edd7 7a00 	vldr	s15, [r7]
 8004422:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80044ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442e:	d801      	bhi.n	8004434 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004430:	2306      	movs	r3, #6
 8004432:	e021      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004434:	edd7 7a00 	vldr	s15, [r7]
 8004438:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80044b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800443c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004444:	d801      	bhi.n	800444a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004446:	2307      	movs	r3, #7
 8004448:	e016      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800444a:	edd7 7a00 	vldr	s15, [r7]
 800444e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80044b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445a:	d801      	bhi.n	8004460 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800445c:	2308      	movs	r3, #8
 800445e:	e00b      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004460:	edd7 7a00 	vldr	s15, [r7]
 8004464:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80044b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004470:	d801      	bhi.n	8004476 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004472:	2309      	movs	r3, #9
 8004474:	e000      	b.n	8004478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004476:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004478:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	331c      	adds	r3, #28
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa6e 	bl	8004964 <lsm6dsl_xl_data_rate_set>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	e000      	b.n	8004496 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	42500000 	.word	0x42500000
 80044a4:	42d00000 	.word	0x42d00000
 80044a8:	43500000 	.word	0x43500000
 80044ac:	43d00000 	.word	0x43d00000
 80044b0:	44504000 	.word	0x44504000
 80044b4:	44cf8000 	.word	0x44cf8000
 80044b8:	45502000 	.word	0x45502000

080044bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80044c8:	edd7 7a00 	vldr	s15, [r7]
 80044cc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d801      	bhi.n	80044de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80044da:	2301      	movs	r3, #1
 80044dc:	e058      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044de:	edd7 7a00 	vldr	s15, [r7]
 80044e2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	d801      	bhi.n	80044f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e04d      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044f4:	edd7 7a00 	vldr	s15, [r7]
 80044f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80045a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80044fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	d801      	bhi.n	800450a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004506:	2303      	movs	r3, #3
 8004508:	e042      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800450a:	edd7 7a00 	vldr	s15, [r7]
 800450e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80045a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d801      	bhi.n	8004520 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800451c:	2304      	movs	r3, #4
 800451e:	e037      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004520:	edd7 7a00 	vldr	s15, [r7]
 8004524:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80045ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004530:	d801      	bhi.n	8004536 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004532:	2305      	movs	r3, #5
 8004534:	e02c      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004536:	edd7 7a00 	vldr	s15, [r7]
 800453a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80045b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800453e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004546:	d801      	bhi.n	800454c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004548:	2306      	movs	r3, #6
 800454a:	e021      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800454c:	edd7 7a00 	vldr	s15, [r7]
 8004550:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80045b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d801      	bhi.n	8004562 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800455e:	2307      	movs	r3, #7
 8004560:	e016      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004562:	edd7 7a00 	vldr	s15, [r7]
 8004566:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800456a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d801      	bhi.n	8004578 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004574:	2308      	movs	r3, #8
 8004576:	e00b      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004578:	edd7 7a00 	vldr	s15, [r7]
 800457c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80045bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	d801      	bhi.n	800458e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800458a:	2309      	movs	r3, #9
 800458c:	e000      	b.n	8004590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800458e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	42500000 	.word	0x42500000
 80045a8:	42d00000 	.word	0x42d00000
 80045ac:	43500000 	.word	0x43500000
 80045b0:	43d00000 	.word	0x43d00000
 80045b4:	44504000 	.word	0x44504000
 80045b8:	44cf8000 	.word	0x44cf8000
 80045bc:	45502000 	.word	0x45502000

080045c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80045cc:	edd7 7a00 	vldr	s15, [r7]
 80045d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	d801      	bhi.n	80045e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80045de:	2301      	movs	r3, #1
 80045e0:	e058      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045e2:	edd7 7a00 	vldr	s15, [r7]
 80045e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	d801      	bhi.n	80045f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e04d      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045f8:	edd7 7a00 	vldr	s15, [r7]
 80045fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80046bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	d801      	bhi.n	800460e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800460a:	2303      	movs	r3, #3
 800460c:	e042      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800460e:	edd7 7a00 	vldr	s15, [r7]
 8004612:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80046c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	d801      	bhi.n	8004624 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004620:	2304      	movs	r3, #4
 8004622:	e037      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004624:	edd7 7a00 	vldr	s15, [r7]
 8004628:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800462c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	d801      	bhi.n	800463a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004636:	2305      	movs	r3, #5
 8004638:	e02c      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800463a:	edd7 7a00 	vldr	s15, [r7]
 800463e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80046c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d801      	bhi.n	8004650 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800464c:	2306      	movs	r3, #6
 800464e:	e021      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004650:	edd7 7a00 	vldr	s15, [r7]
 8004654:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d801      	bhi.n	8004666 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004662:	2307      	movs	r3, #7
 8004664:	e016      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004666:	edd7 7a00 	vldr	s15, [r7]
 800466a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80046d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800466e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d801      	bhi.n	800467c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004678:	2308      	movs	r3, #8
 800467a:	e00b      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800467c:	edd7 7a00 	vldr	s15, [r7]
 8004680:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468c:	d801      	bhi.n	8004692 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800468e:	2309      	movs	r3, #9
 8004690:	e000      	b.n	8004694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004692:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004694:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	331c      	adds	r3, #28
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa56 	bl	8004b50 <lsm6dsl_gy_data_rate_set>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e000      	b.n	80046b2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	42500000 	.word	0x42500000
 80046c0:	42d00000 	.word	0x42d00000
 80046c4:	43500000 	.word	0x43500000
 80046c8:	43d00000 	.word	0x43d00000
 80046cc:	44504000 	.word	0x44504000
 80046d0:	44cf8000 	.word	0x44cf8000
 80046d4:	45502000 	.word	0x45502000

080046d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d801      	bhi.n	80046fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e058      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046fa:	edd7 7a00 	vldr	s15, [r7]
 80046fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	d801      	bhi.n	8004710 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800470c:	2302      	movs	r3, #2
 800470e:	e04d      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004710:	edd7 7a00 	vldr	s15, [r7]
 8004714:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80047c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	d801      	bhi.n	8004726 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004722:	2303      	movs	r3, #3
 8004724:	e042      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004726:	edd7 7a00 	vldr	s15, [r7]
 800472a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80047c4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800472e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d801      	bhi.n	800473c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004738:	2304      	movs	r3, #4
 800473a:	e037      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800473c:	edd7 7a00 	vldr	s15, [r7]
 8004740:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80047c8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d801      	bhi.n	8004752 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800474e:	2305      	movs	r3, #5
 8004750:	e02c      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004752:	edd7 7a00 	vldr	s15, [r7]
 8004756:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047cc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800475a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	d801      	bhi.n	8004768 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004764:	2306      	movs	r3, #6
 8004766:	e021      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004768:	edd7 7a00 	vldr	s15, [r7]
 800476c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80047d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	d801      	bhi.n	800477e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800477a:	2307      	movs	r3, #7
 800477c:	e016      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800477e:	edd7 7a00 	vldr	s15, [r7]
 8004782:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80047d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	d801      	bhi.n	8004794 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004790:	2308      	movs	r3, #8
 8004792:	e00b      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004794:	edd7 7a00 	vldr	s15, [r7]
 8004798:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80047d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800479c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	d801      	bhi.n	80047aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80047a6:	2309      	movs	r3, #9
 80047a8:	e000      	b.n	80047ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80047aa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	42500000 	.word	0x42500000
 80047c4:	42d00000 	.word	0x42d00000
 80047c8:	43500000 	.word	0x43500000
 80047cc:	43d00000 	.word	0x43d00000
 80047d0:	44504000 	.word	0x44504000
 80047d4:	44cf8000 	.word	0x44cf8000
 80047d8:	45502000 	.word	0x45502000

080047dc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
 80047ec:	4613      	mov	r3, r2
 80047ee:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	695c      	ldr	r4, [r3, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	7b1b      	ldrb	r3, [r3, #12]
 80047fc:	b298      	uxth	r0, r3
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	b299      	uxth	r1, r3
 8004802:	893b      	ldrh	r3, [r7, #8]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	47a0      	blx	r4
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd90      	pop	{r4, r7, pc}

08004812 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004812:	b590      	push	{r4, r7, lr}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	461a      	mov	r2, r3
 800481e:	460b      	mov	r3, r1
 8004820:	72fb      	strb	r3, [r7, #11]
 8004822:	4613      	mov	r3, r2
 8004824:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	691c      	ldr	r4, [r3, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	7b1b      	ldrb	r3, [r3, #12]
 8004832:	b298      	uxth	r0, r3
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	b299      	uxth	r1, r3
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	47a0      	blx	r4
 800483e:	4603      	mov	r3, r0
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}

08004848 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	460b      	mov	r3, r1
 8004856:	72fb      	strb	r3, [r7, #11]
 8004858:	4613      	mov	r3, r2
 800485a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685c      	ldr	r4, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6898      	ldr	r0, [r3, #8]
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	7af9      	ldrb	r1, [r7, #11]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	47a0      	blx	r4
 800486c:	6178      	str	r0, [r7, #20]
  return ret;
 800486e:	697b      	ldr	r3, [r7, #20]
}
 8004870:	4618      	mov	r0, r3
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}

08004878 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	461a      	mov	r2, r3
 8004884:	460b      	mov	r3, r1
 8004886:	72fb      	strb	r3, [r7, #11]
 8004888:	4613      	mov	r3, r2
 800488a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681c      	ldr	r4, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6898      	ldr	r0, [r3, #8]
 8004894:	893b      	ldrh	r3, [r7, #8]
 8004896:	7af9      	ldrb	r1, [r7, #11]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	47a0      	blx	r4
 800489c:	6178      	str	r0, [r7, #20]
  return ret;
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd90      	pop	{r4, r7, pc}

080048a8 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048b4:	f107 0208 	add.w	r2, r7, #8
 80048b8:	2301      	movs	r3, #1
 80048ba:	2110      	movs	r1, #16
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff ffc3 	bl	8004848 <lsm6dsl_read_reg>
 80048c2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	7a3b      	ldrb	r3, [r7, #8]
 80048d4:	f362 0383 	bfi	r3, r2, #2, #2
 80048d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048da:	f107 0208 	add.w	r2, r7, #8
 80048de:	2301      	movs	r3, #1
 80048e0:	2110      	movs	r1, #16
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ffc8 	bl	8004878 <lsm6dsl_write_reg>
 80048e8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80048fe:	f107 0208 	add.w	r2, r7, #8
 8004902:	2301      	movs	r3, #1
 8004904:	2110      	movs	r1, #16
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff9e 	bl	8004848 <lsm6dsl_read_reg>
 800490c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 800490e:	7a3b      	ldrb	r3, [r7, #8]
 8004910:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d81a      	bhi.n	8004950 <lsm6dsl_xl_full_scale_get+0x5c>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <lsm6dsl_xl_full_scale_get+0x2c>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004931 	.word	0x08004931
 8004924:	08004939 	.word	0x08004939
 8004928:	08004941 	.word	0x08004941
 800492c:	08004949 	.word	0x08004949
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
      break;
 8004936:	e00f      	b.n	8004958 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
      break;
 800493e:	e00b      	b.n	8004958 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	701a      	strb	r2, [r3, #0]
      break;
 8004946:	e007      	b.n	8004958 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2203      	movs	r2, #3
 800494c:	701a      	strb	r2, [r3, #0]
      break;
 800494e:	e003      	b.n	8004958 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2204      	movs	r2, #4
 8004954:	701a      	strb	r2, [r3, #0]
      break;
 8004956:	bf00      	nop
  }

  return ret;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004970:	f107 0208 	add.w	r2, r7, #8
 8004974:	2301      	movs	r3, #1
 8004976:	2110      	movs	r1, #16
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff65 	bl	8004848 <lsm6dsl_read_reg>
 800497e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	b2da      	uxtb	r2, r3
 800498e:	7a3b      	ldrb	r3, [r7, #8]
 8004990:	f362 1307 	bfi	r3, r2, #4, #4
 8004994:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004996:	f107 0208 	add.w	r2, r7, #8
 800499a:	2301      	movs	r3, #1
 800499c:	2110      	movs	r1, #16
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ff6a 	bl	8004878 <lsm6dsl_write_reg>
 80049a4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049ba:	f107 0208 	add.w	r2, r7, #8
 80049be:	2301      	movs	r3, #1
 80049c0:	2110      	movs	r1, #16
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ff40 	bl	8004848 <lsm6dsl_read_reg>
 80049c8:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 80049ca:	7a3b      	ldrb	r3, [r7, #8]
 80049cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b0b      	cmp	r3, #11
 80049d4:	d84a      	bhi.n	8004a6c <lsm6dsl_xl_data_rate_get+0xbc>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <lsm6dsl_xl_data_rate_get+0x2c>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a0d 	.word	0x08004a0d
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a1d 	.word	0x08004a1d
 80049e8:	08004a25 	.word	0x08004a25
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a35 	.word	0x08004a35
 80049f4:	08004a3d 	.word	0x08004a3d
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a4d 	.word	0x08004a4d
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a65 	.word	0x08004a65
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
      break;
 8004a12:	e02f      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
      break;
 8004a1a:	e02b      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
      break;
 8004a22:	e027      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2203      	movs	r2, #3
 8004a28:	701a      	strb	r2, [r3, #0]
      break;
 8004a2a:	e023      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]
      break;
 8004a32:	e01f      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2205      	movs	r2, #5
 8004a38:	701a      	strb	r2, [r3, #0]
      break;
 8004a3a:	e01b      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2206      	movs	r2, #6
 8004a40:	701a      	strb	r2, [r3, #0]
      break;
 8004a42:	e017      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2207      	movs	r2, #7
 8004a48:	701a      	strb	r2, [r3, #0]
      break;
 8004a4a:	e013      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	701a      	strb	r2, [r3, #0]
      break;
 8004a52:	e00f      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2209      	movs	r2, #9
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e00b      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	220a      	movs	r2, #10
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e007      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	220b      	movs	r2, #11
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e003      	b.n	8004a74 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	220c      	movs	r2, #12
 8004a70:	701a      	strb	r2, [r3, #0]
      break;
 8004a72:	bf00      	nop
  }

  return ret;
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop

08004a80 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004a8c:	f107 0208 	add.w	r2, r7, #8
 8004a90:	2301      	movs	r3, #1
 8004a92:	2111      	movs	r1, #17
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fed7 	bl	8004848 <lsm6dsl_read_reg>
 8004a9a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	7a3b      	ldrb	r3, [r7, #8]
 8004aac:	f362 0343 	bfi	r3, r2, #1, #3
 8004ab0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ab2:	f107 0208 	add.w	r2, r7, #8
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2111      	movs	r1, #17
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fedc 	bl	8004878 <lsm6dsl_write_reg>
 8004ac0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ad6:	f107 0208 	add.w	r2, r7, #8
 8004ada:	2301      	movs	r3, #1
 8004adc:	2111      	movs	r1, #17
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff feb2 	bl	8004848 <lsm6dsl_read_reg>
 8004ae4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8004ae6:	7a3b      	ldrb	r3, [r7, #8]
 8004ae8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d824      	bhi.n	8004b3c <lsm6dsl_gy_full_scale_get+0x70>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	08004b1d 	.word	0x08004b1d
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b3d 	.word	0x08004b3d
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b3d 	.word	0x08004b3d
 8004b10:	08004b35 	.word	0x08004b35
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	e013      	b.n	8004b44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
      break;
 8004b22:	e00f      	b.n	8004b44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
      break;
 8004b2a:	e00b      	b.n	8004b44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	701a      	strb	r2, [r3, #0]
      break;
 8004b32:	e007      	b.n	8004b44 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2206      	movs	r2, #6
 8004b38:	701a      	strb	r2, [r3, #0]
      break;
 8004b3a:	e003      	b.n	8004b44 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2207      	movs	r2, #7
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	bf00      	nop
  }

  return ret;
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004b5c:	f107 0208 	add.w	r2, r7, #8
 8004b60:	2301      	movs	r3, #1
 8004b62:	2111      	movs	r1, #17
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff fe6f 	bl	8004848 <lsm6dsl_read_reg>
 8004b6a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	7a3b      	ldrb	r3, [r7, #8]
 8004b7c:	f362 1307 	bfi	r3, r2, #4, #4
 8004b80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004b82:	f107 0208 	add.w	r2, r7, #8
 8004b86:	2301      	movs	r3, #1
 8004b88:	2111      	movs	r1, #17
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fe74 	bl	8004878 <lsm6dsl_write_reg>
 8004b90:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004b92:	68fb      	ldr	r3, [r7, #12]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ba6:	f107 0208 	add.w	r2, r7, #8
 8004baa:	2301      	movs	r3, #1
 8004bac:	2111      	movs	r1, #17
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fe4a 	bl	8004848 <lsm6dsl_read_reg>
 8004bb4:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8004bb6:	7a3b      	ldrb	r3, [r7, #8]
 8004bb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b0a      	cmp	r3, #10
 8004bc0:	d844      	bhi.n	8004c4c <lsm6dsl_gy_data_rate_get+0xb0>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c1d 	.word	0x08004c1d
 8004be0:	08004c25 	.word	0x08004c25
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c35 	.word	0x08004c35
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c45 	.word	0x08004c45
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
      break;
 8004bfa:	e02b      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
      break;
 8004c02:	e027      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2202      	movs	r2, #2
 8004c08:	701a      	strb	r2, [r3, #0]
      break;
 8004c0a:	e023      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e01f      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2204      	movs	r2, #4
 8004c18:	701a      	strb	r2, [r3, #0]
      break;
 8004c1a:	e01b      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2205      	movs	r2, #5
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	e017      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2206      	movs	r2, #6
 8004c28:	701a      	strb	r2, [r3, #0]
      break;
 8004c2a:	e013      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2207      	movs	r2, #7
 8004c30:	701a      	strb	r2, [r3, #0]
      break;
 8004c32:	e00f      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2208      	movs	r2, #8
 8004c38:	701a      	strb	r2, [r3, #0]
      break;
 8004c3a:	e00b      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2209      	movs	r2, #9
 8004c40:	701a      	strb	r2, [r3, #0]
      break;
 8004c42:	e007      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	220a      	movs	r2, #10
 8004c48:	701a      	strb	r2, [r3, #0]
      break;
 8004c4a:	e003      	b.n	8004c54 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	220b      	movs	r2, #11
 8004c50:	701a      	strb	r2, [r3, #0]
      break;
 8004c52:	bf00      	nop
  }

  return ret;
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c6c:	f107 0208 	add.w	r2, r7, #8
 8004c70:	2301      	movs	r3, #1
 8004c72:	2112      	movs	r1, #18
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fde7 	bl	8004848 <lsm6dsl_read_reg>
 8004c7a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	7a3b      	ldrb	r3, [r7, #8]
 8004c8c:	f362 1386 	bfi	r3, r2, #6, #1
 8004c90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004c92:	f107 0208 	add.w	r2, r7, #8
 8004c96:	2301      	movs	r3, #1
 8004c98:	2112      	movs	r1, #18
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fdec 	bl	8004878 <lsm6dsl_write_reg>
 8004ca0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004cb6:	2306      	movs	r3, #6
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	2122      	movs	r1, #34	; 0x22
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fdc3 	bl	8004848 <lsm6dsl_read_reg>
 8004cc2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004cd8:	2306      	movs	r3, #6
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	2128      	movs	r1, #40	; 0x28
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fdb2 	bl	8004848 <lsm6dsl_read_reg>
 8004ce4:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	210f      	movs	r1, #15
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fda1 	bl	8004848 <lsm6dsl_read_reg>
 8004d06:	60f8      	str	r0, [r7, #12]
  return ret;
 8004d08:	68fb      	ldr	r3, [r7, #12]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d1e:	f107 0208 	add.w	r2, r7, #8
 8004d22:	2301      	movs	r3, #1
 8004d24:	2112      	movs	r1, #18
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fd8e 	bl	8004848 <lsm6dsl_read_reg>
 8004d2c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10f      	bne.n	8004d54 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	7a3b      	ldrb	r3, [r7, #8]
 8004d3e:	f362 0382 	bfi	r3, r2, #2, #1
 8004d42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	2301      	movs	r3, #1
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fd93 	bl	8004878 <lsm6dsl_write_reg>
 8004d52:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004d6a:	f107 0208 	add.w	r2, r7, #8
 8004d6e:	2301      	movs	r3, #1
 8004d70:	210a      	movs	r1, #10
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fd68 	bl	8004848 <lsm6dsl_read_reg>
 8004d78:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10f      	bne.n	8004da0 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	7a3b      	ldrb	r3, [r7, #8]
 8004d8a:	f362 0302 	bfi	r3, r2, #0, #3
 8004d8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004d90:	f107 0208 	add.w	r2, r7, #8
 8004d94:	2301      	movs	r3, #1
 8004d96:	210a      	movs	r1, #10
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fd6d 	bl	8004878 <lsm6dsl_write_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	; 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d036      	beq.n	8004e36 <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d302      	bcc.n	8004dd2 <IKS01A2_MOTION_SENSOR_Init+0x26>
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d064      	beq.n	8004e9a <IKS01A2_MOTION_SENSOR_Init+0xee>
 8004dd0:	e095      	b.n	8004efe <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004dd2:	6838      	ldr	r0, [r7, #0]
 8004dd4:	f000 f966 	bl	80050a4 <LSM6DSL_0_Probe>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	e0cc      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004de4:	4a68      	ldr	r2, [pc, #416]	; (8004f88 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	4967      	ldr	r1, [pc, #412]	; (8004f8c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004df6:	f107 010c 	add.w	r1, r7, #12
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4798      	blx	r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e04:	f06f 0306 	mvn.w	r3, #6
 8004e08:	e0b9      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004e0a:	7b3b      	ldrb	r3, [r7, #12]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d103      	bne.n	8004e18 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f043 0302 	orr.w	r3, r3, #2
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004e18:	7b7b      	ldrb	r3, [r7, #13]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d103      	bne.n	8004e26 <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004e26:	7bbb      	ldrb	r3, [r7, #14]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d16c      	bne.n	8004f06 <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004e34:	e067      	b.n	8004f06 <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	f000 f9f0 	bl	800521c <LSM303AGR_ACC_0_Probe>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8004e42:	f04f 33ff 	mov.w	r3, #4294967295
 8004e46:	e09a      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004e48:	4a4f      	ldr	r2, [pc, #316]	; (8004f88 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	494e      	ldr	r1, [pc, #312]	; (8004f8c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004e5a:	f107 010c 	add.w	r1, r7, #12
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4798      	blx	r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004e68:	f06f 0306 	mvn.w	r3, #6
 8004e6c:	e087      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d103      	bne.n	8004e7c <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004e7c:	7b7b      	ldrb	r3, [r7, #13]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d103      	bne.n	8004e8a <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004e8a:	7bbb      	ldrb	r3, [r7, #14]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d13c      	bne.n	8004f0a <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004e98:	e037      	b.n	8004f0a <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8004e9a:	6838      	ldr	r0, [r7, #0]
 8004e9c:	f000 fa62 	bl	8005364 <LSM303AGR_MAG_0_Probe>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	e068      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004eac:	4a36      	ldr	r2, [pc, #216]	; (8004f88 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4935      	ldr	r1, [pc, #212]	; (8004f8c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004ebe:	f107 010c 	add.w	r1, r7, #12
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4798      	blx	r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004ecc:	f06f 0306 	mvn.w	r3, #6
 8004ed0:	e055      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004ed2:	7b3b      	ldrb	r3, [r7, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d103      	bne.n	8004ee0 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004ee0:	7b7b      	ldrb	r3, [r7, #13]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d103      	bne.n	8004eee <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10c      	bne.n	8004f0e <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	f043 0304 	orr.w	r3, r3, #4
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004efc:	e007      	b.n	8004f0e <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004efe:	f06f 0301 	mvn.w	r3, #1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004f04:	e004      	b.n	8004f10 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8004f0e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	e031      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1e:	e02a      	b.n	8004f76 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	4013      	ands	r3, r2
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d11e      	bne.n	8004f6a <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8004f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	4013      	ands	r3, r2
 8004f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d118      	bne.n	8004f6a <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f40:	4814      	ldr	r0, [pc, #80]	; (8004f94 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	490e      	ldr	r1, [pc, #56]	; (8004f8c <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4798      	blx	r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004f64:	f06f 0304 	mvn.w	r3, #4
 8004f68:	e009      	b.n	8004f7e <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	3301      	adds	r3, #1
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d9d1      	bls.n	8004f20 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3738      	adds	r7, #56	; 0x38
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	2000036c 	.word	0x2000036c
 8004f8c:	200006b0 	.word	0x200006b0
 8004f90:	2000012c 	.word	0x2000012c
 8004f94:	20000348 	.word	0x20000348

08004f98 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d903      	bls.n	8004fb0 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004fa8:	f06f 0301 	mvn.w	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e028      	b.n	8005002 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8004fb0:	4a16      	ldr	r2, [pc, #88]	; (800500c <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11c      	bne.n	8004ffc <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fca:	4812      	ldr	r0, [pc, #72]	; (8005014 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	490e      	ldr	r1, [pc, #56]	; (8005018 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fee:	f06f 0304 	mvn.w	r3, #4
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e005      	b.n	8005002 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e002      	b.n	8005002 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004ffc:	f06f 0301 	mvn.w	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000378 	.word	0x20000378
 8005010:	2000012c 	.word	0x2000012c
 8005014:	20000348 	.word	0x20000348
 8005018:	200006b0 	.word	0x200006b0

0800501c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d903      	bls.n	8005036 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800502e:	f06f 0301 	mvn.w	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	e029      	b.n	800508a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d11d      	bne.n	8005084 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005050:	4812      	ldr	r0, [pc, #72]	; (800509c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	440b      	add	r3, r1
 800505c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	490f      	ldr	r1, [pc, #60]	; (80050a0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005076:	f06f 0304 	mvn.w	r3, #4
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e005      	b.n	800508a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e002      	b.n	800508a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005084:	f06f 0301 	mvn.w	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800508a:	697b      	ldr	r3, [r7, #20]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000378 	.word	0x20000378
 8005098:	2000012c 	.word	0x2000012c
 800509c:	20000348 	.word	0x20000348
 80050a0:	200006b0 	.word	0x200006b0

080050a4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b092      	sub	sp, #72	; 0x48
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80050b0:	2300      	movs	r3, #0
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80050b4:	23d7      	movs	r3, #215	; 0xd7
 80050b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80050ba:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <LSM6DSL_0_Probe+0x140>)
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80050be:	4b4a      	ldr	r3, [pc, #296]	; (80051e8 <LSM6DSL_0_Probe+0x144>)
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80050c2:	4b4a      	ldr	r3, [pc, #296]	; (80051ec <LSM6DSL_0_Probe+0x148>)
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <LSM6DSL_0_Probe+0x14c>)
 80050c8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80050ca:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <LSM6DSL_0_Probe+0x150>)
 80050cc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80050ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d2:	4619      	mov	r1, r3
 80050d4:	4848      	ldr	r0, [pc, #288]	; (80051f8 <LSM6DSL_0_Probe+0x154>)
 80050d6:	f7fe fbc7 	bl	8003868 <LSM6DSL_RegisterBusIO>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80050e0:	f06f 0306 	mvn.w	r3, #6
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
 80050e6:	e077      	b.n	80051d8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 80050e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80050ec:	4619      	mov	r1, r3
 80050ee:	4842      	ldr	r0, [pc, #264]	; (80051f8 <LSM6DSL_0_Probe+0x154>)
 80050f0:	f7fe fcb0 	bl	8003a54 <LSM6DSL_ReadID>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80050fa:	f06f 0306 	mvn.w	r3, #6
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005100:	e06a      	b.n	80051d8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005106:	2b6a      	cmp	r3, #106	; 0x6a
 8005108:	d003      	beq.n	8005112 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800510a:	f06f 0306 	mvn.w	r3, #6
 800510e:	647b      	str	r3, [r7, #68]	; 0x44
 8005110:	e062      	b.n	80051d8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	4837      	ldr	r0, [pc, #220]	; (80051f8 <LSM6DSL_0_Probe+0x154>)
 800511a:	f7fe fcb1 	bl	8003a80 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800511e:	7a7b      	ldrb	r3, [r7, #9]
 8005120:	461a      	mov	r2, r3
 8005122:	7a3b      	ldrb	r3, [r7, #8]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	431a      	orrs	r2, r3
 8005128:	7abb      	ldrb	r3, [r7, #10]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4313      	orrs	r3, r2
 800512e:	4a33      	ldr	r2, [pc, #204]	; (80051fc <LSM6DSL_0_Probe+0x158>)
 8005130:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <LSM6DSL_0_Probe+0x15c>)
 8005134:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <LSM6DSL_0_Probe+0x154>)
 8005136:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <LSM6DSL_0_Probe+0x160>)
 800513a:	4a33      	ldr	r2, [pc, #204]	; (8005208 <LSM6DSL_0_Probe+0x164>)
 800513c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800513e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <LSM6DSL_0_Probe+0xdc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <LSM6DSL_0_Probe+0xdc>
 800514e:	7a7b      	ldrb	r3, [r7, #9]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d115      	bne.n	8005180 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005154:	4b2d      	ldr	r3, [pc, #180]	; (800520c <LSM6DSL_0_Probe+0x168>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <LSM6DSL_0_Probe+0x16c>)
 800515a:	492e      	ldr	r1, [pc, #184]	; (8005214 <LSM6DSL_0_Probe+0x170>)
 800515c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <LSM6DSL_0_Probe+0x160>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a26      	ldr	r2, [pc, #152]	; (8005200 <LSM6DSL_0_Probe+0x15c>)
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	4610      	mov	r0, r2
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005174:	f06f 0304 	mvn.w	r3, #4
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	e001      	b.n	8005180 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800517c:	2300      	movs	r3, #0
 800517e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005182:	2b00      	cmp	r3, #0
 8005184:	d11d      	bne.n	80051c2 <LSM6DSL_0_Probe+0x11e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <LSM6DSL_0_Probe+0x11e>
 8005190:	7a3b      	ldrb	r3, [r7, #8]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d115      	bne.n	80051c2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <LSM6DSL_0_Probe+0x168>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <LSM6DSL_0_Probe+0x16c>)
 800519c:	491e      	ldr	r1, [pc, #120]	; (8005218 <LSM6DSL_0_Probe+0x174>)
 800519e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <LSM6DSL_0_Probe+0x160>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a15      	ldr	r2, [pc, #84]	; (8005200 <LSM6DSL_0_Probe+0x15c>)
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051b6:	f06f 0304 	mvn.w	r3, #4
 80051ba:	647b      	str	r3, [r7, #68]	; 0x44
 80051bc:	e001      	b.n	80051c2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051be:	2300      	movs	r3, #0
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80051c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <LSM6DSL_0_Probe+0x134>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80051d2:	f06f 0304 	mvn.w	r3, #4
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80051d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3748      	adds	r7, #72	; 0x48
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	08001cf1 	.word	0x08001cf1
 80051e8:	08001d6d 	.word	0x08001d6d
 80051ec:	08001e21 	.word	0x08001e21
 80051f0:	08001dbd 	.word	0x08001dbd
 80051f4:	08001e85 	.word	0x08001e85
 80051f8:	20000384 	.word	0x20000384
 80051fc:	20000378 	.word	0x20000378
 8005200:	200006b0 	.word	0x200006b0
 8005204:	2000036c 	.word	0x2000036c
 8005208:	200000d4 	.word	0x200000d4
 800520c:	2000012c 	.word	0x2000012c
 8005210:	20000348 	.word	0x20000348
 8005214:	20000108 	.word	0x20000108
 8005218:	200000e4 	.word	0x200000e4

0800521c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b092      	sub	sp, #72	; 0x48
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005224:	2300      	movs	r3, #0
 8005226:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005228:	2300      	movs	r3, #0
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800522c:	2333      	movs	r3, #51	; 0x33
 800522e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005232:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <LSM303AGR_ACC_0_Probe+0x114>)
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005236:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <LSM303AGR_ACC_0_Probe+0x118>)
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <LSM303AGR_ACC_0_Probe+0x11c>)
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800523e:	4b3f      	ldr	r3, [pc, #252]	; (800533c <LSM303AGR_ACC_0_Probe+0x120>)
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005242:	4b3f      	ldr	r3, [pc, #252]	; (8005340 <LSM303AGR_ACC_0_Probe+0x124>)
 8005244:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524a:	4619      	mov	r1, r3
 800524c:	483d      	ldr	r0, [pc, #244]	; (8005344 <LSM303AGR_ACC_0_Probe+0x128>)
 800524e:	f7fc ffcb 	bl	80021e8 <LSM303AGR_ACC_RegisterBusIO>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005258:	f06f 0306 	mvn.w	r3, #6
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
 800525e:	e062      	b.n	8005326 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005260:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005264:	4619      	mov	r1, r3
 8005266:	4837      	ldr	r0, [pc, #220]	; (8005344 <LSM303AGR_ACC_0_Probe+0x128>)
 8005268:	f7fd f87f 	bl	800236a <LSM303AGR_ACC_ReadID>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005272:	f06f 0306 	mvn.w	r3, #6
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
 8005278:	e055      	b.n	8005326 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800527a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800527e:	2b33      	cmp	r3, #51	; 0x33
 8005280:	d003      	beq.n	800528a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005282:	f06f 0306 	mvn.w	r3, #6
 8005286:	647b      	str	r3, [r7, #68]	; 0x44
 8005288:	e04d      	b.n	8005326 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	4619      	mov	r1, r3
 8005290:	482c      	ldr	r0, [pc, #176]	; (8005344 <LSM303AGR_ACC_0_Probe+0x128>)
 8005292:	f7fd f881 	bl	8002398 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005296:	7a7b      	ldrb	r3, [r7, #9]
 8005298:	461a      	mov	r2, r3
 800529a:	7a3b      	ldrb	r3, [r7, #8]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80052a0:	7abb      	ldrb	r3, [r7, #10]
 80052a2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80052a4:	4313      	orrs	r3, r2
 80052a6:	4a28      	ldr	r2, [pc, #160]	; (8005348 <LSM303AGR_ACC_0_Probe+0x12c>)
 80052a8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80052aa:	4b28      	ldr	r3, [pc, #160]	; (800534c <LSM303AGR_ACC_0_Probe+0x130>)
 80052ac:	4a25      	ldr	r2, [pc, #148]	; (8005344 <LSM303AGR_ACC_0_Probe+0x128>)
 80052ae:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <LSM303AGR_ACC_0_Probe+0x134>)
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <LSM303AGR_ACC_0_Probe+0x138>)
 80052b4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11e      	bne.n	80052fa <LSM303AGR_ACC_0_Probe+0xde>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d019      	beq.n	80052fa <LSM303AGR_ACC_0_Probe+0xde>
 80052c6:	7a3b      	ldrb	r3, [r7, #8]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d116      	bne.n	80052fa <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80052cc:	4b22      	ldr	r3, [pc, #136]	; (8005358 <LSM303AGR_ACC_0_Probe+0x13c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a22      	ldr	r2, [pc, #136]	; (800535c <LSM303AGR_ACC_0_Probe+0x140>)
 80052d2:	3303      	adds	r3, #3
 80052d4:	4922      	ldr	r1, [pc, #136]	; (8005360 <LSM303AGR_ACC_0_Probe+0x144>)
 80052d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <LSM303AGR_ACC_0_Probe+0x134>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <LSM303AGR_ACC_0_Probe+0x130>)
 80052e2:	6852      	ldr	r2, [r2, #4]
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052ee:	f06f 0304 	mvn.w	r3, #4
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
 80052f4:	e001      	b.n	80052fa <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80052fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <LSM303AGR_ACC_0_Probe+0xf4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800530a:	f06f 0304 	mvn.w	r3, #4
 800530e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	2b00      	cmp	r3, #0
 8005314:	d107      	bne.n	8005326 <LSM303AGR_ACC_0_Probe+0x10a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005320:	f06f 0304 	mvn.w	r3, #4
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005328:	4618      	mov	r0, r3
 800532a:	3748      	adds	r7, #72	; 0x48
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	08001cf1 	.word	0x08001cf1
 8005334:	08001d6d 	.word	0x08001d6d
 8005338:	08001e21 	.word	0x08001e21
 800533c:	08001dbd 	.word	0x08001dbd
 8005340:	08001e85 	.word	0x08001e85
 8005344:	200003b4 	.word	0x200003b4
 8005348:	20000378 	.word	0x20000378
 800534c:	200006b0 	.word	0x200006b0
 8005350:	2000036c 	.word	0x2000036c
 8005354:	2000006c 	.word	0x2000006c
 8005358:	2000012c 	.word	0x2000012c
 800535c:	20000348 	.word	0x20000348
 8005360:	2000007c 	.word	0x2000007c

08005364 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b092      	sub	sp, #72	; 0x48
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800536c:	2300      	movs	r3, #0
 800536e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005370:	2300      	movs	r3, #0
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005374:	233d      	movs	r3, #61	; 0x3d
 8005376:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <LSM303AGR_MAG_0_Probe+0x114>)
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800537e:	4b3f      	ldr	r3, [pc, #252]	; (800547c <LSM303AGR_MAG_0_Probe+0x118>)
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <LSM303AGR_MAG_0_Probe+0x120>)
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800538a:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <LSM303AGR_MAG_0_Probe+0x124>)
 800538c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800538e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005392:	4619      	mov	r1, r3
 8005394:	483d      	ldr	r0, [pc, #244]	; (800548c <LSM303AGR_MAG_0_Probe+0x128>)
 8005396:	f7fd faeb 	bl	8002970 <LSM303AGR_MAG_RegisterBusIO>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80053a0:	f06f 0306 	mvn.w	r3, #6
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
 80053a6:	e062      	b.n	800546e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80053a8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80053ac:	4619      	mov	r1, r3
 80053ae:	4837      	ldr	r0, [pc, #220]	; (800548c <LSM303AGR_MAG_0_Probe+0x128>)
 80053b0:	f7fd fb95 	bl	8002ade <LSM303AGR_MAG_ReadID>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80053ba:	f06f 0306 	mvn.w	r3, #6
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	e055      	b.n	800546e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d003      	beq.n	80053d2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80053ca:	f06f 0306 	mvn.w	r3, #6
 80053ce:	647b      	str	r3, [r7, #68]	; 0x44
 80053d0:	e04d      	b.n	800546e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4619      	mov	r1, r3
 80053d8:	482c      	ldr	r0, [pc, #176]	; (800548c <LSM303AGR_MAG_0_Probe+0x128>)
 80053da:	f7fd fb97 	bl	8002b0c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80053de:	7a7b      	ldrb	r3, [r7, #9]
 80053e0:	461a      	mov	r2, r3
 80053e2:	7a3b      	ldrb	r3, [r7, #8]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80053e8:	7abb      	ldrb	r3, [r7, #10]
 80053ea:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80053ec:	4313      	orrs	r3, r2
 80053ee:	4a28      	ldr	r2, [pc, #160]	; (8005490 <LSM303AGR_MAG_0_Probe+0x12c>)
 80053f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <LSM303AGR_MAG_0_Probe+0x130>)
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <LSM303AGR_MAG_0_Probe+0x128>)
 80053f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <LSM303AGR_MAG_0_Probe+0x134>)
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <LSM303AGR_MAG_0_Probe+0x138>)
 80053fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11e      	bne.n	8005442 <LSM303AGR_MAG_0_Probe+0xde>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d019      	beq.n	8005442 <LSM303AGR_MAG_0_Probe+0xde>
 800540e:	7abb      	ldrb	r3, [r7, #10]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d116      	bne.n	8005442 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005414:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <LSM303AGR_MAG_0_Probe+0x140>)
 800541a:	3306      	adds	r3, #6
 800541c:	4922      	ldr	r1, [pc, #136]	; (80054a8 <LSM303AGR_MAG_0_Probe+0x144>)
 800541e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <LSM303AGR_MAG_0_Probe+0x134>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <LSM303AGR_MAG_0_Probe+0x130>)
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005436:	f06f 0304 	mvn.w	r3, #4
 800543a:	647b      	str	r3, [r7, #68]	; 0x44
 800543c:	e001      	b.n	8005442 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800543e:	2300      	movs	r3, #0
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <LSM303AGR_MAG_0_Probe+0xf4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005452:	f06f 0304 	mvn.w	r3, #4
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <LSM303AGR_MAG_0_Probe+0x10a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005468:	f06f 0304 	mvn.w	r3, #4
 800546c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800546e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005470:	4618      	mov	r0, r3
 8005472:	3748      	adds	r7, #72	; 0x48
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	08001cf1 	.word	0x08001cf1
 800547c:	08001d6d 	.word	0x08001d6d
 8005480:	08001e21 	.word	0x08001e21
 8005484:	08001dbd 	.word	0x08001dbd
 8005488:	08001e85 	.word	0x08001e85
 800548c:	200003e0 	.word	0x200003e0
 8005490:	20000378 	.word	0x20000378
 8005494:	200006b0 	.word	0x200006b0
 8005498:	2000036c 	.word	0x2000036c
 800549c:	200000a0 	.word	0x200000a0
 80054a0:	2000012c 	.word	0x2000012c
 80054a4:	20000348 	.word	0x20000348
 80054a8:	200000b0 	.word	0x200000b0

080054ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_Init+0x3c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <HAL_Init+0x3c>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054c2:	2003      	movs	r0, #3
 80054c4:	f000 f9a4 	bl	8005810 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054c8:	2000      	movs	r0, #0
 80054ca:	f000 f80f 	bl	80054ec <HAL_InitTick>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	71fb      	strb	r3, [r7, #7]
 80054d8:	e001      	b.n	80054de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054da:	f7fc facc 	bl	8001a76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054de:	79fb      	ldrb	r3, [r7, #7]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	58004000 	.word	0x58004000

080054ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054f8:	4b17      	ldr	r3, [pc, #92]	; (8005558 <HAL_InitTick+0x6c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8005500:	f002 fb76 	bl	8007bf0 <HAL_RCC_GetHCLKFreq>
 8005504:	4601      	mov	r1, r0
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_InitTick+0x6c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	fbb1 f3f3 	udiv	r3, r1, r3
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f9bb 	bl	8005892 <HAL_SYSTICK_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d809      	bhi.n	800553c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005528:	2200      	movs	r2, #0
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f000 f979 	bl	8005826 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005534:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_InitTick+0x70>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e007      	b.n	800554c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	e004      	b.n	800554c <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e001      	b.n	800554c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000144 	.word	0x20000144
 800555c:	20000140 	.word	0x20000140

08005560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_IncTick+0x1c>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_IncTick+0x20>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4413      	add	r3, r2
 800556e:	4a03      	ldr	r2, [pc, #12]	; (800557c <HAL_IncTick+0x1c>)
 8005570:	6013      	str	r3, [r2, #0]
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	200006bc 	.word	0x200006bc
 8005580:	20000144 	.word	0x20000144

08005584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return uwTick;
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <HAL_GetTick+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	200006bc 	.word	0x200006bc

0800559c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_GetTickPrio+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000140 	.word	0x20000140

080055b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <__NVIC_SetPriorityGrouping+0x44>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055d0:	4013      	ands	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <__NVIC_SetPriorityGrouping+0x44>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	60d3      	str	r3, [r2, #12]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	e000ed00 	.word	0xe000ed00

080055fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <__NVIC_GetPriorityGrouping+0x18>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	f003 0307 	and.w	r3, r3, #7
}
 800560a:	4618      	mov	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	db0b      	blt.n	8005642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	4907      	ldr	r1, [pc, #28]	; (8005650 <__NVIC_EnableIRQ+0x38>)
 8005632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2001      	movs	r0, #1
 800563a:	fa00 f202 	lsl.w	r2, r0, r2
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e100 	.word	0xe000e100

08005654 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800565e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	db10      	blt.n	8005688 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	f003 021f 	and.w	r2, r3, #31
 800566c:	4909      	ldr	r1, [pc, #36]	; (8005694 <__NVIC_DisableIRQ+0x40>)
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2001      	movs	r0, #1
 8005676:	fa00 f202 	lsl.w	r2, r0, r2
 800567a:	3320      	adds	r3, #32
 800567c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005684:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000e100 	.word	0xe000e100

08005698 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	db0c      	blt.n	80056c4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	4907      	ldr	r1, [pc, #28]	; (80056d0 <__NVIC_SetPendingIRQ+0x38>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2001      	movs	r0, #1
 80056ba:	fa00 f202 	lsl.w	r2, r0, r2
 80056be:	3340      	adds	r3, #64	; 0x40
 80056c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000e100 	.word	0xe000e100

080056d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db0c      	blt.n	8005700 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	f003 021f 	and.w	r2, r3, #31
 80056ec:	4907      	ldr	r1, [pc, #28]	; (800570c <__NVIC_ClearPendingIRQ+0x38>)
 80056ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2001      	movs	r0, #1
 80056f6:	fa00 f202 	lsl.w	r2, r0, r2
 80056fa:	3360      	adds	r3, #96	; 0x60
 80056fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000e100 	.word	0xe000e100

08005710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	6039      	str	r1, [r7, #0]
 800571a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	2b00      	cmp	r3, #0
 8005722:	db0a      	blt.n	800573a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	490c      	ldr	r1, [pc, #48]	; (800575c <__NVIC_SetPriority+0x4c>)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	440b      	add	r3, r1
 8005734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005738:	e00a      	b.n	8005750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <__NVIC_SetPriority+0x50>)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	3b04      	subs	r3, #4
 8005748:	0112      	lsls	r2, r2, #4
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	440b      	add	r3, r1
 800574e:	761a      	strb	r2, [r3, #24]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000e100 	.word	0xe000e100
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f1c3 0307 	rsb	r3, r3, #7
 800577e:	2b04      	cmp	r3, #4
 8005780:	bf28      	it	cs
 8005782:	2304      	movcs	r3, #4
 8005784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3304      	adds	r3, #4
 800578a:	2b06      	cmp	r3, #6
 800578c:	d902      	bls.n	8005794 <NVIC_EncodePriority+0x30>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3b03      	subs	r3, #3
 8005792:	e000      	b.n	8005796 <NVIC_EncodePriority+0x32>
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	401a      	ands	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ac:	f04f 31ff 	mov.w	r1, #4294967295
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43d9      	mvns	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057bc:	4313      	orrs	r3, r2
         );
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057dc:	d301      	bcc.n	80057e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057de:	2301      	movs	r3, #1
 80057e0:	e00f      	b.n	8005802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <SysTick_Config+0x40>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ea:	210f      	movs	r1, #15
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	f7ff ff8e 	bl	8005710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <SysTick_Config+0x40>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <SysTick_Config+0x40>)
 80057fc:	2207      	movs	r2, #7
 80057fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	e000e010 	.word	0xe000e010

08005810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fecb 	bl	80055b4 <__NVIC_SetPriorityGrouping>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005834:	f7ff fee2 	bl	80055fc <__NVIC_GetPriorityGrouping>
 8005838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	6978      	ldr	r0, [r7, #20]
 8005840:	f7ff ff90 	bl	8005764 <NVIC_EncodePriority>
 8005844:	4602      	mov	r2, r0
 8005846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ff5f 	bl	8005710 <__NVIC_SetPriority>
}
 8005852:	bf00      	nop
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	4603      	mov	r3, r0
 8005862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fed5 	bl	8005618 <__NVIC_EnableIRQ>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fee5 	bl	8005654 <__NVIC_DisableIRQ>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ff96 	bl	80057cc <SysTick_Config>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4603      	mov	r3, r0
 80058b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff feed 	bl	8005698 <__NVIC_SetPendingIRQ>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	4603      	mov	r3, r0
 80058ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80058d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fefd 	bl	80056d4 <__NVIC_ClearPendingIRQ>
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d005      	beq.n	8005906 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e047      	b.n	8005996 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 020e 	bic.w	r2, r2, #14
 8005914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	f003 021c 	and.w	r2, r3, #28
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f202 	lsl.w	r2, r1, r2
 8005948:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005952:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800596a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005974:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
    }
  }
  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ae:	e14c      	b.n	8005c4a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	2101      	movs	r1, #1
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 813e 	beq.w	8005c44 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d003      	beq.n	80059d8 <HAL_GPIO_Init+0x38>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b12      	cmp	r3, #18
 80059d6:	d123      	bne.n	8005a20 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	08da      	lsrs	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3208      	adds	r2, #8
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	220f      	movs	r2, #15
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43db      	mvns	r3, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4013      	ands	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	08da      	lsrs	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3208      	adds	r2, #8
 8005a1a:	6939      	ldr	r1, [r7, #16]
 8005a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 0203 	and.w	r2, r3, #3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d00b      	beq.n	8005a74 <HAL_GPIO_Init+0xd4>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d007      	beq.n	8005a74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a68:	2b11      	cmp	r3, #17
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b12      	cmp	r3, #18
 8005a72:	d130      	bne.n	8005ad6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2203      	movs	r2, #3
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aaa:	2201      	movs	r2, #1
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 0201 	and.w	r2, r3, #1
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4013      	ands	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8098 	beq.w	8005c44 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005b14:	4a54      	ldr	r2, [pc, #336]	; (8005c68 <HAL_GPIO_Init+0x2c8>)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	089b      	lsrs	r3, r3, #2
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	220f      	movs	r2, #15
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4013      	ands	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b3e:	d019      	beq.n	8005b74 <HAL_GPIO_Init+0x1d4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a4a      	ldr	r2, [pc, #296]	; (8005c6c <HAL_GPIO_Init+0x2cc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <HAL_GPIO_Init+0x1d0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a49      	ldr	r2, [pc, #292]	; (8005c70 <HAL_GPIO_Init+0x2d0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00d      	beq.n	8005b6c <HAL_GPIO_Init+0x1cc>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a48      	ldr	r2, [pc, #288]	; (8005c74 <HAL_GPIO_Init+0x2d4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <HAL_GPIO_Init+0x1c8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a47      	ldr	r2, [pc, #284]	; (8005c78 <HAL_GPIO_Init+0x2d8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d101      	bne.n	8005b64 <HAL_GPIO_Init+0x1c4>
 8005b60:	2304      	movs	r3, #4
 8005b62:	e008      	b.n	8005b76 <HAL_GPIO_Init+0x1d6>
 8005b64:	2307      	movs	r3, #7
 8005b66:	e006      	b.n	8005b76 <HAL_GPIO_Init+0x1d6>
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e004      	b.n	8005b76 <HAL_GPIO_Init+0x1d6>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e002      	b.n	8005b76 <HAL_GPIO_Init+0x1d6>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <HAL_GPIO_Init+0x1d6>
 8005b74:	2300      	movs	r3, #0
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	f002 0203 	and.w	r2, r2, #3
 8005b7c:	0092      	lsls	r2, r2, #2
 8005b7e:	4093      	lsls	r3, r2
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b86:	4938      	ldr	r1, [pc, #224]	; (8005c68 <HAL_GPIO_Init+0x2c8>)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b94:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bba:	4a30      	ldr	r2, [pc, #192]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c14:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	43db      	mvns	r3, r3
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4013      	ands	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <HAL_GPIO_Init+0x2dc>)
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3301      	adds	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f47f aeab 	bne.w	80059b0 <HAL_GPIO_Init+0x10>
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	48000400 	.word	0x48000400
 8005c70:	48000800 	.word	0x48000800
 8005c74:	48000c00 	.word	0x48000c00
 8005c78:	48001000 	.word	0x48001000
 8005c7c:	58000800 	.word	0x58000800

08005c80 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005c8e:	e0bb      	b.n	8005e08 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005c90:	2201      	movs	r2, #1
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80ae 	beq.w	8005e02 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005ca6:	4a5f      	ldr	r2, [pc, #380]	; (8005e24 <HAL_GPIO_DeInit+0x1a4>)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	3302      	adds	r3, #2
 8005cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cce:	d019      	beq.n	8005d04 <HAL_GPIO_DeInit+0x84>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a55      	ldr	r2, [pc, #340]	; (8005e28 <HAL_GPIO_DeInit+0x1a8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <HAL_GPIO_DeInit+0x80>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <HAL_GPIO_DeInit+0x1ac>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00d      	beq.n	8005cfc <HAL_GPIO_DeInit+0x7c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a53      	ldr	r2, [pc, #332]	; (8005e30 <HAL_GPIO_DeInit+0x1b0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <HAL_GPIO_DeInit+0x78>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <HAL_GPIO_DeInit+0x1b4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_GPIO_DeInit+0x74>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	e008      	b.n	8005d06 <HAL_GPIO_DeInit+0x86>
 8005cf4:	2307      	movs	r3, #7
 8005cf6:	e006      	b.n	8005d06 <HAL_GPIO_DeInit+0x86>
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e004      	b.n	8005d06 <HAL_GPIO_DeInit+0x86>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e002      	b.n	8005d06 <HAL_GPIO_DeInit+0x86>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_GPIO_DeInit+0x86>
 8005d04:	2300      	movs	r3, #0
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	f002 0203 	and.w	r2, r2, #3
 8005d0c:	0092      	lsls	r2, r2, #2
 8005d0e:	4093      	lsls	r3, r2
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d136      	bne.n	8005d84 <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	220f      	movs	r2, #15
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005d26:	4a3f      	ldr	r2, [pc, #252]	; (8005e24 <HAL_GPIO_DeInit+0x1a4>)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	483b      	ldr	r0, [pc, #236]	; (8005e24 <HAL_GPIO_DeInit+0x1a4>)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	3302      	adds	r3, #2
 8005d40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005d44:	4b3c      	ldr	r3, [pc, #240]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	493a      	ldr	r1, [pc, #232]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005d56:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	4935      	ldr	r1, [pc, #212]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005d68:	4b33      	ldr	r3, [pc, #204]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	4931      	ldr	r1, [pc, #196]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005d76:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	492e      	ldr	r1, [pc, #184]	; (8005e38 <HAL_GPIO_DeInit+0x1b8>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	2103      	movs	r1, #3
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	08da      	lsrs	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3208      	adds	r2, #8
 8005da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	220f      	movs	r2, #15
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	08d2      	lsrs	r2, r2, #3
 8005db8:	4019      	ands	r1, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3208      	adds	r2, #8
 8005dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	2103      	movs	r1, #3
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	2101      	movs	r1, #1
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	2103      	movs	r1, #3
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	401a      	ands	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	3301      	adds	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af3d 	bne.w	8005c90 <HAL_GPIO_DeInit+0x10>
  }
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40010000 	.word	0x40010000
 8005e28:	48000400 	.word	0x48000400
 8005e2c:	48000800 	.word	0x48000800
 8005e30:	48000c00 	.word	0x48000c00
 8005e34:	48001000 	.word	0x48001000
 8005e38:	58000800 	.word	0x58000800

08005e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	807b      	strh	r3, [r7, #2]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e4c:	787b      	ldrb	r3, [r7, #1]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e58:	e002      	b.n	8005e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	887b      	ldrh	r3, [r7, #2]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e84:	887a      	ldrh	r2, [r7, #2]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005e8a:	e002      	b.n	8005e92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	619a      	str	r2, [r3, #24]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eb6:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f806 	bl	8005ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	58000800 	.word	0x58000800

08005ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e081      	b.n	8005ffc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8a8 	bl	8006062 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	; 0x24
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d107      	bne.n	8005f60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	e006      	b.n	8005f6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d104      	bne.n	8005f80 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	ea42 0103 	orr.w	r1, r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	021a      	lsls	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69d9      	ldr	r1, [r3, #28]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e021      	b.n	800605a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	; 0x24
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f821 	bl	8006076 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	4603      	mov	r3, r0
 800609c:	817b      	strh	r3, [r7, #10]
 800609e:	460b      	mov	r3, r1
 80060a0:	813b      	strh	r3, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	f040 80f9 	bne.w	80062a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_I2C_Mem_Write+0x34>
 80060ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0ed      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_I2C_Mem_Write+0x4e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0e6      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060e2:	f7ff fa4f 	bl	8005584 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2319      	movs	r3, #25
 80060ee:	2201      	movs	r2, #1
 80060f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fadd 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0d1      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800612c:	88f8      	ldrh	r0, [r7, #6]
 800612e:	893a      	ldrh	r2, [r7, #8]
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4603      	mov	r3, r0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f9ed 	bl	800651c <I2C_RequestMemoryWrite>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0a9      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2bff      	cmp	r3, #255	; 0xff
 800615c:	d90e      	bls.n	800617c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	8979      	ldrh	r1, [r7, #10]
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fbbf 	bl	80068f8 <I2C_TransferConfig>
 800617a:	e00f      	b.n	800619c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	b2da      	uxtb	r2, r3
 800618c:	8979      	ldrh	r1, [r7, #10]
 800618e:	2300      	movs	r3, #0
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fbae 	bl	80068f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fac7 	bl	8006734 <I2C_WaitOnTXISFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e07b      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d034      	beq.n	8006254 <HAL_I2C_Mem_Write+0x1c8>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d130      	bne.n	8006254 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	2200      	movs	r2, #0
 80061fa:	2180      	movs	r1, #128	; 0x80
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa59 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e04d      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2bff      	cmp	r3, #255	; 0xff
 8006214:	d90e      	bls.n	8006234 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8979      	ldrh	r1, [r7, #10]
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fb63 	bl	80068f8 <I2C_TransferConfig>
 8006232:	e00f      	b.n	8006254 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006242:	b2da      	uxtb	r2, r3
 8006244:	8979      	ldrh	r1, [r7, #10]
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fb52 	bl	80068f8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d19e      	bne.n	800619c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 faa6 	bl	80067b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e01a      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2220      	movs	r2, #32
 8006278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <HAL_I2C_Mem_Write+0x224>)
 8006286:	400b      	ands	r3, r1
 8006288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	fe00e800 	.word	0xfe00e800

080062b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	4608      	mov	r0, r1
 80062be:	4611      	mov	r1, r2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4603      	mov	r3, r0
 80062c4:	817b      	strh	r3, [r7, #10]
 80062c6:	460b      	mov	r3, r1
 80062c8:	813b      	strh	r3, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	f040 80fd 	bne.w	80064d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_I2C_Mem_Read+0x34>
 80062e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0f1      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Mem_Read+0x4e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ea      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800630a:	f7ff f93b 	bl	8005584 <HAL_GetTick>
 800630e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2319      	movs	r3, #25
 8006316:	2201      	movs	r2, #1
 8006318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f9c9 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0d5      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2222      	movs	r2, #34	; 0x22
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2240      	movs	r2, #64	; 0x40
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800634c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006354:	88f8      	ldrh	r0, [r7, #6]
 8006356:	893a      	ldrh	r2, [r7, #8]
 8006358:	8979      	ldrh	r1, [r7, #10]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4603      	mov	r3, r0
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f92d 	bl	80065c4 <I2C_RequestMemoryRead>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0ad      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2bff      	cmp	r3, #255	; 0xff
 8006384:	d90e      	bls.n	80063a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	22ff      	movs	r2, #255	; 0xff
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	b2da      	uxtb	r2, r3
 8006392:	8979      	ldrh	r1, [r7, #10]
 8006394:	4b52      	ldr	r3, [pc, #328]	; (80064e0 <HAL_I2C_Mem_Read+0x22c>)
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 faab 	bl	80068f8 <I2C_TransferConfig>
 80063a2:	e00f      	b.n	80063c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	8979      	ldrh	r1, [r7, #10]
 80063b6:	4b4a      	ldr	r3, [pc, #296]	; (80064e0 <HAL_I2C_Mem_Read+0x22c>)
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fa9a 	bl	80068f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2200      	movs	r2, #0
 80063cc:	2104      	movs	r1, #4
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f970 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07c      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d034      	beq.n	8006484 <HAL_I2C_Mem_Read+0x1d0>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d130      	bne.n	8006484 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f941 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e04d      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2bff      	cmp	r3, #255	; 0xff
 8006444:	d90e      	bls.n	8006464 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	22ff      	movs	r2, #255	; 0xff
 800644a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	b2da      	uxtb	r2, r3
 8006452:	8979      	ldrh	r1, [r7, #10]
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fa4b 	bl	80068f8 <I2C_TransferConfig>
 8006462:	e00f      	b.n	8006484 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	b2da      	uxtb	r2, r3
 8006474:	8979      	ldrh	r1, [r7, #10]
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa3a 	bl	80068f8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d19a      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f98e 	bl	80067b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01a      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2220      	movs	r2, #32
 80064a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_I2C_Mem_Read+0x230>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	80002400 	.word	0x80002400
 80064e4:	fe00e800 	.word	0xfe00e800

080064e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f6:	b2db      	uxtb	r3, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	4603      	mov	r3, r0
 800652c:	817b      	strh	r3, [r7, #10]
 800652e:	460b      	mov	r3, r1
 8006530:	813b      	strh	r3, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <I2C_RequestMemoryWrite+0xa4>)
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f9d7 	bl	80068f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	69b9      	ldr	r1, [r7, #24]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f8f0 	bl	8006734 <I2C_WaitOnTXISFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e02c      	b.n	80065b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
 800656e:	e015      	b.n	800659c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	69b9      	ldr	r1, [r7, #24]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f8d6 	bl	8006734 <I2C_WaitOnTXISFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e012      	b.n	80065b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006592:	893b      	ldrh	r3, [r7, #8]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2180      	movs	r1, #128	; 0x80
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f884 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	80002000 	.word	0x80002000

080065c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	460b      	mov	r3, r1
 80065d8:	813b      	strh	r3, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	8979      	ldrh	r1, [r7, #10]
 80065e4:	4b20      	ldr	r3, [pc, #128]	; (8006668 <I2C_RequestMemoryRead+0xa4>)
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f984 	bl	80068f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	69b9      	ldr	r1, [r7, #24]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f89d 	bl	8006734 <I2C_WaitOnTXISFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e02c      	b.n	800665e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d105      	bne.n	8006616 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800660a:	893b      	ldrh	r3, [r7, #8]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	629a      	str	r2, [r3, #40]	; 0x28
 8006614:	e015      	b.n	8006642 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006616:	893b      	ldrh	r3, [r7, #8]
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	b29b      	uxth	r3, r3
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	69b9      	ldr	r1, [r7, #24]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f883 	bl	8006734 <I2C_WaitOnTXISFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e012      	b.n	800665e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006638:	893b      	ldrh	r3, [r7, #8]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2200      	movs	r2, #0
 800664a:	2140      	movs	r1, #64	; 0x40
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f831 	bl	80066b4 <I2C_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	80002000 	.word	0x80002000

0800666c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d103      	bne.n	800668a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d007      	beq.n	80066a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	619a      	str	r2, [r3, #24]
  }
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066c4:	e022      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d01e      	beq.n	800670c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fe ff59 	bl	8005584 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d113      	bne.n	800670c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e00f      	b.n	800672c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4013      	ands	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	429a      	cmp	r2, r3
 8006728:	d0cd      	beq.n	80066c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006740:	e02c      	b.n	800679c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f870 	bl	800682c <I2C_IsAcknowledgeFailed>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e02a      	b.n	80067ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d01e      	beq.n	800679c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fe ff11 	bl	8005584 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d113      	bne.n	800679c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e007      	b.n	80067ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d1cb      	bne.n	8006742 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c0:	e028      	b.n	8006814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f830 	bl	800682c <I2C_IsAcknowledgeFailed>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e026      	b.n	8006824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d6:	f7fe fed5 	bl	8005584 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d113      	bne.n	8006814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e007      	b.n	8006824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d1cf      	bne.n	80067c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b10      	cmp	r3, #16
 8006844:	d151      	bne.n	80068ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006846:	e022      	b.n	800688e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d01e      	beq.n	800688e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006850:	f7fe fe98 	bl	8005584 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	d302      	bcc.n	8006866 <I2C_IsAcknowledgeFailed+0x3a>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d113      	bne.n	800688e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f043 0220 	orr.w	r2, r3, #32
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e02e      	b.n	80068ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b20      	cmp	r3, #32
 800689a:	d1d5      	bne.n	8006848 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2210      	movs	r2, #16
 80068a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2220      	movs	r2, #32
 80068aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fedd 	bl	800666c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80068be:	400b      	ands	r3, r1
 80068c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	fe00e800 	.word	0xfe00e800

080068f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	817b      	strh	r3, [r7, #10]
 8006906:	4613      	mov	r3, r2
 8006908:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	0d5b      	lsrs	r3, r3, #21
 8006914:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <I2C_TransferConfig+0x58>)
 800691a:	430b      	orrs	r3, r1
 800691c:	43db      	mvns	r3, r3
 800691e:	ea02 0103 	and.w	r1, r2, r3
 8006922:	897b      	ldrh	r3, [r7, #10]
 8006924:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006928:	7a7b      	ldrb	r3, [r7, #9]
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	431a      	orrs	r2, r3
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	431a      	orrs	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	03ff63ff 	.word	0x03ff63ff

08006954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b20      	cmp	r3, #32
 8006968:	d138      	bne.n	80069dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006974:	2302      	movs	r3, #2
 8006976:	e032      	b.n	80069de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2224      	movs	r2, #36	; 0x24
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d139      	bne.n	8006a74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e033      	b.n	8006a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	e000      	b.n	8006a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
  }
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a04      	ldr	r2, [pc, #16]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a92:	6013      	str	r3, [r2, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	58000400 	.word	0x58000400

08006aa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <HAL_PWREx_GetVoltageRange+0x18>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	58000400 	.word	0x58000400

08006ac0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d101      	bne.n	8006ad8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_RCC_HSE_EnableBypass>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af6:	6013      	str	r3, [r2, #0]
}
 8006af8:	bf00      	nop
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_HSE_DisableBypass>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_RCC_HSE_Enable>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b32:	6013      	str	r3, [r2, #0]
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_HSE_Disable>:
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <LL_RCC_HSE_IsReady>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b6e:	d101      	bne.n	8006b74 <LL_RCC_HSE_IsReady+0x18>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <LL_RCC_HSE_IsReady+0x1a>
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <LL_RCC_HSI_Enable>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6013      	str	r3, [r2, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_RCC_HSI_Disable>:
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	6013      	str	r3, [r2, #0]
}
 8006bb2:	bf00      	nop
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_RCC_HSI_IsReady>:
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bce:	d101      	bne.n	8006bd4 <LL_RCC_HSI_IsReady+0x18>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <LL_RCC_HSI_IsReady+0x1a>
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <LL_RCC_HSI48_Enable>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006c22:	bf00      	nop
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <LL_RCC_HSI48_Disable>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <LL_RCC_HSI48_IsReady>:
{
 8006c4e:	b480      	push	{r7}
 8006c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d101      	bne.n	8006c66 <LL_RCC_HSI48_IsReady+0x18>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <LL_RCC_HSI48_IsReady+0x1a>
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <LL_RCC_LSE_Enable>:
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c8a:	bf00      	nop
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <LL_RCC_LSE_Disable>:
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cac:	bf00      	nop
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_RCC_LSE_EnableBypass>:
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc6:	f043 0304 	orr.w	r3, r3, #4
 8006cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cce:	bf00      	nop
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_RCC_LSE_DisableBypass>:
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce8:	f023 0304 	bic.w	r3, r3, #4
 8006cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cf0:	bf00      	nop
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <LL_RCC_LSE_IsReady>:
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d101      	bne.n	8006d12 <LL_RCC_LSE_IsReady+0x18>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <LL_RCC_LSE_IsReady+0x1a>
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <LL_RCC_LSI1_Enable>:
{
 8006d1e:	b480      	push	{r7}
 8006d20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d36:	bf00      	nop
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <LL_RCC_LSI1_Disable>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d50:	f023 0301 	bic.w	r3, r3, #1
 8006d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <LL_RCC_LSI1_IsReady>:
{
 8006d62:	b480      	push	{r7}
 8006d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d101      	bne.n	8006d7a <LL_RCC_LSI1_IsReady+0x18>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <LL_RCC_LSI1_IsReady+0x1a>
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <LL_RCC_LSI2_Enable>:
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d96:	f043 0304 	orr.w	r3, r3, #4
 8006d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006d9e:	bf00      	nop
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <LL_RCC_LSI2_Disable>:
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db8:	f023 0304 	bic.w	r3, r3, #4
 8006dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <LL_RCC_LSI2_IsReady>:
{
 8006dca:	b480      	push	{r7}
 8006dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d101      	bne.n	8006de2 <LL_RCC_LSI2_IsReady+0x18>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <LL_RCC_LSI2_IsReady+0x1a>
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <LL_RCC_LSI2_SetTrimming>:
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <LL_RCC_MSI_Enable>:
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6013      	str	r3, [r2, #0]
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_MSI_Disable>:
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	6013      	str	r3, [r2, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <LL_RCC_MSI_IsReady>:
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d101      	bne.n	8006e6e <LL_RCC_MSI_IsReady+0x16>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <LL_RCC_MSI_IsReady+0x18>
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_MSI_SetRange>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	600b      	str	r3, [r1, #0]
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <LL_RCC_MSI_GetRange>:
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eb2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2bb0      	cmp	r3, #176	; 0xb0
 8006eb8:	d901      	bls.n	8006ebe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006eba:	23b0      	movs	r3, #176	; 0xb0
 8006ebc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006ebe:	687b      	ldr	r3, [r7, #4]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <LL_RCC_MSI_SetCalibTrimming>:
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_RCC_SetSysClkSource>:
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 0203 	bic.w	r2, r3, #3
 8006f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <LL_RCC_GetSysClkSource>:
{
 8006f1e:	b480      	push	{r7}
 8006f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 030c 	and.w	r3, r3, #12
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_RCC_SetAHBPrescaler>:
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_C2_RCC_SetAHBPrescaler>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <LL_RCC_SetAHB4Prescaler>:
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006f9a:	f023 020f 	bic.w	r2, r3, #15
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_SetAPB1Prescaler>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	608b      	str	r3, [r1, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <LL_RCC_SetAPB2Prescaler>:
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	608b      	str	r3, [r1, #8]
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <LL_RCC_GetAHBPrescaler>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <LL_RCC_GetAHB4Prescaler>:
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007032:	4618      	mov	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <LL_RCC_GetAPB1Prescaler>:
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800704a:	4618      	mov	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_RCC_GetAPB2Prescaler>:
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007062:	4618      	mov	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800707a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800707e:	6013      	str	r3, [r2, #0]
}
 8007080:	bf00      	nop
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800708a:	b480      	push	{r7}
 800708c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800708e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800709c:	6013      	str	r3, [r2, #0]
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80070ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ba:	d101      	bne.n	80070c0 <LL_RCC_PLL_IsReady+0x18>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <LL_RCC_PLL_IsReady+0x1a>
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80070d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80070e6:	b480      	push	{r7}
 80070e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80070fe:	b480      	push	{r7}
 8007100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007116:	b480      	push	{r7}
 8007118:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800711a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0303 	and.w	r3, r3, #3
}
 8007124:	4618      	mov	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800712e:	b480      	push	{r7}
 8007130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007140:	d101      	bne.n	8007146 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007152:	b480      	push	{r7}
 8007154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007166:	d101      	bne.n	800716c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d101      	bne.n	8007192 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800719e:	b480      	push	{r7}
 80071a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80071a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b0:	d101      	bne.n	80071b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80071c2:	b480      	push	{r7}
 80071c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80071c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071d4:	d101      	bne.n	80071da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b08b      	sub	sp, #44	; 0x2c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e34b      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 808f 	beq.w	8007326 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007208:	f7ff fe89 	bl	8006f1e <LL_RCC_GetSysClkSource>
 800720c:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800720e:	f7ff ff82 	bl	8007116 <LL_RCC_PLL_GetMainSource>
 8007212:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_RCC_OscConfig+0x3e>
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d149      	bne.n	80072b4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d146      	bne.n	80072b4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007226:	f7ff fe17 	bl	8006e58 <LL_RCC_MSI_IsReady>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCC_OscConfig+0x54>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e32a      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007240:	f7ff fe2f 	bl	8006ea2 <LL_RCC_MSI_GetRange>
 8007244:	4603      	mov	r3, r0
 8007246:	429c      	cmp	r4, r3
 8007248:	d914      	bls.n	8007274 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fd0e 	bl	8007c70 <RCC_SetFlashLatencyFromMSIRange>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e319      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fe09 	bl	8006e7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fe2d 	bl	8006ecc <LL_RCC_MSI_SetCalibTrimming>
 8007272:	e013      	b.n	800729c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fdfe 	bl	8006e7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fe22 	bl	8006ecc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fcef 	bl	8007c70 <RCC_SetFlashLatencyFromMSIRange>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e2fa      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800729c:	f7fa feca 	bl	8002034 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80072a0:	4bb4      	ldr	r3, [pc, #720]	; (8007574 <HAL_RCC_OscConfig+0x38c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe f921 	bl	80054ec <HAL_InitTick>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d039      	beq.n	8007324 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e2ee      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01e      	beq.n	80072fa <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072bc:	f7ff fdae 	bl	8006e1c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072c0:	f7fe f960 	bl	8005584 <HAL_GetTick>
 80072c4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072c8:	f7fe f95c 	bl	8005584 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e2db      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80072da:	f7ff fdbd 	bl	8006e58 <LL_RCC_MSI_IsReady>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f1      	beq.n	80072c8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fdc6 	bl	8006e7a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fdea 	bl	8006ecc <LL_RCC_MSI_SetCalibTrimming>
 80072f8:	e015      	b.n	8007326 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80072fa:	f7ff fd9e 	bl	8006e3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072fe:	f7fe f941 	bl	8005584 <HAL_GetTick>
 8007302:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007306:	f7fe f93d 	bl	8005584 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e2bc      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007318:	f7ff fd9e 	bl	8006e58 <LL_RCC_MSI_IsReady>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f1      	bne.n	8007306 <HAL_RCC_OscConfig+0x11e>
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05a      	beq.n	80073e8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007332:	f7ff fdf4 	bl	8006f1e <LL_RCC_GetSysClkSource>
 8007336:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007338:	f7ff feed 	bl	8007116 <LL_RCC_PLL_GetMainSource>
 800733c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d005      	beq.n	8007350 <HAL_RCC_OscConfig+0x168>
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b0c      	cmp	r3, #12
 8007348:	d10d      	bne.n	8007366 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d10a      	bne.n	8007366 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007350:	f7ff fc04 	bl	8006b5c <LL_RCC_HSE_IsReady>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d045      	beq.n	80073e6 <HAL_RCC_OscConfig+0x1fe>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d141      	bne.n	80073e6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e295      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736e:	d102      	bne.n	8007376 <HAL_RCC_OscConfig+0x18e>
 8007370:	f7ff fbd6 	bl	8006b20 <LL_RCC_HSE_Enable>
 8007374:	e00d      	b.n	8007392 <HAL_RCC_OscConfig+0x1aa>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800737e:	d104      	bne.n	800738a <HAL_RCC_OscConfig+0x1a2>
 8007380:	f7ff fbb0 	bl	8006ae4 <LL_RCC_HSE_EnableBypass>
 8007384:	f7ff fbcc 	bl	8006b20 <LL_RCC_HSE_Enable>
 8007388:	e003      	b.n	8007392 <HAL_RCC_OscConfig+0x1aa>
 800738a:	f7ff fbd8 	bl	8006b3e <LL_RCC_HSE_Disable>
 800738e:	f7ff fbb8 	bl	8006b02 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d012      	beq.n	80073c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739a:	f7fe f8f3 	bl	8005584 <HAL_GetTick>
 800739e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a2:	f7fe f8ef 	bl	8005584 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b64      	cmp	r3, #100	; 0x64
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e26e      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80073b4:	f7ff fbd2 	bl	8006b5c <LL_RCC_HSE_IsReady>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f1      	beq.n	80073a2 <HAL_RCC_OscConfig+0x1ba>
 80073be:	e013      	b.n	80073e8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c0:	f7fe f8e0 	bl	8005584 <HAL_GetTick>
 80073c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c8:	f7fe f8dc 	bl	8005584 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b64      	cmp	r3, #100	; 0x64
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e25b      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80073da:	f7ff fbbf 	bl	8006b5c <LL_RCC_HSE_IsReady>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f1      	bne.n	80073c8 <HAL_RCC_OscConfig+0x1e0>
 80073e4:	e000      	b.n	80073e8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d051      	beq.n	8007498 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073f4:	f7ff fd93 	bl	8006f1e <LL_RCC_GetSysClkSource>
 80073f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073fa:	f7ff fe8c 	bl	8007116 <LL_RCC_PLL_GetMainSource>
 80073fe:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b04      	cmp	r3, #4
 8007404:	d005      	beq.n	8007412 <HAL_RCC_OscConfig+0x22a>
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b0c      	cmp	r3, #12
 800740a:	d113      	bne.n	8007434 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d110      	bne.n	8007434 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007412:	f7ff fbd3 	bl	8006bbc <LL_RCC_HSI_IsReady>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <HAL_RCC_OscConfig+0x240>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e234      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fbd7 	bl	8006be0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007432:	e031      	b.n	8007498 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d019      	beq.n	8007470 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800743c:	f7ff fba0 	bl	8006b80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fe f8a0 	bl	8005584 <HAL_GetTick>
 8007444:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007448:	f7fe f89c 	bl	8005584 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e21b      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800745a:	f7ff fbaf 	bl	8006bbc <LL_RCC_HSI_IsReady>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f1      	beq.n	8007448 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fbb9 	bl	8006be0 <LL_RCC_HSI_SetCalibTrimming>
 800746e:	e013      	b.n	8007498 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007470:	f7ff fb95 	bl	8006b9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fe f886 	bl	8005584 <HAL_GetTick>
 8007478:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800747c:	f7fe f882 	bl	8005584 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e201      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800748e:	f7ff fb95 	bl	8006bbc <LL_RCC_HSI_IsReady>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f1      	bne.n	800747c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80a2 	beq.w	80075f6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d075      	beq.n	80075a6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d046      	beq.n	8007554 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80074c6:	f7ff fc4c 	bl	8006d62 <LL_RCC_LSI1_IsReady>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d113      	bne.n	80074f8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80074d0:	f7ff fc25 	bl	8006d1e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80074d4:	f7fe f856 	bl	8005584 <HAL_GetTick>
 80074d8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80074dc:	f7fe f852 	bl	8005584 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e1d1      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80074ee:	f7ff fc38 	bl	8006d62 <LL_RCC_LSI1_IsReady>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f1      	beq.n	80074dc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80074f8:	f7ff fc45 	bl	8006d86 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fe f842 	bl	8005584 <HAL_GetTick>
 8007500:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007504:	f7fe f83e 	bl	8005584 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e1bd      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007516:	f7ff fc58 	bl	8006dca <LL_RCC_LSI2_IsReady>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f1      	beq.n	8007504 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fc62 	bl	8006dee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800752a:	f7ff fc09 	bl	8006d40 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752e:	f7fe f829 	bl	8005584 <HAL_GetTick>
 8007532:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007536:	f7fe f825 	bl	8005584 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e1a4      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007548:	f7ff fc0b 	bl	8006d62 <LL_RCC_LSI1_IsReady>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f1      	bne.n	8007536 <HAL_RCC_OscConfig+0x34e>
 8007552:	e050      	b.n	80075f6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007554:	f7ff fbe3 	bl	8006d1e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fe f814 	bl	8005584 <HAL_GetTick>
 800755c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800755e:	e00b      	b.n	8007578 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007560:	f7fe f810 	bl	8005584 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d904      	bls.n	8007578 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e18f      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
 8007572:	bf00      	nop
 8007574:	20000140 	.word	0x20000140
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007578:	f7ff fbf3 	bl	8006d62 <LL_RCC_LSI1_IsReady>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ee      	beq.n	8007560 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007582:	f7ff fc11 	bl	8006da8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007588:	f7fd fffc 	bl	8005584 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e17b      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800759a:	f7ff fc16 	bl	8006dca <LL_RCC_LSI2_IsReady>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1f1      	bne.n	8007588 <HAL_RCC_OscConfig+0x3a0>
 80075a4:	e027      	b.n	80075f6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80075a6:	f7ff fbff 	bl	8006da8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075aa:	f7fd ffeb 	bl	8005584 <HAL_GetTick>
 80075ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80075b2:	f7fd ffe7 	bl	8005584 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e166      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80075c4:	f7ff fc01 	bl	8006dca <LL_RCC_LSI2_IsReady>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f1      	bne.n	80075b2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80075ce:	f7ff fbb7 	bl	8006d40 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d2:	f7fd ffd7 	bl	8005584 <HAL_GetTick>
 80075d6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80075da:	f7fd ffd3 	bl	8005584 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e152      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80075ec:	f7ff fbb9 	bl	8006d62 <LL_RCC_LSI1_IsReady>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f1      	bne.n	80075da <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d05b      	beq.n	80076ba <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007602:	4ba6      	ldr	r3, [pc, #664]	; (800789c <HAL_RCC_OscConfig+0x6b4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760a:	2b00      	cmp	r3, #0
 800760c:	d114      	bne.n	8007638 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800760e:	f7ff fa39 	bl	8006a84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007612:	f7fd ffb7 	bl	8005584 <HAL_GetTick>
 8007616:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800761a:	f7fd ffb3 	bl	8005584 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e132      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800762c:	4b9b      	ldr	r3, [pc, #620]	; (800789c <HAL_RCC_OscConfig+0x6b4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d102      	bne.n	8007646 <HAL_RCC_OscConfig+0x45e>
 8007640:	f7ff fb17 	bl	8006c72 <LL_RCC_LSE_Enable>
 8007644:	e00c      	b.n	8007660 <HAL_RCC_OscConfig+0x478>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b05      	cmp	r3, #5
 800764c:	d104      	bne.n	8007658 <HAL_RCC_OscConfig+0x470>
 800764e:	f7ff fb32 	bl	8006cb6 <LL_RCC_LSE_EnableBypass>
 8007652:	f7ff fb0e 	bl	8006c72 <LL_RCC_LSE_Enable>
 8007656:	e003      	b.n	8007660 <HAL_RCC_OscConfig+0x478>
 8007658:	f7ff fb1c 	bl	8006c94 <LL_RCC_LSE_Disable>
 800765c:	f7ff fb3c 	bl	8006cd8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d014      	beq.n	8007692 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007668:	f7fd ff8c 	bl	8005584 <HAL_GetTick>
 800766c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800766e:	e00a      	b.n	8007686 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007670:	f7fd ff88 	bl	8005584 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	; 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e105      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007686:	f7ff fb38 	bl	8006cfa <LL_RCC_LSE_IsReady>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0ef      	beq.n	8007670 <HAL_RCC_OscConfig+0x488>
 8007690:	e013      	b.n	80076ba <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007692:	f7fd ff77 	bl	8005584 <HAL_GetTick>
 8007696:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007698:	e00a      	b.n	80076b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800769a:	f7fd ff73 	bl	8005584 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e0f0      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80076b0:	f7ff fb23 	bl	8006cfa <LL_RCC_LSE_IsReady>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ef      	bne.n	800769a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d02c      	beq.n	8007720 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d014      	beq.n	80076f8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076ce:	f7ff fa9c 	bl	8006c0a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d2:	f7fd ff57 	bl	8005584 <HAL_GetTick>
 80076d6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076da:	f7fd ff53 	bl	8005584 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e0d2      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80076ec:	f7ff faaf 	bl	8006c4e <LL_RCC_HSI48_IsReady>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f1      	beq.n	80076da <HAL_RCC_OscConfig+0x4f2>
 80076f6:	e013      	b.n	8007720 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076f8:	f7ff fa98 	bl	8006c2c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fc:	f7fd ff42 	bl	8005584 <HAL_GetTick>
 8007700:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007704:	f7fd ff3e 	bl	8005584 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0bd      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007716:	f7ff fa9a 	bl	8006c4e <LL_RCC_HSI48_IsReady>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f1      	bne.n	8007704 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80b3 	beq.w	8007890 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800772a:	f7ff fbf8 	bl	8006f1e <LL_RCC_GetSysClkSource>
 800772e:	4603      	mov	r3, r0
 8007730:	2b0c      	cmp	r3, #12
 8007732:	d076      	beq.n	8007822 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	2b02      	cmp	r3, #2
 800773a:	d14b      	bne.n	80077d4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773c:	f7ff fca5 	bl	800708a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fd ff20 	bl	8005584 <HAL_GetTick>
 8007744:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007748:	f7fd ff1c 	bl	8005584 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e09b      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800775a:	f7ff fca5 	bl	80070a8 <LL_RCC_PLL_IsReady>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f1      	bne.n	8007748 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	4b4d      	ldr	r3, [pc, #308]	; (80078a0 <HAL_RCC_OscConfig+0x6b8>)
 800776c:	4013      	ands	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007776:	4311      	orrs	r1, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800777c:	0212      	lsls	r2, r2, #8
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007784:	4311      	orrs	r1, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800778a:	4311      	orrs	r1, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007790:	430a      	orrs	r2, r1
 8007792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007796:	4313      	orrs	r3, r2
 8007798:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800779a:	f7ff fc67 	bl	800706c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800779e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ae:	f7fd fee9 	bl	8005584 <HAL_GetTick>
 80077b2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b6:	f7fd fee5 	bl	8005584 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e064      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80077c8:	f7ff fc6e 	bl	80070a8 <LL_RCC_PLL_IsReady>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f1      	beq.n	80077b6 <HAL_RCC_OscConfig+0x5ce>
 80077d2:	e05d      	b.n	8007890 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077d4:	f7ff fc59 	bl	800708a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80077d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80077e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80077f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fa:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7fd fec2 	bl	8005584 <HAL_GetTick>
 8007800:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007804:	f7fd febe 	bl	8005584 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e03d      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007816:	f7ff fc47 	bl	80070a8 <LL_RCC_PLL_IsReady>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f1      	bne.n	8007804 <HAL_RCC_OscConfig+0x61c>
 8007820:	e036      	b.n	8007890 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e031      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800782e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f003 0203 	and.w	r2, r3, #3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	429a      	cmp	r2, r3
 8007842:	d123      	bne.n	800788c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800784e:	429a      	cmp	r2, r3
 8007850:	d11c      	bne.n	800788c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800785e:	429a      	cmp	r2, r3
 8007860:	d114      	bne.n	800788c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800786c:	429a      	cmp	r2, r3
 800786e:	d10d      	bne.n	800788c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800787a:	429a      	cmp	r2, r3
 800787c:	d106      	bne.n	800788c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d001      	beq.n	8007890 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	372c      	adds	r7, #44	; 0x2c
 8007896:	46bd      	mov	sp, r7
 8007898:	bd90      	pop	{r4, r7, pc}
 800789a:	bf00      	nop
 800789c:	58000400 	.word	0x58000400
 80078a0:	11c1808c 	.word	0x11c1808c

080078a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e12a      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078b8:	4b97      	ldr	r3, [pc, #604]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d91b      	bls.n	80078fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078c6:	4b94      	ldr	r3, [pc, #592]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f023 0207 	bic.w	r2, r3, #7
 80078ce:	4992      	ldr	r1, [pc, #584]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fd fe55 	bl	8005584 <HAL_GetTick>
 80078da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078dc:	e008      	b.n	80078f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80078de:	f7fd fe51 	bl	8005584 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e10e      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078f0:	4b89      	ldr	r3, [pc, #548]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d1ef      	bne.n	80078de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fb11 	bl	8006f36 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007914:	f7fd fe36 	bl	8005584 <HAL_GetTick>
 8007918:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800791c:	f7fd fe32 	bl	8005584 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e0ef      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800792e:	f7ff fbfe 	bl	800712e <LL_RCC_IsActiveFlag_HPRE>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0f1      	beq.n	800791c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fb08 	bl	8006f5e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800794e:	f7fd fe19 	bl	8005584 <HAL_GetTick>
 8007952:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007954:	e008      	b.n	8007968 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007956:	f7fd fe15 	bl	8005584 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e0d2      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007968:	f7ff fbf3 	bl	8007152 <LL_RCC_IsActiveFlag_C2HPRE>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f1      	beq.n	8007956 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fb01 	bl	8006f8a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007988:	f7fd fdfc 	bl	8005584 <HAL_GetTick>
 800798c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007990:	f7fd fdf8 	bl	8005584 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e0b5      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80079a2:	f7ff fbe9 	bl	8007178 <LL_RCC_IsActiveFlag_SHDHPRE>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f1      	beq.n	8007990 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d016      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fafb 	bl	8006fb8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079c2:	f7fd fddf 	bl	8005584 <HAL_GetTick>
 80079c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079c8:	e008      	b.n	80079dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80079ca:	f7fd fddb 	bl	8005584 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e098      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80079dc:	f7ff fbdf 	bl	800719e <LL_RCC_IsActiveFlag_PPRE1>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0f1      	beq.n	80079ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d017      	beq.n	8007a22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff faf1 	bl	8006fe0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079fe:	f7fd fdc1 	bl	8005584 <HAL_GetTick>
 8007a02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a04:	e008      	b.n	8007a18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a06:	f7fd fdbd 	bl	8005584 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e07a      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a18:	f7ff fbd3 	bl	80071c2 <LL_RCC_IsActiveFlag_PPRE2>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f1      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d043      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d106      	bne.n	8007a44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007a36:	f7ff f891 	bl	8006b5c <LL_RCC_HSE_IsReady>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d11e      	bne.n	8007a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e064      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d106      	bne.n	8007a5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007a4c:	f7ff fb2c 	bl	80070a8 <LL_RCC_PLL_IsReady>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d113      	bne.n	8007a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e059      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007a62:	f7ff f9f9 	bl	8006e58 <LL_RCC_MSI_IsReady>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d108      	bne.n	8007a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e04e      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007a70:	f7ff f8a4 	bl	8006bbc <LL_RCC_HSI_IsReady>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e047      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fa37 	bl	8006ef6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a88:	f7fd fd7c 	bl	8005584 <HAL_GetTick>
 8007a8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8e:	e00a      	b.n	8007aa6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a90:	f7fd fd78 	bl	8005584 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e033      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aa6:	f7ff fa3a 	bl	8006f1e <LL_RCC_GetSysClkSource>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d1ec      	bne.n	8007a90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d21b      	bcs.n	8007afc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f023 0207 	bic.w	r2, r3, #7
 8007acc:	4912      	ldr	r1, [pc, #72]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad4:	f7fd fd56 	bl	8005584 <HAL_GetTick>
 8007ad8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007adc:	f7fd fd52 	bl	8005584 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e00f      	b.n	8007b0e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aee:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <HAL_RCC_ClockConfig+0x274>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d1ef      	bne.n	8007adc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007afc:	f7fa fa9a 	bl	8002034 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007b00:	f7fd fd4c 	bl	800559c <HAL_GetTickPrio>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd fcf0 	bl	80054ec <HAL_InitTick>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	58004000 	.word	0x58004000

08007b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b22:	f7ff f9fc 	bl	8006f1e <LL_RCC_GetSysClkSource>
 8007b26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007b2e:	f7ff f9b8 	bl	8006ea2 <LL_RCC_MSI_GetRange>
 8007b32:	4603      	mov	r3, r0
 8007b34:	091b      	lsrs	r3, r3, #4
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e04a      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d102      	bne.n	8007b50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b4a:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	e044      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d10a      	bne.n	8007b6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007b56:	f7fe ffb3 	bl	8006ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007b60:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e039      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007b66:	4b21      	ldr	r3, [pc, #132]	; (8007bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e036      	b.n	8007bda <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007b6c:	f7ff fad3 	bl	8007116 <LL_RCC_PLL_GetMainSource>
 8007b70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d002      	beq.n	8007b7e <HAL_RCC_GetSysClockFreq+0x62>
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCC_GetSysClockFreq+0x68>
 8007b7c:	e00d      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b80:	60bb      	str	r3, [r7, #8]
        break;
 8007b82:	e015      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007b84:	f7fe ff9c 	bl	8006ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d102      	bne.n	8007b94 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b90:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007b92:	e00d      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b96:	60bb      	str	r3, [r7, #8]
        break;
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007b9a:	f7ff f982 	bl	8006ea2 <LL_RCC_MSI_GetRange>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	091b      	lsrs	r3, r3, #4
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	4a0f      	ldr	r2, [pc, #60]	; (8007be4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	60bb      	str	r3, [r7, #8]
        break;
 8007bae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007bb0:	f7ff fa8c 	bl	80070cc <LL_RCC_PLL_GetN>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	fb03 f402 	mul.w	r4, r3, r2
 8007bbc:	f7ff fa9f 	bl	80070fe <LL_RCC_PLL_GetDivider>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	091b      	lsrs	r3, r3, #4
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	fbb4 f4f3 	udiv	r4, r4, r3
 8007bca:	f7ff fa8c 	bl	80070e6 <LL_RCC_PLL_GetR>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	0f5b      	lsrs	r3, r3, #29
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	fbb4 f3f3 	udiv	r3, r4, r3
 8007bd8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007bda:	68fb      	ldr	r3, [r7, #12]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	0800dd50 	.word	0x0800dd50
 8007be8:	00f42400 	.word	0x00f42400
 8007bec:	01e84800 	.word	0x01e84800

08007bf0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bf0:	b598      	push	{r3, r4, r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007bf4:	f7ff ff92 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	f7ff fa05 	bl	8007008 <LL_RCC_GetAHBPrescaler>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	091b      	lsrs	r3, r3, #4
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	4a03      	ldr	r2, [pc, #12]	; (8007c14 <HAL_RCC_GetHCLKFreq+0x24>)
 8007c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd98      	pop	{r3, r4, r7, pc}
 8007c14:	0800dcf0 	.word	0x0800dcf0

08007c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c18:	b598      	push	{r3, r4, r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007c1c:	f7ff ffe8 	bl	8007bf0 <HAL_RCC_GetHCLKFreq>
 8007c20:	4604      	mov	r4, r0
 8007c22:	f7ff fa0b 	bl	800703c <LL_RCC_GetAPB1Prescaler>
 8007c26:	4603      	mov	r3, r0
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd98      	pop	{r3, r4, r7, pc}
 8007c40:	0800dd30 	.word	0x0800dd30

08007c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c44:	b598      	push	{r3, r4, r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007c48:	f7ff ffd2 	bl	8007bf0 <HAL_RCC_GetHCLKFreq>
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	f7ff fa01 	bl	8007054 <LL_RCC_GetAPB2Prescaler>
 8007c52:	4603      	mov	r3, r0
 8007c54:	0adb      	lsrs	r3, r3, #11
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	bd98      	pop	{r3, r4, r7, pc}
 8007c6c:	0800dd30 	.word	0x0800dd30

08007c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2bb0      	cmp	r3, #176	; 0xb0
 8007c7c:	d903      	bls.n	8007c86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e007      	b.n	8007c96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	091b      	lsrs	r3, r3, #4
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	4a11      	ldr	r2, [pc, #68]	; (8007cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007c96:	f7ff f9c3 	bl	8007020 <LL_RCC_GetAHB4Prescaler>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	4a0d      	ldr	r2, [pc, #52]	; (8007cd8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb8:	0c9c      	lsrs	r4, r3, #18
 8007cba:	f7fe fef3 	bl	8006aa4 <HAL_PWREx_GetVoltageRange>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f80c 	bl	8007ce0 <RCC_SetFlashLatency>
 8007cc8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd90      	pop	{r4, r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	0800dd50 	.word	0x0800dd50
 8007cd8:	0800dcf0 	.word	0x0800dcf0
 8007cdc:	431bde83 	.word	0x431bde83

08007ce0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	b093      	sub	sp, #76	; 0x4c
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007cea:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <RCC_SetFlashLatency+0xf0>)
 8007cec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007cf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007cf6:	4a37      	ldr	r2, [pc, #220]	; (8007dd4 <RCC_SetFlashLatency+0xf4>)
 8007cf8:	f107 031c 	add.w	r3, r7, #28
 8007cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8007cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007d02:	4b35      	ldr	r3, [pc, #212]	; (8007dd8 <RCC_SetFlashLatency+0xf8>)
 8007d04:	f107 040c 	add.w	r4, r7, #12
 8007d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007d0e:	2300      	movs	r3, #0
 8007d10:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d18:	d11c      	bne.n	8007d54 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1e:	e015      	b.n	8007d4c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007d28:	4413      	add	r3, r2
 8007d2a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d808      	bhi.n	8007d46 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007d44:	e022      	b.n	8007d8c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d48:	3301      	adds	r3, #1
 8007d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d9e6      	bls.n	8007d20 <RCC_SetFlashLatency+0x40>
 8007d52:	e01b      	b.n	8007d8c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007d54:	2300      	movs	r3, #0
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e015      	b.n	8007d86 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007d62:	4413      	add	r3, r2
 8007d64:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d808      	bhi.n	8007d80 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007d76:	4413      	add	r3, r2
 8007d78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007d7c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007d7e:	e005      	b.n	8007d8c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	3301      	adds	r3, #1
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d9e6      	bls.n	8007d5a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007d8c:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <RCC_SetFlashLatency+0xfc>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f023 0207 	bic.w	r2, r3, #7
 8007d94:	4911      	ldr	r1, [pc, #68]	; (8007ddc <RCC_SetFlashLatency+0xfc>)
 8007d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d9c:	f7fd fbf2 	bl	8005584 <HAL_GetTick>
 8007da0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007da2:	e008      	b.n	8007db6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007da4:	f7fd fbee 	bl	8005584 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e007      	b.n	8007dc6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <RCC_SetFlashLatency+0xfc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d1ef      	bne.n	8007da4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	374c      	adds	r7, #76	; 0x4c
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd90      	pop	{r4, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	0800dc7c 	.word	0x0800dc7c
 8007dd4:	0800dc8c 	.word	0x0800dc8c
 8007dd8:	0800dc98 	.word	0x0800dc98
 8007ddc:	58004000 	.word	0x58004000

08007de0 <LL_RCC_LSE_IsEnabled>:
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <LL_RCC_LSE_IsEnabled+0x18>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <LL_RCC_LSE_IsEnabled+0x1a>
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <LL_RCC_LSE_IsReady>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d101      	bne.n	8007e1c <LL_RCC_LSE_IsReady+0x18>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <LL_RCC_LSE_IsReady+0x1a>
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <LL_RCC_SetRFWKPClockSource>:
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <LL_RCC_SetSMPSClockSource>:
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	f023 0203 	bic.w	r2, r3, #3
 8007e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <LL_RCC_SetSMPSPrescaler>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <LL_RCC_SetUSARTClockSource>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb4:	f023 0203 	bic.w	r2, r3, #3
 8007eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <LL_RCC_SetLPUARTClockSource>:
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_RCC_SetI2CClockSource>:
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <LL_RCC_SetLPTIMClockSource>:
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	0c1b      	lsrs	r3, r3, #16
 8007f4a:	041b      	lsls	r3, r3, #16
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	401a      	ands	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <LL_RCC_SetSAIClockSource>:
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <LL_RCC_SetRNGClockSource>:
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <LL_RCC_SetCLK48ClockSource>:
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <LL_RCC_SetUSBClockSource>:
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff ffe3 	bl	8007fc2 <LL_RCC_SetCLK48ClockSource>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <LL_RCC_SetADCClockSource>:
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800800c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <LL_RCC_SetRTCClockSource>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_RCC_GetRTCClockSource>:
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008068:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800806c:	4618      	mov	r0, r3
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <LL_RCC_ForceBackupDomainReset>:
{
 8008076:	b480      	push	{r7}
 8008078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800807a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800808a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800808e:	bf00      	nop
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800809c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <LL_RCC_PLLSAI1_Enable>:
{
 80080ba:	b480      	push	{r7}
 80080bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80080be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080cc:	6013      	str	r3, [r2, #0]
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <LL_RCC_PLLSAI1_Disable>:
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80080dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ea:	6013      	str	r3, [r2, #0]
}
 80080ec:	bf00      	nop
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <LL_RCC_PLLSAI1_IsReady>:
{
 80080f6:	b480      	push	{r7}
 80080f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80080fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008108:	d101      	bne.n	800810e <LL_RCC_PLLSAI1_IsReady+0x18>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b088      	sub	sp, #32
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008122:	2300      	movs	r3, #0
 8008124:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008126:	2300      	movs	r3, #0
 8008128:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d033      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800813e:	d00c      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008144:	d802      	bhi.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d010      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800814a:	e017      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800814c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008150:	d017      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008156:	d016      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008158:	e010      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800815a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008168:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800816a:	e00d      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f947 	bl	8008404 <RCCEx_PLLSAI1_ConfigNP>
 8008176:	4603      	mov	r3, r0
 8008178:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800817a:	e005      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	77fb      	strb	r3, [r7, #31]
        break;
 8008180:	e002      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008182:	bf00      	nop
 8008184:	e000      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008188:	7ffb      	ldrb	r3, [r7, #31]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fee9 	bl	8007f6a <LL_RCC_SetSAIClockSource>
 8008198:	e001      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d046      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80081aa:	f7ff ff57 	bl	800805c <LL_RCC_GetRTCClockSource>
 80081ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d03c      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80081ba:	f7fe fc63 	bl	8006a84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ff31 	bl	8008030 <LL_RCC_SetRTCClockSource>
 80081ce:	e02e      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80081d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80081da:	f7ff ff4c 	bl	8008076 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80081de:	f7ff ff5b 	bl	8008098 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80081f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80081fa:	f7ff fdf1 	bl	8007de0 <LL_RCC_LSE_IsEnabled>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b01      	cmp	r3, #1
 8008202:	d114      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008204:	f7fd f9be 	bl	8005584 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800820a:	e00b      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800820c:	f7fd f9ba 	bl	8005584 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	f241 3288 	movw	r2, #5000	; 0x1388
 800821a:	4293      	cmp	r3, r2
 800821c:	d902      	bls.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	77fb      	strb	r3, [r7, #31]
              break;
 8008222:	e004      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008224:	f7ff fdee 	bl	8007e04 <LL_RCC_LSE_IsReady>
 8008228:	4603      	mov	r3, r0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d1ee      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800822e:	7ffb      	ldrb	r3, [r7, #31]
 8008230:	77bb      	strb	r3, [r7, #30]
 8008232:	e001      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008234:	7ffb      	ldrb	r3, [r7, #31]
 8008236:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fe2b 	bl	8007ea4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fe36 	bl	8007ed0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fe5e 	bl	8007f36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fe53 	bl	8007f36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d004      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fe2b 	bl	8007efc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fe20 	bl	8007efc <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d022      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fe8e 	bl	8007fee <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082da:	d107      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80082dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082f4:	d10b      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f8dd 	bl	80084ba <RCCEx_PLLSAI1_ConfigNQ>
 8008300:	4603      	mov	r3, r0
 8008302:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008304:	7ffb      	ldrb	r3, [r7, #31]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800830a:	7ffb      	ldrb	r3, [r7, #31]
 800830c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008316:	2b00      	cmp	r3, #0
 8008318:	d02b      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008322:	d008      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800832c:	d003      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fe2b 	bl	8007f96 <LL_RCC_SetRNGClockSource>
 8008340:	e00a      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	2000      	movs	r0, #0
 800834e:	f7ff fe22 	bl	8007f96 <LL_RCC_SetRNGClockSource>
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff fe35 	bl	8007fc2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008360:	d107      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800836c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008370:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800837a:	2b00      	cmp	r3, #0
 800837c:	d022      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fe3e 	bl	8008004 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800839c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083aa:	d10b      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f8dd 	bl	8008570 <RCCEx_PLLSAI1_ConfigNR>
 80083b6:	4603      	mov	r3, r0
 80083b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80083ba:	7ffb      	ldrb	r3, [r7, #31]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 80083c0:	7ffb      	ldrb	r3, [r7, #31]
 80083c2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff fd27 	bl	8007e28 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fd46 	bl	8007e7c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fd2d 	bl	8007e54 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80083fa:	7fbb      	ldrb	r3, [r7, #30]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008410:	f7ff fe62 	bl	80080d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008414:	f7fd f8b6 	bl	8005584 <HAL_GetTick>
 8008418:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800841a:	e009      	b.n	8008430 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800841c:	f7fd f8b2 	bl	8005584 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d902      	bls.n	8008430 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	73fb      	strb	r3, [r7, #15]
      break;
 800842e:	e004      	b.n	800843a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008430:	f7ff fe61 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f0      	bne.n	800841c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d137      	bne.n	80084b0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008454:	4313      	orrs	r3, r2
 8008456:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800846a:	4313      	orrs	r3, r2
 800846c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800846e:	f7ff fe24 	bl	80080ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7fd f887 	bl	8005584 <HAL_GetTick>
 8008476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008478:	e009      	b.n	800848e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800847a:	f7fd f883 	bl	8005584 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d902      	bls.n	800848e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	73fb      	strb	r3, [r7, #15]
        break;
 800848c:	e004      	b.n	8008498 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800848e:	f7ff fe32 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 8008492:	4603      	mov	r3, r0
 8008494:	2b01      	cmp	r3, #1
 8008496:	d1f0      	bne.n	800847a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d108      	bne.n	80084b0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800849e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084ac:	4313      	orrs	r3, r2
 80084ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80084c6:	f7ff fe07 	bl	80080d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084ca:	f7fd f85b 	bl	8005584 <HAL_GetTick>
 80084ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80084d0:	e009      	b.n	80084e6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084d2:	f7fd f857 	bl	8005584 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d902      	bls.n	80084e6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	73fb      	strb	r3, [r7, #15]
      break;
 80084e4:	e004      	b.n	80084f0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80084e6:	f7ff fe06 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f0      	bne.n	80084d2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d137      	bne.n	8008566 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800850e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008520:	4313      	orrs	r3, r2
 8008522:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008524:	f7ff fdc9 	bl	80080ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008528:	f7fd f82c 	bl	8005584 <HAL_GetTick>
 800852c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800852e:	e009      	b.n	8008544 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008530:	f7fd f828 	bl	8005584 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d902      	bls.n	8008544 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	73fb      	strb	r3, [r7, #15]
        break;
 8008542:	e004      	b.n	800854e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008544:	f7ff fdd7 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 8008548:	4603      	mov	r3, r0
 800854a:	2b01      	cmp	r3, #1
 800854c:	d1f0      	bne.n	8008530 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d108      	bne.n	8008566 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008562:	4313      	orrs	r3, r2
 8008564:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800857c:	f7ff fdac 	bl	80080d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008580:	f7fd f800 	bl	8005584 <HAL_GetTick>
 8008584:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008586:	e009      	b.n	800859c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008588:	f7fc fffc 	bl	8005584 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d902      	bls.n	800859c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	73fb      	strb	r3, [r7, #15]
      break;
 800859a:	e004      	b.n	80085a6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800859c:	f7ff fdab 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d137      	bne.n	800861c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80085ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085c0:	4313      	orrs	r3, r2
 80085c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80085c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d6:	4313      	orrs	r3, r2
 80085d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80085da:	f7ff fd6e 	bl	80080ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085de:	f7fc ffd1 	bl	8005584 <HAL_GetTick>
 80085e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80085e4:	e009      	b.n	80085fa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085e6:	f7fc ffcd 	bl	8005584 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d902      	bls.n	80085fa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	73fb      	strb	r3, [r7, #15]
        break;
 80085f8:	e004      	b.n	8008604 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80085fa:	f7ff fd7c 	bl	80080f6 <LL_RCC_PLLSAI1_IsReady>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b01      	cmp	r3, #1
 8008602:	d1f0      	bne.n	80085e6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800860a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800860e:	691a      	ldr	r2, [r3, #16]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008618:	4313      	orrs	r3, r2
 800861a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e090      	b.n	800875a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7f9 fa1b 	bl	8001a88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2202      	movs	r2, #2
 8008656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	22ca      	movs	r2, #202	; 0xca
 8008660:	625a      	str	r2, [r3, #36]	; 0x24
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2253      	movs	r2, #83	; 0x53
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f89f 	bl	80087ae <RTC_EnterInitMode>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	22ff      	movs	r2, #255	; 0xff
 800867c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e067      	b.n	800875a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6899      	ldr	r1, [r3, #8]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68d2      	ldr	r2, [r2, #12]
 80086c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6919      	ldr	r1, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	041a      	lsls	r2, r3, #16
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086e8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0203 	bic.w	r2, r2, #3
 80086f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d113      	bne.n	8008748 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f81e 	bl	8008762 <HAL_RTC_WaitForSynchro>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00d      	beq.n	8008748 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	22ff      	movs	r2, #255	; 0xff
 8008732:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2204      	movs	r2, #4
 8008738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e008      	b.n	800875a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	22ff      	movs	r2, #255	; 0xff
 800874e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008758:	2300      	movs	r3, #0
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008778:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800877a:	f7fc ff03 	bl	8005584 <HAL_GetTick>
 800877e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008780:	e009      	b.n	8008796 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008782:	f7fc feff 	bl	8005584 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008790:	d901      	bls.n	8008796 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e007      	b.n	80087a6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0ee      	beq.n	8008782 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d119      	bne.n	80087f8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80087ce:	f7fc fed9 	bl	8005584 <HAL_GetTick>
 80087d2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80087d4:	e009      	b.n	80087ea <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80087d6:	f7fc fed5 	bl	8005584 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087e4:	d901      	bls.n	80087ea <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e007      	b.n	80087fa <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0ee      	beq.n	80087d6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800881a:	2302      	movs	r3, #2
 800881c:	e0a8      	b.n	8008970 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	22ca      	movs	r2, #202	; 0xca
 8008834:	625a      	str	r2, [r3, #36]	; 0x24
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2253      	movs	r2, #83	; 0x53
 800883c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008848:	2b00      	cmp	r3, #0
 800884a:	d020      	beq.n	800888e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 800884c:	f7fc fe9a 	bl	8005584 <HAL_GetTick>
 8008850:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008852:	e015      	b.n	8008880 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008854:	f7fc fe96 	bl	8005584 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008862:	d90d      	bls.n	8008880 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	22ff      	movs	r2, #255	; 0xff
 800886a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2203      	movs	r2, #3
 8008870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e077      	b.n	8008970 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e2      	bne.n	8008854 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800889c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80088ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80088b0:	f7fc fe68 	bl	8005584 <HAL_GetTick>
 80088b4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80088b6:	e015      	b.n	80088e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088b8:	f7fc fe64 	bl	8005584 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c6:	d90d      	bls.n	80088e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	22ff      	movs	r2, #255	; 0xff
 80088ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2203      	movs	r2, #3
 80088d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e045      	b.n	8008970 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0e2      	beq.n	80088b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0207 	bic.w	r2, r2, #7
 8008908:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6899      	ldr	r1, [r3, #8]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	430a      	orrs	r2, r1
 8008918:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800891a:	4b17      	ldr	r3, [pc, #92]	; (8008978 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800891c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008920:	4a15      	ldr	r2, [pc, #84]	; (8008978 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008926:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a12      	ldr	r2, [pc, #72]	; (8008978 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008934:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008944:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008954:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	22ff      	movs	r2, #255	; 0xff
 800895c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	58000800 	.word	0x58000800

0800897c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00b      	beq.n	80089aa <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f818 	bl	80089c8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80089a8:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80089ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80089b0:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	58000800 	.word	0x58000800

080089c8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e01d      	b.n	8008a2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d106      	bne.n	8008a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f9 f85a 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f000 f97c 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <HAL_TIM_Base_Start_IT+0x50>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b06      	cmp	r3, #6
 8008a5c:	d00b      	beq.n	8008a76 <HAL_TIM_Base_Start_IT+0x42>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a64:	d007      	beq.n	8008a76 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	00010007 	.word	0x00010007

08008a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d122      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0202 	mvn.w	r2, #2
 8008ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f905 	bl	8008cda <HAL_TIM_IC_CaptureCallback>
 8008ad0:	e005      	b.n	8008ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8f7 	bl	8008cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f908 	bl	8008cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d122      	bne.n	8008b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d11b      	bne.n	8008b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0204 	mvn.w	r2, #4
 8008b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8db 	bl	8008cda <HAL_TIM_IC_CaptureCallback>
 8008b24:	e005      	b.n	8008b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8cd 	bl	8008cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f8de 	bl	8008cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b08      	cmp	r3, #8
 8008b44:	d122      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d11b      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0208 	mvn.w	r2, #8
 8008b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2204      	movs	r2, #4
 8008b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f8b1 	bl	8008cda <HAL_TIM_IC_CaptureCallback>
 8008b78:	e005      	b.n	8008b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8a3 	bl	8008cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f8b4 	bl	8008cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0310 	and.w	r3, r3, #16
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	d122      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d11b      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0210 	mvn.w	r2, #16
 8008bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f887 	bl	8008cda <HAL_TIM_IC_CaptureCallback>
 8008bcc:	e005      	b.n	8008bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f879 	bl	8008cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f88a 	bl	8008cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d10e      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d107      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0201 	mvn.w	r2, #1
 8008c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7f8 fe28 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c16:	2b80      	cmp	r3, #128	; 0x80
 8008c18:	d10e      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c24:	2b80      	cmp	r3, #128	; 0x80
 8008c26:	d107      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f8de 	bl	8008df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c46:	d10e      	bne.n	8008c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b80      	cmp	r3, #128	; 0x80
 8008c54:	d107      	bne.n	8008c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8d1 	bl	8008e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c70:	2b40      	cmp	r3, #64	; 0x40
 8008c72:	d10e      	bne.n	8008c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d107      	bne.n	8008c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f838 	bl	8008d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d10e      	bne.n	8008cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d107      	bne.n	8008cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f06f 0220 	mvn.w	r2, #32
 8008cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f891 	bl	8008de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a2a      	ldr	r2, [pc, #168]	; (8008dd4 <TIM_Base_SetConfig+0xbc>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_Base_SetConfig+0x20>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d108      	bne.n	8008d4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <TIM_Base_SetConfig+0xbc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00b      	beq.n	8008d6a <TIM_Base_SetConfig+0x52>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d58:	d007      	beq.n	8008d6a <TIM_Base_SetConfig+0x52>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1e      	ldr	r2, [pc, #120]	; (8008dd8 <TIM_Base_SetConfig+0xc0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_Base_SetConfig+0x52>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1d      	ldr	r2, [pc, #116]	; (8008ddc <TIM_Base_SetConfig+0xc4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d108      	bne.n	8008d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a0c      	ldr	r2, [pc, #48]	; (8008dd4 <TIM_Base_SetConfig+0xbc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_Base_SetConfig+0xa0>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0b      	ldr	r2, [pc, #44]	; (8008dd8 <TIM_Base_SetConfig+0xc0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0xa0>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <TIM_Base_SetConfig+0xc4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40014400 	.word	0x40014400
 8008ddc:	40014800 	.word	0x40014800

08008de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <LL_RCC_GetUSARTClockSource>:
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4013      	ands	r3, r2
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <LL_RCC_GetLPUARTClockSource>:
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4013      	ands	r3, r2
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e042      	b.n	8008ef4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7f8 fe4b 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2224      	movs	r2, #36	; 0x24
 8008e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0201 	bic.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa4e 	bl	8009340 <UART_SetConfig>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e022      	b.n	8008ef4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 faa6 	bl	800a408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 fb2d 	bl	800a54c <UART_CheckIdleState>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	f040 8083 	bne.w	800901e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_UART_Transmit+0x28>
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e07b      	b.n	8009020 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_UART_Transmit+0x3a>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e074      	b.n	8009020 <HAL_UART_Transmit+0x124>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2221      	movs	r2, #33	; 0x21
 8008f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008f4e:	f7fc fb19 	bl	8005584 <HAL_GetTick>
 8008f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6c:	d108      	bne.n	8008f80 <HAL_UART_Transmit+0x84>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e003      	b.n	8008f88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008f90:	e02c      	b.n	8008fec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 fb1d 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e039      	b.n	8009020 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e007      	b.n	8008fda <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1cc      	bne.n	8008f92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f001 faea 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e006      	b.n	8009020 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2220      	movs	r2, #32
 8009016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	f640 030f 	movw	r3, #2063	; 0x80f
 800904e:	4013      	ands	r3, r2
 8009050:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d118      	bne.n	800908a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d013      	beq.n	800908a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 8145 	beq.w	800930a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
      }
      return;
 8009088:	e13f      	b.n	800930a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80e8 	beq.w	8009262 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4ba1      	ldr	r3, [pc, #644]	; (800931c <HAL_UART_IRQHandler+0x2f4>)
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d105      	bne.n	80090a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	4ba0      	ldr	r3, [pc, #640]	; (8009320 <HAL_UART_IRQHandler+0x2f8>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 80dd 	beq.w	8009262 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d010      	beq.n	80090d4 <HAL_UART_IRQHandler+0xac>
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2201      	movs	r2, #1
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f043 0201 	orr.w	r2, r3, #1
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <HAL_UART_IRQHandler+0xd8>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2202      	movs	r2, #2
 80090ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f6:	f043 0204 	orr.w	r2, r3, #4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	d010      	beq.n	800912c <HAL_UART_IRQHandler+0x104>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2204      	movs	r2, #4
 800911a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009122:	f043 0202 	orr.w	r2, r3, #2
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d015      	beq.n	8009162 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4b76      	ldr	r3, [pc, #472]	; (800931c <HAL_UART_IRQHandler+0x2f4>)
 8009144:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2208      	movs	r2, #8
 8009150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009158:	f043 0208 	orr.w	r2, r3, #8
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009168:	2b00      	cmp	r3, #0
 800916a:	d011      	beq.n	8009190 <HAL_UART_IRQHandler+0x168>
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00c      	beq.n	8009190 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800917e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009186:	f043 0220 	orr.w	r2, r3, #32
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80b9 	beq.w	800930e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d011      	beq.n	80091ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	d004      	beq.n	80091ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d031      	beq.n	800924e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fa76 	bl	800a6dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d123      	bne.n	8009246 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009212:	2b00      	cmp	r3, #0
 8009214:	d013      	beq.n	800923e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800921a:	4a42      	ldr	r2, [pc, #264]	; (8009324 <HAL_UART_IRQHandler+0x2fc>)
 800921c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009222:	4618      	mov	r0, r3
 8009224:	f7fc fb5d 	bl	80058e2 <HAL_DMA_Abort_IT>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	e00f      	b.n	800925e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f872 	bl	8009328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	e00b      	b.n	800925e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f86e 	bl	8009328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924c:	e007      	b.n	800925e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f86a 	bl	8009328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800925c:	e057      	b.n	800930e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800925e:	bf00      	nop
    return;
 8009260:	e055      	b.n	800930e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <HAL_UART_IRQHandler+0x260>
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d008      	beq.n	8009288 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800927e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fa7e 	bl	800a782 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009286:	e045      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b00      	cmp	r3, #0
 8009290:	d012      	beq.n	80092b8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d031      	beq.n	8009312 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
    }
    return;
 80092b6:	e02c      	b.n	8009312 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d008      	beq.n	80092d4 <HAL_UART_IRQHandler+0x2ac>
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fa3e 	bl	800a74e <UART_EndTransmit_IT>
    return;
 80092d2:	e01f      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_UART_IRQHandler+0x2c8>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fa5e 	bl	800a7aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ee:	e011      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00c      	beq.n	8009314 <HAL_UART_IRQHandler+0x2ec>
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da09      	bge.n	8009314 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 fa48 	bl	800a796 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009306:	bf00      	nop
 8009308:	e004      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
      return;
 800930a:	bf00      	nop
 800930c:	e002      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
    return;
 800930e:	bf00      	nop
 8009310:	e000      	b.n	8009314 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009312:	bf00      	nop
  }
}
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	10000001 	.word	0x10000001
 8009320:	04000120 	.word	0x04000120
 8009324:	0800a723 	.word	0x0800a723

08009328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	0000      	movs	r0, r0
	...

08009340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009340:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009344:	b08a      	sub	sp, #40	; 0x28
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	4313      	orrs	r3, r2
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009374:	4313      	orrs	r3, r2
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4ba4      	ldr	r3, [pc, #656]	; (8009610 <UART_SetConfig+0x2d0>)
 8009380:	4013      	ands	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009388:	430b      	orrs	r3, r1
 800938a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a99      	ldr	r2, [pc, #612]	; (8009614 <UART_SetConfig+0x2d4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d004      	beq.n	80093bc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b8:	4313      	orrs	r3, r2
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80093c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d0:	430b      	orrs	r3, r1
 80093d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	f023 010f 	bic.w	r1, r3, #15
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a8a      	ldr	r2, [pc, #552]	; (8009618 <UART_SetConfig+0x2d8>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d126      	bne.n	8009442 <UART_SetConfig+0x102>
 80093f4:	2003      	movs	r0, #3
 80093f6:	f7ff fd11 	bl	8008e1c <LL_RCC_GetUSARTClockSource>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d81b      	bhi.n	8009438 <UART_SetConfig+0xf8>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <UART_SetConfig+0xc8>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009419 	.word	0x08009419
 800940c:	08009429 	.word	0x08009429
 8009410:	08009421 	.word	0x08009421
 8009414:	08009431 	.word	0x08009431
 8009418:	2301      	movs	r3, #1
 800941a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800941e:	e042      	b.n	80094a6 <UART_SetConfig+0x166>
 8009420:	2302      	movs	r3, #2
 8009422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009426:	e03e      	b.n	80094a6 <UART_SetConfig+0x166>
 8009428:	2304      	movs	r3, #4
 800942a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800942e:	e03a      	b.n	80094a6 <UART_SetConfig+0x166>
 8009430:	2308      	movs	r3, #8
 8009432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009436:	e036      	b.n	80094a6 <UART_SetConfig+0x166>
 8009438:	2310      	movs	r3, #16
 800943a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800943e:	bf00      	nop
 8009440:	e031      	b.n	80094a6 <UART_SetConfig+0x166>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a73      	ldr	r2, [pc, #460]	; (8009614 <UART_SetConfig+0x2d4>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d129      	bne.n	80094a0 <UART_SetConfig+0x160>
 800944c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009450:	f7ff fcf4 	bl	8008e3c <LL_RCC_GetLPUARTClockSource>
 8009454:	4603      	mov	r3, r0
 8009456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800945a:	d014      	beq.n	8009486 <UART_SetConfig+0x146>
 800945c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009460:	d802      	bhi.n	8009468 <UART_SetConfig+0x128>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <UART_SetConfig+0x136>
 8009466:	e016      	b.n	8009496 <UART_SetConfig+0x156>
 8009468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800946c:	d007      	beq.n	800947e <UART_SetConfig+0x13e>
 800946e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009472:	d00c      	beq.n	800948e <UART_SetConfig+0x14e>
 8009474:	e00f      	b.n	8009496 <UART_SetConfig+0x156>
 8009476:	2300      	movs	r3, #0
 8009478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800947c:	e013      	b.n	80094a6 <UART_SetConfig+0x166>
 800947e:	2302      	movs	r3, #2
 8009480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009484:	e00f      	b.n	80094a6 <UART_SetConfig+0x166>
 8009486:	2304      	movs	r3, #4
 8009488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800948c:	e00b      	b.n	80094a6 <UART_SetConfig+0x166>
 800948e:	2308      	movs	r3, #8
 8009490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009494:	e007      	b.n	80094a6 <UART_SetConfig+0x166>
 8009496:	2310      	movs	r3, #16
 8009498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <UART_SetConfig+0x166>
 80094a0:	2310      	movs	r3, #16
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a5a      	ldr	r2, [pc, #360]	; (8009614 <UART_SetConfig+0x2d4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	f040 8428 	bne.w	8009d02 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	f200 8171 	bhi.w	800979e <UART_SetConfig+0x45e>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <UART_SetConfig+0x184>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	0800979f 	.word	0x0800979f
 80094cc:	0800958b 	.word	0x0800958b
 80094d0:	0800979f 	.word	0x0800979f
 80094d4:	0800964f 	.word	0x0800964f
 80094d8:	0800979f 	.word	0x0800979f
 80094dc:	0800979f 	.word	0x0800979f
 80094e0:	0800979f 	.word	0x0800979f
 80094e4:	080096f1 	.word	0x080096f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80094e8:	f7fe fb96 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d044      	beq.n	8009580 <UART_SetConfig+0x240>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d03e      	beq.n	800957c <UART_SetConfig+0x23c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	2b02      	cmp	r3, #2
 8009504:	d038      	beq.n	8009578 <UART_SetConfig+0x238>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	2b03      	cmp	r3, #3
 800950c:	d032      	beq.n	8009574 <UART_SetConfig+0x234>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	2b04      	cmp	r3, #4
 8009514:	d02c      	beq.n	8009570 <UART_SetConfig+0x230>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	2b05      	cmp	r3, #5
 800951c:	d026      	beq.n	800956c <UART_SetConfig+0x22c>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	2b06      	cmp	r3, #6
 8009524:	d020      	beq.n	8009568 <UART_SetConfig+0x228>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	2b07      	cmp	r3, #7
 800952c:	d01a      	beq.n	8009564 <UART_SetConfig+0x224>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	2b08      	cmp	r3, #8
 8009534:	d014      	beq.n	8009560 <UART_SetConfig+0x220>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	2b09      	cmp	r3, #9
 800953c:	d00e      	beq.n	800955c <UART_SetConfig+0x21c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b0a      	cmp	r3, #10
 8009544:	d008      	beq.n	8009558 <UART_SetConfig+0x218>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	2b0b      	cmp	r3, #11
 800954c:	d102      	bne.n	8009554 <UART_SetConfig+0x214>
 800954e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009552:	e016      	b.n	8009582 <UART_SetConfig+0x242>
 8009554:	2301      	movs	r3, #1
 8009556:	e014      	b.n	8009582 <UART_SetConfig+0x242>
 8009558:	2380      	movs	r3, #128	; 0x80
 800955a:	e012      	b.n	8009582 <UART_SetConfig+0x242>
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	e010      	b.n	8009582 <UART_SetConfig+0x242>
 8009560:	2320      	movs	r3, #32
 8009562:	e00e      	b.n	8009582 <UART_SetConfig+0x242>
 8009564:	2310      	movs	r3, #16
 8009566:	e00c      	b.n	8009582 <UART_SetConfig+0x242>
 8009568:	230c      	movs	r3, #12
 800956a:	e00a      	b.n	8009582 <UART_SetConfig+0x242>
 800956c:	230a      	movs	r3, #10
 800956e:	e008      	b.n	8009582 <UART_SetConfig+0x242>
 8009570:	2308      	movs	r3, #8
 8009572:	e006      	b.n	8009582 <UART_SetConfig+0x242>
 8009574:	2306      	movs	r3, #6
 8009576:	e004      	b.n	8009582 <UART_SetConfig+0x242>
 8009578:	2304      	movs	r3, #4
 800957a:	e002      	b.n	8009582 <UART_SetConfig+0x242>
 800957c:	2302      	movs	r3, #2
 800957e:	e000      	b.n	8009582 <UART_SetConfig+0x242>
 8009580:	2301      	movs	r3, #1
 8009582:	fbb2 f3f3 	udiv	r3, r2, r3
 8009586:	617b      	str	r3, [r7, #20]
        break;
 8009588:	e10c      	b.n	80097a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d05a      	beq.n	8009648 <UART_SetConfig+0x308>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	2b01      	cmp	r3, #1
 8009598:	d054      	beq.n	8009644 <UART_SetConfig+0x304>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d04e      	beq.n	8009640 <UART_SetConfig+0x300>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d048      	beq.n	800963c <UART_SetConfig+0x2fc>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d02c      	beq.n	800960c <UART_SetConfig+0x2cc>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d026      	beq.n	8009608 <UART_SetConfig+0x2c8>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b06      	cmp	r3, #6
 80095c0:	d020      	beq.n	8009604 <UART_SetConfig+0x2c4>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	2b07      	cmp	r3, #7
 80095c8:	d01a      	beq.n	8009600 <UART_SetConfig+0x2c0>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	d014      	beq.n	80095fc <UART_SetConfig+0x2bc>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d00e      	beq.n	80095f8 <UART_SetConfig+0x2b8>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b0a      	cmp	r3, #10
 80095e0:	d008      	beq.n	80095f4 <UART_SetConfig+0x2b4>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b0b      	cmp	r3, #11
 80095e8:	d102      	bne.n	80095f0 <UART_SetConfig+0x2b0>
 80095ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80095ee:	e02c      	b.n	800964a <UART_SetConfig+0x30a>
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <UART_SetConfig+0x2dc>)
 80095f2:	e02a      	b.n	800964a <UART_SetConfig+0x30a>
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <UART_SetConfig+0x2e0>)
 80095f6:	e028      	b.n	800964a <UART_SetConfig+0x30a>
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <UART_SetConfig+0x2e4>)
 80095fa:	e026      	b.n	800964a <UART_SetConfig+0x30a>
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <UART_SetConfig+0x2e8>)
 80095fe:	e024      	b.n	800964a <UART_SetConfig+0x30a>
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <UART_SetConfig+0x2ec>)
 8009602:	e022      	b.n	800964a <UART_SetConfig+0x30a>
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <UART_SetConfig+0x2f0>)
 8009606:	e020      	b.n	800964a <UART_SetConfig+0x30a>
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <UART_SetConfig+0x2f4>)
 800960a:	e01e      	b.n	800964a <UART_SetConfig+0x30a>
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <UART_SetConfig+0x2f8>)
 800960e:	e01c      	b.n	800964a <UART_SetConfig+0x30a>
 8009610:	cfff69f3 	.word	0xcfff69f3
 8009614:	40008000 	.word	0x40008000
 8009618:	40013800 	.word	0x40013800
 800961c:	00f42400 	.word	0x00f42400
 8009620:	0001e848 	.word	0x0001e848
 8009624:	0003d090 	.word	0x0003d090
 8009628:	0007a120 	.word	0x0007a120
 800962c:	000f4240 	.word	0x000f4240
 8009630:	00145855 	.word	0x00145855
 8009634:	00186a00 	.word	0x00186a00
 8009638:	001e8480 	.word	0x001e8480
 800963c:	4ba6      	ldr	r3, [pc, #664]	; (80098d8 <UART_SetConfig+0x598>)
 800963e:	e004      	b.n	800964a <UART_SetConfig+0x30a>
 8009640:	4ba6      	ldr	r3, [pc, #664]	; (80098dc <UART_SetConfig+0x59c>)
 8009642:	e002      	b.n	800964a <UART_SetConfig+0x30a>
 8009644:	4ba6      	ldr	r3, [pc, #664]	; (80098e0 <UART_SetConfig+0x5a0>)
 8009646:	e000      	b.n	800964a <UART_SetConfig+0x30a>
 8009648:	4ba6      	ldr	r3, [pc, #664]	; (80098e4 <UART_SetConfig+0x5a4>)
 800964a:	617b      	str	r3, [r7, #20]
        break;
 800964c:	e0aa      	b.n	80097a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800964e:	f7fe fa65 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 8009652:	4602      	mov	r2, r0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d044      	beq.n	80096e6 <UART_SetConfig+0x3a6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b01      	cmp	r3, #1
 8009662:	d03e      	beq.n	80096e2 <UART_SetConfig+0x3a2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	2b02      	cmp	r3, #2
 800966a:	d038      	beq.n	80096de <UART_SetConfig+0x39e>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b03      	cmp	r3, #3
 8009672:	d032      	beq.n	80096da <UART_SetConfig+0x39a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	2b04      	cmp	r3, #4
 800967a:	d02c      	beq.n	80096d6 <UART_SetConfig+0x396>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	2b05      	cmp	r3, #5
 8009682:	d026      	beq.n	80096d2 <UART_SetConfig+0x392>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	2b06      	cmp	r3, #6
 800968a:	d020      	beq.n	80096ce <UART_SetConfig+0x38e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	2b07      	cmp	r3, #7
 8009692:	d01a      	beq.n	80096ca <UART_SetConfig+0x38a>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	2b08      	cmp	r3, #8
 800969a:	d014      	beq.n	80096c6 <UART_SetConfig+0x386>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	2b09      	cmp	r3, #9
 80096a2:	d00e      	beq.n	80096c2 <UART_SetConfig+0x382>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b0a      	cmp	r3, #10
 80096aa:	d008      	beq.n	80096be <UART_SetConfig+0x37e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	2b0b      	cmp	r3, #11
 80096b2:	d102      	bne.n	80096ba <UART_SetConfig+0x37a>
 80096b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b8:	e016      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e014      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096be:	2380      	movs	r3, #128	; 0x80
 80096c0:	e012      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096c2:	2340      	movs	r3, #64	; 0x40
 80096c4:	e010      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096c6:	2320      	movs	r3, #32
 80096c8:	e00e      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096ca:	2310      	movs	r3, #16
 80096cc:	e00c      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096ce:	230c      	movs	r3, #12
 80096d0:	e00a      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096d2:	230a      	movs	r3, #10
 80096d4:	e008      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096d6:	2308      	movs	r3, #8
 80096d8:	e006      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096da:	2306      	movs	r3, #6
 80096dc:	e004      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096de:	2304      	movs	r3, #4
 80096e0:	e002      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e000      	b.n	80096e8 <UART_SetConfig+0x3a8>
 80096e6:	2301      	movs	r3, #1
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	617b      	str	r3, [r7, #20]
        break;
 80096ee:	e059      	b.n	80097a4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d04e      	beq.n	8009796 <UART_SetConfig+0x456>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d047      	beq.n	8009790 <UART_SetConfig+0x450>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	2b02      	cmp	r3, #2
 8009706:	d040      	beq.n	800978a <UART_SetConfig+0x44a>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	2b03      	cmp	r3, #3
 800970e:	d039      	beq.n	8009784 <UART_SetConfig+0x444>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	2b04      	cmp	r3, #4
 8009716:	d032      	beq.n	800977e <UART_SetConfig+0x43e>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	2b05      	cmp	r3, #5
 800971e:	d02b      	beq.n	8009778 <UART_SetConfig+0x438>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	2b06      	cmp	r3, #6
 8009726:	d024      	beq.n	8009772 <UART_SetConfig+0x432>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b07      	cmp	r3, #7
 800972e:	d01d      	beq.n	800976c <UART_SetConfig+0x42c>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b08      	cmp	r3, #8
 8009736:	d016      	beq.n	8009766 <UART_SetConfig+0x426>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b09      	cmp	r3, #9
 800973e:	d00f      	beq.n	8009760 <UART_SetConfig+0x420>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2b0a      	cmp	r3, #10
 8009746:	d008      	beq.n	800975a <UART_SetConfig+0x41a>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b0b      	cmp	r3, #11
 800974e:	d101      	bne.n	8009754 <UART_SetConfig+0x414>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	e022      	b.n	800979a <UART_SetConfig+0x45a>
 8009754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009758:	e01f      	b.n	800979a <UART_SetConfig+0x45a>
 800975a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975e:	e01c      	b.n	800979a <UART_SetConfig+0x45a>
 8009760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009764:	e019      	b.n	800979a <UART_SetConfig+0x45a>
 8009766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800976a:	e016      	b.n	800979a <UART_SetConfig+0x45a>
 800976c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009770:	e013      	b.n	800979a <UART_SetConfig+0x45a>
 8009772:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009776:	e010      	b.n	800979a <UART_SetConfig+0x45a>
 8009778:	f640 43cc 	movw	r3, #3276	; 0xccc
 800977c:	e00d      	b.n	800979a <UART_SetConfig+0x45a>
 800977e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009782:	e00a      	b.n	800979a <UART_SetConfig+0x45a>
 8009784:	f241 5355 	movw	r3, #5461	; 0x1555
 8009788:	e007      	b.n	800979a <UART_SetConfig+0x45a>
 800978a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800978e:	e004      	b.n	800979a <UART_SetConfig+0x45a>
 8009790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009794:	e001      	b.n	800979a <UART_SetConfig+0x45a>
 8009796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800979a:	617b      	str	r3, [r7, #20]
        break;
 800979c:	e002      	b.n	80097a4 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	76fb      	strb	r3, [r7, #27]
        break;
 80097a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8604 	beq.w	800a3b4 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	4413      	add	r3, r2
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d305      	bcc.n	80097c8 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d903      	bls.n	80097d0 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	76fb      	strb	r3, [r7, #27]
 80097cc:	f000 bdf2 	b.w	800a3b4 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80097d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	f200 8281 	bhi.w	8009cdc <UART_SetConfig+0x99c>
 80097da:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <UART_SetConfig+0x4a0>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	08009805 	.word	0x08009805
 80097e4:	08009cdd 	.word	0x08009cdd
 80097e8:	08009955 	.word	0x08009955
 80097ec:	08009cdd 	.word	0x08009cdd
 80097f0:	08009a4b 	.word	0x08009a4b
 80097f4:	08009cdd 	.word	0x08009cdd
 80097f8:	08009cdd 	.word	0x08009cdd
 80097fc:	08009cdd 	.word	0x08009cdd
 8009800:	08009b89 	.word	0x08009b89
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009804:	f7fe fa08 	bl	8007c18 <HAL_RCC_GetPCLK1Freq>
 8009808:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	4618      	mov	r0, r3
 800980e:	f04f 0100 	mov.w	r1, #0
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	2b00      	cmp	r3, #0
 8009818:	d070      	beq.n	80098fc <UART_SetConfig+0x5bc>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b01      	cmp	r3, #1
 8009820:	d067      	beq.n	80098f2 <UART_SetConfig+0x5b2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b02      	cmp	r3, #2
 8009828:	d05e      	beq.n	80098e8 <UART_SetConfig+0x5a8>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b03      	cmp	r3, #3
 8009830:	d04c      	beq.n	80098cc <UART_SetConfig+0x58c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b04      	cmp	r3, #4
 8009838:	d043      	beq.n	80098c2 <UART_SetConfig+0x582>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b05      	cmp	r3, #5
 8009840:	d03a      	beq.n	80098b8 <UART_SetConfig+0x578>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b06      	cmp	r3, #6
 8009848:	d031      	beq.n	80098ae <UART_SetConfig+0x56e>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b07      	cmp	r3, #7
 8009850:	d028      	beq.n	80098a4 <UART_SetConfig+0x564>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b08      	cmp	r3, #8
 8009858:	d01f      	beq.n	800989a <UART_SetConfig+0x55a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b09      	cmp	r3, #9
 8009860:	d016      	beq.n	8009890 <UART_SetConfig+0x550>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b0a      	cmp	r3, #10
 8009868:	d00d      	beq.n	8009886 <UART_SetConfig+0x546>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b0b      	cmp	r3, #11
 8009870:	d104      	bne.n	800987c <UART_SetConfig+0x53c>
 8009872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009876:	f04f 0400 	mov.w	r4, #0
 800987a:	e043      	b.n	8009904 <UART_SetConfig+0x5c4>
 800987c:	f04f 0301 	mov.w	r3, #1
 8009880:	f04f 0400 	mov.w	r4, #0
 8009884:	e03e      	b.n	8009904 <UART_SetConfig+0x5c4>
 8009886:	f04f 0380 	mov.w	r3, #128	; 0x80
 800988a:	f04f 0400 	mov.w	r4, #0
 800988e:	e039      	b.n	8009904 <UART_SetConfig+0x5c4>
 8009890:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009894:	f04f 0400 	mov.w	r4, #0
 8009898:	e034      	b.n	8009904 <UART_SetConfig+0x5c4>
 800989a:	f04f 0320 	mov.w	r3, #32
 800989e:	f04f 0400 	mov.w	r4, #0
 80098a2:	e02f      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098a4:	f04f 0310 	mov.w	r3, #16
 80098a8:	f04f 0400 	mov.w	r4, #0
 80098ac:	e02a      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098ae:	f04f 030c 	mov.w	r3, #12
 80098b2:	f04f 0400 	mov.w	r4, #0
 80098b6:	e025      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098b8:	f04f 030a 	mov.w	r3, #10
 80098bc:	f04f 0400 	mov.w	r4, #0
 80098c0:	e020      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098c2:	f04f 0308 	mov.w	r3, #8
 80098c6:	f04f 0400 	mov.w	r4, #0
 80098ca:	e01b      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098cc:	f04f 0306 	mov.w	r3, #6
 80098d0:	f04f 0400 	mov.w	r4, #0
 80098d4:	e016      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098d6:	bf00      	nop
 80098d8:	0028b0aa 	.word	0x0028b0aa
 80098dc:	003d0900 	.word	0x003d0900
 80098e0:	007a1200 	.word	0x007a1200
 80098e4:	00f42400 	.word	0x00f42400
 80098e8:	f04f 0304 	mov.w	r3, #4
 80098ec:	f04f 0400 	mov.w	r4, #0
 80098f0:	e008      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098f2:	f04f 0302 	mov.w	r3, #2
 80098f6:	f04f 0400 	mov.w	r4, #0
 80098fa:	e003      	b.n	8009904 <UART_SetConfig+0x5c4>
 80098fc:	f04f 0301 	mov.w	r3, #1
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	461a      	mov	r2, r3
 8009906:	4623      	mov	r3, r4
 8009908:	f7f6 fc42 	bl	8000190 <__aeabi_uldivmod>
 800990c:	4603      	mov	r3, r0
 800990e:	460c      	mov	r4, r1
 8009910:	4619      	mov	r1, r3
 8009912:	4622      	mov	r2, r4
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	f04f 0400 	mov.w	r4, #0
 800991c:	0214      	lsls	r4, r2, #8
 800991e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009922:	020b      	lsls	r3, r1, #8
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6852      	ldr	r2, [r2, #4]
 8009928:	0852      	lsrs	r2, r2, #1
 800992a:	4611      	mov	r1, r2
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	eb13 0b01 	adds.w	fp, r3, r1
 8009934:	eb44 0c02 	adc.w	ip, r4, r2
 8009938:	4658      	mov	r0, fp
 800993a:	4661      	mov	r1, ip
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f04f 0400 	mov.w	r4, #0
 8009944:	461a      	mov	r2, r3
 8009946:	4623      	mov	r3, r4
 8009948:	f7f6 fc22 	bl	8000190 <__aeabi_uldivmod>
 800994c:	4603      	mov	r3, r0
 800994e:	460c      	mov	r4, r1
 8009950:	61fb      	str	r3, [r7, #28]
            break;
 8009952:	e1c6      	b.n	8009ce2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d05b      	beq.n	8009a14 <UART_SetConfig+0x6d4>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b01      	cmp	r3, #1
 8009962:	d053      	beq.n	8009a0c <UART_SetConfig+0x6cc>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	2b02      	cmp	r3, #2
 800996a:	d04b      	beq.n	8009a04 <UART_SetConfig+0x6c4>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b03      	cmp	r3, #3
 8009972:	d043      	beq.n	80099fc <UART_SetConfig+0x6bc>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	2b04      	cmp	r3, #4
 800997a:	d03b      	beq.n	80099f4 <UART_SetConfig+0x6b4>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	2b05      	cmp	r3, #5
 8009982:	d033      	beq.n	80099ec <UART_SetConfig+0x6ac>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	2b06      	cmp	r3, #6
 800998a:	d02b      	beq.n	80099e4 <UART_SetConfig+0x6a4>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	2b07      	cmp	r3, #7
 8009992:	d023      	beq.n	80099dc <UART_SetConfig+0x69c>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	2b08      	cmp	r3, #8
 800999a:	d01b      	beq.n	80099d4 <UART_SetConfig+0x694>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d013      	beq.n	80099cc <UART_SetConfig+0x68c>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	2b0a      	cmp	r3, #10
 80099aa:	d00b      	beq.n	80099c4 <UART_SetConfig+0x684>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	2b0b      	cmp	r3, #11
 80099b2:	d103      	bne.n	80099bc <UART_SetConfig+0x67c>
 80099b4:	4bae      	ldr	r3, [pc, #696]	; (8009c70 <UART_SetConfig+0x930>)
 80099b6:	f04f 0400 	mov.w	r4, #0
 80099ba:	e02e      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099bc:	4bad      	ldr	r3, [pc, #692]	; (8009c74 <UART_SetConfig+0x934>)
 80099be:	f04f 0400 	mov.w	r4, #0
 80099c2:	e02a      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099c4:	4bac      	ldr	r3, [pc, #688]	; (8009c78 <UART_SetConfig+0x938>)
 80099c6:	f04f 0400 	mov.w	r4, #0
 80099ca:	e026      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099cc:	4bab      	ldr	r3, [pc, #684]	; (8009c7c <UART_SetConfig+0x93c>)
 80099ce:	f04f 0400 	mov.w	r4, #0
 80099d2:	e022      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099d4:	4baa      	ldr	r3, [pc, #680]	; (8009c80 <UART_SetConfig+0x940>)
 80099d6:	f04f 0400 	mov.w	r4, #0
 80099da:	e01e      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099dc:	4ba9      	ldr	r3, [pc, #676]	; (8009c84 <UART_SetConfig+0x944>)
 80099de:	f04f 0400 	mov.w	r4, #0
 80099e2:	e01a      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099e4:	a49e      	add	r4, pc, #632	; (adr r4, 8009c60 <UART_SetConfig+0x920>)
 80099e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80099ea:	e016      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099ec:	4ba6      	ldr	r3, [pc, #664]	; (8009c88 <UART_SetConfig+0x948>)
 80099ee:	f04f 0400 	mov.w	r4, #0
 80099f2:	e012      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099f4:	4ba5      	ldr	r3, [pc, #660]	; (8009c8c <UART_SetConfig+0x94c>)
 80099f6:	f04f 0400 	mov.w	r4, #0
 80099fa:	e00e      	b.n	8009a1a <UART_SetConfig+0x6da>
 80099fc:	a49a      	add	r4, pc, #616	; (adr r4, 8009c68 <UART_SetConfig+0x928>)
 80099fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009a02:	e00a      	b.n	8009a1a <UART_SetConfig+0x6da>
 8009a04:	4ba2      	ldr	r3, [pc, #648]	; (8009c90 <UART_SetConfig+0x950>)
 8009a06:	f04f 0400 	mov.w	r4, #0
 8009a0a:	e006      	b.n	8009a1a <UART_SetConfig+0x6da>
 8009a0c:	4ba1      	ldr	r3, [pc, #644]	; (8009c94 <UART_SetConfig+0x954>)
 8009a0e:	f04f 0400 	mov.w	r4, #0
 8009a12:	e002      	b.n	8009a1a <UART_SetConfig+0x6da>
 8009a14:	4b97      	ldr	r3, [pc, #604]	; (8009c74 <UART_SetConfig+0x934>)
 8009a16:	f04f 0400 	mov.w	r4, #0
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6852      	ldr	r2, [r2, #4]
 8009a1e:	0852      	lsrs	r2, r2, #1
 8009a20:	4611      	mov	r1, r2
 8009a22:	f04f 0200 	mov.w	r2, #0
 8009a26:	eb13 0b01 	adds.w	fp, r3, r1
 8009a2a:	eb44 0c02 	adc.w	ip, r4, r2
 8009a2e:	4658      	mov	r0, fp
 8009a30:	4661      	mov	r1, ip
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f04f 0400 	mov.w	r4, #0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	f7f6 fba7 	bl	8000190 <__aeabi_uldivmod>
 8009a42:	4603      	mov	r3, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	61fb      	str	r3, [r7, #28]
            break;
 8009a48:	e14b      	b.n	8009ce2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009a4a:	f7fe f867 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 8009a4e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f04f 0100 	mov.w	r1, #0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d067      	beq.n	8009b30 <UART_SetConfig+0x7f0>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d05e      	beq.n	8009b26 <UART_SetConfig+0x7e6>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d055      	beq.n	8009b1c <UART_SetConfig+0x7dc>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d04c      	beq.n	8009b12 <UART_SetConfig+0x7d2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d043      	beq.n	8009b08 <UART_SetConfig+0x7c8>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	2b05      	cmp	r3, #5
 8009a86:	d03a      	beq.n	8009afe <UART_SetConfig+0x7be>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	2b06      	cmp	r3, #6
 8009a8e:	d031      	beq.n	8009af4 <UART_SetConfig+0x7b4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	2b07      	cmp	r3, #7
 8009a96:	d028      	beq.n	8009aea <UART_SetConfig+0x7aa>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	2b08      	cmp	r3, #8
 8009a9e:	d01f      	beq.n	8009ae0 <UART_SetConfig+0x7a0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa4:	2b09      	cmp	r3, #9
 8009aa6:	d016      	beq.n	8009ad6 <UART_SetConfig+0x796>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	2b0a      	cmp	r3, #10
 8009aae:	d00d      	beq.n	8009acc <UART_SetConfig+0x78c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	2b0b      	cmp	r3, #11
 8009ab6:	d104      	bne.n	8009ac2 <UART_SetConfig+0x782>
 8009ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009abc:	f04f 0400 	mov.w	r4, #0
 8009ac0:	e03a      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009ac2:	f04f 0301 	mov.w	r3, #1
 8009ac6:	f04f 0400 	mov.w	r4, #0
 8009aca:	e035      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009acc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009ad0:	f04f 0400 	mov.w	r4, #0
 8009ad4:	e030      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009ad6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009ada:	f04f 0400 	mov.w	r4, #0
 8009ade:	e02b      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009ae0:	f04f 0320 	mov.w	r3, #32
 8009ae4:	f04f 0400 	mov.w	r4, #0
 8009ae8:	e026      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009aea:	f04f 0310 	mov.w	r3, #16
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	e021      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009af4:	f04f 030c 	mov.w	r3, #12
 8009af8:	f04f 0400 	mov.w	r4, #0
 8009afc:	e01c      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009afe:	f04f 030a 	mov.w	r3, #10
 8009b02:	f04f 0400 	mov.w	r4, #0
 8009b06:	e017      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009b08:	f04f 0308 	mov.w	r3, #8
 8009b0c:	f04f 0400 	mov.w	r4, #0
 8009b10:	e012      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009b12:	f04f 0306 	mov.w	r3, #6
 8009b16:	f04f 0400 	mov.w	r4, #0
 8009b1a:	e00d      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009b1c:	f04f 0304 	mov.w	r3, #4
 8009b20:	f04f 0400 	mov.w	r4, #0
 8009b24:	e008      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009b26:	f04f 0302 	mov.w	r3, #2
 8009b2a:	f04f 0400 	mov.w	r4, #0
 8009b2e:	e003      	b.n	8009b38 <UART_SetConfig+0x7f8>
 8009b30:	f04f 0301 	mov.w	r3, #1
 8009b34:	f04f 0400 	mov.w	r4, #0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4623      	mov	r3, r4
 8009b3c:	f7f6 fb28 	bl	8000190 <__aeabi_uldivmod>
 8009b40:	4603      	mov	r3, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	4619      	mov	r1, r3
 8009b46:	4622      	mov	r2, r4
 8009b48:	f04f 0300 	mov.w	r3, #0
 8009b4c:	f04f 0400 	mov.w	r4, #0
 8009b50:	0214      	lsls	r4, r2, #8
 8009b52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009b56:	020b      	lsls	r3, r1, #8
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6852      	ldr	r2, [r2, #4]
 8009b5c:	0852      	lsrs	r2, r2, #1
 8009b5e:	4611      	mov	r1, r2
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	eb13 0b01 	adds.w	fp, r3, r1
 8009b68:	eb44 0c02 	adc.w	ip, r4, r2
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	4661      	mov	r1, ip
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f04f 0400 	mov.w	r4, #0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	f7f6 fb08 	bl	8000190 <__aeabi_uldivmod>
 8009b80:	4603      	mov	r3, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	61fb      	str	r3, [r7, #28]
            break;
 8009b86:	e0ac      	b.n	8009ce2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8089 	beq.w	8009ca4 <UART_SetConfig+0x964>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d05b      	beq.n	8009c52 <UART_SetConfig+0x912>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d052      	beq.n	8009c48 <UART_SetConfig+0x908>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d04a      	beq.n	8009c40 <UART_SetConfig+0x900>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d041      	beq.n	8009c36 <UART_SetConfig+0x8f6>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b05      	cmp	r3, #5
 8009bb8:	d039      	beq.n	8009c2e <UART_SetConfig+0x8ee>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d031      	beq.n	8009c26 <UART_SetConfig+0x8e6>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b07      	cmp	r3, #7
 8009bc8:	d028      	beq.n	8009c1c <UART_SetConfig+0x8dc>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d01f      	beq.n	8009c12 <UART_SetConfig+0x8d2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d016      	beq.n	8009c08 <UART_SetConfig+0x8c8>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b0a      	cmp	r3, #10
 8009be0:	d00d      	beq.n	8009bfe <UART_SetConfig+0x8be>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b0b      	cmp	r3, #11
 8009be8:	d104      	bne.n	8009bf4 <UART_SetConfig+0x8b4>
 8009bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bee:	f04f 0400 	mov.w	r4, #0
 8009bf2:	e05b      	b.n	8009cac <UART_SetConfig+0x96c>
 8009bf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009bf8:	f04f 0400 	mov.w	r4, #0
 8009bfc:	e056      	b.n	8009cac <UART_SetConfig+0x96c>
 8009bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c02:	f04f 0400 	mov.w	r4, #0
 8009c06:	e051      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c0c:	f04f 0400 	mov.w	r4, #0
 8009c10:	e04c      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c16:	f04f 0400 	mov.w	r4, #0
 8009c1a:	e047      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c20:	f04f 0400 	mov.w	r4, #0
 8009c24:	e042      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c26:	4b1c      	ldr	r3, [pc, #112]	; (8009c98 <UART_SetConfig+0x958>)
 8009c28:	f04f 0400 	mov.w	r4, #0
 8009c2c:	e03e      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c2e:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <UART_SetConfig+0x95c>)
 8009c30:	f04f 0400 	mov.w	r4, #0
 8009c34:	e03a      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c3a:	f04f 0400 	mov.w	r4, #0
 8009c3e:	e035      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <UART_SetConfig+0x960>)
 8009c42:	f04f 0400 	mov.w	r4, #0
 8009c46:	e031      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c4c:	f04f 0400 	mov.w	r4, #0
 8009c50:	e02c      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c56:	f04f 0400 	mov.w	r4, #0
 8009c5a:	e027      	b.n	8009cac <UART_SetConfig+0x96c>
 8009c5c:	f3af 8000 	nop.w
 8009c60:	14585500 	.word	0x14585500
 8009c64:	00000000 	.word	0x00000000
 8009c68:	28b0aa00 	.word	0x28b0aa00
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	00f42400 	.word	0x00f42400
 8009c74:	f4240000 	.word	0xf4240000
 8009c78:	01e84800 	.word	0x01e84800
 8009c7c:	03d09000 	.word	0x03d09000
 8009c80:	07a12000 	.word	0x07a12000
 8009c84:	0f424000 	.word	0x0f424000
 8009c88:	186a0000 	.word	0x186a0000
 8009c8c:	1e848000 	.word	0x1e848000
 8009c90:	3d090000 	.word	0x3d090000
 8009c94:	7a120000 	.word	0x7a120000
 8009c98:	000aaa00 	.word	0x000aaa00
 8009c9c:	000ccc00 	.word	0x000ccc00
 8009ca0:	00155500 	.word	0x00155500
 8009ca4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009ca8:	f04f 0400 	mov.w	r4, #0
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6852      	ldr	r2, [r2, #4]
 8009cb0:	0852      	lsrs	r2, r2, #1
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	eb13 0b01 	adds.w	fp, r3, r1
 8009cbc:	eb44 0c02 	adc.w	ip, r4, r2
 8009cc0:	4658      	mov	r0, fp
 8009cc2:	4661      	mov	r1, ip
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f04f 0400 	mov.w	r4, #0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4623      	mov	r3, r4
 8009cd0:	f7f6 fa5e 	bl	8000190 <__aeabi_uldivmod>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	61fb      	str	r3, [r7, #28]
            break;
 8009cda:	e002      	b.n	8009ce2 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	76fb      	strb	r3, [r7, #27]
            break;
 8009ce0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ce8:	d308      	bcc.n	8009cfc <UART_SetConfig+0x9bc>
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cf0:	d204      	bcs.n	8009cfc <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	60da      	str	r2, [r3, #12]
 8009cfa:	e35b      	b.n	800a3b4 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	76fb      	strb	r3, [r7, #27]
 8009d00:	e358      	b.n	800a3b4 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d0a:	f040 81a6 	bne.w	800a05a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d12:	3b01      	subs	r3, #1
 8009d14:	2b07      	cmp	r3, #7
 8009d16:	f200 8180 	bhi.w	800a01a <UART_SetConfig+0xcda>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <UART_SetConfig+0x9e0>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d41 	.word	0x08009d41
 8009d24:	08009df9 	.word	0x08009df9
 8009d28:	0800a01b 	.word	0x0800a01b
 8009d2c:	08009ea1 	.word	0x08009ea1
 8009d30:	0800a01b 	.word	0x0800a01b
 8009d34:	0800a01b 	.word	0x0800a01b
 8009d38:	0800a01b 	.word	0x0800a01b
 8009d3c:	08009f59 	.word	0x08009f59
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d40:	f7fd ff80 	bl	8007c44 <HAL_RCC_GetPCLK2Freq>
 8009d44:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d044      	beq.n	8009dd8 <UART_SetConfig+0xa98>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d03e      	beq.n	8009dd4 <UART_SetConfig+0xa94>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d038      	beq.n	8009dd0 <UART_SetConfig+0xa90>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d032      	beq.n	8009dcc <UART_SetConfig+0xa8c>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d02c      	beq.n	8009dc8 <UART_SetConfig+0xa88>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d026      	beq.n	8009dc4 <UART_SetConfig+0xa84>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	2b06      	cmp	r3, #6
 8009d7c:	d020      	beq.n	8009dc0 <UART_SetConfig+0xa80>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	2b07      	cmp	r3, #7
 8009d84:	d01a      	beq.n	8009dbc <UART_SetConfig+0xa7c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d014      	beq.n	8009db8 <UART_SetConfig+0xa78>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	2b09      	cmp	r3, #9
 8009d94:	d00e      	beq.n	8009db4 <UART_SetConfig+0xa74>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b0a      	cmp	r3, #10
 8009d9c:	d008      	beq.n	8009db0 <UART_SetConfig+0xa70>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b0b      	cmp	r3, #11
 8009da4:	d102      	bne.n	8009dac <UART_SetConfig+0xa6c>
 8009da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009daa:	e016      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e014      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009db0:	2380      	movs	r3, #128	; 0x80
 8009db2:	e012      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009db4:	2340      	movs	r3, #64	; 0x40
 8009db6:	e010      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009db8:	2320      	movs	r3, #32
 8009dba:	e00e      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dbc:	2310      	movs	r3, #16
 8009dbe:	e00c      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	e00a      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dc4:	230a      	movs	r3, #10
 8009dc6:	e008      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dc8:	2308      	movs	r3, #8
 8009dca:	e006      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dcc:	2306      	movs	r3, #6
 8009dce:	e004      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	e002      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e000      	b.n	8009dda <UART_SetConfig+0xa9a>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	005a      	lsls	r2, r3, #1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	61fb      	str	r3, [r7, #28]
        break;
 8009df6:	e113      	b.n	800a020 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d043      	beq.n	8009e88 <UART_SetConfig+0xb48>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d03d      	beq.n	8009e84 <UART_SetConfig+0xb44>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d037      	beq.n	8009e80 <UART_SetConfig+0xb40>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d031      	beq.n	8009e7c <UART_SetConfig+0xb3c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d02b      	beq.n	8009e78 <UART_SetConfig+0xb38>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d025      	beq.n	8009e74 <UART_SetConfig+0xb34>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	2b06      	cmp	r3, #6
 8009e2e:	d01f      	beq.n	8009e70 <UART_SetConfig+0xb30>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	2b07      	cmp	r3, #7
 8009e36:	d019      	beq.n	8009e6c <UART_SetConfig+0xb2c>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d013      	beq.n	8009e68 <UART_SetConfig+0xb28>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	d00d      	beq.n	8009e64 <UART_SetConfig+0xb24>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	2b0a      	cmp	r3, #10
 8009e4e:	d007      	beq.n	8009e60 <UART_SetConfig+0xb20>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	2b0b      	cmp	r3, #11
 8009e56:	d101      	bne.n	8009e5c <UART_SetConfig+0xb1c>
 8009e58:	4b8c      	ldr	r3, [pc, #560]	; (800a08c <UART_SetConfig+0xd4c>)
 8009e5a:	e016      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e5c:	4b8c      	ldr	r3, [pc, #560]	; (800a090 <UART_SetConfig+0xd50>)
 8009e5e:	e014      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e60:	4b8c      	ldr	r3, [pc, #560]	; (800a094 <UART_SetConfig+0xd54>)
 8009e62:	e012      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e64:	4b8c      	ldr	r3, [pc, #560]	; (800a098 <UART_SetConfig+0xd58>)
 8009e66:	e010      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e68:	4b8c      	ldr	r3, [pc, #560]	; (800a09c <UART_SetConfig+0xd5c>)
 8009e6a:	e00e      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e6c:	4b8c      	ldr	r3, [pc, #560]	; (800a0a0 <UART_SetConfig+0xd60>)
 8009e6e:	e00c      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e70:	4b8c      	ldr	r3, [pc, #560]	; (800a0a4 <UART_SetConfig+0xd64>)
 8009e72:	e00a      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e74:	4b8c      	ldr	r3, [pc, #560]	; (800a0a8 <UART_SetConfig+0xd68>)
 8009e76:	e008      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e78:	4b8c      	ldr	r3, [pc, #560]	; (800a0ac <UART_SetConfig+0xd6c>)
 8009e7a:	e006      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e7c:	4b8c      	ldr	r3, [pc, #560]	; (800a0b0 <UART_SetConfig+0xd70>)
 8009e7e:	e004      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e80:	4b8c      	ldr	r3, [pc, #560]	; (800a0b4 <UART_SetConfig+0xd74>)
 8009e82:	e002      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e84:	4b8c      	ldr	r3, [pc, #560]	; (800a0b8 <UART_SetConfig+0xd78>)
 8009e86:	e000      	b.n	8009e8a <UART_SetConfig+0xb4a>
 8009e88:	4b81      	ldr	r3, [pc, #516]	; (800a090 <UART_SetConfig+0xd50>)
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	6852      	ldr	r2, [r2, #4]
 8009e8e:	0852      	lsrs	r2, r2, #1
 8009e90:	441a      	add	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	61fb      	str	r3, [r7, #28]
        break;
 8009e9e:	e0bf      	b.n	800a020 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea0:	f7fd fe3c 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 8009ea4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d044      	beq.n	8009f38 <UART_SetConfig+0xbf8>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d03e      	beq.n	8009f34 <UART_SetConfig+0xbf4>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d038      	beq.n	8009f30 <UART_SetConfig+0xbf0>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d032      	beq.n	8009f2c <UART_SetConfig+0xbec>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d02c      	beq.n	8009f28 <UART_SetConfig+0xbe8>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d026      	beq.n	8009f24 <UART_SetConfig+0xbe4>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	2b06      	cmp	r3, #6
 8009edc:	d020      	beq.n	8009f20 <UART_SetConfig+0xbe0>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	2b07      	cmp	r3, #7
 8009ee4:	d01a      	beq.n	8009f1c <UART_SetConfig+0xbdc>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d014      	beq.n	8009f18 <UART_SetConfig+0xbd8>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	2b09      	cmp	r3, #9
 8009ef4:	d00e      	beq.n	8009f14 <UART_SetConfig+0xbd4>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	2b0a      	cmp	r3, #10
 8009efc:	d008      	beq.n	8009f10 <UART_SetConfig+0xbd0>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b0b      	cmp	r3, #11
 8009f04:	d102      	bne.n	8009f0c <UART_SetConfig+0xbcc>
 8009f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f0a:	e016      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e014      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	e012      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f14:	2340      	movs	r3, #64	; 0x40
 8009f16:	e010      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	e00e      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f1c:	2310      	movs	r3, #16
 8009f1e:	e00c      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f20:	230c      	movs	r3, #12
 8009f22:	e00a      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f24:	230a      	movs	r3, #10
 8009f26:	e008      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	e006      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f2c:	2306      	movs	r3, #6
 8009f2e:	e004      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f30:	2304      	movs	r3, #4
 8009f32:	e002      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e000      	b.n	8009f3a <UART_SetConfig+0xbfa>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f40:	005a      	lsls	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	441a      	add	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	61fb      	str	r3, [r7, #28]
        break;
 8009f56:	e063      	b.n	800a020 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d04f      	beq.n	800a000 <UART_SetConfig+0xcc0>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d048      	beq.n	8009ffa <UART_SetConfig+0xcba>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d041      	beq.n	8009ff4 <UART_SetConfig+0xcb4>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d03a      	beq.n	8009fee <UART_SetConfig+0xcae>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	d033      	beq.n	8009fe8 <UART_SetConfig+0xca8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d02c      	beq.n	8009fe2 <UART_SetConfig+0xca2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	2b06      	cmp	r3, #6
 8009f8e:	d025      	beq.n	8009fdc <UART_SetConfig+0xc9c>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	2b07      	cmp	r3, #7
 8009f96:	d01e      	beq.n	8009fd6 <UART_SetConfig+0xc96>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d017      	beq.n	8009fd0 <UART_SetConfig+0xc90>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b09      	cmp	r3, #9
 8009fa6:	d010      	beq.n	8009fca <UART_SetConfig+0xc8a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	2b0a      	cmp	r3, #10
 8009fae:	d009      	beq.n	8009fc4 <UART_SetConfig+0xc84>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	2b0b      	cmp	r3, #11
 8009fb6:	d102      	bne.n	8009fbe <UART_SetConfig+0xc7e>
 8009fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbc:	e022      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fc2:	e01f      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc8:	e01c      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fce:	e019      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fd4:	e016      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fda:	e013      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fdc:	f241 5354 	movw	r3, #5460	; 0x1554
 8009fe0:	e010      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fe2:	f641 1398 	movw	r3, #6552	; 0x1998
 8009fe6:	e00d      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fec:	e00a      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009fee:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009ff2:	e007      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ff8:	e004      	b.n	800a004 <UART_SetConfig+0xcc4>
 8009ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ffe:	e001      	b.n	800a004 <UART_SetConfig+0xcc4>
 800a000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6852      	ldr	r2, [r2, #4]
 800a008:	0852      	lsrs	r2, r2, #1
 800a00a:	441a      	add	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	fbb2 f3f3 	udiv	r3, r2, r3
 800a014:	b29b      	uxth	r3, r3
 800a016:	61fb      	str	r3, [r7, #28]
        break;
 800a018:	e002      	b.n	800a020 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	76fb      	strb	r3, [r7, #27]
        break;
 800a01e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b0f      	cmp	r3, #15
 800a024:	d916      	bls.n	800a054 <UART_SetConfig+0xd14>
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a02c:	d212      	bcs.n	800a054 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	b29b      	uxth	r3, r3
 800a032:	f023 030f 	bic.w	r3, r3, #15
 800a036:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	085b      	lsrs	r3, r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	b29a      	uxth	r2, r3
 800a044:	89fb      	ldrh	r3, [r7, #14]
 800a046:	4313      	orrs	r3, r2
 800a048:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	89fa      	ldrh	r2, [r7, #14]
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	e1af      	b.n	800a3b4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	76fb      	strb	r3, [r7, #27]
 800a058:	e1ac      	b.n	800a3b4 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800a05a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b07      	cmp	r3, #7
 800a062:	f200 8196 	bhi.w	800a392 <UART_SetConfig+0x1052>
 800a066:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <UART_SetConfig+0xd2c>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a0bd 	.word	0x0800a0bd
 800a070:	0800a173 	.word	0x0800a173
 800a074:	0800a393 	.word	0x0800a393
 800a078:	0800a21d 	.word	0x0800a21d
 800a07c:	0800a393 	.word	0x0800a393
 800a080:	0800a393 	.word	0x0800a393
 800a084:	0800a393 	.word	0x0800a393
 800a088:	0800a2d3 	.word	0x0800a2d3
 800a08c:	0001e848 	.word	0x0001e848
 800a090:	01e84800 	.word	0x01e84800
 800a094:	0003d090 	.word	0x0003d090
 800a098:	0007a120 	.word	0x0007a120
 800a09c:	000f4240 	.word	0x000f4240
 800a0a0:	001e8480 	.word	0x001e8480
 800a0a4:	0028b0aa 	.word	0x0028b0aa
 800a0a8:	0030d400 	.word	0x0030d400
 800a0ac:	003d0900 	.word	0x003d0900
 800a0b0:	00516154 	.word	0x00516154
 800a0b4:	007a1200 	.word	0x007a1200
 800a0b8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0bc:	f7fd fdc2 	bl	8007c44 <HAL_RCC_GetPCLK2Freq>
 800a0c0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d044      	beq.n	800a154 <UART_SetConfig+0xe14>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d03e      	beq.n	800a150 <UART_SetConfig+0xe10>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d038      	beq.n	800a14c <UART_SetConfig+0xe0c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d032      	beq.n	800a148 <UART_SetConfig+0xe08>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d02c      	beq.n	800a144 <UART_SetConfig+0xe04>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d026      	beq.n	800a140 <UART_SetConfig+0xe00>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d020      	beq.n	800a13c <UART_SetConfig+0xdfc>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	d01a      	beq.n	800a138 <UART_SetConfig+0xdf8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b08      	cmp	r3, #8
 800a108:	d014      	beq.n	800a134 <UART_SetConfig+0xdf4>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d00e      	beq.n	800a130 <UART_SetConfig+0xdf0>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b0a      	cmp	r3, #10
 800a118:	d008      	beq.n	800a12c <UART_SetConfig+0xdec>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b0b      	cmp	r3, #11
 800a120:	d102      	bne.n	800a128 <UART_SetConfig+0xde8>
 800a122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a126:	e016      	b.n	800a156 <UART_SetConfig+0xe16>
 800a128:	2301      	movs	r3, #1
 800a12a:	e014      	b.n	800a156 <UART_SetConfig+0xe16>
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	e012      	b.n	800a156 <UART_SetConfig+0xe16>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	e010      	b.n	800a156 <UART_SetConfig+0xe16>
 800a134:	2320      	movs	r3, #32
 800a136:	e00e      	b.n	800a156 <UART_SetConfig+0xe16>
 800a138:	2310      	movs	r3, #16
 800a13a:	e00c      	b.n	800a156 <UART_SetConfig+0xe16>
 800a13c:	230c      	movs	r3, #12
 800a13e:	e00a      	b.n	800a156 <UART_SetConfig+0xe16>
 800a140:	230a      	movs	r3, #10
 800a142:	e008      	b.n	800a156 <UART_SetConfig+0xe16>
 800a144:	2308      	movs	r3, #8
 800a146:	e006      	b.n	800a156 <UART_SetConfig+0xe16>
 800a148:	2306      	movs	r3, #6
 800a14a:	e004      	b.n	800a156 <UART_SetConfig+0xe16>
 800a14c:	2304      	movs	r3, #4
 800a14e:	e002      	b.n	800a156 <UART_SetConfig+0xe16>
 800a150:	2302      	movs	r3, #2
 800a152:	e000      	b.n	800a156 <UART_SetConfig+0xe16>
 800a154:	2301      	movs	r3, #1
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	fbb2 f2f3 	udiv	r2, r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	085b      	lsrs	r3, r3, #1
 800a162:	441a      	add	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	61fb      	str	r3, [r7, #28]
        break;
 800a170:	e112      	b.n	800a398 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	d044      	beq.n	800a204 <UART_SetConfig+0xec4>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d03e      	beq.n	800a200 <UART_SetConfig+0xec0>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b02      	cmp	r3, #2
 800a188:	d038      	beq.n	800a1fc <UART_SetConfig+0xebc>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d032      	beq.n	800a1f8 <UART_SetConfig+0xeb8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b04      	cmp	r3, #4
 800a198:	d02c      	beq.n	800a1f4 <UART_SetConfig+0xeb4>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	d026      	beq.n	800a1f0 <UART_SetConfig+0xeb0>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d020      	beq.n	800a1ec <UART_SetConfig+0xeac>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	d01a      	beq.n	800a1e8 <UART_SetConfig+0xea8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d014      	beq.n	800a1e4 <UART_SetConfig+0xea4>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d00e      	beq.n	800a1e0 <UART_SetConfig+0xea0>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b0a      	cmp	r3, #10
 800a1c8:	d008      	beq.n	800a1dc <UART_SetConfig+0xe9c>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b0b      	cmp	r3, #11
 800a1d0:	d102      	bne.n	800a1d8 <UART_SetConfig+0xe98>
 800a1d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a1d6:	e016      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1d8:	4b80      	ldr	r3, [pc, #512]	; (800a3dc <UART_SetConfig+0x109c>)
 800a1da:	e014      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1dc:	4b80      	ldr	r3, [pc, #512]	; (800a3e0 <UART_SetConfig+0x10a0>)
 800a1de:	e012      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1e0:	4b80      	ldr	r3, [pc, #512]	; (800a3e4 <UART_SetConfig+0x10a4>)
 800a1e2:	e010      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1e4:	4b80      	ldr	r3, [pc, #512]	; (800a3e8 <UART_SetConfig+0x10a8>)
 800a1e6:	e00e      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1e8:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <UART_SetConfig+0x10ac>)
 800a1ea:	e00c      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1ec:	4b80      	ldr	r3, [pc, #512]	; (800a3f0 <UART_SetConfig+0x10b0>)
 800a1ee:	e00a      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1f0:	4b80      	ldr	r3, [pc, #512]	; (800a3f4 <UART_SetConfig+0x10b4>)
 800a1f2:	e008      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1f4:	4b80      	ldr	r3, [pc, #512]	; (800a3f8 <UART_SetConfig+0x10b8>)
 800a1f6:	e006      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1f8:	4b80      	ldr	r3, [pc, #512]	; (800a3fc <UART_SetConfig+0x10bc>)
 800a1fa:	e004      	b.n	800a206 <UART_SetConfig+0xec6>
 800a1fc:	4b80      	ldr	r3, [pc, #512]	; (800a400 <UART_SetConfig+0x10c0>)
 800a1fe:	e002      	b.n	800a206 <UART_SetConfig+0xec6>
 800a200:	4b80      	ldr	r3, [pc, #512]	; (800a404 <UART_SetConfig+0x10c4>)
 800a202:	e000      	b.n	800a206 <UART_SetConfig+0xec6>
 800a204:	4b75      	ldr	r3, [pc, #468]	; (800a3dc <UART_SetConfig+0x109c>)
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	6852      	ldr	r2, [r2, #4]
 800a20a:	0852      	lsrs	r2, r2, #1
 800a20c:	441a      	add	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	fbb2 f3f3 	udiv	r3, r2, r3
 800a216:	b29b      	uxth	r3, r3
 800a218:	61fb      	str	r3, [r7, #28]
        break;
 800a21a:	e0bd      	b.n	800a398 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a21c:	f7fd fc7e 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 800a220:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d044      	beq.n	800a2b4 <UART_SetConfig+0xf74>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d03e      	beq.n	800a2b0 <UART_SetConfig+0xf70>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b02      	cmp	r3, #2
 800a238:	d038      	beq.n	800a2ac <UART_SetConfig+0xf6c>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d032      	beq.n	800a2a8 <UART_SetConfig+0xf68>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b04      	cmp	r3, #4
 800a248:	d02c      	beq.n	800a2a4 <UART_SetConfig+0xf64>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b05      	cmp	r3, #5
 800a250:	d026      	beq.n	800a2a0 <UART_SetConfig+0xf60>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b06      	cmp	r3, #6
 800a258:	d020      	beq.n	800a29c <UART_SetConfig+0xf5c>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b07      	cmp	r3, #7
 800a260:	d01a      	beq.n	800a298 <UART_SetConfig+0xf58>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b08      	cmp	r3, #8
 800a268:	d014      	beq.n	800a294 <UART_SetConfig+0xf54>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b09      	cmp	r3, #9
 800a270:	d00e      	beq.n	800a290 <UART_SetConfig+0xf50>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b0a      	cmp	r3, #10
 800a278:	d008      	beq.n	800a28c <UART_SetConfig+0xf4c>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b0b      	cmp	r3, #11
 800a280:	d102      	bne.n	800a288 <UART_SetConfig+0xf48>
 800a282:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a286:	e016      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a288:	2301      	movs	r3, #1
 800a28a:	e014      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a28c:	2380      	movs	r3, #128	; 0x80
 800a28e:	e012      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	e010      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a294:	2320      	movs	r3, #32
 800a296:	e00e      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a298:	2310      	movs	r3, #16
 800a29a:	e00c      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a29c:	230c      	movs	r3, #12
 800a29e:	e00a      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2a0:	230a      	movs	r3, #10
 800a2a2:	e008      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	e006      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2a8:	2306      	movs	r3, #6
 800a2aa:	e004      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	e002      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e000      	b.n	800a2b6 <UART_SetConfig+0xf76>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	085b      	lsrs	r3, r3, #1
 800a2c2:	441a      	add	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	61fb      	str	r3, [r7, #28]
        break;
 800a2d0:	e062      	b.n	800a398 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04e      	beq.n	800a378 <UART_SetConfig+0x1038>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d047      	beq.n	800a372 <UART_SetConfig+0x1032>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d040      	beq.n	800a36c <UART_SetConfig+0x102c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d039      	beq.n	800a366 <UART_SetConfig+0x1026>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d032      	beq.n	800a360 <UART_SetConfig+0x1020>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d02b      	beq.n	800a35a <UART_SetConfig+0x101a>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b06      	cmp	r3, #6
 800a308:	d024      	beq.n	800a354 <UART_SetConfig+0x1014>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b07      	cmp	r3, #7
 800a310:	d01d      	beq.n	800a34e <UART_SetConfig+0x100e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	2b08      	cmp	r3, #8
 800a318:	d016      	beq.n	800a348 <UART_SetConfig+0x1008>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b09      	cmp	r3, #9
 800a320:	d00f      	beq.n	800a342 <UART_SetConfig+0x1002>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b0a      	cmp	r3, #10
 800a328:	d008      	beq.n	800a33c <UART_SetConfig+0xffc>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b0b      	cmp	r3, #11
 800a330:	d101      	bne.n	800a336 <UART_SetConfig+0xff6>
 800a332:	2380      	movs	r3, #128	; 0x80
 800a334:	e022      	b.n	800a37c <UART_SetConfig+0x103c>
 800a336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33a:	e01f      	b.n	800a37c <UART_SetConfig+0x103c>
 800a33c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a340:	e01c      	b.n	800a37c <UART_SetConfig+0x103c>
 800a342:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a346:	e019      	b.n	800a37c <UART_SetConfig+0x103c>
 800a348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a34c:	e016      	b.n	800a37c <UART_SetConfig+0x103c>
 800a34e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a352:	e013      	b.n	800a37c <UART_SetConfig+0x103c>
 800a354:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a358:	e010      	b.n	800a37c <UART_SetConfig+0x103c>
 800a35a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a35e:	e00d      	b.n	800a37c <UART_SetConfig+0x103c>
 800a360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a364:	e00a      	b.n	800a37c <UART_SetConfig+0x103c>
 800a366:	f241 5355 	movw	r3, #5461	; 0x1555
 800a36a:	e007      	b.n	800a37c <UART_SetConfig+0x103c>
 800a36c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a370:	e004      	b.n	800a37c <UART_SetConfig+0x103c>
 800a372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a376:	e001      	b.n	800a37c <UART_SetConfig+0x103c>
 800a378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6852      	ldr	r2, [r2, #4]
 800a380:	0852      	lsrs	r2, r2, #1
 800a382:	441a      	add	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	61fb      	str	r3, [r7, #28]
        break;
 800a390:	e002      	b.n	800a398 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	76fb      	strb	r3, [r7, #27]
        break;
 800a396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	2b0f      	cmp	r3, #15
 800a39c:	d908      	bls.n	800a3b0 <UART_SetConfig+0x1070>
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a4:	d204      	bcs.n	800a3b0 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	e001      	b.n	800a3b4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a3d0:	7efb      	ldrb	r3, [r7, #27]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3728      	adds	r7, #40	; 0x28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a3dc:	00f42400 	.word	0x00f42400
 800a3e0:	0001e848 	.word	0x0001e848
 800a3e4:	0003d090 	.word	0x0003d090
 800a3e8:	0007a120 	.word	0x0007a120
 800a3ec:	000f4240 	.word	0x000f4240
 800a3f0:	00145855 	.word	0x00145855
 800a3f4:	00186a00 	.word	0x00186a00
 800a3f8:	001e8480 	.word	0x001e8480
 800a3fc:	0028b0aa 	.word	0x0028b0aa
 800a400:	003d0900 	.word	0x003d0900
 800a404:	007a1200 	.word	0x007a1200

0800a408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	f003 0304 	and.w	r3, r3, #4
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0308 	and.w	r3, r3, #8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00a      	beq.n	800a4ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00a      	beq.n	800a4dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01a      	beq.n	800a51e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a506:	d10a      	bne.n	800a51e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	605a      	str	r2, [r3, #4]
  }
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af02      	add	r7, sp, #8
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a55c:	f7fb f812 	bl	8005584 <HAL_GetTick>
 800a560:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0308 	and.w	r3, r3, #8
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d10e      	bne.n	800a58e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f82c 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e022      	b.n	800a5d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d10e      	bne.n	800a5ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f816 	bl	800a5dc <UART_WaitOnFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e00c      	b.n	800a5d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ec:	e062      	b.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d05e      	beq.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5f6:	f7fa ffc5 	bl	8005584 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	429a      	cmp	r2, r3
 800a604:	d302      	bcc.n	800a60c <UART_WaitOnFlagUntilTimeout+0x30>
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d11d      	bne.n	800a648 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a61a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e045      	b.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d02e      	beq.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a664:	d126      	bne.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a66e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a67e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0201 	bic.w	r2, r2, #1
 800a68e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e00f      	b.n	800a6d4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69da      	ldr	r2, [r3, #28]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4013      	ands	r3, r2
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	bf0c      	ite	eq
 800a6c4:	2301      	moveq	r3, #1
 800a6c6:	2300      	movne	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d08d      	beq.n	800a5ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a6f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6812      	ldr	r2, [r2, #0]
 800a6fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a702:	f023 0301 	bic.w	r3, r3, #1
 800a706:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7fe fdf1 	bl	8009328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a764:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7f6 fdd9 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a77a:	bf00      	nop
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e027      	b.n	800a824 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2224      	movs	r2, #36	; 0x24
 800a7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a802:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e02d      	b.n	800a8a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2224      	movs	r2, #36	; 0x24
 800a854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f84f 	bl	800a928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2220      	movs	r2, #32
 800a896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d101      	bne.n	800a8c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	e02d      	b.n	800a920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2224      	movs	r2, #36	; 0x24
 800a8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0201 	bic.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f811 	bl	800a928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b089      	sub	sp, #36	; 0x24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a930:	4a2f      	ldr	r2, [pc, #188]	; (800a9f0 <UARTEx_SetNbDataToProcess+0xc8>)
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a93a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a93e:	4a2d      	ldr	r2, [pc, #180]	; (800a9f4 <UARTEx_SetNbDataToProcess+0xcc>)
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a948:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a964:	e03d      	b.n	800a9e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a966:	2308      	movs	r3, #8
 800a968:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a96a:	2308      	movs	r3, #8
 800a96c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	0e5b      	lsrs	r3, r3, #25
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	0f5b      	lsrs	r3, r3, #29
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a98e:	7fbb      	ldrb	r3, [r7, #30]
 800a990:	7f3a      	ldrb	r2, [r7, #28]
 800a992:	f107 0120 	add.w	r1, r7, #32
 800a996:	440a      	add	r2, r1
 800a998:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a99c:	fb02 f303 	mul.w	r3, r2, r3
 800a9a0:	7f3a      	ldrb	r2, [r7, #28]
 800a9a2:	f107 0120 	add.w	r1, r7, #32
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ba:	7f7a      	ldrb	r2, [r7, #29]
 800a9bc:	f107 0120 	add.w	r1, r7, #32
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a9c6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ca:	7f7a      	ldrb	r2, [r7, #29]
 800a9cc:	f107 0120 	add.w	r1, r7, #32
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a9d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9e2:	bf00      	nop
 800a9e4:	3724      	adds	r7, #36	; 0x24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	0800dca8 	.word	0x0800dca8
 800a9f4:	0800dcb0 	.word	0x0800dcb0

0800a9f8 <MX_MEMS_Init>:
#include "iks01a2_motion_sensors.h"

extern IKS01A2_MOTION_SENSOR_Axes_t accelero_val;

void MX_MEMS_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f7fa f9d4 	bl	8004dac <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800aa04:	2102      	movs	r1, #2
 800aa06:	2000      	movs	r0, #0
 800aa08:	f7fa fac6 	bl	8004f98 <IKS01A2_MOTION_SENSOR_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelero_val);
 800aa14:	4a03      	ldr	r2, [pc, #12]	; (800aa24 <MX_MEMS_Process+0x14>)
 800aa16:	2102      	movs	r1, #2
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f7fa faff 	bl	800501c <IKS01A2_MOTION_SENSOR_GetAxes>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800aa1e:	bf00      	nop
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20000324 	.word	0x20000324

0800aa28 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	2218      	movs	r2, #24
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 ff98 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa40:	233f      	movs	r3, #63	; 0x3f
 800aa42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800aa44:	2381      	movs	r3, #129	; 0x81
 800aa46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aa48:	1dfb      	adds	r3, r7, #7
 800aa4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800aa50:	f107 0308 	add.w	r3, r7, #8
 800aa54:	2100      	movs	r1, #0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fb58 	bl	800c10c <hci_send_req>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	da01      	bge.n	800aa66 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800aa62:	23ff      	movs	r3, #255	; 0xff
 800aa64:	e005      	b.n	800aa72 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	e000      	b.n	800aa72 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800aa7a:	b5b0      	push	{r4, r5, r7, lr}
 800aa7c:	b0ce      	sub	sp, #312	; 0x138
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	4605      	mov	r5, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	4610      	mov	r0, r2
 800aa86:	4619      	mov	r1, r3
 800aa88:	1dfb      	adds	r3, r7, #7
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	1d3b      	adds	r3, r7, #4
 800aa90:	4622      	mov	r2, r4
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	1cbb      	adds	r3, r7, #2
 800aa96:	4602      	mov	r2, r0
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	1dbb      	adds	r3, r7, #6
 800aa9c:	460a      	mov	r2, r1
 800aa9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800aaa8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aaac:	3308      	adds	r3, #8
 800aaae:	f107 0210 	add.w	r2, r7, #16
 800aab2:	4413      	add	r3, r2
 800aab4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800aab8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aabc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aac0:	4413      	add	r3, r2
 800aac2:	3309      	adds	r3, #9
 800aac4:	f107 0210 	add.w	r2, r7, #16
 800aac8:	4413      	add	r3, r2
 800aaca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aace:	f107 030f 	add.w	r3, r7, #15
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800aadc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aae0:	1dfa      	adds	r2, r7, #7
 800aae2:	7812      	ldrb	r2, [r2, #0]
 800aae4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaea:	3301      	adds	r3, #1
 800aaec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800aaf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aaf4:	1d3a      	adds	r2, r7, #4
 800aaf6:	8812      	ldrh	r2, [r2, #0]
 800aaf8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800aafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab00:	3302      	adds	r3, #2
 800ab02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800ab06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab0a:	1cba      	adds	r2, r7, #2
 800ab0c:	8812      	ldrh	r2, [r2, #0]
 800ab0e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ab12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab16:	3302      	adds	r3, #2
 800ab18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800ab1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab20:	1dba      	adds	r2, r7, #6
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ab26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800ab30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab34:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ab38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ab3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab3e:	3301      	adds	r3, #1
 800ab40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800ab44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab48:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ab4c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ab4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab52:	3301      	adds	r3, #1
 800ab54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800ab58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ab62:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fef2 	bl	800b950 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ab6c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ab70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ab74:	4413      	add	r3, r2
 800ab76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800ab7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab7e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ab82:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ab84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab88:	3301      	adds	r3, #1
 800ab8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800ab8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab92:	3301      	adds	r3, #1
 800ab94:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ab98:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fed7 	bl	800b950 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800aba2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aba6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800abaa:	4413      	add	r3, r2
 800abac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800abb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abb4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800abb8:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800abba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abbe:	3302      	adds	r3, #2
 800abc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800abc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abc8:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800abcc:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800abce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abd2:	3302      	adds	r3, #2
 800abd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800abd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abdc:	2218      	movs	r2, #24
 800abde:	2100      	movs	r1, #0
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fec5 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800abe6:	233f      	movs	r3, #63	; 0x3f
 800abe8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800abec:	2383      	movs	r3, #131	; 0x83
 800abee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800abf2:	f107 0310 	add.w	r3, r7, #16
 800abf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800abfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac02:	f107 030f 	add.w	r3, r7, #15
 800ac06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ac10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 fa78 	bl	800c10c <hci_send_req>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da01      	bge.n	800ac26 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800ac22:	23ff      	movs	r3, #255	; 0xff
 800ac24:	e009      	b.n	800ac3a <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800ac26:	f107 030f 	add.w	r3, r7, #15
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800ac30:	f107 030f 	add.w	r3, r7, #15
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	e000      	b.n	800ac3a <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bdb0      	pop	{r4, r5, r7, pc}

0800ac44 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b0cc      	sub	sp, #304	; 0x130
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	1dfb      	adds	r3, r7, #7
 800ac4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ac50:	f107 0310 	add.w	r3, r7, #16
 800ac54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac58:	f107 030f 	add.w	r3, r7, #15
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800ac66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac6a:	1dfa      	adds	r2, r7, #7
 800ac6c:	7812      	ldrb	r2, [r2, #0]
 800ac6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac74:	3301      	adds	r3, #1
 800ac76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ac7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac7e:	2218      	movs	r2, #24
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fe74 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac88:	233f      	movs	r3, #63	; 0x3f
 800ac8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ac8e:	2385      	movs	r3, #133	; 0x85
 800ac90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac94:	f107 0310 	add.w	r3, r7, #16
 800ac98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aca4:	f107 030f 	add.w	r3, r7, #15
 800aca8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800acac:	2301      	movs	r3, #1
 800acae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800acb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acb6:	2100      	movs	r1, #0
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fa27 	bl	800c10c <hci_send_req>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da01      	bge.n	800acc8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800acc4:	23ff      	movs	r3, #255	; 0xff
 800acc6:	e009      	b.n	800acdc <aci_gap_set_io_capability+0x98>
  if (status) 
 800acc8:	f107 030f 	add.w	r3, r7, #15
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <aci_gap_set_io_capability+0x96>
  {
    return status;
 800acd2:	f107 030f 	add.w	r3, r7, #15
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	e000      	b.n	800acdc <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800ace6:	b5b0      	push	{r4, r5, r7, lr}
 800ace8:	b0cc      	sub	sp, #304	; 0x130
 800acea:	af00      	add	r7, sp, #0
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	4610      	mov	r0, r2
 800acf2:	4619      	mov	r1, r3
 800acf4:	1dfb      	adds	r3, r7, #7
 800acf6:	462a      	mov	r2, r5
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	1dbb      	adds	r3, r7, #6
 800acfc:	4622      	mov	r2, r4
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	1d7b      	adds	r3, r7, #5
 800ad02:	4602      	mov	r2, r0
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	1d3b      	adds	r3, r7, #4
 800ad08:	460a      	mov	r2, r1
 800ad0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ad0c:	f107 0310 	add.w	r3, r7, #16
 800ad10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad14:	f107 030f 	add.w	r3, r7, #15
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800ad22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad26:	1dfa      	adds	r2, r7, #7
 800ad28:	7812      	ldrb	r2, [r2, #0]
 800ad2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad30:	3301      	adds	r3, #1
 800ad32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ad36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad3a:	1dba      	adds	r2, r7, #6
 800ad3c:	7812      	ldrb	r2, [r2, #0]
 800ad3e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ad40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad44:	3301      	adds	r3, #1
 800ad46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ad4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad4e:	1d7a      	adds	r2, r7, #5
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ad54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad58:	3301      	adds	r3, #1
 800ad5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ad5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad62:	1d3a      	adds	r2, r7, #4
 800ad64:	7812      	ldrb	r2, [r2, #0]
 800ad66:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ad68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ad72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad76:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ad7a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ad7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad80:	3301      	adds	r3, #1
 800ad82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ad86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad8a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ad8e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ad90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad94:	3301      	adds	r3, #1
 800ad96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ad9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad9e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ada2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ada4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada8:	3301      	adds	r3, #1
 800adaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800adae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800adb6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800adba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adbe:	3304      	adds	r3, #4
 800adc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800adc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800adcc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800adce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800add8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800addc:	2218      	movs	r2, #24
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fdc5 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ade6:	233f      	movs	r3, #63	; 0x3f
 800ade8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800adec:	2386      	movs	r3, #134	; 0x86
 800adee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800adfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae02:	f107 030f 	add.w	r3, r7, #15
 800ae06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 f978 	bl	800c10c <hci_send_req>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	da01      	bge.n	800ae26 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800ae22:	23ff      	movs	r3, #255	; 0xff
 800ae24:	e009      	b.n	800ae3a <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800ae26:	f107 030f 	add.w	r3, r7, #15
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800ae30:	f107 030f 	add.w	r3, r7, #15
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	e000      	b.n	800ae3a <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bdb0      	pop	{r4, r5, r7, pc}

0800ae44 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b0cd      	sub	sp, #308	; 0x134
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	463a      	mov	r2, r7
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	1dfb      	adds	r3, r7, #7
 800ae56:	4622      	mov	r2, r4
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	1dbb      	adds	r3, r7, #6
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	1d7b      	adds	r3, r7, #5
 800ae62:	460a      	mov	r2, r1
 800ae64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ae66:	f107 0310 	add.w	r3, r7, #16
 800ae6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	2207      	movs	r2, #7
 800ae74:	2100      	movs	r1, #0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fd7a 	bl	800b970 <Osal_MemSet>
  int index_input = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800ae82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae86:	1dfa      	adds	r2, r7, #7
 800ae88:	7812      	ldrb	r2, [r2, #0]
 800ae8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae90:	3301      	adds	r3, #1
 800ae92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ae96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae9a:	1dba      	adds	r2, r7, #6
 800ae9c:	7812      	ldrb	r2, [r2, #0]
 800ae9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aea4:	3301      	adds	r3, #1
 800aea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800aeaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeae:	1d7a      	adds	r2, r7, #5
 800aeb0:	7812      	ldrb	r2, [r2, #0]
 800aeb2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aeb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeb8:	3301      	adds	r3, #1
 800aeba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aec2:	2218      	movs	r2, #24
 800aec4:	2100      	movs	r1, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fd52 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aecc:	233f      	movs	r3, #63	; 0x3f
 800aece:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800aed2:	238a      	movs	r3, #138	; 0x8a
 800aed4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aed8:	f107 0310 	add.w	r3, r7, #16
 800aedc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800aee8:	f107 0308 	add.w	r3, r7, #8
 800aeec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800aef0:	2307      	movs	r3, #7
 800aef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 f905 	bl	800c10c <hci_send_req>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	da01      	bge.n	800af0c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800af08:	23ff      	movs	r3, #255	; 0xff
 800af0a:	e021      	b.n	800af50 <aci_gap_init+0x10c>
  if (resp.Status) 
 800af0c:	f107 0308 	add.w	r3, r7, #8
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <aci_gap_init+0xda>
  {
    return resp.Status;
 800af16:	f107 0308 	add.w	r3, r7, #8
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	e018      	b.n	800af50 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af26:	b29a      	uxth	r2, r3
 800af28:	463b      	mov	r3, r7
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800af2e:	f107 0308 	add.w	r3, r7, #8
 800af32:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800af36:	b29a      	uxth	r2, r3
 800af38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800af3c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800af46:	b29a      	uxth	r2, r3
 800af48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800af4c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}

0800af5a <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b0cc      	sub	sp, #304	; 0x130
 800af5e:	af00      	add	r7, sp, #0
 800af60:	4602      	mov	r2, r0
 800af62:	463b      	mov	r3, r7
 800af64:	6019      	str	r1, [r3, #0]
 800af66:	1dfb      	adds	r3, r7, #7
 800af68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800af6a:	f107 0310 	add.w	r3, r7, #16
 800af6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af72:	f107 030f 	add.w	r3, r7, #15
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800af80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af84:	1dfa      	adds	r2, r7, #7
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af8e:	3301      	adds	r3, #1
 800af90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800af94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af98:	1c58      	adds	r0, r3, #1
 800af9a:	1dfb      	adds	r3, r7, #7
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	463b      	mov	r3, r7
 800afa0:	6819      	ldr	r1, [r3, #0]
 800afa2:	f000 fcd5 	bl	800b950 <Osal_MemCpy>
  index_input += AdvDataLen;
 800afa6:	1dfb      	adds	r3, r7, #7
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800afae:	4413      	add	r3, r2
 800afb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afb8:	2218      	movs	r2, #24
 800afba:	2100      	movs	r1, #0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fcd7 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afc2:	233f      	movs	r3, #63	; 0x3f
 800afc4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800afc8:	238e      	movs	r3, #142	; 0x8e
 800afca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800afce:	f107 0310 	add.w	r3, r7, #16
 800afd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800afd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800afde:	f107 030f 	add.w	r3, r7, #15
 800afe2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800afec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f001 f88a 	bl	800c10c <hci_send_req>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	da01      	bge.n	800b002 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800affe:	23ff      	movs	r3, #255	; 0xff
 800b000:	e009      	b.n	800b016 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800b002:	f107 030f 	add.w	r3, r7, #15
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <aci_gap_update_adv_data+0xba>
  {
    return status;
 800b00c:	f107 030f 	add.w	r3, r7, #15
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	e000      	b.n	800b016 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b02a:	f107 0308 	add.w	r3, r7, #8
 800b02e:	2218      	movs	r2, #24
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fc9c 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b038:	233f      	movs	r3, #63	; 0x3f
 800b03a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b03c:	2392      	movs	r3, #146	; 0x92
 800b03e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b040:	1dfb      	adds	r3, r7, #7
 800b042:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b044:	2301      	movs	r3, #1
 800b046:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b048:	f107 0308 	add.w	r3, r7, #8
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 f85c 	bl	800c10c <hci_send_req>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	da01      	bge.n	800b05e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b05a:	23ff      	movs	r3, #255	; 0xff
 800b05c:	e005      	b.n	800b06a <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	e000      	b.n	800b06a <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b07c:	f107 0308 	add.w	r3, r7, #8
 800b080:	2218      	movs	r2, #24
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fc73 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b08a:	233f      	movs	r3, #63	; 0x3f
 800b08c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b08e:	f240 1301 	movw	r3, #257	; 0x101
 800b092:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b094:	1dfb      	adds	r3, r7, #7
 800b096:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b098:	2301      	movs	r3, #1
 800b09a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b09c:	f107 0308 	add.w	r3, r7, #8
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f001 f832 	bl	800c10c <hci_send_req>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	da01      	bge.n	800b0b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b0ae:	23ff      	movs	r3, #255	; 0xff
 800b0b0:	e005      	b.n	800b0be <aci_gatt_init+0x4c>
  if (status) 
 800b0b2:	79fb      	ldrb	r3, [r7, #7]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <aci_gatt_init+0x4a>
  {
    return status;
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	e000      	b.n	800b0be <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800b0c6:	b590      	push	{r4, r7, lr}
 800b0c8:	b0cf      	sub	sp, #316	; 0x13c
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	6001      	str	r1, [r0, #0]
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	1dfb      	adds	r3, r7, #7
 800b0d8:	4622      	mov	r2, r4
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	1dbb      	adds	r3, r7, #6
 800b0de:	4602      	mov	r2, r0
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	1d7b      	adds	r3, r7, #5
 800b0e4:	460a      	mov	r2, r1
 800b0e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b0e8:	f107 0310 	add.w	r3, r7, #16
 800b0ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b0f0:	1dfb      	adds	r3, r7, #7
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d007      	beq.n	800b108 <aci_gatt_add_service+0x42>
 800b0f8:	1dfb      	adds	r3, r7, #7
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d101      	bne.n	800b104 <aci_gatt_add_service+0x3e>
 800b100:	2311      	movs	r3, #17
 800b102:	e002      	b.n	800b10a <aci_gatt_add_service+0x44>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <aci_gatt_add_service+0x44>
 800b108:	2303      	movs	r3, #3
 800b10a:	f107 0210 	add.w	r2, r7, #16
 800b10e:	4413      	add	r3, r2
 800b110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b114:	f107 030c 	add.w	r3, r7, #12
 800b118:	2203      	movs	r2, #3
 800b11a:	2100      	movs	r1, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fc27 	bl	800b970 <Osal_MemSet>
  int index_input = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800b128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b12c:	1dfa      	adds	r2, r7, #7
 800b12e:	7812      	ldrb	r2, [r2, #0]
 800b130:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b136:	3301      	adds	r3, #1
 800b138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800b13c:	1dfb      	adds	r3, r7, #7
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d002      	beq.n	800b14a <aci_gatt_add_service+0x84>
 800b144:	2b02      	cmp	r3, #2
 800b146:	d004      	beq.n	800b152 <aci_gatt_add_service+0x8c>
 800b148:	e007      	b.n	800b15a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800b14a:	2302      	movs	r3, #2
 800b14c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b150:	e005      	b.n	800b15e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b152:	2310      	movs	r3, #16
 800b154:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b158:	e001      	b.n	800b15e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b15a:	2347      	movs	r3, #71	; 0x47
 800b15c:	e05d      	b.n	800b21a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800b15e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b162:	1c58      	adds	r0, r3, #1
 800b164:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b168:	463b      	mov	r3, r7
 800b16a:	6819      	ldr	r1, [r3, #0]
 800b16c:	f000 fbf0 	bl	800b950 <Osal_MemCpy>
    index_input += size;
 800b170:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b174:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b178:	4413      	add	r3, r2
 800b17a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800b17e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b182:	1dba      	adds	r2, r7, #6
 800b184:	7812      	ldrb	r2, [r2, #0]
 800b186:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b188:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b18c:	3301      	adds	r3, #1
 800b18e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800b192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b196:	1d7a      	adds	r2, r7, #5
 800b198:	7812      	ldrb	r2, [r2, #0]
 800b19a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b19c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b1a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1aa:	2218      	movs	r2, #24
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fbde 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1b4:	233f      	movs	r3, #63	; 0x3f
 800b1b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b1ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b1be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b1c2:	f107 0310 	add.w	r3, r7, #16
 800b1c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b1ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b1d2:	f107 030c 	add.w	r3, r7, #12
 800b1d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b1da:	2303      	movs	r3, #3
 800b1dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b1e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 ff90 	bl	800c10c <hci_send_req>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da01      	bge.n	800b1f6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b1f2:	23ff      	movs	r3, #255	; 0xff
 800b1f4:	e011      	b.n	800b21a <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800b1f6:	f107 030c 	add.w	r3, r7, #12
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800b200:	f107 030c 	add.w	r3, r7, #12
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	e008      	b.n	800b21a <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b208:	f107 030c 	add.w	r3, r7, #12
 800b20c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b210:	b29a      	uxth	r2, r3
 800b212:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b216:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b220:	46bd      	mov	sp, r7
 800b222:	bd90      	pop	{r4, r7, pc}

0800b224 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b0d1      	sub	sp, #324	; 0x144
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	f107 0108 	add.w	r1, r7, #8
 800b232:	600a      	str	r2, [r1, #0]
 800b234:	4619      	mov	r1, r3
 800b236:	f107 030e 	add.w	r3, r7, #14
 800b23a:	4622      	mov	r2, r4
 800b23c:	801a      	strh	r2, [r3, #0]
 800b23e:	f107 030d 	add.w	r3, r7, #13
 800b242:	4602      	mov	r2, r0
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	1dbb      	adds	r3, r7, #6
 800b248:	460a      	mov	r2, r1
 800b24a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b24c:	f107 0318 	add.w	r3, r7, #24
 800b250:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b254:	f107 030d 	add.w	r3, r7, #13
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d008      	beq.n	800b270 <aci_gatt_add_char+0x4c>
 800b25e:	f107 030d 	add.w	r3, r7, #13
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d101      	bne.n	800b26c <aci_gatt_add_char+0x48>
 800b268:	2313      	movs	r3, #19
 800b26a:	e002      	b.n	800b272 <aci_gatt_add_char+0x4e>
 800b26c:	2303      	movs	r3, #3
 800b26e:	e000      	b.n	800b272 <aci_gatt_add_char+0x4e>
 800b270:	2305      	movs	r3, #5
 800b272:	f107 0218 	add.w	r2, r7, #24
 800b276:	4413      	add	r3, r2
 800b278:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b27c:	f107 0314 	add.w	r3, r7, #20
 800b280:	2203      	movs	r2, #3
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fb73 	bl	800b970 <Osal_MemSet>
  int index_input = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b290:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b294:	f107 020e 	add.w	r2, r7, #14
 800b298:	8812      	ldrh	r2, [r2, #0]
 800b29a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b29c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2a0:	3302      	adds	r3, #2
 800b2a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800b2a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b2aa:	f107 020d 	add.w	r2, r7, #13
 800b2ae:	7812      	ldrb	r2, [r2, #0]
 800b2b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b2b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800b2bc:	f107 030d 	add.w	r3, r7, #13
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d002      	beq.n	800b2cc <aci_gatt_add_char+0xa8>
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d004      	beq.n	800b2d4 <aci_gatt_add_char+0xb0>
 800b2ca:	e007      	b.n	800b2dc <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b2d2:	e005      	b.n	800b2e0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b2da:	e001      	b.n	800b2e0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b2dc:	2347      	movs	r3, #71	; 0x47
 800b2de:	e086      	b.n	800b3ee <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800b2e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b2e4:	1cd8      	adds	r0, r3, #3
 800b2e6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b2ea:	f107 0308 	add.w	r3, r7, #8
 800b2ee:	6819      	ldr	r1, [r3, #0]
 800b2f0:	f000 fb2e 	bl	800b950 <Osal_MemCpy>
    index_input += size;
 800b2f4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b2f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800b302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b306:	1dba      	adds	r2, r7, #6
 800b308:	8812      	ldrh	r2, [r2, #0]
 800b30a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b30c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b310:	3302      	adds	r3, #2
 800b312:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800b316:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b31a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b31e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b320:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b324:	3301      	adds	r3, #1
 800b326:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800b32a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b32e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b332:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b334:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b338:	3301      	adds	r3, #1
 800b33a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800b33e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b342:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b346:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b348:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b34c:	3301      	adds	r3, #1
 800b34e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800b352:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b356:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b35a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b35c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b360:	3301      	adds	r3, #1
 800b362:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800b366:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b36a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b36e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b370:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b374:	3301      	adds	r3, #1
 800b376:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b37a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b37e:	2218      	movs	r2, #24
 800b380:	2100      	movs	r1, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f000 faf4 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b388:	233f      	movs	r3, #63	; 0x3f
 800b38a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b38e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b392:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b396:	f107 0318 	add.w	r3, r7, #24
 800b39a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b39e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b3a6:	f107 0314 	add.w	r3, r7, #20
 800b3aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b3b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 fea6 	bl	800c10c <hci_send_req>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da01      	bge.n	800b3ca <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800b3c6:	23ff      	movs	r3, #255	; 0xff
 800b3c8:	e011      	b.n	800b3ee <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b3ca:	f107 0314 	add.w	r3, r7, #20
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	e008      	b.n	800b3ee <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b3dc:	f107 0314 	add.w	r3, r7, #20
 800b3e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b3ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b3f8:	b5b0      	push	{r4, r5, r7, lr}
 800b3fa:	b0cc      	sub	sp, #304	; 0x130
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4605      	mov	r5, r0
 800b400:	460c      	mov	r4, r1
 800b402:	4610      	mov	r0, r2
 800b404:	4619      	mov	r1, r3
 800b406:	1dbb      	adds	r3, r7, #6
 800b408:	462a      	mov	r2, r5
 800b40a:	801a      	strh	r2, [r3, #0]
 800b40c:	1d3b      	adds	r3, r7, #4
 800b40e:	4622      	mov	r2, r4
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	1cfb      	adds	r3, r7, #3
 800b414:	4602      	mov	r2, r0
 800b416:	701a      	strb	r2, [r3, #0]
 800b418:	1cbb      	adds	r3, r7, #2
 800b41a:	460a      	mov	r2, r1
 800b41c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b41e:	f107 0310 	add.w	r3, r7, #16
 800b422:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b426:	f107 030f 	add.w	r3, r7, #15
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b438:	1dba      	adds	r2, r7, #6
 800b43a:	8812      	ldrh	r2, [r2, #0]
 800b43c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b43e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b442:	3302      	adds	r3, #2
 800b444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b44c:	1d3a      	adds	r2, r7, #4
 800b44e:	8812      	ldrh	r2, [r2, #0]
 800b450:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b456:	3302      	adds	r3, #2
 800b458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b45c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b460:	1cfa      	adds	r2, r7, #3
 800b462:	7812      	ldrb	r2, [r2, #0]
 800b464:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b46a:	3301      	adds	r3, #1
 800b46c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b474:	1cba      	adds	r2, r7, #2
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b47e:	3301      	adds	r3, #1
 800b480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b488:	1d98      	adds	r0, r3, #6
 800b48a:	1cbb      	adds	r3, r7, #2
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b494:	f000 fa5c 	bl	800b950 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b498:	1cbb      	adds	r3, r7, #2
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b4a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4aa:	2218      	movs	r2, #24
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fa5e 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b4b4:	233f      	movs	r3, #63	; 0x3f
 800b4b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b4ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b4be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b4c2:	f107 0310 	add.w	r3, r7, #16
 800b4c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b4ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b4d2:	f107 030f 	add.w	r3, r7, #15
 800b4d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b4e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fe10 	bl	800c10c <hci_send_req>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	da01      	bge.n	800b4f6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b4f2:	23ff      	movs	r3, #255	; 0xff
 800b4f4:	e009      	b.n	800b50a <aci_gatt_update_char_value+0x112>
  if (status) 
 800b4f6:	f107 030f 	add.w	r3, r7, #15
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b500:	f107 030f 	add.w	r3, r7, #15
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	e000      	b.n	800b50a <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b510:	46bd      	mov	sp, r7
 800b512:	bdb0      	pop	{r4, r5, r7, pc}

0800b514 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b0cc      	sub	sp, #304	; 0x130
 800b518:	af00      	add	r7, sp, #0
 800b51a:	463b      	mov	r3, r7
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	1dfb      	adds	r3, r7, #7
 800b520:	4602      	mov	r2, r0
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	1dbb      	adds	r3, r7, #6
 800b526:	460a      	mov	r2, r1
 800b528:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b52a:	f107 0310 	add.w	r3, r7, #16
 800b52e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b532:	f107 030f 	add.w	r3, r7, #15
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b544:	1dfa      	adds	r2, r7, #7
 800b546:	7812      	ldrb	r2, [r2, #0]
 800b548:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b54a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b54e:	3301      	adds	r3, #1
 800b550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b558:	1dba      	adds	r2, r7, #6
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b55e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b562:	3301      	adds	r3, #1
 800b564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b56c:	1c98      	adds	r0, r3, #2
 800b56e:	1dbb      	adds	r3, r7, #6
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	463b      	mov	r3, r7
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	f000 f9eb 	bl	800b950 <Osal_MemCpy>
  index_input += Length;
 800b57a:	1dbb      	adds	r3, r7, #6
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b582:	4413      	add	r3, r2
 800b584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b588:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b58c:	2218      	movs	r2, #24
 800b58e:	2100      	movs	r1, #0
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f9ed 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b596:	233f      	movs	r3, #63	; 0x3f
 800b598:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b59c:	230c      	movs	r3, #12
 800b59e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b5a2:	f107 0310 	add.w	r3, r7, #16
 800b5a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5b2:	f107 030f 	add.w	r3, r7, #15
 800b5b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fda0 	bl	800c10c <hci_send_req>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da01      	bge.n	800b5d6 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b5d2:	23ff      	movs	r3, #255	; 0xff
 800b5d4:	e009      	b.n	800b5ea <aci_hal_write_config_data+0xd6>
  if (status) 
 800b5d6:	f107 030f 	add.w	r3, r7, #15
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b5e0:	f107 030f 	add.w	r3, r7, #15
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	e000      	b.n	800b5ea <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b0cc      	sub	sp, #304	; 0x130
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	1dfb      	adds	r3, r7, #7
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	1dbb      	adds	r3, r7, #6
 800b602:	460a      	mov	r2, r1
 800b604:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b606:	f107 0310 	add.w	r3, r7, #16
 800b60a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b60e:	f107 030f 	add.w	r3, r7, #15
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b61c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b620:	1dfa      	adds	r2, r7, #7
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b62a:	3301      	adds	r3, #1
 800b62c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b634:	1dba      	adds	r2, r7, #6
 800b636:	7812      	ldrb	r2, [r2, #0]
 800b638:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b63a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b63e:	3301      	adds	r3, #1
 800b640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b648:	2218      	movs	r2, #24
 800b64a:	2100      	movs	r1, #0
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f98f 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b652:	233f      	movs	r3, #63	; 0x3f
 800b654:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b658:	230f      	movs	r3, #15
 800b65a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b65e:	f107 0310 	add.w	r3, r7, #16
 800b662:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b66a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b66e:	f107 030f 	add.w	r3, r7, #15
 800b672:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b676:	2301      	movs	r3, #1
 800b678:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b67c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b680:	2100      	movs	r1, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fd42 	bl	800c10c <hci_send_req>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	da01      	bge.n	800b692 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b68e:	23ff      	movs	r3, #255	; 0xff
 800b690:	e009      	b.n	800b6a6 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b692:	f107 030f 	add.w	r3, r7, #15
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b69c:	f107 030f 	add.w	r3, r7, #15
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	e000      	b.n	800b6a6 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b0cc      	sub	sp, #304	; 0x130
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	1dbb      	adds	r3, r7, #6
 800b6ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b6bc:	f107 0310 	add.w	r3, r7, #16
 800b6c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b6c4:	f107 030f 	add.w	r3, r7, #15
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6d6:	1dba      	adds	r2, r7, #6
 800b6d8:	8812      	ldrh	r2, [r2, #0]
 800b6da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6e0:	3302      	adds	r3, #2
 800b6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b6e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6ea:	2218      	movs	r2, #24
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 f93e 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6f4:	233f      	movs	r3, #63	; 0x3f
 800b6f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b6fa:	2318      	movs	r3, #24
 800b6fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b700:	f107 0310 	add.w	r3, r7, #16
 800b704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b70c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b710:	f107 030f 	add.w	r3, r7, #15
 800b714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b718:	2301      	movs	r3, #1
 800b71a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b71e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b722:	2100      	movs	r1, #0
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fcf1 	bl	800c10c <hci_send_req>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	da01      	bge.n	800b734 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b730:	23ff      	movs	r3, #255	; 0xff
 800b732:	e009      	b.n	800b748 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b734:	f107 030f 	add.w	r3, r7, #15
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b73e:	f107 030f 	add.w	r3, r7, #15
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	e000      	b.n	800b748 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b088      	sub	sp, #32
 800b756:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b75c:	f107 0308 	add.w	r3, r7, #8
 800b760:	2218      	movs	r2, #24
 800b762:	2100      	movs	r1, #0
 800b764:	4618      	mov	r0, r3
 800b766:	f000 f903 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x03;
 800b76a:	2303      	movs	r3, #3
 800b76c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b76e:	2303      	movs	r3, #3
 800b770:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b772:	1dfb      	adds	r3, r7, #7
 800b774:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b776:	2301      	movs	r3, #1
 800b778:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b77a:	f107 0308 	add.w	r3, r7, #8
 800b77e:	2100      	movs	r1, #0
 800b780:	4618      	mov	r0, r3
 800b782:	f000 fcc3 	bl	800c10c <hci_send_req>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	da01      	bge.n	800b790 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b78c:	23ff      	movs	r3, #255	; 0xff
 800b78e:	e005      	b.n	800b79c <hci_reset+0x4a>
  if (status) 
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <hci_reset+0x48>
  {
    return status;
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	e000      	b.n	800b79c <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3720      	adds	r7, #32
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b0ce      	sub	sp, #312	; 0x138
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	6019      	str	r1, [r3, #0]
 800b7b0:	1d3b      	adds	r3, r7, #4
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	f107 030e 	add.w	r3, r7, #14
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b7bc:	f107 0318 	add.w	r3, r7, #24
 800b7c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b7c4:	f107 0310 	add.w	r3, r7, #16
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 f8cf 	bl	800b970 <Osal_MemSet>
  int index_input = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b7d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b7dc:	f107 020e 	add.w	r2, r7, #14
 800b7e0:	8812      	ldrh	r2, [r2, #0]
 800b7e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7e8:	3302      	adds	r3, #2
 800b7ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b7ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b7f2:	2218      	movs	r2, #24
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f8ba 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x08;
 800b7fc:	2308      	movs	r3, #8
 800b7fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b802:	2330      	movs	r3, #48	; 0x30
 800b804:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b808:	f107 0318 	add.w	r3, r7, #24
 800b80c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b810:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b818:	f107 0310 	add.w	r3, r7, #16
 800b81c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b820:	2305      	movs	r3, #5
 800b822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b826:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b82a:	2100      	movs	r1, #0
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fc6d 	bl	800c10c <hci_send_req>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	da01      	bge.n	800b83c <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b838:	23ff      	movs	r3, #255	; 0xff
 800b83a:	e016      	b.n	800b86a <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800b83c:	f107 0310 	add.w	r3, r7, #16
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800b846:	f107 0310 	add.w	r3, r7, #16
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	e00d      	b.n	800b86a <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800b84e:	f107 0310 	add.w	r3, r7, #16
 800b852:	78da      	ldrb	r2, [r3, #3]
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800b85c:	f107 0310 	add.w	r3, r7, #16
 800b860:	791a      	ldrb	r2, [r3, #4]
 800b862:	1d3b      	adds	r3, r7, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b0cd      	sub	sp, #308	; 0x134
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	1dfb      	adds	r3, r7, #7
 800b882:	4622      	mov	r2, r4
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	1dbb      	adds	r3, r7, #6
 800b888:	4602      	mov	r2, r0
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	1d7b      	adds	r3, r7, #5
 800b88e:	460a      	mov	r2, r1
 800b890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b892:	f107 0310 	add.w	r3, r7, #16
 800b896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b89a:	f107 030f 	add.w	r3, r7, #15
 800b89e:	2200      	movs	r2, #0
 800b8a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800b8a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8ac:	1dfa      	adds	r2, r7, #7
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b8b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800b8bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8c0:	1dba      	adds	r2, r7, #6
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b8c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800b8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8d4:	1d7a      	adds	r2, r7, #5
 800b8d6:	7812      	ldrb	r2, [r2, #0]
 800b8d8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8de:	3301      	adds	r3, #1
 800b8e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b8e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8e8:	2218      	movs	r2, #24
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f83f 	bl	800b970 <Osal_MemSet>
  rq.ogf = 0x08;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b8f8:	2331      	movs	r3, #49	; 0x31
 800b8fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b8fe:	f107 0310 	add.w	r3, r7, #16
 800b902:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b90a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b90e:	f107 030f 	add.w	r3, r7, #15
 800b912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b916:	2301      	movs	r3, #1
 800b918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b91c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b920:	2100      	movs	r1, #0
 800b922:	4618      	mov	r0, r3
 800b924:	f000 fbf2 	bl	800c10c <hci_send_req>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	da01      	bge.n	800b932 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800b92e:	23ff      	movs	r3, #255	; 0xff
 800b930:	e009      	b.n	800b946 <hci_le_set_default_phy+0xd2>
  if (status) 
 800b932:	f107 030f 	add.w	r3, r7, #15
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <hci_le_set_default_phy+0xd0>
  {
    return status;
 800b93c:	f107 030f 	add.w	r3, r7, #15
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	e000      	b.n	800b946 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f002 f96b 	bl	800dc3c <memcpy>
 800b966:	4603      	mov	r3, r0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	68b9      	ldr	r1, [r7, #8]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f002 f966 	bl	800dc52 <memset>
 800b986:	4603      	mov	r3, r0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b08a      	sub	sp, #40	; 0x28
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b998:	2300      	movs	r3, #0
 800b99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2bff      	cmp	r3, #255	; 0xff
 800b9aa:	d000      	beq.n	800b9ae <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b9ac:	e04a      	b.n	800ba44 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	3302      	adds	r3, #2
 800b9b2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f640 4301 	movw	r3, #3073	; 0xc01
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d000      	beq.n	800b9c6 <PeerToPeer_Event_Handler+0x36>
          break;
 800b9c4:	e03d      	b.n	800ba42 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	3302      	adds	r3, #2
 800b9ca:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	885b      	ldrh	r3, [r3, #2]
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	4b1e      	ldr	r3, [pc, #120]	; (800ba50 <PeerToPeer_Event_Handler+0xc0>)
 800b9d6:	889b      	ldrh	r3, [r3, #4]
 800b9d8:	3302      	adds	r3, #2
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d118      	bne.n	800ba10 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	7a1b      	ldrb	r3, [r3, #8]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d007      	beq.n	800ba00 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 fbd5 	bl	800d1a8 <P2PS_STM_App_Notification>
        break;
 800b9fe:	e01f      	b.n	800ba40 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ba00:	2301      	movs	r3, #1
 800ba02:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ba04:	f107 0308 	add.w	r3, r7, #8
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 fbcd 	bl	800d1a8 <P2PS_STM_App_Notification>
        break;
 800ba0e:	e017      	b.n	800ba40 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	885b      	ldrh	r3, [r3, #2]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <PeerToPeer_Event_Handler+0xc0>)
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d10e      	bne.n	800ba40 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	88db      	ldrh	r3, [r3, #6]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3308      	adds	r3, #8
 800ba34:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800ba36:	f107 0308 	add.w	r3, r7, #8
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fbb4 	bl	800d1a8 <P2PS_STM_App_Notification>
        break;
 800ba40:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800ba42:	bf00      	nop
  }

  return(return_value);
 800ba44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3728      	adds	r7, #40	; 0x28
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	200001fc 	.word	0x200001fc

0800ba54 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08a      	sub	sp, #40	; 0x28
 800ba58:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ba5a:	484a      	ldr	r0, [pc, #296]	; (800bb84 <P2PS_STM_Init+0x130>)
 800ba5c:	f000 f930 	bl	800bcc0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ba60:	238f      	movs	r3, #143	; 0x8f
 800ba62:	703b      	strb	r3, [r7, #0]
 800ba64:	23e5      	movs	r3, #229	; 0xe5
 800ba66:	707b      	strb	r3, [r7, #1]
 800ba68:	23b3      	movs	r3, #179	; 0xb3
 800ba6a:	70bb      	strb	r3, [r7, #2]
 800ba6c:	23d5      	movs	r3, #213	; 0xd5
 800ba6e:	70fb      	strb	r3, [r7, #3]
 800ba70:	232e      	movs	r3, #46	; 0x2e
 800ba72:	713b      	strb	r3, [r7, #4]
 800ba74:	237f      	movs	r3, #127	; 0x7f
 800ba76:	717b      	strb	r3, [r7, #5]
 800ba78:	234a      	movs	r3, #74	; 0x4a
 800ba7a:	71bb      	strb	r3, [r7, #6]
 800ba7c:	2398      	movs	r3, #152	; 0x98
 800ba7e:	71fb      	strb	r3, [r7, #7]
 800ba80:	232a      	movs	r3, #42	; 0x2a
 800ba82:	723b      	strb	r3, [r7, #8]
 800ba84:	2348      	movs	r3, #72	; 0x48
 800ba86:	727b      	strb	r3, [r7, #9]
 800ba88:	237a      	movs	r3, #122	; 0x7a
 800ba8a:	72bb      	strb	r3, [r7, #10]
 800ba8c:	23cc      	movs	r3, #204	; 0xcc
 800ba8e:	72fb      	strb	r3, [r7, #11]
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	733b      	strb	r3, [r7, #12]
 800ba94:	23fe      	movs	r3, #254	; 0xfe
 800ba96:	737b      	strb	r3, [r7, #13]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73bb      	strb	r3, [r7, #14]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800baa0:	4639      	mov	r1, r7
 800baa2:	4b39      	ldr	r3, [pc, #228]	; (800bb88 <P2PS_STM_Init+0x134>)
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	2308      	movs	r3, #8
 800baa8:	2201      	movs	r2, #1
 800baaa:	2002      	movs	r0, #2
 800baac:	f7ff fb0b 	bl	800b0c6 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800bab0:	2319      	movs	r3, #25
 800bab2:	703b      	strb	r3, [r7, #0]
 800bab4:	23ed      	movs	r3, #237	; 0xed
 800bab6:	707b      	strb	r3, [r7, #1]
 800bab8:	2382      	movs	r3, #130	; 0x82
 800baba:	70bb      	strb	r3, [r7, #2]
 800babc:	23ae      	movs	r3, #174	; 0xae
 800babe:	70fb      	strb	r3, [r7, #3]
 800bac0:	23ed      	movs	r3, #237	; 0xed
 800bac2:	713b      	strb	r3, [r7, #4]
 800bac4:	2321      	movs	r3, #33	; 0x21
 800bac6:	717b      	strb	r3, [r7, #5]
 800bac8:	234c      	movs	r3, #76	; 0x4c
 800baca:	71bb      	strb	r3, [r7, #6]
 800bacc:	239d      	movs	r3, #157	; 0x9d
 800bace:	71fb      	strb	r3, [r7, #7]
 800bad0:	2341      	movs	r3, #65	; 0x41
 800bad2:	723b      	strb	r3, [r7, #8]
 800bad4:	2345      	movs	r3, #69	; 0x45
 800bad6:	727b      	strb	r3, [r7, #9]
 800bad8:	2322      	movs	r3, #34	; 0x22
 800bada:	72bb      	strb	r3, [r7, #10]
 800badc:	238e      	movs	r3, #142	; 0x8e
 800bade:	72fb      	strb	r3, [r7, #11]
 800bae0:	2341      	movs	r3, #65	; 0x41
 800bae2:	733b      	strb	r3, [r7, #12]
 800bae4:	23fe      	movs	r3, #254	; 0xfe
 800bae6:	737b      	strb	r3, [r7, #13]
 800bae8:	2300      	movs	r3, #0
 800baea:	73bb      	strb	r3, [r7, #14]
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800baf0:	4b25      	ldr	r3, [pc, #148]	; (800bb88 <P2PS_STM_Init+0x134>)
 800baf2:	8818      	ldrh	r0, [r3, #0]
 800baf4:	463a      	mov	r2, r7
 800baf6:	4b25      	ldr	r3, [pc, #148]	; (800bb8c <P2PS_STM_Init+0x138>)
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	2301      	movs	r3, #1
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	230a      	movs	r3, #10
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	2301      	movs	r3, #1
 800bb04:	9302      	str	r3, [sp, #8]
 800bb06:	2300      	movs	r3, #0
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	2306      	movs	r3, #6
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	2302      	movs	r3, #2
 800bb10:	2102      	movs	r1, #2
 800bb12:	f7ff fb87 	bl	800b224 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800bb16:	2319      	movs	r3, #25
 800bb18:	703b      	strb	r3, [r7, #0]
 800bb1a:	23ed      	movs	r3, #237	; 0xed
 800bb1c:	707b      	strb	r3, [r7, #1]
 800bb1e:	2382      	movs	r3, #130	; 0x82
 800bb20:	70bb      	strb	r3, [r7, #2]
 800bb22:	23ae      	movs	r3, #174	; 0xae
 800bb24:	70fb      	strb	r3, [r7, #3]
 800bb26:	23ed      	movs	r3, #237	; 0xed
 800bb28:	713b      	strb	r3, [r7, #4]
 800bb2a:	2321      	movs	r3, #33	; 0x21
 800bb2c:	717b      	strb	r3, [r7, #5]
 800bb2e:	234c      	movs	r3, #76	; 0x4c
 800bb30:	71bb      	strb	r3, [r7, #6]
 800bb32:	239d      	movs	r3, #157	; 0x9d
 800bb34:	71fb      	strb	r3, [r7, #7]
 800bb36:	2341      	movs	r3, #65	; 0x41
 800bb38:	723b      	strb	r3, [r7, #8]
 800bb3a:	2345      	movs	r3, #69	; 0x45
 800bb3c:	727b      	strb	r3, [r7, #9]
 800bb3e:	2322      	movs	r3, #34	; 0x22
 800bb40:	72bb      	strb	r3, [r7, #10]
 800bb42:	238e      	movs	r3, #142	; 0x8e
 800bb44:	72fb      	strb	r3, [r7, #11]
 800bb46:	2342      	movs	r3, #66	; 0x42
 800bb48:	733b      	strb	r3, [r7, #12]
 800bb4a:	23fe      	movs	r3, #254	; 0xfe
 800bb4c:	737b      	strb	r3, [r7, #13]
 800bb4e:	2300      	movs	r3, #0
 800bb50:	73bb      	strb	r3, [r7, #14]
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bb56:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <P2PS_STM_Init+0x134>)
 800bb58:	8818      	ldrh	r0, [r3, #0]
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <P2PS_STM_Init+0x13c>)
 800bb5e:	9305      	str	r3, [sp, #20]
 800bb60:	2301      	movs	r3, #1
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	230a      	movs	r3, #10
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9302      	str	r3, [sp, #8]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	2310      	movs	r3, #16
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	2302      	movs	r3, #2
 800bb76:	2102      	movs	r1, #2
 800bb78:	f7ff fb54 	bl	800b224 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800bb7c:	bf00      	nop
}
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0800b991 	.word	0x0800b991
 800bb88:	200001fc 	.word	0x200001fc
 800bb8c:	200001fe 	.word	0x200001fe
 800bb90:	20000200 	.word	0x20000200

0800bb94 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  return;
 800bb98:	bf00      	nop
}
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bba2:	b480      	push	{r7}
 800bba4:	af00      	add	r7, sp, #0
  return;
 800bba6:	bf00      	nop
}
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <DIS_Init>:
__weak void DIS_Init( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0
  return;
 800bbb4:	bf00      	nop
}
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	af00      	add	r7, sp, #0
  return;
 800bbc2:	bf00      	nop
}
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	af00      	add	r7, sp, #0
  return;
 800bbd0:	bf00      	nop
}
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <HRS_Init>:
__weak void HRS_Init( void )
{
 800bbda:	b480      	push	{r7}
 800bbdc:	af00      	add	r7, sp, #0
  return;
 800bbde:	bf00      	nop
}
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HTS_Init>:
__weak void HTS_Init( void )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0
  return;
 800bbec:	bf00      	nop
}
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	af00      	add	r7, sp, #0
  return;
 800bbfa:	bf00      	nop
}
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  return;
 800bc08:	bf00      	nop
}
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bc12:	b480      	push	{r7}
 800bc14:	af00      	add	r7, sp, #0
  return;
 800bc16:	bf00      	nop
}
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
  return;
 800bc24:	bf00      	nop
}
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bc2e:	b480      	push	{r7}
 800bc30:	af00      	add	r7, sp, #0
  return;
 800bc32:	bf00      	nop
}
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <MESH_Init>:
__weak void MESH_Init( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
  return;
 800bc40:	bf00      	nop
}
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	af00      	add	r7, sp, #0
  return;
 800bc4e:	bf00      	nop
}
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bc5c:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <SVCCTL_Init+0x18>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bc62:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <SVCCTL_Init+0x1c>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bc68:	f000 f806 	bl	800bc78 <SVCCTL_SvcInit>

  return;
 800bc6c:	bf00      	nop
}
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20000204 	.word	0x20000204
 800bc74:	20000224 	.word	0x20000224

0800bc78 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
  BLS_Init();
 800bc7c:	f7ff ff8a 	bl	800bb94 <BLS_Init>

  CRS_STM_Init();
 800bc80:	f7ff ff8f 	bl	800bba2 <CRS_STM_Init>

  DIS_Init();
 800bc84:	f7ff ff94 	bl	800bbb0 <DIS_Init>

  EDS_STM_Init();
 800bc88:	f7ff ff99 	bl	800bbbe <EDS_STM_Init>

  HIDS_Init();
 800bc8c:	f7ff ff9e 	bl	800bbcc <HIDS_Init>

  HRS_Init();
 800bc90:	f7ff ffa3 	bl	800bbda <HRS_Init>

  HTS_Init();
 800bc94:	f7ff ffa8 	bl	800bbe8 <HTS_Init>

  IAS_Init();
 800bc98:	f7ff ffad 	bl	800bbf6 <IAS_Init>

  LLS_Init();
 800bc9c:	f7ff ffb2 	bl	800bc04 <LLS_Init>

  TPS_Init();
 800bca0:	f7ff ffb7 	bl	800bc12 <TPS_Init>

  MOTENV_STM_Init();
 800bca4:	f7ff ffbc 	bl	800bc20 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bca8:	f7ff fed4 	bl	800ba54 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bcac:	f7ff ffbf 	bl	800bc2e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bcb0:	f7ff ffcb 	bl	800bc4a <BVOPUS_STM_Init>

  MESH_Init();
 800bcb4:	f7ff ffc2 	bl	800bc3c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bcb8:	f000 f8ea 	bl	800be90 <SVCCTL_InitCustomSvc>
  
  return;
 800bcbc:	bf00      	nop
}
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bcc8:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bcca:	7f1b      	ldrb	r3, [r3, #28]
 800bccc:	4619      	mov	r1, r3
 800bcce:	4a08      	ldr	r2, [pc, #32]	; (800bcf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bcd6:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bcd8:	7f1b      	ldrb	r3, [r3, #28]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bce0:	771a      	strb	r2, [r3, #28]

  return;
 800bce2:	bf00      	nop
}
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	20000204 	.word	0x20000204

0800bcf4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bd02:	2300      	movs	r3, #0
 800bd04:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2bff      	cmp	r3, #255	; 0xff
 800bd0c:	d000      	beq.n	800bd10 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bd0e:	e025      	b.n	800bd5c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	3302      	adds	r3, #2
 800bd14:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd24:	d000      	beq.n	800bd28 <SVCCTL_UserEvtRx+0x34>
          break;
 800bd26:	e018      	b.n	800bd5a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	757b      	strb	r3, [r7, #21]
 800bd2c:	e00d      	b.n	800bd4a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bd2e:	7d7b      	ldrb	r3, [r7, #21]
 800bd30:	4a18      	ldr	r2, [pc, #96]	; (800bd94 <SVCCTL_UserEvtRx+0xa0>)
 800bd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	4798      	blx	r3
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d108      	bne.n	800bd56 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bd44:	7d7b      	ldrb	r3, [r7, #21]
 800bd46:	3301      	adds	r3, #1
 800bd48:	757b      	strb	r3, [r7, #21]
 800bd4a:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <SVCCTL_UserEvtRx+0xa0>)
 800bd4c:	7f1b      	ldrb	r3, [r3, #28]
 800bd4e:	7d7a      	ldrb	r2, [r7, #21]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d3ec      	bcc.n	800bd2e <SVCCTL_UserEvtRx+0x3a>
          break;
 800bd54:	e000      	b.n	800bd58 <SVCCTL_UserEvtRx+0x64>
              break;
 800bd56:	bf00      	nop
          break;
 800bd58:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bd5a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d009      	beq.n	800bd76 <SVCCTL_UserEvtRx+0x82>
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d00a      	beq.n	800bd7c <SVCCTL_UserEvtRx+0x88>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10b      	bne.n	800bd82 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 ff4e 	bl	800cc0c <SVCCTL_App_Notification>
 800bd70:	4603      	mov	r3, r0
 800bd72:	75bb      	strb	r3, [r7, #22]
      break;
 800bd74:	e008      	b.n	800bd88 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bd76:	2301      	movs	r3, #1
 800bd78:	75bb      	strb	r3, [r7, #22]
      break;
 800bd7a:	e005      	b.n	800bd88 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	75bb      	strb	r3, [r7, #22]
      break;
 800bd80:	e002      	b.n	800bd88 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75bb      	strb	r3, [r7, #22]
      break;
 800bd86:	bf00      	nop
  }

  return (return_status);
 800bd88:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000204 	.word	0x20000204

0800bd98 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08a      	sub	sp, #40	; 0x28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800bda0:	2300      	movs	r3, #0
 800bda2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	2bff      	cmp	r3, #255	; 0xff
 800bdb2:	d000      	beq.n	800bdb6 <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bdb4:	e063      	b.n	800be7e <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	3302      	adds	r3, #2
 800bdba:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f640 4301 	movw	r3, #3073	; 0xc01
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d000      	beq.n	800bdce <Template_Event_Handler+0x36>
          break;
 800bdcc:	e056      	b.n	800be7c <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	3302      	adds	r3, #2
 800bdd2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	885b      	ldrh	r3, [r3, #2]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	461a      	mov	r2, r3
 800bddc:	4b2b      	ldr	r3, [pc, #172]	; (800be8c <Template_Event_Handler+0xf4>)
 800bdde:	889b      	ldrh	r3, [r3, #4]
 800bde0:	3302      	adds	r3, #2
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d118      	bne.n	800be18 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bde6:	2301      	movs	r3, #1
 800bde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	7a1b      	ldrb	r3, [r3, #8]
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bdfc:	f107 0308 	add.w	r3, r7, #8
 800be00:	4618      	mov	r0, r3
 800be02:	f001 fa0d 	bl	800d220 <TEMPLATE_STM_App_Notification>
        break;
 800be06:	e038      	b.n	800be7a <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800be08:	2301      	movs	r3, #1
 800be0a:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4618      	mov	r0, r3
 800be12:	f001 fa05 	bl	800d220 <TEMPLATE_STM_App_Notification>
        break;
 800be16:	e030      	b.n	800be7a <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	885b      	ldrh	r3, [r3, #2]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	461a      	mov	r2, r3
 800be20:	4b1a      	ldr	r3, [pc, #104]	; (800be8c <Template_Event_Handler+0xf4>)
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	3301      	adds	r3, #1
 800be26:	429a      	cmp	r2, r3
 800be28:	d10f      	bne.n	800be4a <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	88db      	ldrh	r3, [r3, #6]
 800be32:	b29b      	uxth	r3, r3
 800be34:	b2db      	uxtb	r3, r3
 800be36:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	3308      	adds	r3, #8
 800be3c:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800be3e:	f107 0308 	add.w	r3, r7, #8
 800be42:	4618      	mov	r0, r3
 800be44:	f001 f9ec 	bl	800d220 <TEMPLATE_STM_App_Notification>
        break;
 800be48:	e017      	b.n	800be7a <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	885b      	ldrh	r3, [r3, #2]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	461a      	mov	r2, r3
 800be52:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <Template_Event_Handler+0xf4>)
 800be54:	88db      	ldrh	r3, [r3, #6]
 800be56:	3301      	adds	r3, #1
 800be58:	429a      	cmp	r2, r3
 800be5a:	d10e      	bne.n	800be7a <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800be5c:	2304      	movs	r3, #4
 800be5e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	88db      	ldrh	r3, [r3, #6]
 800be64:	b29b      	uxth	r3, r3
 800be66:	b2db      	uxtb	r3, r3
 800be68:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	3308      	adds	r3, #8
 800be6e:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800be70:	f107 0308 	add.w	r3, r7, #8
 800be74:	4618      	mov	r0, r3
 800be76:	f001 f9d3 	bl	800d220 <TEMPLATE_STM_App_Notification>
        break;
 800be7a:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800be7c:	bf00      	nop
  }

  return(return_value);
 800be7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800be82:	4618      	mov	r0, r3
 800be84:	3728      	adds	r7, #40	; 0x28
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20000228 	.word	0x20000228

0800be90 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08a      	sub	sp, #40	; 0x28
 800be94:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800be96:	484a      	ldr	r0, [pc, #296]	; (800bfc0 <SVCCTL_InitCustomSvc+0x130>)
 800be98:	f7ff ff12 	bl	800bcc0 <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800be9c:	238f      	movs	r3, #143	; 0x8f
 800be9e:	703b      	strb	r3, [r7, #0]
 800bea0:	23e5      	movs	r3, #229	; 0xe5
 800bea2:	707b      	strb	r3, [r7, #1]
 800bea4:	23b3      	movs	r3, #179	; 0xb3
 800bea6:	70bb      	strb	r3, [r7, #2]
 800bea8:	23d5      	movs	r3, #213	; 0xd5
 800beaa:	70fb      	strb	r3, [r7, #3]
 800beac:	232e      	movs	r3, #46	; 0x2e
 800beae:	713b      	strb	r3, [r7, #4]
 800beb0:	237f      	movs	r3, #127	; 0x7f
 800beb2:	717b      	strb	r3, [r7, #5]
 800beb4:	234a      	movs	r3, #74	; 0x4a
 800beb6:	71bb      	strb	r3, [r7, #6]
 800beb8:	2398      	movs	r3, #152	; 0x98
 800beba:	71fb      	strb	r3, [r7, #7]
 800bebc:	232a      	movs	r3, #42	; 0x2a
 800bebe:	723b      	strb	r3, [r7, #8]
 800bec0:	2348      	movs	r3, #72	; 0x48
 800bec2:	727b      	strb	r3, [r7, #9]
 800bec4:	237a      	movs	r3, #122	; 0x7a
 800bec6:	72bb      	strb	r3, [r7, #10]
 800bec8:	23cc      	movs	r3, #204	; 0xcc
 800beca:	72fb      	strb	r3, [r7, #11]
 800becc:	23bb      	movs	r3, #187	; 0xbb
 800bece:	733b      	strb	r3, [r7, #12]
 800bed0:	23aa      	movs	r3, #170	; 0xaa
 800bed2:	737b      	strb	r3, [r7, #13]
 800bed4:	2300      	movs	r3, #0
 800bed6:	73bb      	strb	r3, [r7, #14]
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800bedc:	4639      	mov	r1, r7
 800bede:	4b39      	ldr	r3, [pc, #228]	; (800bfc4 <SVCCTL_InitCustomSvc+0x134>)
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	2308      	movs	r3, #8
 800bee4:	2201      	movs	r2, #1
 800bee6:	2002      	movs	r0, #2
 800bee8:	f7ff f8ed 	bl	800b0c6 <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800beec:	2319      	movs	r3, #25
 800beee:	703b      	strb	r3, [r7, #0]
 800bef0:	23ed      	movs	r3, #237	; 0xed
 800bef2:	707b      	strb	r3, [r7, #1]
 800bef4:	2382      	movs	r3, #130	; 0x82
 800bef6:	70bb      	strb	r3, [r7, #2]
 800bef8:	23ae      	movs	r3, #174	; 0xae
 800befa:	70fb      	strb	r3, [r7, #3]
 800befc:	23ed      	movs	r3, #237	; 0xed
 800befe:	713b      	strb	r3, [r7, #4]
 800bf00:	2321      	movs	r3, #33	; 0x21
 800bf02:	717b      	strb	r3, [r7, #5]
 800bf04:	234c      	movs	r3, #76	; 0x4c
 800bf06:	71bb      	strb	r3, [r7, #6]
 800bf08:	239d      	movs	r3, #157	; 0x9d
 800bf0a:	71fb      	strb	r3, [r7, #7]
 800bf0c:	2341      	movs	r3, #65	; 0x41
 800bf0e:	723b      	strb	r3, [r7, #8]
 800bf10:	2345      	movs	r3, #69	; 0x45
 800bf12:	727b      	strb	r3, [r7, #9]
 800bf14:	2322      	movs	r3, #34	; 0x22
 800bf16:	72bb      	strb	r3, [r7, #10]
 800bf18:	238e      	movs	r3, #142	; 0x8e
 800bf1a:	72fb      	strb	r3, [r7, #11]
 800bf1c:	23cc      	movs	r3, #204	; 0xcc
 800bf1e:	733b      	strb	r3, [r7, #12]
 800bf20:	23aa      	movs	r3, #170	; 0xaa
 800bf22:	737b      	strb	r3, [r7, #13]
 800bf24:	2300      	movs	r3, #0
 800bf26:	73bb      	strb	r3, [r7, #14]
 800bf28:	2300      	movs	r3, #0
 800bf2a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800bf2c:	4b25      	ldr	r3, [pc, #148]	; (800bfc4 <SVCCTL_InitCustomSvc+0x134>)
 800bf2e:	8818      	ldrh	r0, [r3, #0]
 800bf30:	463a      	mov	r2, r7
 800bf32:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <SVCCTL_InitCustomSvc+0x138>)
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	2301      	movs	r3, #1
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	230a      	movs	r3, #10
 800bf3c:	9303      	str	r3, [sp, #12]
 800bf3e:	2301      	movs	r3, #1
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	2300      	movs	r3, #0
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	2306      	movs	r3, #6
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	2102      	movs	r1, #2
 800bf4e:	f7ff f969 	bl	800b224 <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800bf52:	2319      	movs	r3, #25
 800bf54:	703b      	strb	r3, [r7, #0]
 800bf56:	23ed      	movs	r3, #237	; 0xed
 800bf58:	707b      	strb	r3, [r7, #1]
 800bf5a:	2382      	movs	r3, #130	; 0x82
 800bf5c:	70bb      	strb	r3, [r7, #2]
 800bf5e:	23ae      	movs	r3, #174	; 0xae
 800bf60:	70fb      	strb	r3, [r7, #3]
 800bf62:	23ed      	movs	r3, #237	; 0xed
 800bf64:	713b      	strb	r3, [r7, #4]
 800bf66:	2321      	movs	r3, #33	; 0x21
 800bf68:	717b      	strb	r3, [r7, #5]
 800bf6a:	234c      	movs	r3, #76	; 0x4c
 800bf6c:	71bb      	strb	r3, [r7, #6]
 800bf6e:	239d      	movs	r3, #157	; 0x9d
 800bf70:	71fb      	strb	r3, [r7, #7]
 800bf72:	2341      	movs	r3, #65	; 0x41
 800bf74:	723b      	strb	r3, [r7, #8]
 800bf76:	2345      	movs	r3, #69	; 0x45
 800bf78:	727b      	strb	r3, [r7, #9]
 800bf7a:	2322      	movs	r3, #34	; 0x22
 800bf7c:	72bb      	strb	r3, [r7, #10]
 800bf7e:	238e      	movs	r3, #142	; 0x8e
 800bf80:	72fb      	strb	r3, [r7, #11]
 800bf82:	23dd      	movs	r3, #221	; 0xdd
 800bf84:	733b      	strb	r3, [r7, #12]
 800bf86:	23aa      	movs	r3, #170	; 0xaa
 800bf88:	737b      	strb	r3, [r7, #13]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73bb      	strb	r3, [r7, #14]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <SVCCTL_InitCustomSvc+0x134>)
 800bf94:	8818      	ldrh	r0, [r3, #0]
 800bf96:	463a      	mov	r2, r7
 800bf98:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <SVCCTL_InitCustomSvc+0x13c>)
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	230a      	movs	r3, #10
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	9302      	str	r3, [sp, #8]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	2310      	movs	r3, #16
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	2102      	movs	r1, #2
 800bfb4:	f7ff f936 	bl	800b224 <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800bfb8:	bf00      	nop
}
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	0800bd99 	.word	0x0800bd99
 800bfc4:	20000228 	.word	0x20000228
 800bfc8:	2000022a 	.word	0x2000022a
 800bfcc:	2000022c 	.word	0x2000022c

0800bfd0 <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af02      	add	r7, sp, #8
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	6039      	str	r1, [r7, #0]
 800bfda:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800bfdc:	2342      	movs	r3, #66	; 0x42
 800bfde:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800bfe0:	88fb      	ldrh	r3, [r7, #6]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d000      	beq.n	800bfe8 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800bfe6:	e00c      	b.n	800c002 <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800bfe8:	4b08      	ldr	r3, [pc, #32]	; (800c00c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bfea:	8818      	ldrh	r0, [r3, #0]
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <TEMPLATE_STM_App_Update_Char+0x3c>)
 800bfee:	8899      	ldrh	r1, [r3, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2302      	movs	r3, #2
 800bff6:	2200      	movs	r2, #0
 800bff8:	f7ff f9fe 	bl	800b3f8 <aci_gatt_update_char_value>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
      break;
 800c000:	bf00      	nop
  }

  return result;
 800c002:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20000228 	.word	0x20000228

0800c010 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c018:	f107 030c 	add.w	r3, r7, #12
 800c01c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	2121      	movs	r1, #33	; 0x21
 800c028:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800c02c:	f000 fa00 	bl	800c430 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	330b      	adds	r3, #11
 800c034:	78db      	ldrb	r3, [r3, #3]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3720      	adds	r7, #32
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	4a08      	ldr	r2, [pc, #32]	; (800c070 <hci_init+0x30>)
 800c050:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c052:	4a08      	ldr	r2, [pc, #32]	; (800c074 <hci_init+0x34>)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c058:	4806      	ldr	r0, [pc, #24]	; (800c074 <hci_init+0x34>)
 800c05a:	f000 f96f 	bl	800c33c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 f8d0 	bl	800c208 <TlInit>

  return;
 800c068:	bf00      	nop
}
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	20000434 	.word	0x20000434
 800c074:	2000040c 	.word	0x2000040c

0800c078 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c07e:	4820      	ldr	r0, [pc, #128]	; (800c100 <hci_user_evt_proc+0x88>)
 800c080:	f000 fc92 	bl	800c9a8 <LST_is_empty>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d128      	bne.n	800c0dc <hci_user_evt_proc+0x64>
 800c08a:	4b1e      	ldr	r3, [pc, #120]	; (800c104 <hci_user_evt_proc+0x8c>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d024      	beq.n	800c0dc <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c092:	f107 030c 	add.w	r3, r7, #12
 800c096:	4619      	mov	r1, r3
 800c098:	4819      	ldr	r0, [pc, #100]	; (800c100 <hci_user_evt_proc+0x88>)
 800c09a:	f000 fd0c 	bl	800cab6 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c09e:	4b19      	ldr	r3, [pc, #100]	; (800c104 <hci_user_evt_proc+0x8c>)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800c0a4:	4b18      	ldr	r3, [pc, #96]	; (800c108 <hci_user_evt_proc+0x90>)
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c0b0:	4b15      	ldr	r3, [pc, #84]	; (800c108 <hci_user_evt_proc+0x90>)
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	1d3a      	adds	r2, r7, #4
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c0ba:	793a      	ldrb	r2, [r7, #4]
 800c0bc:	4b11      	ldr	r3, [pc, #68]	; (800c104 <hci_user_evt_proc+0x8c>)
 800c0be:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c0c0:	4b10      	ldr	r3, [pc, #64]	; (800c104 <hci_user_evt_proc+0x8c>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d004      	beq.n	800c0d2 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 fbca 	bl	800c864 <TL_MM_EvtDone>
 800c0d0:	e004      	b.n	800c0dc <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	480a      	ldr	r0, [pc, #40]	; (800c100 <hci_user_evt_proc+0x88>)
 800c0d8:	f000 fc86 	bl	800c9e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c0dc:	4808      	ldr	r0, [pc, #32]	; (800c100 <hci_user_evt_proc+0x88>)
 800c0de:	f000 fc63 	bl	800c9a8 <LST_is_empty>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d107      	bne.n	800c0f8 <hci_user_evt_proc+0x80>
 800c0e8:	4b06      	ldr	r3, [pc, #24]	; (800c104 <hci_user_evt_proc+0x8c>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d003      	beq.n	800c0f8 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c0f0:	4803      	ldr	r0, [pc, #12]	; (800c100 <hci_user_evt_proc+0x88>)
 800c0f2:	f001 f800 	bl	800d0f6 <hci_notify_asynch_evt>
  }


  return;
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
}
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20000234 	.word	0x20000234
 800c104:	20000240 	.word	0x20000240
 800c108:	2000040c 	.word	0x2000040c

0800c10c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c118:	2000      	movs	r0, #0
 800c11a:	f000 f8cb 	bl	800c2b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c11e:	2300      	movs	r3, #0
 800c120:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	b21b      	sxth	r3, r3
 800c128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c12c:	b21a      	sxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	029b      	lsls	r3, r3, #10
 800c134:	b21b      	sxth	r3, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	b21b      	sxth	r3, r3
 800c13a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	b2d9      	uxtb	r1, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	8bbb      	ldrh	r3, [r7, #28]
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f88d 	bl	800c268 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c14e:	e04e      	b.n	800c1ee <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c150:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c154:	f000 ffe6 	bl	800d124 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c158:	e043      	b.n	800c1e2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c15a:	f107 030c 	add.w	r3, r7, #12
 800c15e:	4619      	mov	r1, r3
 800c160:	4828      	ldr	r0, [pc, #160]	; (800c204 <hci_send_req+0xf8>)
 800c162:	f000 fca8 	bl	800cab6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7a5b      	ldrb	r3, [r3, #9]
 800c16a:	2b0f      	cmp	r3, #15
 800c16c:	d114      	bne.n	800c198 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	330b      	adds	r3, #11
 800c172:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	885b      	ldrh	r3, [r3, #2]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	8bba      	ldrh	r2, [r7, #28]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d104      	bne.n	800c18a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	7812      	ldrb	r2, [r2, #0]
 800c188:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	785b      	ldrb	r3, [r3, #1]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d027      	beq.n	800c1e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c192:	2301      	movs	r3, #1
 800c194:	77fb      	strb	r3, [r7, #31]
 800c196:	e024      	b.n	800c1e2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	330b      	adds	r3, #11
 800c19c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	8bba      	ldrh	r2, [r7, #28]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d114      	bne.n	800c1d6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	7a9b      	ldrb	r3, [r3, #10]
 800c1b0:	3b03      	subs	r3, #3
 800c1b2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	695a      	ldr	r2, [r3, #20]
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	bfa8      	it	ge
 800c1be:	461a      	movge	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6918      	ldr	r0, [r3, #16]
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	1cd9      	adds	r1, r3, #3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	f001 fd33 	bl	800dc3c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c1e2:	4808      	ldr	r0, [pc, #32]	; (800c204 <hci_send_req+0xf8>)
 800c1e4:	f000 fbe0 	bl	800c9a8 <LST_is_empty>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0b5      	beq.n	800c15a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c1ee:	7ffb      	ldrb	r3, [r7, #31]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d0ad      	beq.n	800c150 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f000 f85d 	bl	800c2b4 <NotifyCmdStatus>

  return 0;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3720      	adds	r7, #32
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	2000042c 	.word	0x2000042c

0800c208 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c210:	480f      	ldr	r0, [pc, #60]	; (800c250 <TlInit+0x48>)
 800c212:	f000 fbb9 	bl	800c988 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c216:	4a0f      	ldr	r2, [pc, #60]	; (800c254 <TlInit+0x4c>)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c21c:	480e      	ldr	r0, [pc, #56]	; (800c258 <TlInit+0x50>)
 800c21e:	f000 fbb3 	bl	800c988 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c222:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <TlInit+0x54>)
 800c224:	2201      	movs	r2, #1
 800c226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c228:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <TlInit+0x58>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <TlInit+0x5c>)
 800c236:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c238:	4b09      	ldr	r3, [pc, #36]	; (800c260 <TlInit+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f107 0208 	add.w	r2, r7, #8
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
  }

  return;
 800c244:	bf00      	nop
 800c246:	bf00      	nop
}
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000042c 	.word	0x2000042c
 800c254:	2000023c 	.word	0x2000023c
 800c258:	20000234 	.word	0x20000234
 800c25c:	20000240 	.word	0x20000240
 800c260:	2000040c 	.word	0x2000040c
 800c264:	0800c2f5 	.word	0x0800c2f5

0800c268 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	603a      	str	r2, [r7, #0]
 800c272:	80fb      	strh	r3, [r7, #6]
 800c274:	460b      	mov	r3, r1
 800c276:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c278:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <SendCmd+0x44>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	88fa      	ldrh	r2, [r7, #6]
 800c27e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c282:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <SendCmd+0x44>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	797a      	ldrb	r2, [r7, #5]
 800c288:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c28a:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <SendCmd+0x44>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	330c      	adds	r3, #12
 800c290:	797a      	ldrb	r2, [r7, #5]
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fcd1 	bl	800dc3c <memcpy>

  hciContext.io.Send(0,0);
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <SendCmd+0x48>)
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	2100      	movs	r1, #0
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	4798      	blx	r3

  return;
 800c2a4:	bf00      	nop
}
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	2000023c 	.word	0x2000023c
 800c2b0:	2000040c 	.word	0x2000040c

0800c2b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c2c4:	4b0a      	ldr	r3, [pc, #40]	; (800c2f0 <NotifyCmdStatus+0x3c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00d      	beq.n	800c2e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c2cc:	4b08      	ldr	r3, [pc, #32]	; (800c2f0 <NotifyCmdStatus+0x3c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c2d4:	e008      	b.n	800c2e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c2d6:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <NotifyCmdStatus+0x3c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c2de:	4b04      	ldr	r3, [pc, #16]	; (800c2f0 <NotifyCmdStatus+0x3c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	4798      	blx	r3
  return;
 800c2e6:	bf00      	nop
 800c2e8:	bf00      	nop
}
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	20000434 	.word	0x20000434

0800c2f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7a5b      	ldrb	r3, [r3, #9]
 800c300:	2b0f      	cmp	r3, #15
 800c302:	d003      	beq.n	800c30c <TlEvtReceived+0x18>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	7a5b      	ldrb	r3, [r3, #9]
 800c308:	2b0e      	cmp	r3, #14
 800c30a:	d107      	bne.n	800c31c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4809      	ldr	r0, [pc, #36]	; (800c334 <TlEvtReceived+0x40>)
 800c310:	f000 fb8e 	bl	800ca30 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c314:	2000      	movs	r0, #0
 800c316:	f000 fefa 	bl	800d10e <hci_cmd_resp_release>
 800c31a:	e006      	b.n	800c32a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4806      	ldr	r0, [pc, #24]	; (800c338 <TlEvtReceived+0x44>)
 800c320:	f000 fb86 	bl	800ca30 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c324:	4804      	ldr	r0, [pc, #16]	; (800c338 <TlEvtReceived+0x44>)
 800c326:	f000 fee6 	bl	800d0f6 <hci_notify_asynch_evt>
  }

  return;
 800c32a:	bf00      	nop
}
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	2000042c 	.word	0x2000042c
 800c338:	20000234 	.word	0x20000234

0800c33c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a05      	ldr	r2, [pc, #20]	; (800c35c <hci_register_io_bus+0x20>)
 800c348:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a04      	ldr	r2, [pc, #16]	; (800c360 <hci_register_io_bus+0x24>)
 800c34e:	611a      	str	r2, [r3, #16]

  return;
 800c350:	bf00      	nop
}
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	0800c63d 	.word	0x0800c63d
 800c360:	0800c6a5 	.word	0x0800c6a5

0800c364 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4a08      	ldr	r2, [pc, #32]	; (800c394 <shci_init+0x30>)
 800c374:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c376:	4a08      	ldr	r2, [pc, #32]	; (800c398 <shci_init+0x34>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c37c:	4806      	ldr	r0, [pc, #24]	; (800c398 <shci_init+0x34>)
 800c37e:	f000 f90d 	bl	800c59c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f890 	bl	800c4ac <TlInit>

  return;
 800c38c:	bf00      	nop
}
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20000458 	.word	0x20000458
 800c398:	20000438 	.word	0x20000438

0800c39c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c3a2:	4820      	ldr	r0, [pc, #128]	; (800c424 <shci_user_evt_proc+0x88>)
 800c3a4:	f000 fb00 	bl	800c9a8 <LST_is_empty>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d128      	bne.n	800c400 <shci_user_evt_proc+0x64>
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <shci_user_evt_proc+0x8c>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d024      	beq.n	800c400 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4819      	ldr	r0, [pc, #100]	; (800c424 <shci_user_evt_proc+0x88>)
 800c3be:	f000 fb7a 	bl	800cab6 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c3c2:	4b19      	ldr	r3, [pc, #100]	; (800c428 <shci_user_evt_proc+0x8c>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c3c8:	4b18      	ldr	r3, [pc, #96]	; (800c42c <shci_user_evt_proc+0x90>)
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d009      	beq.n	800c3e4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c3d4:	4b15      	ldr	r3, [pc, #84]	; (800c42c <shci_user_evt_proc+0x90>)
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	1d3a      	adds	r2, r7, #4
 800c3da:	4610      	mov	r0, r2
 800c3dc:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c3de:	793a      	ldrb	r2, [r7, #4]
 800c3e0:	4b11      	ldr	r3, [pc, #68]	; (800c428 <shci_user_evt_proc+0x8c>)
 800c3e2:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c3e4:	4b10      	ldr	r3, [pc, #64]	; (800c428 <shci_user_evt_proc+0x8c>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fa38 	bl	800c864 <TL_MM_EvtDone>
 800c3f4:	e004      	b.n	800c400 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	480a      	ldr	r0, [pc, #40]	; (800c424 <shci_user_evt_proc+0x88>)
 800c3fc:	f000 faf4 	bl	800c9e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c400:	4808      	ldr	r0, [pc, #32]	; (800c424 <shci_user_evt_proc+0x88>)
 800c402:	f000 fad1 	bl	800c9a8 <LST_is_empty>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d107      	bne.n	800c41c <shci_user_evt_proc+0x80>
 800c40c:	4b06      	ldr	r3, [pc, #24]	; (800c428 <shci_user_evt_proc+0x8c>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d003      	beq.n	800c41c <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c414:	4803      	ldr	r0, [pc, #12]	; (800c424 <shci_user_evt_proc+0x88>)
 800c416:	f7f4 f8cc 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
}
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20000244 	.word	0x20000244
 800c428:	20000254 	.word	0x20000254
 800c42c:	20000438 	.word	0x20000438

0800c430 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60ba      	str	r2, [r7, #8]
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	4603      	mov	r3, r0
 800c43c:	81fb      	strh	r3, [r7, #14]
 800c43e:	460b      	mov	r3, r1
 800c440:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c442:	2000      	movs	r0, #0
 800c444:	f000 f864 	bl	800c510 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c448:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <shci_send+0x74>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	89fa      	ldrh	r2, [r7, #14]
 800c44e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c452:	4b14      	ldr	r3, [pc, #80]	; (800c4a4 <shci_send+0x74>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	7b7a      	ldrb	r2, [r7, #13]
 800c458:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c45a:	4b12      	ldr	r3, [pc, #72]	; (800c4a4 <shci_send+0x74>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	330c      	adds	r3, #12
 800c460:	7b7a      	ldrb	r2, [r7, #13]
 800c462:	68b9      	ldr	r1, [r7, #8]
 800c464:	4618      	mov	r0, r3
 800c466:	f001 fbe9 	bl	800dc3c <memcpy>

  shciContext.io.Send(0,0);
 800c46a:	4b0f      	ldr	r3, [pc, #60]	; (800c4a8 <shci_send+0x78>)
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	2100      	movs	r1, #0
 800c470:	2000      	movs	r0, #0
 800c472:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c474:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c478:	f7f4 f8b2 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f103 0008 	add.w	r0, r3, #8
 800c482:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <shci_send+0x74>)
 800c484:	6819      	ldr	r1, [r3, #0]
 800c486:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <shci_send+0x74>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	789b      	ldrb	r3, [r3, #2]
 800c48c:	3303      	adds	r3, #3
 800c48e:	461a      	mov	r2, r3
 800c490:	f001 fbd4 	bl	800dc3c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c494:	2001      	movs	r0, #1
 800c496:	f000 f83b 	bl	800c510 <Cmd_SetStatus>

  return;
 800c49a:	bf00      	nop
}
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000250 	.word	0x20000250
 800c4a8:	20000438 	.word	0x20000438

0800c4ac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c4b4:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <TlInit+0x4c>)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c4ba:	4810      	ldr	r0, [pc, #64]	; (800c4fc <TlInit+0x50>)
 800c4bc:	f000 fa64 	bl	800c988 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c4c0:	2001      	movs	r0, #1
 800c4c2:	f000 f825 	bl	800c510 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c4c6:	4b0e      	ldr	r3, [pc, #56]	; (800c500 <TlInit+0x54>)
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c4cc:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <TlInit+0x58>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00c      	beq.n	800c4ee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c4d8:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <TlInit+0x5c>)
 800c4da:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c4dc:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <TlInit+0x60>)
 800c4de:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c4e0:	4b08      	ldr	r3, [pc, #32]	; (800c504 <TlInit+0x58>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f107 020c 	add.w	r2, r7, #12
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	4798      	blx	r3
  }

  return;
 800c4ec:	bf00      	nop
 800c4ee:	bf00      	nop
}
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000250 	.word	0x20000250
 800c4fc:	20000244 	.word	0x20000244
 800c500:	20000254 	.word	0x20000254
 800c504:	20000438 	.word	0x20000438
 800c508:	0800c561 	.word	0x0800c561
 800c50c:	0800c579 	.word	0x0800c579

0800c510 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10b      	bne.n	800c538 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <Cmd_SetStatus+0x48>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c528:	4b0b      	ldr	r3, [pc, #44]	; (800c558 <Cmd_SetStatus+0x48>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2000      	movs	r0, #0
 800c52e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <Cmd_SetStatus+0x4c>)
 800c532:	2200      	movs	r2, #0
 800c534:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c536:	e00b      	b.n	800c550 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <Cmd_SetStatus+0x4c>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c53e:	4b06      	ldr	r3, [pc, #24]	; (800c558 <Cmd_SetStatus+0x48>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d004      	beq.n	800c550 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c546:	4b04      	ldr	r3, [pc, #16]	; (800c558 <Cmd_SetStatus+0x48>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2001      	movs	r0, #1
 800c54c:	4798      	blx	r3
  return;
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
}
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20000458 	.word	0x20000458
 800c55c:	2000024c 	.word	0x2000024c

0800c560 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c568:	2000      	movs	r0, #0
 800c56a:	f7f4 f82e 	bl	80005ca <shci_cmd_resp_release>

  return;
 800c56e:	bf00      	nop
}
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	4805      	ldr	r0, [pc, #20]	; (800c598 <TlUserEvtReceived+0x20>)
 800c584:	f000 fa54 	bl	800ca30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c588:	4803      	ldr	r0, [pc, #12]	; (800c598 <TlUserEvtReceived+0x20>)
 800c58a:	f7f4 f812 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800c58e:	bf00      	nop
}
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20000244 	.word	0x20000244

0800c59c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a05      	ldr	r2, [pc, #20]	; (800c5bc <shci_register_io_bus+0x20>)
 800c5a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a04      	ldr	r2, [pc, #16]	; (800c5c0 <shci_register_io_bus+0x24>)
 800c5ae:	611a      	str	r2, [r3, #16]

  return;
 800c5b0:	bf00      	nop
}
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	0800c719 	.word	0x0800c719
 800c5c0:	0800c76d 	.word	0x0800c76d

0800c5c4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c5c8:	f001 f812 	bl	800d5f0 <HW_IPCC_Enable>

  return;
 800c5cc:	bf00      	nop
}
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <TL_Init>:


void TL_Init( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c5d4:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <TL_Init+0x44>)
 800c5d6:	4a10      	ldr	r2, [pc, #64]	; (800c618 <TL_Init+0x48>)
 800c5d8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c5da:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <TL_Init+0x44>)
 800c5dc:	4a0f      	ldr	r2, [pc, #60]	; (800c61c <TL_Init+0x4c>)
 800c5de:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c5e0:	4b0c      	ldr	r3, [pc, #48]	; (800c614 <TL_Init+0x44>)
 800c5e2:	4a0f      	ldr	r2, [pc, #60]	; (800c620 <TL_Init+0x50>)
 800c5e4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <TL_Init+0x44>)
 800c5e8:	4a0e      	ldr	r2, [pc, #56]	; (800c624 <TL_Init+0x54>)
 800c5ea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c5ec:	4b09      	ldr	r3, [pc, #36]	; (800c614 <TL_Init+0x44>)
 800c5ee:	4a0e      	ldr	r2, [pc, #56]	; (800c628 <TL_Init+0x58>)
 800c5f0:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c5f2:	4b08      	ldr	r3, [pc, #32]	; (800c614 <TL_Init+0x44>)
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	; (800c62c <TL_Init+0x5c>)
 800c5f6:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c5f8:	4b06      	ldr	r3, [pc, #24]	; (800c614 <TL_Init+0x44>)
 800c5fa:	4a0d      	ldr	r2, [pc, #52]	; (800c630 <TL_Init+0x60>)
 800c5fc:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c5fe:	4b05      	ldr	r3, [pc, #20]	; (800c614 <TL_Init+0x44>)
 800c600:	4a0c      	ldr	r2, [pc, #48]	; (800c634 <TL_Init+0x64>)
 800c602:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c604:	4b03      	ldr	r3, [pc, #12]	; (800c614 <TL_Init+0x44>)
 800c606:	4a0c      	ldr	r2, [pc, #48]	; (800c638 <TL_Init+0x68>)
 800c608:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c60a:	f000 fff9 	bl	800d600 <HW_IPCC_Init>

  return;
 800c60e:	bf00      	nop
}
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20030000 	.word	0x20030000
 800c618:	20030024 	.word	0x20030024
 800c61c:	20030044 	.word	0x20030044
 800c620:	20030054 	.word	0x20030054
 800c624:	20030060 	.word	0x20030060
 800c628:	20030068 	.word	0x20030068
 800c62c:	20030070 	.word	0x20030070
 800c630:	2003008c 	.word	0x2003008c
 800c634:	20030090 	.word	0x20030090
 800c638:	2003009c 	.word	0x2003009c

0800c63c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c648:	4811      	ldr	r0, [pc, #68]	; (800c690 <TL_BLE_Init+0x54>)
 800c64a:	f000 f99d 	bl	800c988 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c64e:	4b11      	ldr	r3, [pc, #68]	; (800c694 <TL_BLE_Init+0x58>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4a0c      	ldr	r2, [pc, #48]	; (800c698 <TL_BLE_Init+0x5c>)
 800c668:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	4a08      	ldr	r2, [pc, #32]	; (800c690 <TL_BLE_Init+0x54>)
 800c66e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c670:	f000 ffdc 	bl	800d62c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a08      	ldr	r2, [pc, #32]	; (800c69c <TL_BLE_Init+0x60>)
 800c67a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4a07      	ldr	r2, [pc, #28]	; (800c6a0 <TL_BLE_Init+0x64>)
 800c682:	6013      	str	r3, [r2, #0]

  return 0;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20030a34 	.word	0x20030a34
 800c694:	20030000 	.word	0x20030000
 800c698:	20030a24 	.word	0x20030a24
 800c69c:	20000464 	.word	0x20000464
 800c6a0:	20000468 	.word	0x20000468

0800c6a4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c6b0:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <TL_BLE_SendCmd+0x24>)
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c6ba:	f000 ffc1 	bl	800d640 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20030000 	.word	0x20030000

0800c6cc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c6d2:	e009      	b.n	800c6e8 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c6d4:	1d3b      	adds	r3, r7, #4
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4808      	ldr	r0, [pc, #32]	; (800c6fc <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c6da:	f000 f9ec 	bl	800cab6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c6de:	4b08      	ldr	r3, [pc, #32]	; (800c700 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c6e8:	4804      	ldr	r0, [pc, #16]	; (800c6fc <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c6ea:	f000 f95d 	bl	800c9a8 <LST_is_empty>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0ef      	beq.n	800c6d4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c6f4:	bf00      	nop
}
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20030a34 	.word	0x20030a34
 800c700:	20000464 	.word	0x20000464

0800c704 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c708:	4b02      	ldr	r3, [pc, #8]	; (800c714 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4798      	blx	r3

  return;
 800c70e:	bf00      	nop
}
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20000468 	.word	0x20000468

0800c718 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c724:	480d      	ldr	r0, [pc, #52]	; (800c75c <TL_SYS_Init+0x44>)
 800c726:	f000 f92f 	bl	800c988 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c72a:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <TL_SYS_Init+0x48>)
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	4a08      	ldr	r2, [pc, #32]	; (800c75c <TL_SYS_Init+0x44>)
 800c73c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c73e:	f000 ffa1 	bl	800d684 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a07      	ldr	r2, [pc, #28]	; (800c764 <TL_SYS_Init+0x4c>)
 800c748:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	4a06      	ldr	r2, [pc, #24]	; (800c768 <TL_SYS_Init+0x50>)
 800c750:	6013      	str	r3, [r2, #0]

  return 0;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	20030a3c 	.word	0x20030a3c
 800c760:	20030000 	.word	0x20030000
 800c764:	2000046c 	.word	0x2000046c
 800c768:	20000470 	.word	0x20000470

0800c76c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <TL_SYS_SendCmd+0x24>)
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2210      	movs	r2, #16
 800c780:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c782:	f000 ff89 	bl	800d698 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20030000 	.word	0x20030000

0800c794 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a04      	ldr	r2, [pc, #16]	; (800c7b0 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c79e:	68d2      	ldr	r2, [r2, #12]
 800c7a0:	6812      	ldr	r2, [r2, #0]
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	4798      	blx	r3

  return;
 800c7a6:	bf00      	nop
}
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	2000046c 	.word	0x2000046c
 800c7b0:	20030000 	.word	0x20030000

0800c7b4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c7ba:	e009      	b.n	800c7d0 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c7bc:	1d3b      	adds	r3, r7, #4
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4808      	ldr	r0, [pc, #32]	; (800c7e4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c7c2:	f000 f978 	bl	800cab6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c7c6:	4b08      	ldr	r3, [pc, #32]	; (800c7e8 <HW_IPCC_SYS_EvtNot+0x34>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c7d0:	4804      	ldr	r0, [pc, #16]	; (800c7e4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c7d2:	f000 f8e9 	bl	800c9a8 <LST_is_empty>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0ef      	beq.n	800c7bc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c7dc:	bf00      	nop
}
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20030a3c 	.word	0x20030a3c
 800c7e8:	20000470 	.word	0x20000470

0800c7ec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c7f4:	4817      	ldr	r0, [pc, #92]	; (800c854 <TL_MM_Init+0x68>)
 800c7f6:	f000 f8c7 	bl	800c988 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c7fa:	4817      	ldr	r0, [pc, #92]	; (800c858 <TL_MM_Init+0x6c>)
 800c7fc:	f000 f8c4 	bl	800c988 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c800:	4b16      	ldr	r3, [pc, #88]	; (800c85c <TL_MM_Init+0x70>)
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	4a16      	ldr	r2, [pc, #88]	; (800c860 <TL_MM_Init+0x74>)
 800c806:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c808:	4b15      	ldr	r3, [pc, #84]	; (800c860 <TL_MM_Init+0x74>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	6892      	ldr	r2, [r2, #8]
 800c810:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c812:	4b13      	ldr	r3, [pc, #76]	; (800c860 <TL_MM_Init+0x74>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68d2      	ldr	r2, [r2, #12]
 800c81a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c81c:	4b10      	ldr	r3, [pc, #64]	; (800c860 <TL_MM_Init+0x74>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a0c      	ldr	r2, [pc, #48]	; (800c854 <TL_MM_Init+0x68>)
 800c822:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c824:	4b0e      	ldr	r3, [pc, #56]	; (800c860 <TL_MM_Init+0x74>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	6812      	ldr	r2, [r2, #0]
 800c82c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c82e:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <TL_MM_Init+0x74>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	6852      	ldr	r2, [r2, #4]
 800c836:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c838:	4b09      	ldr	r3, [pc, #36]	; (800c860 <TL_MM_Init+0x74>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	6912      	ldr	r2, [r2, #16]
 800c840:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c842:	4b07      	ldr	r3, [pc, #28]	; (800c860 <TL_MM_Init+0x74>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	6952      	ldr	r2, [r2, #20]
 800c84a:	619a      	str	r2, [r3, #24]

  return;
 800c84c:	bf00      	nop
}
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	200300a8 	.word	0x200300a8
 800c858:	2000045c 	.word	0x2000045c
 800c85c:	20030000 	.word	0x20030000
 800c860:	20000474 	.word	0x20000474

0800c864 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c86c:	6879      	ldr	r1, [r7, #4]
 800c86e:	4805      	ldr	r0, [pc, #20]	; (800c884 <TL_MM_EvtDone+0x20>)
 800c870:	f000 f8de 	bl	800ca30 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c874:	4804      	ldr	r0, [pc, #16]	; (800c888 <TL_MM_EvtDone+0x24>)
 800c876:	f000 ff35 	bl	800d6e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c87a:	bf00      	nop
}
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	2000045c 	.word	0x2000045c
 800c888:	0800c88d 	.word	0x0800c88d

0800c88c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c892:	e00c      	b.n	800c8ae <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c894:	1d3b      	adds	r3, r7, #4
 800c896:	4619      	mov	r1, r3
 800c898:	480a      	ldr	r0, [pc, #40]	; (800c8c4 <SendFreeBuf+0x38>)
 800c89a:	f000 f90c 	bl	800cab6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c89e:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <SendFreeBuf+0x3c>)
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 f8c1 	bl	800ca30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c8ae:	4805      	ldr	r0, [pc, #20]	; (800c8c4 <SendFreeBuf+0x38>)
 800c8b0:	f000 f87a 	bl	800c9a8 <LST_is_empty>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0ec      	beq.n	800c894 <SendFreeBuf+0x8>
  }

  return;
 800c8ba:	bf00      	nop
}
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	2000045c 	.word	0x2000045c
 800c8c8:	20030000 	.word	0x20030000

0800c8cc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c8d0:	4805      	ldr	r0, [pc, #20]	; (800c8e8 <TL_TRACES_Init+0x1c>)
 800c8d2:	f000 f859 	bl	800c988 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c8d6:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <TL_TRACES_Init+0x20>)
 800c8d8:	695b      	ldr	r3, [r3, #20]
 800c8da:	4a03      	ldr	r2, [pc, #12]	; (800c8e8 <TL_TRACES_Init+0x1c>)
 800c8dc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c8de:	f000 ff37 	bl	800d750 <HW_IPCC_TRACES_Init>

  return;
 800c8e2:	bf00      	nop
}
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	200300b0 	.word	0x200300b0
 800c8ec:	20030000 	.word	0x20030000

0800c8f0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8f6:	e008      	b.n	800c90a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c8f8:	1d3b      	adds	r3, r7, #4
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4808      	ldr	r0, [pc, #32]	; (800c920 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8fe:	f000 f8da 	bl	800cab6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4618      	mov	r0, r3
 800c906:	f000 f80d 	bl	800c924 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c90a:	4805      	ldr	r0, [pc, #20]	; (800c920 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c90c:	f000 f84c 	bl	800c9a8 <LST_is_empty>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0f0      	beq.n	800c8f8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c916:	bf00      	nop
}
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	200300b0 	.word	0x200300b0

0800c924 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c942:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <OTP_Read+0x48>)
 800c944:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c946:	e002      	b.n	800c94e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	3b08      	subs	r3, #8
 800c94c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3307      	adds	r3, #7
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	79fa      	ldrb	r2, [r7, #7]
 800c956:	429a      	cmp	r2, r3
 800c958:	d003      	beq.n	800c962 <OTP_Read+0x2a>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4a09      	ldr	r2, [pc, #36]	; (800c984 <OTP_Read+0x4c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d1f2      	bne.n	800c948 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3307      	adds	r3, #7
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	79fa      	ldrb	r2, [r7, #7]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d001      	beq.n	800c972 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c972:	68fb      	ldr	r3, [r7, #12]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	1fff73f8 	.word	0x1fff73f8
 800c984:	1fff7000 	.word	0x1fff7000

0800c988 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	605a      	str	r2, [r3, #4]
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b087      	sub	sp, #28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c9b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9ba:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d102      	bne.n	800c9cc <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	75fb      	strb	r3, [r7, #23]
 800c9ca:	e001      	b.n	800c9d0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75fb      	strb	r3, [r7, #23]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	371c      	adds	r7, #28
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9f2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c9fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9fc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	605a      	str	r2, [r3, #4]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ca24:	bf00      	nop
 800ca26:	371c      	adds	r7, #28
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca44:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ca6c:	bf00      	nop
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca80:	f3ef 8310 	mrs	r3, PRIMASK
 800ca84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca8a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	6812      	ldr	r2, [r2, #0]
 800ca94:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6852      	ldr	r2, [r2, #4]
 800ca9e:	605a      	str	r2, [r3, #4]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800caaa:	bf00      	nop
 800caac:	371c      	adds	r7, #28
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cac0:	f3ef 8310 	mrs	r3, PRIMASK
 800cac4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cac6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800caca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff ffcd 	bl	800ca78 <LST_remove_node>
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cae8:	bf00      	nop
 800caea:	3718      	adds	r7, #24
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800caf4:	4b03      	ldr	r3, [pc, #12]	; (800cb04 <LL_FLASH_GetUDN+0x14>)
 800caf6:	681b      	ldr	r3, [r3, #0]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	1fff7580 	.word	0x1fff7580

0800cb08 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800cb0c:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <LL_FLASH_GetDeviceID+0x14>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	b2db      	uxtb	r3, r3
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	1fff7584 	.word	0x1fff7584

0800cb20 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800cb20:	b480      	push	{r7}
 800cb22:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800cb24:	4b03      	ldr	r3, [pc, #12]	; (800cb34 <LL_FLASH_GetSTCompanyID+0x14>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	0a1b      	lsrs	r3, r3, #8
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	1fff7584 	.word	0x1fff7584

0800cb38 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800cb38:	b5b0      	push	{r4, r5, r7, lr}
 800cb3a:	b08c      	sub	sp, #48	; 0x30
 800cb3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cb3e:	4b29      	ldr	r3, [pc, #164]	; (800cbe4 <APP_BLE_Init+0xac>)
 800cb40:	463c      	mov	r4, r7
 800cb42:	461d      	mov	r5, r3
 800cb44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cb50:	c407      	stmia	r4!, {r0, r1, r2}
 800cb52:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800cb54:	f000 f900 	bl	800cd58 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800cb58:	2101      	movs	r1, #1
 800cb5a:	2002      	movs	r0, #2
 800cb5c:	f000 fe20 	bl	800d7a0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800cb60:	4a21      	ldr	r2, [pc, #132]	; (800cbe8 <APP_BLE_Init+0xb0>)
 800cb62:	2100      	movs	r1, #0
 800cb64:	2004      	movs	r0, #4
 800cb66:	f000 ff25 	bl	800d9b4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800cb6a:	463b      	mov	r3, r7
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fa4f 	bl	800c010 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800cb72:	f000 f907 	bl	800cd84 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800cb76:	f7ff f86f 	bl	800bc58 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <APP_BLE_Init+0xb4>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800cb82:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <APP_BLE_Init+0xb4>)
 800cb84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb88:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cb8a:	4a19      	ldr	r2, [pc, #100]	; (800cbf0 <APP_BLE_Init+0xb8>)
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	2001      	movs	r0, #1
 800cb90:	f000 ff10 	bl	800d9b4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800cb94:	2006      	movs	r0, #6
 800cb96:	f7fe fd8b 	bl	800b6b0 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800cb9a:	f000 fb31 	bl	800d200 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800cb9e:	f000 fb67 	bl	800d270 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800cba2:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <APP_BLE_Init+0xbc>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	4914      	ldr	r1, [pc, #80]	; (800cbf8 <APP_BLE_Init+0xc0>)
 800cba8:	2000      	movs	r0, #0
 800cbaa:	f7f4 fa2b 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <APP_BLE_Init+0xc4>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4913      	ldr	r1, [pc, #76]	; (800cc00 <APP_BLE_Init+0xc8>)
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f7f4 fa25 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800cbba:	4b0c      	ldr	r3, [pc, #48]	; (800cbec <APP_BLE_Init+0xb4>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <APP_BLE_Init+0xb4>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cbca:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <APP_BLE_Init+0xcc>)
 800cbcc:	2280      	movs	r2, #128	; 0x80
 800cbce:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cbd0:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <APP_BLE_Init+0xd0>)
 800cbd2:	22a0      	movs	r2, #160	; 0xa0
 800cbd4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	f000 f9ae 	bl	800cf38 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800cbdc:	bf00      	nop
}
 800cbde:	3730      	adds	r7, #48	; 0x30
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bdb0      	pop	{r4, r5, r7, pc}
 800cbe4:	0800dcb8 	.word	0x0800dcb8
 800cbe8:	0800c079 	.word	0x0800c079
 800cbec:	20000258 	.word	0x20000258
 800cbf0:	0800d0a5 	.word	0x0800d0a5
 800cbf4:	0800d0d9 	.word	0x0800d0d9
 800cbf8:	200002e9 	.word	0x200002e9
 800cbfc:	0800d0e9 	.word	0x0800d0e9
 800cc00:	200002ea 	.word	0x200002ea
 800cc04:	200002ec 	.word	0x200002ec
 800cc08:	200002ee 	.word	0x200002ee

0800cc0c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	; 0x28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc14:	2342      	movs	r3, #66	; 0x42
 800cc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b3e      	cmp	r3, #62	; 0x3e
 800cc26:	d024      	beq.n	800cc72 <SVCCTL_App_Notification+0x66>
 800cc28:	2bff      	cmp	r3, #255	; 0xff
 800cc2a:	d070      	beq.n	800cd0e <SVCCTL_App_Notification+0x102>
 800cc2c:	2b05      	cmp	r3, #5
 800cc2e:	d000      	beq.n	800cc32 <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800cc30:	e086      	b.n	800cd40 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	3302      	adds	r3, #2
 800cc36:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	4b42      	ldr	r3, [pc, #264]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800cc42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d106      	bne.n	800cc56 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cc48:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc4e:	4b3f      	ldr	r3, [pc, #252]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800cc56:	2001      	movs	r0, #1
 800cc58:	f000 f96e 	bl	800cf38 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cc5c:	4b3c      	ldr	r3, [pc, #240]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800cc5e:	2201      	movs	r2, #1
 800cc60:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cc62:	4b3a      	ldr	r3, [pc, #232]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800cc64:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cc66:	4b3a      	ldr	r3, [pc, #232]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800cc68:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800cc6a:	4839      	ldr	r0, [pc, #228]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800cc6c:	f000 fab4 	bl	800d1d8 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800cc70:	e066      	b.n	800cd40 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	3302      	adds	r3, #2
 800cc76:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	d042      	beq.n	800cd06 <SVCCTL_App_Notification+0xfa>
 800cc80:	2b0c      	cmp	r3, #12
 800cc82:	d002      	beq.n	800cc8a <SVCCTL_App_Notification+0x7e>
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d016      	beq.n	800ccb6 <SVCCTL_App_Notification+0xaa>
          break;
 800cc88:	e040      	b.n	800cd0c <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cc90:	4b2e      	ldr	r3, [pc, #184]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800cc92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc94:	f107 020a 	add.w	r2, r7, #10
 800cc98:	f107 010b 	add.w	r1, r7, #11
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fd81 	bl	800b7a4 <hci_le_read_phy>
 800cca2:	4603      	mov	r3, r0
 800cca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800cca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d12c      	bne.n	800cd0a <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	2b02      	cmp	r3, #2
          break;
 800ccb4:	e029      	b.n	800cd0a <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ccbc:	4b23      	ldr	r3, [pc, #140]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccbe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f4 fa14 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ccc8:	4b20      	ldr	r3, [pc, #128]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d104      	bne.n	800ccdc <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ccd2:	4b1e      	ldr	r3, [pc, #120]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccd4:	2206      	movs	r2, #6
 800ccd6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ccda:	e003      	b.n	800cce4 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ccdc:	4b1b      	ldr	r3, [pc, #108]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccde:	2205      	movs	r2, #5
 800cce0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ccea:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800ccec:	4b17      	ldr	r3, [pc, #92]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccee:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ccf0:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ccf6:	4b15      	ldr	r3, [pc, #84]	; (800cd4c <SVCCTL_App_Notification+0x140>)
 800ccf8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ccfa:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800ccfc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800ccfe:	4814      	ldr	r0, [pc, #80]	; (800cd50 <SVCCTL_App_Notification+0x144>)
 800cd00:	f000 fa6a 	bl	800d1d8 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800cd04:	e002      	b.n	800cd0c <SVCCTL_App_Notification+0x100>
          break;
 800cd06:	bf00      	nop
 800cd08:	e01a      	b.n	800cd40 <SVCCTL_App_Notification+0x134>
          break;
 800cd0a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800cd0c:	e018      	b.n	800cd40 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	3302      	adds	r3, #2
 800cd12:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f240 4207 	movw	r2, #1031	; 0x407
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00a      	beq.n	800cd38 <SVCCTL_App_Notification+0x12c>
 800cd22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd26:	d009      	beq.n	800cd3c <SVCCTL_App_Notification+0x130>
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	d000      	beq.n	800cd2e <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800cd2c:	e007      	b.n	800cd3e <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800cd2e:	2101      	movs	r1, #1
 800cd30:	4808      	ldr	r0, [pc, #32]	; (800cd54 <SVCCTL_App_Notification+0x148>)
 800cd32:	f7f9 f89b 	bl	8005e6c <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800cd36:	e002      	b.n	800cd3e <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800cd38:	bf00      	nop
 800cd3a:	e000      	b.n	800cd3e <SVCCTL_App_Notification+0x132>
      break;
 800cd3c:	bf00      	nop
      break; /* EVT_VENDOR */
 800cd3e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cd40:	2301      	movs	r3, #1
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3728      	adds	r7, #40	; 0x28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20000258 	.word	0x20000258
 800cd50:	200006c0 	.word	0x200006c0
 800cd54:	48000400 	.word	0x48000400

0800cd58 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cd5e:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <Ble_Tl_Init+0x20>)
 800cd60:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cd62:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <Ble_Tl_Init+0x24>)
 800cd64:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cd66:	463b      	mov	r3, r7
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4805      	ldr	r0, [pc, #20]	; (800cd80 <Ble_Tl_Init+0x28>)
 800cd6c:	f7ff f968 	bl	800c040 <hci_init>

  return;
 800cd70:	bf00      	nop
}
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	200300b8 	.word	0x200300b8
 800cd7c:	0800d173 	.word	0x0800d173
 800cd80:	0800d13b 	.word	0x0800d13b

0800cd84 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800cd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd86:	b091      	sub	sp, #68	; 0x44
 800cd88:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800cd8e:	f7fe fce0 	bl	800b752 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800cd92:	f000 f943 	bl	800d01c <BleGetBdAddress>
 800cd96:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cd98:	6a3a      	ldr	r2, [r7, #32]
 800cd9a:	2106      	movs	r1, #6
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	f7fe fbb9 	bl	800b514 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	795a      	ldrb	r2, [r3, #5]
 800cda6:	4b5e      	ldr	r3, [pc, #376]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cda8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	791a      	ldrb	r2, [r3, #4]
 800cdae:	4b5c      	ldr	r3, [pc, #368]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cdb0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	78da      	ldrb	r2, [r3, #3]
 800cdb6:	4b5a      	ldr	r3, [pc, #360]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cdb8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	789a      	ldrb	r2, [r3, #2]
 800cdbe:	4b58      	ldr	r3, [pc, #352]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cdc0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	785a      	ldrb	r2, [r3, #1]
 800cdc6:	4b56      	ldr	r3, [pc, #344]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cdc8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	4b54      	ldr	r3, [pc, #336]	; (800cf20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cdd0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800cdd2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800cdd6:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800cdd8:	f7ff fe8a 	bl	800caf0 <LL_FLASH_GetUDN>
 800cddc:	4603      	mov	r3, r0
 800cdde:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cde0:	f107 0308 	add.w	r3, r7, #8
 800cde4:	461a      	mov	r2, r3
 800cde6:	2106      	movs	r1, #6
 800cde8:	202e      	movs	r0, #46	; 0x2e
 800cdea:	f7fe fb93 	bl	800b514 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cdee:	4a4d      	ldr	r2, [pc, #308]	; (800cf24 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800cdf0:	2110      	movs	r1, #16
 800cdf2:	2018      	movs	r0, #24
 800cdf4:	f7fe fb8e 	bl	800b514 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cdf8:	4a4b      	ldr	r2, [pc, #300]	; (800cf28 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800cdfa:	2110      	movs	r1, #16
 800cdfc:	2008      	movs	r0, #8
 800cdfe:	f7fe fb89 	bl	800b514 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ce02:	2118      	movs	r1, #24
 800ce04:	2001      	movs	r0, #1
 800ce06:	f7fe fbf5 	bl	800b5f4 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ce0a:	f7fe f932 	bl	800b072 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ce12:	7ffb      	ldrb	r3, [r7, #31]
 800ce14:	f043 0301 	orr.w	r3, r3, #1
 800ce18:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800ce1a:	7ffb      	ldrb	r3, [r7, #31]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01e      	beq.n	800ce5e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800ce20:	4b42      	ldr	r3, [pc, #264]	; (800cf2c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800ce22:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800ce24:	f107 0216 	add.w	r2, r7, #22
 800ce28:	7ff8      	ldrb	r0, [r7, #31]
 800ce2a:	f107 0312 	add.w	r3, r7, #18
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	f107 0314 	add.w	r3, r7, #20
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	4613      	mov	r3, r2
 800ce38:	2207      	movs	r2, #7
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	f7fe f802 	bl	800ae44 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800ce40:	8afc      	ldrh	r4, [r7, #22]
 800ce42:	8abd      	ldrh	r5, [r7, #20]
 800ce44:	69b8      	ldr	r0, [r7, #24]
 800ce46:	f7f3 f99b 	bl	8000180 <strlen>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	4613      	mov	r3, r2
 800ce54:	2200      	movs	r2, #0
 800ce56:	4629      	mov	r1, r5
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7fe facd 	bl	800b3f8 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800ce5e:	8af8      	ldrh	r0, [r7, #22]
 800ce60:	8a79      	ldrh	r1, [r7, #18]
 800ce62:	1d3b      	adds	r3, r7, #4
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	2302      	movs	r3, #2
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f7fe fac5 	bl	800b3f8 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800ce6e:	2202      	movs	r2, #2
 800ce70:	2102      	movs	r1, #2
 800ce72:	2000      	movs	r0, #0
 800ce74:	f7fe fcfe 	bl	800b874 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ce78:	4b2d      	ldr	r3, [pc, #180]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ce7e:	4b2c      	ldr	r3, [pc, #176]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd fede 	bl	800ac44 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ce88:	4b29      	ldr	r3, [pc, #164]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800ce8e:	4b28      	ldr	r3, [pc, #160]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800ce94:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce96:	2208      	movs	r2, #8
 800ce98:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800ce9a:	4b25      	ldr	r3, [pc, #148]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ce9c:	2210      	movs	r2, #16
 800ce9e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cea0:	4b23      	ldr	r3, [pc, #140]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cea2:	2201      	movs	r2, #1
 800cea4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cea6:	4b22      	ldr	r3, [pc, #136]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cea8:	4a22      	ldr	r2, [pc, #136]	; (800cf34 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800ceaa:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800ceac:	4b20      	ldr	r3, [pc, #128]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceb8:	e00b      	b.n	800ced2 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800ceba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cebe:	4a1c      	ldr	r2, [pc, #112]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cec0:	4413      	add	r3, r2
 800cec2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cec6:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800cec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cecc:	3301      	adds	r3, #1
 800cece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ced2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced6:	2b0f      	cmp	r3, #15
 800ced8:	d9ef      	bls.n	800ceba <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cedc:	789d      	ldrb	r5, [r3, #2]
 800cede:	4b14      	ldr	r3, [pc, #80]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cee0:	785e      	ldrb	r6, [r3, #1]
 800cee2:	4b13      	ldr	r3, [pc, #76]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cee4:	7d5b      	ldrb	r3, [r3, #21]
 800cee6:	4a12      	ldr	r2, [pc, #72]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cee8:	7d92      	ldrb	r2, [r2, #22]
 800ceea:	4911      	ldr	r1, [pc, #68]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ceec:	7d09      	ldrb	r1, [r1, #20]
 800ceee:	4810      	ldr	r0, [pc, #64]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cef0:	6980      	ldr	r0, [r0, #24]
 800cef2:	2400      	movs	r4, #0
 800cef4:	9404      	str	r4, [sp, #16]
 800cef6:	9003      	str	r0, [sp, #12]
 800cef8:	9102      	str	r1, [sp, #8]
 800cefa:	9201      	str	r2, [sp, #4]
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	2300      	movs	r3, #0
 800cf00:	2201      	movs	r2, #1
 800cf02:	4631      	mov	r1, r6
 800cf04:	4628      	mov	r0, r5
 800cf06:	f7fd feee 	bl	800ace6 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cf0a:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf0c:	789b      	ldrb	r3, [r3, #2]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800cf12:	f7fe f885 	bl	800b020 <aci_gap_configure_whitelist>
   }
}
 800cf16:	bf00      	nop
 800cf18:	372c      	adds	r7, #44	; 0x2c
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000148 	.word	0x20000148
 800cf24:	0800dd98 	.word	0x0800dd98
 800cf28:	0800dda8 	.word	0x0800dda8
 800cf2c:	0800dce8 	.word	0x0800dce8
 800cf30:	20000258 	.word	0x20000258
 800cf34:	0001b207 	.word	0x0001b207

0800cf38 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08c      	sub	sp, #48	; 0x30
 800cf3c:	af08      	add	r7, sp, #32
 800cf3e:	4603      	mov	r3, r0
 800cf40:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cf42:	2342      	movs	r3, #66	; 0x42
 800cf44:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d106      	bne.n	800cf5a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800cf4c:	4b2c      	ldr	r3, [pc, #176]	; (800d000 <Adv_Request+0xc8>)
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800cf52:	4b2c      	ldr	r3, [pc, #176]	; (800d004 <Adv_Request+0xcc>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	81bb      	strh	r3, [r7, #12]
 800cf58:	e005      	b.n	800cf66 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800cf5a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800cf5e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800cf60:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cf64:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cf66:	4b28      	ldr	r3, [pc, #160]	; (800d008 <Adv_Request+0xd0>)
 800cf68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f4 f8bf 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d10d      	bne.n	800cf94 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800cf78:	4b23      	ldr	r3, [pc, #140]	; (800d008 <Adv_Request+0xd0>)
 800cf7a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d004      	beq.n	800cf8c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800cf82:	4b21      	ldr	r3, [pc, #132]	; (800d008 <Adv_Request+0xd0>)
 800cf84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d103      	bne.n	800cf94 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800cf8c:	f7fd fd4c 	bl	800aa28 <aci_gap_set_non_discoverable>
 800cf90:	4603      	mov	r3, r0
 800cf92:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800cf94:	4a1c      	ldr	r2, [pc, #112]	; (800d008 <Adv_Request+0xd0>)
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <Adv_Request+0xd0>)
 800cf9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa2:	89b8      	ldrh	r0, [r7, #12]
 800cfa4:	89f9      	ldrh	r1, [r7, #14]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	9206      	str	r2, [sp, #24]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	9205      	str	r2, [sp, #20]
 800cfae:	4a17      	ldr	r2, [pc, #92]	; (800d00c <Adv_Request+0xd4>)
 800cfb0:	9204      	str	r2, [sp, #16]
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	4b16      	ldr	r3, [pc, #88]	; (800d010 <Adv_Request+0xd8>)
 800cfb6:	9302      	str	r3, [sp, #8]
 800cfb8:	2306      	movs	r3, #6
 800cfba:	9301      	str	r3, [sp, #4]
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	f7fd fd58 	bl	800aa7a <aci_gap_set_discoverable>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800cfce:	4911      	ldr	r1, [pc, #68]	; (800d014 <Adv_Request+0xdc>)
 800cfd0:	200e      	movs	r0, #14
 800cfd2:	f7fd ffc2 	bl	800af5a <aci_gap_update_adv_data>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800cfda:	7afb      	ldrb	r3, [r7, #11]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d107      	bne.n	800cff6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800cfe6:	4b08      	ldr	r3, [pc, #32]	; (800d008 <Adv_Request+0xd0>)
 800cfe8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cfec:	490a      	ldr	r1, [pc, #40]	; (800d018 <Adv_Request+0xe0>)
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7f4 f908 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
}
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	200002ec 	.word	0x200002ec
 800d004:	200002ee 	.word	0x200002ee
 800d008:	20000258 	.word	0x20000258
 800d00c:	20000281 	.word	0x20000281
 800d010:	0800ddb8 	.word	0x0800ddb8
 800d014:	20000148 	.word	0x20000148
 800d018:	0001e046 	.word	0x0001e046

0800d01c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d022:	f7ff fd65 	bl	800caf0 <LL_FLASH_GetUDN>
 800d026:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02e:	d023      	beq.n	800d078 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d030:	f7ff fd76 	bl	800cb20 <LL_FLASH_GetSTCompanyID>
 800d034:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d036:	f7ff fd67 	bl	800cb08 <LL_FLASH_GetDeviceID>
 800d03a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	4b16      	ldr	r3, [pc, #88]	; (800d09c <BleGetBdAddress+0x80>)
 800d042:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	0a1b      	lsrs	r3, r3, #8
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	4b14      	ldr	r3, [pc, #80]	; (800d09c <BleGetBdAddress+0x80>)
 800d04c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	0c1b      	lsrs	r3, r3, #16
 800d052:	b2da      	uxtb	r2, r3
 800d054:	4b11      	ldr	r3, [pc, #68]	; (800d09c <BleGetBdAddress+0x80>)
 800d056:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <BleGetBdAddress+0x80>)
 800d05e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	b2da      	uxtb	r2, r3
 800d064:	4b0d      	ldr	r3, [pc, #52]	; (800d09c <BleGetBdAddress+0x80>)
 800d066:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	0a1b      	lsrs	r3, r3, #8
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	4b0b      	ldr	r3, [pc, #44]	; (800d09c <BleGetBdAddress+0x80>)
 800d070:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800d072:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <BleGetBdAddress+0x80>)
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	e00b      	b.n	800d090 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800d078:	2000      	movs	r0, #0
 800d07a:	f7ff fc5d 	bl	800c938 <OTP_Read>
 800d07e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	617b      	str	r3, [r7, #20]
 800d08a:	e001      	b.n	800d090 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <BleGetBdAddress+0x84>)
 800d08e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800d090:	697b      	ldr	r3, [r7, #20]
}
 800d092:	4618      	mov	r0, r3
 800d094:	3718      	adds	r7, #24
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	20000478 	.word	0x20000478
 800d0a0:	0800dd90 	.word	0x0800dd90

0800d0a4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d0aa:	4b0a      	ldr	r3, [pc, #40]	; (800d0d4 <Adv_Cancel+0x30>)
 800d0ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d0b0:	2b05      	cmp	r3, #5
 800d0b2:	d00a      	beq.n	800d0ca <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800d0b8:	f7fd fcb6 	bl	800aa28 <aci_gap_set_non_discoverable>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d0c0:	4b04      	ldr	r3, [pc, #16]	; (800d0d4 <Adv_Cancel+0x30>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
}
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000258 	.word	0x20000258

0800d0d8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d0dc:	2100      	movs	r1, #0
 800d0de:	2001      	movs	r0, #1
 800d0e0:	f000 fc88 	bl	800d9f4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800d0e4:	bf00      	nop
}
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800d0ec:	bf00      	nop
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d0fe:	2100      	movs	r1, #0
 800d100:	2004      	movs	r0, #4
 800d102:	f000 fc77 	bl	800d9f4 <UTIL_SEQ_SetTask>
  return;
 800d106:	bf00      	nop
}
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d116:	2001      	movs	r0, #1
 800d118:	f000 fcd2 	bl	800dac0 <UTIL_SEQ_SetEvt>
  return;
 800d11c:	bf00      	nop
}
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d12c:	2001      	movs	r0, #1
 800d12e:	f000 fce5 	bl	800dafc <UTIL_SEQ_WaitEvt>
  return;
 800d132:	bf00      	nop
}
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	3308      	adds	r3, #8
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fdd1 	bl	800bcf4 <SVCCTL_UserEvtRx>
 800d152:	4603      	mov	r3, r0
 800d154:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d156:	7afb      	ldrb	r3, [r7, #11]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2201      	movs	r2, #1
 800d160:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d162:	e002      	b.n	800d16a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	701a      	strb	r2, [r3, #0]
}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	4603      	mov	r3, r0
 800d17a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <BLE_StatusNot+0x16>
 800d182:	2b01      	cmp	r3, #1
 800d184:	d006      	beq.n	800d194 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d186:	e00b      	b.n	800d1a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d188:	231f      	movs	r3, #31
 800d18a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 fc5b 	bl	800da48 <UTIL_SEQ_PauseTask>
      break;
 800d192:	e005      	b.n	800d1a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d194:	231f      	movs	r3, #31
 800d196:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 fc73 	bl	800da84 <UTIL_SEQ_ResumeTask>
      break;
 800d19e:	bf00      	nop
  }
  return;
 800d1a0:	bf00      	nop
}
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d004      	beq.n	800d1c2 <P2PS_STM_App_Notification+0x1a>
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d004      	beq.n	800d1c6 <P2PS_STM_App_Notification+0x1e>
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d004      	beq.n	800d1ca <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d1c0:	e004      	b.n	800d1cc <P2PS_STM_App_Notification+0x24>
      break;
 800d1c2:	bf00      	nop
 800d1c4:	e002      	b.n	800d1cc <P2PS_STM_App_Notification+0x24>
      break;
 800d1c6:	bf00      	nop
 800d1c8:	e000      	b.n	800d1cc <P2PS_STM_App_Notification+0x24>
      break;
 800d1ca:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d1cc:	bf00      	nop
}
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <P2PS_APP_Notification+0x16>
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d002      	beq.n	800d1f2 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d1ec:	e002      	b.n	800d1f4 <P2PS_APP_Notification+0x1c>
    break;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <P2PS_APP_Notification+0x1c>
    break;
 800d1f2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d1f4:	bf00      	nop
}
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d200:	b480      	push	{r7}
 800d202:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800d204:	bf00      	nop
}
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	af00      	add	r7, sp, #0
UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 800d212:	2100      	movs	r1, #0
 800d214:	2010      	movs	r0, #16
 800d216:	f000 fbed 	bl	800d9f4 <UTIL_SEQ_SetTask>
}
 800d21a:	bf00      	nop
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d00e      	beq.n	800d24e <TEMPLATE_STM_App_Notification+0x2e>
 800d230:	2b03      	cmp	r3, #3
 800d232:	d015      	beq.n	800d260 <TEMPLATE_STM_App_Notification+0x40>
 800d234:	2b00      	cmp	r3, #0
 800d236:	d000      	beq.n	800d23a <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800d238:	e013      	b.n	800d262 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800d23a:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <TEMPLATE_STM_App_Notification+0x4c>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	701a      	strb	r2, [r3, #0]
HW_TS_Start(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id, PARAMETER_UPDATE_PERIOD);
 800d240:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <TEMPLATE_STM_App_Notification+0x4c>)
 800d242:	7a1b      	ldrb	r3, [r3, #8]
 800d244:	21cc      	movs	r1, #204	; 0xcc
 800d246:	4618      	mov	r0, r3
 800d248:	f7f3 ffdc 	bl	8001204 <HW_TS_Start>
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800d24c:	e009      	b.n	800d262 <TEMPLATE_STM_App_Notification+0x42>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800d24e:	4b07      	ldr	r3, [pc, #28]	; (800d26c <TEMPLATE_STM_App_Notification+0x4c>)
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(TEMPLATE_Server_App_Context.UpdateParameter_timer_Id);
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <TEMPLATE_STM_App_Notification+0x4c>)
 800d256:	7a1b      	ldrb	r3, [r3, #8]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f3 ff49 	bl	80010f0 <HW_TS_Stop>
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800d25e:	e000      	b.n	800d262 <TEMPLATE_STM_App_Notification+0x42>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800d260:	bf00      	nop
  }

  return;
 800d262:	bf00      	nop
}
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200002f0 	.word	0x200002f0

0800d270 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800d274:	4a08      	ldr	r2, [pc, #32]	; (800d298 <TEMPLATE_APP_Init+0x28>)
 800d276:	2100      	movs	r1, #0
 800d278:	2010      	movs	r0, #16
 800d27a:	f000 fb9b 	bl	800d9b4 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800d27e:	4b07      	ldr	r3, [pc, #28]	; (800d29c <TEMPLATE_APP_Init+0x2c>)
 800d280:	2201      	movs	r2, #1
 800d282:	4907      	ldr	r1, [pc, #28]	; (800d2a0 <TEMPLATE_APP_Init+0x30>)
 800d284:	2000      	movs	r0, #0
 800d286:	f7f3 febd 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800d28a:	4b06      	ldr	r3, [pc, #24]	; (800d2a4 <TEMPLATE_APP_Init+0x34>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800d290:	f000 f80a 	bl	800d2a8 <TEMPLATE_APP_context_Init>
  return;
 800d294:	bf00      	nop
}
 800d296:	bd80      	pop	{r7, pc}
 800d298:	0800d2cd 	.word	0x0800d2cd
 800d29c:	0800d20f 	.word	0x0800d20f
 800d2a0:	200002f8 	.word	0x200002f8
 800d2a4:	200002f0 	.word	0x200002f0

0800d2a8 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 800d2ac:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <TEMPLATE_APP_context_Init+0x20>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800d2b2:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <TEMPLATE_APP_context_Init+0x20>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800d2b8:	4b03      	ldr	r3, [pc, #12]	; (800d2c8 <TEMPLATE_APP_context_Init+0x20>)
 800d2ba:	220a      	movs	r2, #10
 800d2bc:	80da      	strh	r2, [r3, #6]
}
 800d2be:	bf00      	nop
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	200002f0 	.word	0x200002f0

0800d2cc <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
  uint8_t value[4];
  value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
 800d2d2:	4b21      	ldr	r3, [pc, #132]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d2d4:	885b      	ldrh	r3, [r3, #2]
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
 800d2da:	4b1f      	ldr	r3, [pc, #124]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d2dc:	885b      	ldrh	r3, [r3, #2]
 800d2de:	0a1b      	lsrs	r3, r3, #8
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	717b      	strb	r3, [r7, #5]
  value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
 800d2e6:	4b1c      	ldr	r3, [pc, #112]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d2e8:	889b      	ldrh	r3, [r3, #4]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	71bb      	strb	r3, [r7, #6]
  value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);
 800d2ee:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d2f0:	889b      	ldrh	r3, [r3, #4]
 800d2f2:	0a1b      	lsrs	r3, r3, #8
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	71fb      	strb	r3, [r7, #7]
  TEMPLATE_Server_App_Context.Parameter.Temperature += TEMPLATE_Server_App_Context.UpdateParameterStep;
 800d2fa:	4b17      	ldr	r3, [pc, #92]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d2fc:	889a      	ldrh	r2, [r3, #4]
 800d2fe:	4b16      	ldr	r3, [pc, #88]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d300:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d304:	b29b      	uxth	r3, r3
 800d306:	4413      	add	r3, r2
 800d308:	b29a      	uxth	r2, r3
 800d30a:	4b13      	ldr	r3, [pc, #76]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d30c:	809a      	strh	r2, [r3, #4]
  TEMPLATE_Server_App_Context.Parameter.TimeStamp += PARAMETER_CHANGE_STEP;
 800d30e:	4b12      	ldr	r3, [pc, #72]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d310:	885b      	ldrh	r3, [r3, #2]
 800d312:	330a      	adds	r3, #10
 800d314:	b29a      	uxth	r2, r3
 800d316:	4b10      	ldr	r3, [pc, #64]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d318:	805a      	strh	r2, [r3, #2]
  if (TEMPLATE_Server_App_Context.Parameter.Temperature > PARAMETER_VALUE_MAX_THRESHOLD) {
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d31c:	889b      	ldrh	r3, [r3, #4]
 800d31e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800d322:	d904      	bls.n	800d32e <TEMPLATE_Send_Notification_Task+0x62>
    TEMPLATE_Server_App_Context.UpdateParameterStep = -PARAMETER_CHANGE_STEP;
 800d324:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d326:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800d32a:	80da      	strh	r2, [r3, #6]
 800d32c:	e006      	b.n	800d33c <TEMPLATE_Send_Notification_Task+0x70>
  }
  else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d330:	889b      	ldrh	r3, [r3, #4]
 800d332:	2b63      	cmp	r3, #99	; 0x63
 800d334:	d802      	bhi.n	800d33c <TEMPLATE_Send_Notification_Task+0x70>
  {
    TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d338:	220a      	movs	r2, #10
 800d33a:	80da      	strh	r2, [r3, #6]
  }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800d33c:	4b06      	ldr	r3, [pc, #24]	; (800d358 <TEMPLATE_Send_Notification_Task+0x8c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <TEMPLATE_Send_Notification_Task+0x84>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800d344:	1d3b      	adds	r3, r7, #4
 800d346:	4619      	mov	r1, r3
 800d348:	2000      	movs	r0, #0
 800d34a:	f7fe fe41 	bl	800bfd0 <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
}
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	200002f0 	.word	0x200002f0

0800d35c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <LL_PWR_EnableBootC2+0x1c>)
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	4a04      	ldr	r2, [pc, #16]	; (800d378 <LL_PWR_EnableBootC2+0x1c>)
 800d366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d36a:	60d3      	str	r3, [r2, #12]
}
 800d36c:	bf00      	nop
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	58000400 	.word	0x58000400

0800d37c <LL_AHB3_GRP1_EnableClock>:
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d38a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4313      	orrs	r3, r2
 800d392:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4013      	ands	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	601a      	str	r2, [r3, #0]
}
 800d3c2:	bf00      	nop
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f043 0201 	orr.w	r2, r3, #1
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	601a      	str	r2, [r3, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b083      	sub	sp, #12
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	041b      	lsls	r3, r3, #16
 800d400:	43db      	mvns	r3, r3
 800d402:	401a      	ands	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	605a      	str	r2, [r3, #4]
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	041b      	lsls	r3, r3, #16
 800d426:	431a      	orrs	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	605a      	str	r2, [r3, #4]
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	43db      	mvns	r3, r3
 800d44a:	401a      	ands	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	609a      	str	r2, [r3, #8]
}
 800d46c:	bf00      	nop
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	041a      	lsls	r2, r3, #16
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	609a      	str	r2, [r3, #8]
}
 800d48a:	bf00      	nop
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68da      	ldr	r2, [r3, #12]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d101      	bne.n	800d4b2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	69da      	ldr	r2, [r3, #28]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d101      	bne.n	800d4dc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
	...

0800d4ec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d4f0:	2102      	movs	r1, #2
 800d4f2:	4819      	ldr	r0, [pc, #100]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d4f4:	f7ff ffe4 	bl	800d4c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d009      	beq.n	800d512 <HW_IPCC_Rx_Handler+0x26>
 800d4fe:	4b16      	ldr	r3, [pc, #88]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	43db      	mvns	r3, r3
 800d504:	f003 0302 	and.w	r3, r3, #2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d50c:	f000 f8de 	bl	800d6cc <HW_IPCC_SYS_EvtHandler>
 800d510:	e01f      	b.n	800d552 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d512:	2101      	movs	r1, #1
 800d514:	4810      	ldr	r0, [pc, #64]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d516:	f7ff ffd3 	bl	800d4c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d008      	beq.n	800d532 <HW_IPCC_Rx_Handler+0x46>
 800d520:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d52c:	f000 f892 	bl	800d654 <HW_IPCC_BLE_EvtHandler>
 800d530:	e00f      	b.n	800d552 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d532:	2108      	movs	r1, #8
 800d534:	4808      	ldr	r0, [pc, #32]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d536:	f7ff ffc3 	bl	800d4c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d009      	beq.n	800d554 <HW_IPCC_Rx_Handler+0x68>
 800d540:	4b05      	ldr	r3, [pc, #20]	; (800d558 <HW_IPCC_Rx_Handler+0x6c>)
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	43db      	mvns	r3, r3
 800d546:	f003 0308 	and.w	r3, r3, #8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d54e:	f000 f909 	bl	800d764 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d552:	bf00      	nop
 800d554:	bf00      	nop
}
 800d556:	bd80      	pop	{r7, pc}
 800d558:	58000c00 	.word	0x58000c00

0800d55c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d560:	2102      	movs	r1, #2
 800d562:	4822      	ldr	r0, [pc, #136]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d564:	f7ff ff97 	bl	800d496 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d109      	bne.n	800d582 <HW_IPCC_Tx_Handler+0x26>
 800d56e:	4b1f      	ldr	r3, [pc, #124]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	43db      	mvns	r3, r3
 800d574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d002      	beq.n	800d582 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d57c:	f000 f89a 	bl	800d6b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d580:	e031      	b.n	800d5e6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d582:	2102      	movs	r1, #2
 800d584:	4819      	ldr	r0, [pc, #100]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d586:	f7ff ff86 	bl	800d496 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d109      	bne.n	800d5a4 <HW_IPCC_Tx_Handler+0x48>
 800d590:	4b16      	ldr	r3, [pc, #88]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	43db      	mvns	r3, r3
 800d596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d59e:	f000 f889 	bl	800d6b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d5a2:	e020      	b.n	800d5e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d5a4:	2108      	movs	r1, #8
 800d5a6:	4811      	ldr	r0, [pc, #68]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d5a8:	f7ff ff75 	bl	800d496 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d109      	bne.n	800d5c6 <HW_IPCC_Tx_Handler+0x6a>
 800d5b2:	4b0e      	ldr	r3, [pc, #56]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	43db      	mvns	r3, r3
 800d5b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d5c0:	f000 f8b2 	bl	800d728 <HW_IPCC_MM_FreeBufHandler>
 800d5c4:	e00f      	b.n	800d5e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d5c6:	2120      	movs	r1, #32
 800d5c8:	4808      	ldr	r0, [pc, #32]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d5ca:	f7ff ff64 	bl	800d496 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d109      	bne.n	800d5e8 <HW_IPCC_Tx_Handler+0x8c>
 800d5d4:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <HW_IPCC_Tx_Handler+0x90>)
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	43db      	mvns	r3, r3
 800d5da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d002      	beq.n	800d5e8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d5e2:	f000 f843 	bl	800d66c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d5e6:	bf00      	nop
 800d5e8:	bf00      	nop
}
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	58000c00 	.word	0x58000c00

0800d5f0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d5f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d5f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d5f8:	f7ff feb0 	bl	800d35c <LL_PWR_EnableBootC2>

  return;
 800d5fc:	bf00      	nop
}
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d604:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d608:	f7ff feb8 	bl	800d37c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d60c:	4806      	ldr	r0, [pc, #24]	; (800d628 <HW_IPCC_Init+0x28>)
 800d60e:	f7ff fede 	bl	800d3ce <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d612:	4805      	ldr	r0, [pc, #20]	; (800d628 <HW_IPCC_Init+0x28>)
 800d614:	f7ff fecb 	bl	800d3ae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d618:	202c      	movs	r0, #44	; 0x2c
 800d61a:	f7f8 f91e 	bl	800585a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d61e:	202d      	movs	r0, #45	; 0x2d
 800d620:	f7f8 f91b 	bl	800585a <HAL_NVIC_EnableIRQ>

  return;
 800d624:	bf00      	nop
}
 800d626:	bd80      	pop	{r7, pc}
 800d628:	58000c00 	.word	0x58000c00

0800d62c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d630:	2101      	movs	r1, #1
 800d632:	4802      	ldr	r0, [pc, #8]	; (800d63c <HW_IPCC_BLE_Init+0x10>)
 800d634:	f7ff ff00 	bl	800d438 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d638:	bf00      	nop
}
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	58000c00 	.word	0x58000c00

0800d640 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d644:	2101      	movs	r1, #1
 800d646:	4802      	ldr	r0, [pc, #8]	; (800d650 <HW_IPCC_BLE_SendCmd+0x10>)
 800d648:	f7ff ff16 	bl	800d478 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d64c:	bf00      	nop
}
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	58000c00 	.word	0x58000c00

0800d654 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d658:	f7ff f838 	bl	800c6cc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d65c:	2101      	movs	r1, #1
 800d65e:	4802      	ldr	r0, [pc, #8]	; (800d668 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d660:	f7ff fefc 	bl	800d45c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d664:	bf00      	nop
}
 800d666:	bd80      	pop	{r7, pc}
 800d668:	58000c00 	.word	0x58000c00

0800d66c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d670:	2120      	movs	r1, #32
 800d672:	4803      	ldr	r0, [pc, #12]	; (800d680 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d674:	f7ff fece 	bl	800d414 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d678:	f7ff f844 	bl	800c704 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d67c:	bf00      	nop
}
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	58000c00 	.word	0x58000c00

0800d684 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d688:	2102      	movs	r1, #2
 800d68a:	4802      	ldr	r0, [pc, #8]	; (800d694 <HW_IPCC_SYS_Init+0x10>)
 800d68c:	f7ff fed4 	bl	800d438 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d690:	bf00      	nop
}
 800d692:	bd80      	pop	{r7, pc}
 800d694:	58000c00 	.word	0x58000c00

0800d698 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d69c:	2102      	movs	r1, #2
 800d69e:	4804      	ldr	r0, [pc, #16]	; (800d6b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d6a0:	f7ff feea 	bl	800d478 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d6a4:	2102      	movs	r1, #2
 800d6a6:	4802      	ldr	r0, [pc, #8]	; (800d6b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d6a8:	f7ff fea1 	bl	800d3ee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d6ac:	bf00      	nop
}
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	58000c00 	.word	0x58000c00

0800d6b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d6b8:	2102      	movs	r1, #2
 800d6ba:	4803      	ldr	r0, [pc, #12]	; (800d6c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d6bc:	f7ff feaa 	bl	800d414 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d6c0:	f7ff f868 	bl	800c794 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d6c4:	bf00      	nop
}
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	58000c00 	.word	0x58000c00

0800d6cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d6d0:	f7ff f870 	bl	800c7b4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d6d4:	2102      	movs	r1, #2
 800d6d6:	4802      	ldr	r0, [pc, #8]	; (800d6e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d6d8:	f7ff fec0 	bl	800d45c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d6dc:	bf00      	nop
}
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	58000c00 	.word	0x58000c00

0800d6e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d6ec:	2108      	movs	r1, #8
 800d6ee:	480c      	ldr	r0, [pc, #48]	; (800d720 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d6f0:	f7ff fed1 	bl	800d496 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d007      	beq.n	800d70a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d6fa:	4a0a      	ldr	r2, [pc, #40]	; (800d724 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d700:	2108      	movs	r1, #8
 800d702:	4807      	ldr	r0, [pc, #28]	; (800d720 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d704:	f7ff fe73 	bl	800d3ee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d708:	e006      	b.n	800d718 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d70e:	2108      	movs	r1, #8
 800d710:	4803      	ldr	r0, [pc, #12]	; (800d720 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d712:	f7ff feb1 	bl	800d478 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d716:	bf00      	nop
}
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	58000c00 	.word	0x58000c00
 800d724:	20000480 	.word	0x20000480

0800d728 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d72c:	2108      	movs	r1, #8
 800d72e:	4806      	ldr	r0, [pc, #24]	; (800d748 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d730:	f7ff fe70 	bl	800d414 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d73a:	2108      	movs	r1, #8
 800d73c:	4802      	ldr	r0, [pc, #8]	; (800d748 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d73e:	f7ff fe9b 	bl	800d478 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d742:	bf00      	nop
}
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	58000c00 	.word	0x58000c00
 800d74c:	20000480 	.word	0x20000480

0800d750 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d754:	2108      	movs	r1, #8
 800d756:	4802      	ldr	r0, [pc, #8]	; (800d760 <HW_IPCC_TRACES_Init+0x10>)
 800d758:	f7ff fe6e 	bl	800d438 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d75c:	bf00      	nop
}
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	58000c00 	.word	0x58000c00

0800d764 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d768:	f7ff f8c2 	bl	800c8f0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d76c:	2108      	movs	r1, #8
 800d76e:	4802      	ldr	r0, [pc, #8]	; (800d778 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d770:	f7ff fe74 	bl	800d45c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d774:	bf00      	nop
}
 800d776:	bd80      	pop	{r7, pc}
 800d778:	58000c00 	.word	0x58000c00

0800d77c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800d77c:	b480      	push	{r7}
 800d77e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d780:	4b05      	ldr	r3, [pc, #20]	; (800d798 <UTIL_LPM_Init+0x1c>)
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d786:	4b05      	ldr	r3, [pc, #20]	; (800d79c <UTIL_LPM_Init+0x20>)
 800d788:	2200      	movs	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d78c:	bf00      	nop
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	20000484 	.word	0x20000484
 800d79c:	20000488 	.word	0x20000488

0800d7a0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d7b0:	613b      	str	r3, [r7, #16]
  return(result);
 800d7b2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7b6:	b672      	cpsid	i
  
  switch(state)
 800d7b8:	78fb      	ldrb	r3, [r7, #3]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d009      	beq.n	800d7d2 <UTIL_LPM_SetOffMode+0x32>
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d000      	beq.n	800d7c4 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800d7c2:	e00e      	b.n	800d7e2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <UTIL_LPM_SetOffMode+0x58>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	4a0a      	ldr	r2, [pc, #40]	; (800d7f8 <UTIL_LPM_SetOffMode+0x58>)
 800d7ce:	6013      	str	r3, [r2, #0]
      break;
 800d7d0:	e007      	b.n	800d7e2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	43da      	mvns	r2, r3
 800d7d6:	4b08      	ldr	r3, [pc, #32]	; (800d7f8 <UTIL_LPM_SetOffMode+0x58>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	4a06      	ldr	r2, [pc, #24]	; (800d7f8 <UTIL_LPM_SetOffMode+0x58>)
 800d7de:	6013      	str	r3, [r2, #0]
      break;
 800d7e0:	bf00      	nop
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	20000488 	.word	0x20000488

0800d7fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	; 0x30
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d804:	4b63      	ldr	r3, [pc, #396]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800d80a:	4b62      	ldr	r3, [pc, #392]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4013      	ands	r3, r2
 800d812:	4a60      	ldr	r2, [pc, #384]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d814:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d816:	e082      	b.n	800d91e <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d81c:	e002      	b.n	800d824 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d820:	3301      	adds	r3, #1
 800d822:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d824:	4a5c      	ldr	r2, [pc, #368]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d82c:	4b5b      	ldr	r3, [pc, #364]	; (800d99c <UTIL_SEQ_Run+0x1a0>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	401a      	ands	r2, r3
 800d832:	4b58      	ldr	r3, [pc, #352]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4013      	ands	r3, r2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d0f0      	beq.n	800d81e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d83c:	4a56      	ldr	r2, [pc, #344]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d844:	4b55      	ldr	r3, [pc, #340]	; (800d99c <UTIL_SEQ_Run+0x1a0>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	401a      	ands	r2, r3
 800d84a:	4b52      	ldr	r3, [pc, #328]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4013      	ands	r3, r2
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800d852:	4a51      	ldr	r2, [pc, #324]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	4413      	add	r3, r2
 800d85a:	685a      	ldr	r2, [r3, #4]
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	4013      	ands	r3, r2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d864:	4a4c      	ldr	r2, [pc, #304]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	4413      	add	r3, r2
 800d86c:	f04f 32ff 	mov.w	r2, #4294967295
 800d870:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800d872:	4a49      	ldr	r2, [pc, #292]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	4413      	add	r3, r2
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	4013      	ands	r3, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f000 f97d 	bl	800db80 <bit_position>
 800d886:	4602      	mov	r2, r0
 800d888:	4b45      	ldr	r3, [pc, #276]	; (800d9a0 <UTIL_SEQ_Run+0x1a4>)
 800d88a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800d88c:	4a42      	ldr	r2, [pc, #264]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	4413      	add	r3, r2
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	4a42      	ldr	r2, [pc, #264]	; (800d9a0 <UTIL_SEQ_Run+0x1a4>)
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	2101      	movs	r1, #1
 800d89c:	fa01 f202 	lsl.w	r2, r1, r2
 800d8a0:	43d2      	mvns	r2, r2
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	493c      	ldr	r1, [pc, #240]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	440b      	add	r3, r1
 800d8ac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d8b2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d8b4:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d8b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8b8:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800d8ba:	4b39      	ldr	r3, [pc, #228]	; (800d9a0 <UTIL_SEQ_Run+0x1a4>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c4:	43db      	mvns	r3, r3
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	4b36      	ldr	r3, [pc, #216]	; (800d9a4 <UTIL_SEQ_Run+0x1a8>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	4a35      	ldr	r2, [pc, #212]	; (800d9a4 <UTIL_SEQ_Run+0x1a8>)
 800d8d0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8d6:	e014      	b.n	800d902 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	4a2e      	ldr	r2, [pc, #184]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d8de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d8e2:	4b2f      	ldr	r3, [pc, #188]	; (800d9a0 <UTIL_SEQ_Run+0x1a4>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ec:	43db      	mvns	r3, r3
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	400a      	ands	r2, r1
 800d8f6:	4928      	ldr	r1, [pc, #160]	; (800d998 <UTIL_SEQ_Run+0x19c>)
 800d8f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	3b01      	subs	r3, #1
 800d900:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1e7      	bne.n	800d8d8 <UTIL_SEQ_Run+0xdc>
 800d908:	6a3b      	ldr	r3, [r7, #32]
 800d90a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d912:	4b23      	ldr	r3, [pc, #140]	; (800d9a0 <UTIL_SEQ_Run+0x1a4>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a24      	ldr	r2, [pc, #144]	; (800d9a8 <UTIL_SEQ_Run+0x1ac>)
 800d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91c:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d91e:	4b21      	ldr	r3, [pc, #132]	; (800d9a4 <UTIL_SEQ_Run+0x1a8>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	4b1e      	ldr	r3, [pc, #120]	; (800d99c <UTIL_SEQ_Run+0x1a0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	401a      	ands	r2, r3
 800d928:	4b1a      	ldr	r3, [pc, #104]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4013      	ands	r3, r2
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d007      	beq.n	800d942 <UTIL_SEQ_Run+0x146>
 800d932:	4b1e      	ldr	r3, [pc, #120]	; (800d9ac <UTIL_SEQ_Run+0x1b0>)
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	4b1e      	ldr	r3, [pc, #120]	; (800d9b0 <UTIL_SEQ_Run+0x1b4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4013      	ands	r3, r2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f43f af6b 	beq.w	800d818 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800d942:	f000 f90f 	bl	800db64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d946:	f3ef 8310 	mrs	r3, PRIMASK
 800d94a:	613b      	str	r3, [r7, #16]
  return(result);
 800d94c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d94e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d950:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <UTIL_SEQ_Run+0x1a8>)
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	4b11      	ldr	r3, [pc, #68]	; (800d99c <UTIL_SEQ_Run+0x1a0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	401a      	ands	r2, r3
 800d95c:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4013      	ands	r3, r2
 800d962:	2b00      	cmp	r3, #0
 800d964:	d108      	bne.n	800d978 <UTIL_SEQ_Run+0x17c>
 800d966:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <UTIL_SEQ_Run+0x1b0>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	4b11      	ldr	r3, [pc, #68]	; (800d9b0 <UTIL_SEQ_Run+0x1b4>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4013      	ands	r3, r2
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800d974:	f7f2 fe09 	bl	800058a <UTIL_SEQ_Idle>
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800d982:	f000 f8f6 	bl	800db72 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d986:	4a03      	ldr	r2, [pc, #12]	; (800d994 <UTIL_SEQ_Run+0x198>)
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	6013      	str	r3, [r2, #0]

  return;
 800d98c:	bf00      	nop
}
 800d98e:	3730      	adds	r7, #48	; 0x30
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	2000015c 	.word	0x2000015c
 800d998:	2000051c 	.word	0x2000051c
 800d99c:	20000158 	.word	0x20000158
 800d9a0:	20000498 	.word	0x20000498
 800d9a4:	2000048c 	.word	0x2000048c
 800d9a8:	2000049c 	.word	0x2000049c
 800d9ac:	20000490 	.word	0x20000490
 800d9b0:	20000494 	.word	0x20000494

0800d9b4 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9c4:	617b      	str	r3, [r7, #20]
  return(result);
 800d9c6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9ca:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 f8d7 	bl	800db80 <bit_position>
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	4a06      	ldr	r2, [pc, #24]	; (800d9f0 <UTIL_SEQ_RegTask+0x3c>)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d9e6:	bf00      	nop
}
 800d9e8:	3720      	adds	r7, #32
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	2000049c 	.word	0x2000049c

0800d9f4 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800da02:	60fb      	str	r3, [r7, #12]
  return(result);
 800da04:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da08:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800da0a:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <UTIL_SEQ_SetTask+0x4c>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4313      	orrs	r3, r2
 800da12:	4a0b      	ldr	r2, [pc, #44]	; (800da40 <UTIL_SEQ_SetTask+0x4c>)
 800da14:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800da16:	4a0b      	ldr	r2, [pc, #44]	; (800da44 <UTIL_SEQ_SetTask+0x50>)
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	431a      	orrs	r2, r3
 800da22:	4908      	ldr	r1, [pc, #32]	; (800da44 <UTIL_SEQ_SetTask+0x50>)
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da34:	bf00      	nop
}
 800da36:	371c      	adds	r7, #28
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	2000048c 	.word	0x2000048c
 800da44:	2000051c 	.word	0x2000051c

0800da48 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da50:	f3ef 8310 	mrs	r3, PRIMASK
 800da54:	60fb      	str	r3, [r7, #12]
  return(result);
 800da56:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da5a:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	43da      	mvns	r2, r3
 800da60:	4b07      	ldr	r3, [pc, #28]	; (800da80 <UTIL_SEQ_PauseTask+0x38>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4013      	ands	r3, r2
 800da66:	4a06      	ldr	r2, [pc, #24]	; (800da80 <UTIL_SEQ_PauseTask+0x38>)
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da74:	bf00      	nop
}
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	20000158 	.word	0x20000158

0800da84 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8c:	f3ef 8310 	mrs	r3, PRIMASK
 800da90:	60fb      	str	r3, [r7, #12]
  return(result);
 800da92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da96:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800da98:	4b08      	ldr	r3, [pc, #32]	; (800dabc <UTIL_SEQ_ResumeTask+0x38>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	4a06      	ldr	r2, [pc, #24]	; (800dabc <UTIL_SEQ_ResumeTask+0x38>)
 800daa2:	6013      	str	r3, [r2, #0]
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800daae:	bf00      	nop
}
 800dab0:	371c      	adds	r7, #28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20000158 	.word	0x20000158

0800dac0 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac8:	f3ef 8310 	mrs	r3, PRIMASK
 800dacc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dace:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dad2:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800dad4:	4b08      	ldr	r3, [pc, #32]	; (800daf8 <UTIL_SEQ_SetEvt+0x38>)
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4313      	orrs	r3, r2
 800dadc:	4a06      	ldr	r2, [pc, #24]	; (800daf8 <UTIL_SEQ_SetEvt+0x38>)
 800dade:	6013      	str	r3, [r2, #0]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800daea:	bf00      	nop
}
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop
 800daf8:	20000490 	.word	0x20000490

0800dafc <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800db04:	4b14      	ldr	r3, [pc, #80]	; (800db58 <UTIL_SEQ_WaitEvt+0x5c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2201      	movs	r2, #1
 800db0a:	fa02 f303 	lsl.w	r3, r2, r3
 800db0e:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800db10:	4b12      	ldr	r3, [pc, #72]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800db16:	4a11      	ldr	r2, [pc, #68]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800db1c:	e005      	b.n	800db2a <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800db1e:	4b0f      	ldr	r3, [pc, #60]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4619      	mov	r1, r3
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f7f2 fd37 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800db2a:	4b0d      	ldr	r3, [pc, #52]	; (800db60 <UTIL_SEQ_WaitEvt+0x64>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	4b0b      	ldr	r3, [pc, #44]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4013      	ands	r3, r2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d0f2      	beq.n	800db1e <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800db38:	4b08      	ldr	r3, [pc, #32]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	43da      	mvns	r2, r3
 800db3e:	4b08      	ldr	r3, [pc, #32]	; (800db60 <UTIL_SEQ_WaitEvt+0x64>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4013      	ands	r3, r2
 800db44:	4a06      	ldr	r2, [pc, #24]	; (800db60 <UTIL_SEQ_WaitEvt+0x64>)
 800db46:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800db48:	4a04      	ldr	r2, [pc, #16]	; (800db5c <UTIL_SEQ_WaitEvt+0x60>)
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	6013      	str	r3, [r2, #0]

  return;
 800db4e:	bf00      	nop
}
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20000498 	.word	0x20000498
 800db5c:	20000494 	.word	0x20000494
 800db60:	20000490 	.word	0x20000490

0800db64 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800db68:	bf00      	nop
}
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800db72:	b480      	push	{r7}
 800db74:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800db76:	bf00      	nop
}
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	0c1b      	lsrs	r3, r3, #16
 800db90:	041b      	lsls	r3, r3, #16
 800db92:	2b00      	cmp	r3, #0
 800db94:	d104      	bne.n	800dba0 <bit_position+0x20>
 800db96:	2310      	movs	r3, #16
 800db98:	60fb      	str	r3, [r7, #12]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	041b      	lsls	r3, r3, #16
 800db9e:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d105      	bne.n	800dbb6 <bit_position+0x36>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3308      	adds	r3, #8
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	021b      	lsls	r3, r3, #8
 800dbb4:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d105      	bne.n	800dbcc <bit_position+0x4c>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	011b      	lsls	r3, r3, #4
 800dbca:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	0f1b      	lsrs	r3, r3, #28
 800dbd0:	4a07      	ldr	r2, [pc, #28]	; (800dbf0 <bit_position+0x70>)
 800dbd2:	5cd3      	ldrb	r3, [r2, r3]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	4413      	add	r3, r2
 800dbda:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f1c3 031f 	rsb	r3, r3, #31
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	0800ddc0 	.word	0x0800ddc0

0800dbf4 <__libc_init_array>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4e0d      	ldr	r6, [pc, #52]	; (800dc2c <__libc_init_array+0x38>)
 800dbf8:	4c0d      	ldr	r4, [pc, #52]	; (800dc30 <__libc_init_array+0x3c>)
 800dbfa:	1ba4      	subs	r4, r4, r6
 800dbfc:	10a4      	asrs	r4, r4, #2
 800dbfe:	2500      	movs	r5, #0
 800dc00:	42a5      	cmp	r5, r4
 800dc02:	d109      	bne.n	800dc18 <__libc_init_array+0x24>
 800dc04:	4e0b      	ldr	r6, [pc, #44]	; (800dc34 <__libc_init_array+0x40>)
 800dc06:	4c0c      	ldr	r4, [pc, #48]	; (800dc38 <__libc_init_array+0x44>)
 800dc08:	f000 f82c 	bl	800dc64 <_init>
 800dc0c:	1ba4      	subs	r4, r4, r6
 800dc0e:	10a4      	asrs	r4, r4, #2
 800dc10:	2500      	movs	r5, #0
 800dc12:	42a5      	cmp	r5, r4
 800dc14:	d105      	bne.n	800dc22 <__libc_init_array+0x2e>
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
 800dc18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc1c:	4798      	blx	r3
 800dc1e:	3501      	adds	r5, #1
 800dc20:	e7ee      	b.n	800dc00 <__libc_init_array+0xc>
 800dc22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc26:	4798      	blx	r3
 800dc28:	3501      	adds	r5, #1
 800dc2a:	e7f2      	b.n	800dc12 <__libc_init_array+0x1e>
 800dc2c:	0800ddd8 	.word	0x0800ddd8
 800dc30:	0800ddd8 	.word	0x0800ddd8
 800dc34:	0800ddd8 	.word	0x0800ddd8
 800dc38:	0800dddc 	.word	0x0800dddc

0800dc3c <memcpy>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	1e43      	subs	r3, r0, #1
 800dc40:	440a      	add	r2, r1
 800dc42:	4291      	cmp	r1, r2
 800dc44:	d100      	bne.n	800dc48 <memcpy+0xc>
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc50:	e7f7      	b.n	800dc42 <memcpy+0x6>

0800dc52 <memset>:
 800dc52:	4402      	add	r2, r0
 800dc54:	4603      	mov	r3, r0
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d100      	bne.n	800dc5c <memset+0xa>
 800dc5a:	4770      	bx	lr
 800dc5c:	f803 1b01 	strb.w	r1, [r3], #1
 800dc60:	e7f9      	b.n	800dc56 <memset+0x4>
	...

0800dc64 <_init>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	bf00      	nop
 800dc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6a:	bc08      	pop	{r3}
 800dc6c:	469e      	mov	lr, r3
 800dc6e:	4770      	bx	lr

0800dc70 <_fini>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr
