
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000004  08008f94  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000028  08008fb8  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000c4  08009051  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800908e  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000098  20000118  0800909f  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000474  200001b0  08009137  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000624  08009137  00020624  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0003266b  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00005b95  00000000  00000000  0005284b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 000024c8  00000000  00000000  000583e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002230  00000000  00000000  0005a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002a95f  00000000  00000000  0005cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0001f68b  00000000  00000000  00087437  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f22de  00000000  00000000  000a6ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00198da0  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000098d0  00000000  00000000  00198e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	08008e18 	.word	0x08008e18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	08008e18 	.word	0x08008e18

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fbee 	bl	8000ca4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000384 	.word	0x20000384

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f008 fa26 	bl	8008930 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f007 f9f1 	bl	80078d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2008      	movs	r0, #8
 80004f8:	f008 fb36 	bl	8008b68 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f007 f8ad 	bl	8007668 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f007 fae3 	bl	8007af0 <TL_MM_Init>

  TL_Enable();
 800052a:	f007 f9cd 	bl	80078c8 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	080076a1 	.word	0x080076a1
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f007 fb2d 	bl	8007bd0 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f007 fc61 	bl	8007e3c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f008 f9e9 	bl	8008954 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f008 fa03 	bl	80089b0 <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2008      	movs	r0, #8
 80005be:	f008 faf3 	bl	8008ba8 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f008 fb4e 	bl	8008c74 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f008 fb61 	bl	8008cb0 <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000028 	.word	0x20000028

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	200000b8 	.word	0x200000b8
 80007cc:	20000028 	.word	0x20000028

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000b8 	.word	0x200000b8
 8000918:	200000b9 	.word	0x200000b9
 800091c:	20000028 	.word	0x20000028
 8000920:	200000bc 	.word	0x200000bc

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200000b8 	.word	0x200000b8
 8000a20:	200000b9 	.word	0x200000b9
 8000a24:	20000028 	.word	0x20000028
 8000a28:	200000bc 	.word	0x200000bc

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000bc 	.word	0x200000bc
 8000aa0:	200001d2 	.word	0x200001d2
 8000aa4:	200001d1 	.word	0x200001d1
 8000aa8:	200001d0 	.word	0x200001d0

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f001 f9c3 	bl	8001e52 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f001 f9ab 	bl	8001e6e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000bc 	.word	0x200000bc
 8000b58:	200001d0 	.word	0x200001d0
 8000b5c:	200001cc 	.word	0x200001cc
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	200001cc 	.word	0x200001cc
 8000c94:	200000b8 	.word	0x200000b8
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	200000c0 	.word	0x200000c0
 8000ca0:	200001d4 	.word	0x200001d4

08000ca4 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000cb0:	4a61      	ldr	r2, [pc, #388]	; (8000e38 <HW_TS_Init+0x194>)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <HW_TS_Init+0x194>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5d      	ldr	r3, [pc, #372]	; (8000e38 <HW_TS_Init+0x194>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000cca:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <HW_TS_Init+0x198>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	4a5b      	ldr	r2, [pc, #364]	; (8000e3c <HW_TS_Init+0x198>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000cd6:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <HW_TS_Init+0x198>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f1c3 0304 	rsb	r3, r3, #4
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <HW_TS_Init+0x19c>)
 8000cea:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HW_TS_Init+0x198>)
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000cf4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000cf8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	fa92 f2a2 	rbit	r2, r2
 8000d00:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	40d3      	lsrs	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HW_TS_Init+0x1a0>)
 8000d14:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HW_TS_Init+0x198>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <HW_TS_Init+0x1a4>)
 8000d28:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HW_TS_Init+0x1a4>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <HW_TS_Init+0x1a0>)
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000d3c:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <HW_TS_Init+0x19c>)
 8000d3e:	7812      	ldrb	r2, [r2, #0]
 8000d40:	40d3      	lsrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d904      	bls.n	8000d58 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HW_TS_Init+0x1a8>)
 8000d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	e003      	b.n	8000d60 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <HW_TS_Init+0x1a8>)
 8000d5e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d64:	f7ff fc5c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d6c:	f7ff fc44 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d143      	bne.n	8000dfe <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HW_TS_Init+0x1ac>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <HW_TS_Init+0x1b0>)
 8000d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d82:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	75fb      	strb	r3, [r7, #23]
 8000d88:	e00c      	b.n	8000da4 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000d8a:	7dfa      	ldrb	r2, [r7, #23]
 8000d8c:	4932      	ldr	r1, [pc, #200]	; (8000e58 <HW_TS_Init+0x1b4>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	330c      	adds	r3, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	3301      	adds	r3, #1
 8000da2:	75fb      	strb	r3, [r7, #23]
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b05      	cmp	r3, #5
 8000da8:	d9ef      	bls.n	8000d8a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HW_TS_Init+0x1b8>)
 8000dac:	2206      	movs	r2, #6
 8000dae:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HW_TS_Init+0x194>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <HW_TS_Init+0x194>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dc2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HW_TS_Init+0x194>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HW_TS_Init+0x194>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dd8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HW_TS_Init+0x1bc>)
 8000ddc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000de0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000de2:	2003      	movs	r0, #3
 8000de4:	f001 f843 	bl	8001e6e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HW_TS_Init+0x194>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HW_TS_Init+0x194>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	e00a      	b.n	8000e14 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HW_TS_Init+0x194>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f001 f81f 	bl	8001e52 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HW_TS_Init+0x194>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f000 ffd3 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 ffea 	bl	8001e02 <HAL_NVIC_EnableIRQ>

  return;
 8000e2e:	bf00      	nop
}
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc
 8000e3c:	40002800 	.word	0x40002800
 8000e40:	200001d0 	.word	0x200001d0
 8000e44:	200001d1 	.word	0x200001d1
 8000e48:	200001d2 	.word	0x200001d2
 8000e4c:	200001d4 	.word	0x200001d4
 8000e50:	200000c0 	.word	0x200000c0
 8000e54:	200000bc 	.word	0x200000bc
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	200000b8 	.word	0x200000b8
 8000e60:	58000800 	.word	0x58000800

08000e64 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8000e7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000e80:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e86:	e004      	b.n	8000e92 <HW_TS_Create+0x2e>
  {
    loop++;
 8000e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d80c      	bhi.n	8000eb4 <HW_TS_Create+0x50>
 8000e9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e9e:	492b      	ldr	r1, [pc, #172]	; (8000f4c <HW_TS_Create+0xe8>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	330c      	adds	r3, #12
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e9      	bne.n	8000e88 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d037      	beq.n	8000f2c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000ebc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ec0:	4922      	ldr	r1, [pc, #136]	; (8000f4c <HW_TS_Create+0xe8>)
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	330c      	adds	r3, #12
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000edc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ee0:	491a      	ldr	r1, [pc, #104]	; (8000f4c <HW_TS_Create+0xe8>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3310      	adds	r3, #16
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000ef2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ef6:	4915      	ldr	r1, [pc, #84]	; (8000f4c <HW_TS_Create+0xe8>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	330d      	adds	r3, #13
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000f08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f0c:	490f      	ldr	r1, [pc, #60]	; (8000f4c <HW_TS_Create+0xe8>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f22:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f2a:	e007      	b.n	8000f3c <HW_TS_Create+0xd8>
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	372c      	adds	r7, #44	; 0x2c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20000028 	.word	0x20000028

08000f50 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f60:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 ff59 	bl	8001e1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HW_TS_Stop+0xfc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	22ca      	movs	r2, #202	; 0xca
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <HW_TS_Stop+0xfc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2253      	movs	r2, #83	; 0x53
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	4933      	ldr	r1, [pc, #204]	; (8001050 <HW_TS_Stop+0x100>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	330c      	adds	r3, #12
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d148      	bne.n	800102a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fcc1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HW_TS_Stop+0x104>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fa8:	7cfb      	ldrb	r3, [r7, #19]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d135      	bne.n	800101a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HW_TS_Stop+0x108>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fba:	d108      	bne.n	8000fce <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fbc:	bf00      	nop
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HW_TS_Stop+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f7      	bne.n	8000fbe <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HW_TS_Stop+0xfc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HW_TS_Stop+0xfc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fe2:	bf00      	nop
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HW_TS_Stop+0xfc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f7      	beq.n	8000fe4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HW_TS_Stop+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HW_TS_Stop+0xfc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001008:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HW_TS_Stop+0x10c>)
 800100c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001010:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001012:	2003      	movs	r0, #3
 8001014:	f000 ff2b 	bl	8001e6e <HAL_NVIC_ClearPendingIRQ>
 8001018:	e007      	b.n	800102a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HW_TS_Stop+0x110>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	7cfa      	ldrb	r2, [r7, #19]
 8001022:	429a      	cmp	r2, r3
 8001024:	d001      	beq.n	800102a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001026:	f7ff fd9f 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HW_TS_Stop+0xfc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	22ff      	movs	r2, #255	; 0xff
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fee4 	bl	8001e02 <HAL_NVIC_EnableIRQ>
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001044:	bf00      	nop
}
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001cc 	.word	0x200001cc
 8001050:	20000028 	.word	0x20000028
 8001054:	200000b8 	.word	0x200000b8
 8001058:	40002800 	.word	0x40002800
 800105c:	58000800 	.word	0x58000800
 8001060:	200000b9 	.word	0x200000b9

08001064 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	493b      	ldr	r1, [pc, #236]	; (8001160 <HW_TS_Start+0xfc>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	330c      	adds	r3, #12
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d103      	bne.n	8001090 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff60 	bl	8000f50 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001090:	f3ef 8310 	mrs	r3, PRIMASK
 8001094:	60fb      	str	r3, [r7, #12]
  return(result);
 8001096:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800109a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800109c:	2003      	movs	r0, #3
 800109e:	f000 febe 	bl	8001e1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HW_TS_Start+0x100>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	22ca      	movs	r2, #202	; 0xca
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HW_TS_Start+0x100>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2253      	movs	r2, #83	; 0x53
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	4929      	ldr	r1, [pc, #164]	; (8001160 <HW_TS_Start+0xfc>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4924      	ldr	r1, [pc, #144]	; (8001160 <HW_TS_Start+0xfc>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3308      	adds	r3, #8
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	491f      	ldr	r1, [pc, #124]	; (8001160 <HW_TS_Start+0xfc>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3304      	adds	r3, #4
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fb6b 	bl	80007d0 <linkTimer>
 80010fa:	4603      	mov	r3, r0
 80010fc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HW_TS_Start+0x104>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HW_TS_Start+0x108>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	7c7a      	ldrb	r2, [r7, #17]
 800110c:	429a      	cmp	r2, r3
 800110e:	d002      	beq.n	8001116 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001110:	f7ff fd2a 	bl	8000b68 <RescheduleTimerList>
 8001114:	e013      	b.n	800113e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	4911      	ldr	r1, [pc, #68]	; (8001160 <HW_TS_Start+0xfc>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3308      	adds	r3, #8
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	8a7b      	ldrh	r3, [r7, #18]
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	1ac9      	subs	r1, r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <HW_TS_Start+0xfc>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4403      	add	r3, r0
 800113a:	3308      	adds	r3, #8
 800113c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HW_TS_Start+0x100>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001148:	2003      	movs	r0, #3
 800114a:	f000 fe5a 	bl	8001e02 <HAL_NVIC_EnableIRQ>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001158:	bf00      	nop
}
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000028 	.word	0x20000028
 8001164:	200001cc 	.word	0x200001cc
 8001168:	200000b8 	.word	0x200000b8
 800116c:	200000b9 	.word	0x200000b9

08001170 <LL_RCC_LSE_SetDriveCapability>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001180:	f023 0218 	bic.w	r2, r3, #24
 8001184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4313      	orrs	r3, r2
 800118c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c0:	68fb      	ldr	r3, [r7, #12]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f000 fc3f 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f811 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f000 f95d 	bl	8001498 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011de:	f000 f8e7 	bl	80013b0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80011e2:	f000 f931 	bl	8001448 <MX_USB_PCD_Init>
  MX_RF_Init();
 80011e6:	f000 f8b3 	bl	8001350 <MX_RF_Init>
  MX_RTC_Init();
 80011ea:	f000 f8b9 	bl	8001360 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80011ee:	f7ff f963 	bl	80004b8 <APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	f007 fbdb 	bl	80089b0 <UTIL_SEQ_Run>
 80011fa:	e7fa      	b.n	80011f2 <main+0x24>

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ae      	sub	sp, #184	; 0xb8
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001206:	2248      	movs	r2, #72	; 0x48
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fdfb 	bl	8008e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2250      	movs	r2, #80	; 0x50
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fdeb 	bl	8008e06 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f023 0303 	bic.w	r3, r3, #3
 800124a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff8b 	bl	8001170 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <SystemClock_Config+0x150>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001262:	4a3a      	ldr	r2, [pc, #232]	; (800134c <SystemClock_Config+0x150>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <SystemClock_Config+0x150>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001276:	2327      	movs	r3, #39	; 0x27
 8001278:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800128a:	2301      	movs	r3, #1
 800128c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800129c:	2360      	movs	r3, #96	; 0x60
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fca7 	bl	8002c00 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b8:	f000 f940 	bl	800153c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80012bc:	236f      	movs	r3, #111	; 0x6f
 80012be:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012c0:	2302      	movs	r3, #2
 80012c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 ffec 	bl	80032bc <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012ea:	f000 f927 	bl	800153c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80012ee:	f643 1301 	movw	r3, #14593	; 0x3901
 80012f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80012f4:	2318      	movs	r3, #24
 80012f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80012f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80012fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001302:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001304:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001308:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800130a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001314:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001326:	2302      	movs	r3, #2
 8001328:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800132a:	2300      	movs	r3, #0
 800132c:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fc0d 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x144>
  {
    Error_Handler();
 800133c:	f000 f8fe 	bl	800153c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001340:	f002 fd7b 	bl	8003e3a <HAL_RCCEx_EnableMSIPLLMode>
}
 8001344:	bf00      	nop
 8001346:	37b8      	adds	r7, #184	; 0xb8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58000400 	.word	0x58000400

08001350 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_RTC_Init+0x48>)
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <MX_RTC_Init+0x4c>)
 8001368:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_RTC_Init+0x48>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MX_RTC_Init+0x48>)
 8001372:	220f      	movs	r2, #15
 8001374:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_RTC_Init+0x48>)
 8001378:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800137c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <MX_RTC_Init+0x48>)
 8001380:	f002 fe72 	bl	8004068 <HAL_RTC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800138a:	f000 f8d7 	bl	800153c <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_RTC_Init+0x48>)
 8001394:	f002 ff56 	bl	8004244 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800139e:	f000 f8cd 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000384 	.word	0x20000384
 80013ac:	40002800 	.word	0x40002800

080013b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <MX_USART1_UART_Init+0x94>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x90>)
 80013fa:	f003 f82f 	bl	800445c <HAL_UART_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001404:	f000 f89a 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_USART1_UART_Init+0x90>)
 800140c:	f004 fc84 	bl	8005d18 <HAL_UARTEx_SetTxFifoThreshold>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001416:	f000 f891 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x90>)
 800141e:	f004 fcb9 	bl	8005d94 <HAL_UARTEx_SetRxFifoThreshold>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 f888 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_USART1_UART_Init+0x90>)
 800142e:	f004 fc3a 	bl	8005ca6 <HAL_UARTEx_DisableFifoMode>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001438:	f000 f880 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002f8 	.word	0x200002f8
 8001444:	40013800 	.word	0x40013800

08001448 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USB_PCD_Init+0x48>)
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <MX_USB_PCD_Init+0x4c>)
 8001450:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USB_PCD_Init+0x48>)
 8001454:	2208      	movs	r2, #8
 8001456:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_USB_PCD_Init+0x48>)
 800145a:	2202      	movs	r2, #2
 800145c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USB_PCD_Init+0x48>)
 8001460:	2202      	movs	r2, #2
 8001462:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_USB_PCD_Init+0x48>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USB_PCD_Init+0x48>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_USB_PCD_Init+0x48>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USB_PCD_Init+0x48>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_USB_PCD_Init+0x48>)
 800147e:	f000 ff28 	bl	80022d2 <HAL_PCD_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001488:	f000 f858 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003a8 	.word	0x200003a8
 8001494:	40006800 	.word	0x40006800

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	2004      	movs	r0, #4
 80014ae:	f7ff fe75 	bl	800119c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2002      	movs	r0, #2
 80014b4:	f7ff fe72 	bl	800119c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fe6f 	bl	800119c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	2008      	movs	r0, #8
 80014c0:	f7ff fe6c 	bl	800119c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2123      	movs	r1, #35	; 0x23
 80014c8:	4818      	ldr	r0, [pc, #96]	; (800152c <MX_GPIO_Init+0x94>)
 80014ca:	f000 fead 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 80014ce:	2310      	movs	r3, #16
 80014d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_GPIO_Init+0x98>)
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4815      	ldr	r0, [pc, #84]	; (8001534 <MX_GPIO_Init+0x9c>)
 80014e0:	f000 fd32 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80014e4:	2323      	movs	r3, #35	; 0x23
 80014e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_GPIO_Init+0x94>)
 80014fa:	f000 fd25 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80014fe:	2303      	movs	r3, #3
 8001500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	480a      	ldr	r0, [pc, #40]	; (8001538 <MX_GPIO_Init+0xa0>)
 8001510:	f000 fd1a 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	200a      	movs	r0, #10
 800151a:	f000 fc58 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800151e:	200a      	movs	r0, #10
 8001520:	f000 fc6f 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	48000400 	.word	0x48000400
 8001530:	10210000 	.word	0x10210000
 8001534:	48000800 	.word	0x48000800
 8001538:	48000c00 	.word	0x48000c00

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_AHB2_GRP1_EnableClock>:
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800163c:	f7ff ffaf 	bl	800159e <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_RTC_MspInit+0x30>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d109      	bne.n	800166a <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001656:	f7ff ff78 	bl	800154a <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2003      	movs	r0, #3
 8001660:	f000 fbb5 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 fbcc 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40002800 	.word	0x40002800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_UART_MspInit+0x68>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11e      	bne.n	80016d8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800169e:	f7ff ffb0 	bl	8001602 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ff62 	bl	800156c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b8:	2307      	movs	r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <HAL_UART_MspInit+0x6c>)
 80016c4:	f000 fc40 	bl	8001f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2024      	movs	r0, #36	; 0x24
 80016ce:	f000 fb7e 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016d2:	2024      	movs	r0, #36	; 0x24
 80016d4:	f000 fb95 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40013800 	.word	0x40013800
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_PCD_MspInit+0x5c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d118      	bne.n	800173c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff ff2e 	bl	800156c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001710:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001722:	230a      	movs	r3, #10
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f000 fc0a 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001734:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001738:	f7ff ff4a 	bl	80015d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40006800 	.word	0x40006800

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f9b4 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <RTC_WKUP_IRQHandler+0x10>)
 80017aa:	f002 fe07 	bl	80043bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000384 	.word	0x20000384

080017b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017bc:	2010      	movs	r0, #16
 80017be:	f000 fd65 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART1_IRQHandler+0x10>)
 80017ce:	f002 fe95 	bl	80044fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002f8 	.word	0x200002f8

080017dc <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80017e0:	f006 ff96 	bl	8008710 <HW_IPCC_Tx_Handler>
  return;
 80017e4:	bf00      	nop
}
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80017ec:	f006 ff58 	bl	80086a0 <HW_IPCC_Rx_Handler>
  return;
 80017f0:	bf00      	nop
}
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <SystemInit+0xa0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <SystemInit+0xa0>)
 8001800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001804:	4a23      	ldr	r2, [pc, #140]	; (8001894 <SystemInit+0xa0>)
 8001806:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001826:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <SystemInit+0xa4>)
 8001834:	4013      	ands	r3, r2
 8001836:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001844:	f023 0305 	bic.w	r3, r3, #5
 8001848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <SystemInit+0xa8>)
 8001866:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <SystemInit+0xa8>)
 800186e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	faf6fefb 	.word	0xfaf6fefb
 800189c:	22041000 	.word	0x22041000

080018a0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <SystemCoreClockUpdate+0x130>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d867      	bhi.n	8001998 <SystemCoreClockUpdate+0xf8>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <SystemCoreClockUpdate+0x30>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	08001905 	.word	0x08001905
 80018d4:	08001999 	.word	0x08001999
 80018d8:	08001999 	.word	0x08001999
 80018dc:	08001999 	.word	0x08001999
 80018e0:	0800190d 	.word	0x0800190d
 80018e4:	08001999 	.word	0x08001999
 80018e8:	08001999 	.word	0x08001999
 80018ec:	08001999 	.word	0x08001999
 80018f0:	08001915 	.word	0x08001915
 80018f4:	08001999 	.word	0x08001999
 80018f8:	08001999 	.word	0x08001999
 80018fc:	08001999 	.word	0x08001999
 8001900:	0800191d 	.word	0x0800191d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6013      	str	r3, [r2, #0]
      break;
 800190a:	e049      	b.n	80019a0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 800190e:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <SystemCoreClockUpdate+0x138>)
 8001910:	601a      	str	r2, [r3, #0]
      break;
 8001912:	e045      	b.n	80019a0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 8001916:	4a31      	ldr	r2, [pc, #196]	; (80019dc <SystemCoreClockUpdate+0x13c>)
 8001918:	601a      	str	r2, [r3, #0]
      break;
 800191a:	e041      	b.n	80019a0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	3301      	adds	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d105      	bne.n	800194a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <SystemCoreClockUpdate+0x138>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00d      	b.n	8001966 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d105      	bne.n	800195c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <SystemCoreClockUpdate+0x13c>)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e004      	b.n	8001966 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0f5b      	lsrs	r3, r3, #29
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 8001994:	6013      	str	r3, [r2, #0]
      break;
 8001996:	e003      	b.n	80019a0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6013      	str	r3, [r2, #0]
      break;
 800199e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <SystemCoreClockUpdate+0x140>)
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemCoreClockUpdate+0x134>)
 80019c0:	6013      	str	r3, [r2, #0]

}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	08008f04 	.word	0x08008f04
 80019d4:	20000004 	.word	0x20000004
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	01e84800 	.word	0x01e84800
 80019e0:	08008ea4 	.word	0x08008ea4

080019e4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019e4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e8:	3304      	adds	r3, #4

080019ea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019ee:	d3f9      	bcc.n	80019e4 <CopyDataInit>
  bx lr
 80019f0:	4770      	bx	lr

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019f2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019f4:	3004      	adds	r0, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019f6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  bx lr
 80019fa:	4770      	bx	lr

080019fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80019fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x8>)
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xc>)
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0x10>)
 8001a06:	2300      	movs	r3, #0
 8001a08:	f7ff ffef 	bl	80019ea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <LoopForever+0x14>)
 8001a0e:	490d      	ldr	r1, [pc, #52]	; (8001a44 <LoopForever+0x18>)
 8001a10:	2300      	movs	r3, #0
 8001a12:	f7ff fff0 	bl	80019f6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a16:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x1c>)
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <LoopForever+0x20>)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f7ff ffeb 	bl	80019f6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a20:	f7ff fee8 	bl	80017f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a24:	f007 f9c0 	bl	8008da8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a28:	f7ff fbd1 	bl	80011ce <main>

08001a2c <LoopForever>:

LoopForever:
  b LoopForever
 8001a2c:	e7fe      	b.n	8001a2c <LoopForever>
 8001a2e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a34:	20000004 	.word	0x20000004
 8001a38:	20000028 	.word	0x20000028
 8001a3c:	08008f94 	.word	0x08008f94
  INIT_BSS _sbss, _ebss
 8001a40:	200001b0 	.word	0x200001b0
 8001a44:	20000624 	.word	0x20000624
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a48:	200301c4 	.word	0x200301c4
 8001a4c:	20030a44 	.word	0x20030a44

08001a50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_Init+0x3c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_Init+0x3c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f9a4 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 f80f 	bl	8001a94 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	e001      	b.n	8001a86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a82:	f7ff fdd7 	bl	8001634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58004000 	.word	0x58004000

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_InitTick+0x6c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001aa8:	f001 fdae 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8001aac:	4601      	mov	r1, r0
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_InitTick+0x6c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f9bb 	bl	8001e3a <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d809      	bhi.n	8001ae4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f979 	bl	8001dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_InitTick+0x70>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e004      	b.n	8001af4 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e001      	b.n	8001af4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_IncTick+0x1c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x20>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <HAL_IncTick+0x1c>)
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	2000061c 	.word	0x2000061c
 8001b28:	2000000c 	.word	0x2000000c

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000061c 	.word	0x2000061c

08001b44 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTickPrio+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db10      	blt.n	8001c30 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4909      	ldr	r1, [pc, #36]	; (8001c3c <__NVIC_DisableIRQ+0x40>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	3320      	adds	r3, #32
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c2c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0c      	blt.n	8001c6c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_SetPendingIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	3340      	adds	r3, #64	; 0x40
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0c      	blt.n	8001ca8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_ClearPendingIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	3360      	adds	r3, #96	; 0x60
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fecb 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff fee2 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fed5 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fee5 	bl	8001bfc <__NVIC_DisableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff96 	bl	8001d74 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff feed 	bl	8001c40 <__NVIC_SetPendingIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fefd 	bl	8001c7c <__NVIC_ClearPendingIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d005      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e047      	b.n	8001f3e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 020e 	bic.w	r2, r2, #14
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f003 021c 	and.w	r2, r3, #28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001efa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
    }
  }
  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e14c      	b.n	80021f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 813e 	beq.w	80021ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x38>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d00b      	beq.n	800201c <HAL_GPIO_Init+0xd4>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d007      	beq.n	800201c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002010:	2b11      	cmp	r3, #17
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d130      	bne.n	800207e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002052:	2201      	movs	r2, #1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 0201 	and.w	r2, r3, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8098 	beq.w	80021ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x2c8>)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020e6:	d019      	beq.n	800211c <HAL_GPIO_Init+0x1d4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_GPIO_Init+0x2cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_GPIO_Init+0x1d0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_GPIO_Init+0x2d0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1cc>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x2d4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1c8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_GPIO_Init+0x2d8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1c4>
 8002108:	2304      	movs	r3, #4
 800210a:	e008      	b.n	800211e <HAL_GPIO_Init+0x1d6>
 800210c:	2307      	movs	r3, #7
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x1d6>
 8002110:	2303      	movs	r3, #3
 8002112:	e004      	b.n	800211e <HAL_GPIO_Init+0x1d6>
 8002114:	2302      	movs	r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x1d6>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_GPIO_Init+0x1d6>
 800211c:	2300      	movs	r3, #0
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	f002 0203 	and.w	r2, r2, #3
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	4093      	lsls	r3, r2
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800212e:	4938      	ldr	r1, [pc, #224]	; (8002210 <HAL_GPIO_Init+0x2c8>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 800213e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002162:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4013      	ands	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f aeab 	bne.w	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	48000400 	.word	0x48000400
 8002218:	48000800 	.word	0x48000800
 800221c:	48000c00 	.word	0x48000c00
 8002220:	48001000 	.word	0x48001000
 8002224:	58000800 	.word	0x58000800

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002244:	e002      	b.n	800224c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002270:	887a      	ldrh	r2, [r7, #2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002276:	e002      	b.n	800227e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002278:	887a      	ldrh	r2, [r7, #2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f806 	bl	80022bc <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	58000800 	.word	0x58000800

080022bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d4:	b08b      	sub	sp, #44	; 0x2c
 80022d6:	af06      	add	r7, sp, #24
 80022d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0ad      	b.n	8002440 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff f9f5 	bl	80016e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fe00 	bl	8005f10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e035      	b.n	8002382 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	4413      	add	r3, r2
 800231e:	3329      	adds	r3, #41	; 0x29
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	4413      	add	r3, r2
 800232c:	3328      	adds	r3, #40	; 0x28
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	b291      	uxth	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	4413      	add	r3, r2
 800233e:	3336      	adds	r3, #54	; 0x36
 8002340:	460a      	mov	r2, r1
 8002342:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	015b      	lsls	r3, r3, #5
 800234a:	4413      	add	r3, r2
 800234c:	332b      	adds	r3, #43	; 0x2b
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	4413      	add	r3, r2
 800235a:	3338      	adds	r3, #56	; 0x38
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	4413      	add	r3, r2
 8002368:	333c      	adds	r3, #60	; 0x3c
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	3302      	adds	r3, #2
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	4413      	add	r3, r2
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	3301      	adds	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d3c4      	bcc.n	8002316 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e031      	b.n	80023f6 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	4413      	add	r3, r2
 800239a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	4413      	add	r3, r2
 80023ba:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	4413      	add	r3, r2
 80023da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	330a      	adds	r3, #10
 80023e8:	015b      	lsls	r3, r3, #5
 80023ea:	4413      	add	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	3301      	adds	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3c8      	bcc.n	8002392 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	687e      	ldr	r6, [r7, #4]
 8002408:	466d      	mov	r5, sp
 800240a:	f106 0410 	add.w	r4, r6, #16
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	1d33      	adds	r3, r6, #4
 8002418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	f003 fd95 	bl	8005f4a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f805 	bl	8002448 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002448 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800246c:	b29b      	uxth	r3, r3
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002480:	b29b      	uxth	r3, r3
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	58000400 	.word	0x58000400

080024bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	58000400 	.word	0x58000400

080024d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ea:	d101      	bne.n	80024f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_HSE_EnableBypass>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_RCC_HSE_DisableBypass>:
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_RCC_HSE_Enable>:
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_RCC_HSE_Disable>:
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_RCC_HSE_IsReady>:
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002586:	d101      	bne.n	800258c <LL_RCC_HSE_IsReady+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_RCC_HSE_IsReady+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_RCC_HSI_Enable>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_HSI_Disable>:
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_HSI_IsReady>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d101      	bne.n	80025ec <LL_RCC_HSI_IsReady+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_RCC_HSI_IsReady+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_RCC_HSI48_Enable>:
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_RCC_HSI48_Disable>:
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_RCC_HSI48_IsReady>:
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d101      	bne.n	800267e <LL_RCC_HSI48_IsReady+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_RCC_HSI48_IsReady+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_RCC_LSE_Enable>:
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_LSE_Disable>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_LSE_EnableBypass>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_RCC_LSE_DisableBypass>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_RCC_LSE_IsReady>:
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d101      	bne.n	800272a <LL_RCC_LSE_IsReady+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_RCC_LSE_IsReady+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_RCC_LSI1_Enable>:
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_RCC_LSI1_Disable>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_RCC_LSI1_IsReady>:
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d101      	bne.n	8002792 <LL_RCC_LSI1_IsReady+0x18>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_RCC_LSI1_IsReady+0x1a>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_LSI2_Enable>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_LSI2_Disable>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_RCC_LSI2_IsReady>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d101      	bne.n	80027fa <LL_RCC_LSI2_IsReady+0x18>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_RCC_LSI2_IsReady+0x1a>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_RCC_LSI2_SetTrimming>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_RCC_MSI_Enable>:
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_RCC_MSI_Disable>:
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_MSI_IsReady>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d101      	bne.n	8002886 <LL_RCC_MSI_IsReady+0x16>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_RCC_MSI_IsReady+0x18>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_RCC_MSI_SetRange>:
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_MSI_GetRange>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2bb0      	cmp	r3, #176	; 0xb0
 80028d0:	d901      	bls.n	80028d6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80028d2:	23b0      	movs	r3, #176	; 0xb0
 80028d4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_SetSysClkSource>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_RCC_GetSysClkSource>:
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_SetAHBPrescaler>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_SetAHB4Prescaler>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029b2:	f023 020f 	bic.w	r2, r3, #15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_SetAPB1Prescaler>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_SetAPB2Prescaler>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_RCC_GetAHBPrescaler>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_GetAHB4Prescaler>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_RCC_GetAPB1Prescaler>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_GetAPB2Prescaler>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad2:	d101      	bne.n	8002ad8 <LL_RCC_PLL_IsReady+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_RCC_PLL_IsReady+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0303 	and.w	r3, r3, #3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d101      	bne.n	8002b5e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7e:	d101      	bne.n	8002b84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d101      	bne.n	8002baa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d101      	bne.n	8002bce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bec:	d101      	bne.n	8002bf2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e34b      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 808f 	beq.w	8002d3e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c20:	f7ff fe89 	bl	8002936 <LL_RCC_GetSysClkSource>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c26:	f7ff ff82 	bl	8002b2e <LL_RCC_PLL_GetMainSource>
 8002c2a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3e>
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d149      	bne.n	8002ccc <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d146      	bne.n	8002ccc <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3e:	f7ff fe17 	bl	8002870 <LL_RCC_MSI_IsReady>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x54>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e32a      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c58:	f7ff fe2f 	bl	80028ba <LL_RCC_MSI_GetRange>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d914      	bls.n	8002c8c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fd0e 	bl	8003688 <RCC_SetFlashLatencyFromMSIRange>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e319      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe09 	bl	8002892 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fe2d 	bl	80028e4 <LL_RCC_MSI_SetCalibTrimming>
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fdfe 	bl	8002892 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fe22 	bl	80028e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fcef 	bl	8003688 <RCC_SetFlashLatencyFromMSIRange>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e2fa      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002cb4:	f7fe fdf4 	bl	80018a0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cb8:	4bb4      	ldr	r3, [pc, #720]	; (8002f8c <HAL_RCC_OscConfig+0x38c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fee9 	bl	8001a94 <HAL_InitTick>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d039      	beq.n	8002d3c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e2ee      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01e      	beq.n	8002d12 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cd4:	f7ff fdae 	bl	8002834 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe ff28 	bl	8001b2c <HAL_GetTick>
 8002cdc:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce0:	f7fe ff24 	bl	8001b2c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e2db      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cf2:	f7ff fdbd 	bl	8002870 <LL_RCC_MSI_IsReady>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f1      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fdc6 	bl	8002892 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fdea 	bl	80028e4 <LL_RCC_MSI_SetCalibTrimming>
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d12:	f7ff fd9e 	bl	8002852 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d16:	f7fe ff09 	bl	8001b2c <HAL_GetTick>
 8002d1a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1e:	f7fe ff05 	bl	8001b2c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e2bc      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d30:	f7ff fd9e 	bl	8002870 <LL_RCC_MSI_IsReady>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f1      	bne.n	8002d1e <HAL_RCC_OscConfig+0x11e>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d05a      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	f7ff fdf4 	bl	8002936 <LL_RCC_GetSysClkSource>
 8002d4e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	f7ff feed 	bl	8002b2e <LL_RCC_PLL_GetMainSource>
 8002d54:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x168>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10d      	bne.n	8002d7e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d10a      	bne.n	8002d7e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	f7ff fc04 	bl	8002574 <LL_RCC_HSE_IsReady>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d045      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1fe>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d141      	bne.n	8002dfe <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e295      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_OscConfig+0x18e>
 8002d88:	f7ff fbd6 	bl	8002538 <LL_RCC_HSE_Enable>
 8002d8c:	e00d      	b.n	8002daa <HAL_RCC_OscConfig+0x1aa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d96:	d104      	bne.n	8002da2 <HAL_RCC_OscConfig+0x1a2>
 8002d98:	f7ff fbb0 	bl	80024fc <LL_RCC_HSE_EnableBypass>
 8002d9c:	f7ff fbcc 	bl	8002538 <LL_RCC_HSE_Enable>
 8002da0:	e003      	b.n	8002daa <HAL_RCC_OscConfig+0x1aa>
 8002da2:	f7ff fbd8 	bl	8002556 <LL_RCC_HSE_Disable>
 8002da6:	f7ff fbb8 	bl	800251a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe febb 	bl	8001b2c <HAL_GetTick>
 8002db6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fe feb7 	bl	8001b2c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e26e      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dcc:	f7ff fbd2 	bl	8002574 <LL_RCC_HSE_IsReady>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f1      	beq.n	8002dba <HAL_RCC_OscConfig+0x1ba>
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fea8 	bl	8001b2c <HAL_GetTick>
 8002ddc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fea4 	bl	8001b2c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e25b      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df2:	f7ff fbbf 	bl	8002574 <LL_RCC_HSE_IsReady>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f1      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1e0>
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d051      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0c:	f7ff fd93 	bl	8002936 <LL_RCC_GetSysClkSource>
 8002e10:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e12:	f7ff fe8c 	bl	8002b2e <LL_RCC_PLL_GetMainSource>
 8002e16:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d005      	beq.n	8002e2a <HAL_RCC_OscConfig+0x22a>
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d113      	bne.n	8002e4c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d110      	bne.n	8002e4c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2a:	f7ff fbd3 	bl	80025d4 <LL_RCC_HSI_IsReady>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x240>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e234      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fbd7 	bl	80025f8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4a:	e031      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d019      	beq.n	8002e88 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	f7ff fba0 	bl	8002598 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fe68 	bl	8001b2c <HAL_GetTick>
 8002e5c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fe64 	bl	8001b2c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e21b      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e72:	f7ff fbaf 	bl	80025d4 <LL_RCC_HSI_IsReady>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f1      	beq.n	8002e60 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fbb9 	bl	80025f8 <LL_RCC_HSI_SetCalibTrimming>
 8002e86:	e013      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e88:	f7ff fb95 	bl	80025b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fe4e 	bl	8001b2c <HAL_GetTick>
 8002e90:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fe4a 	bl	8001b2c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e201      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ea6:	f7ff fb95 	bl	80025d4 <LL_RCC_HSI_IsReady>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f1      	bne.n	8002e94 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a2 	beq.w	800300e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d046      	beq.n	8002f6c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002ede:	f7ff fc4c 	bl	800277a <LL_RCC_LSI1_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d113      	bne.n	8002f10 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ee8:	f7ff fc25 	bl	8002736 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eec:	f7fe fe1e 	bl	8001b2c <HAL_GetTick>
 8002ef0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ef4:	f7fe fe1a 	bl	8001b2c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1d1      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002f06:	f7ff fc38 	bl	800277a <LL_RCC_LSI1_IsReady>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f1      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002f10:	f7ff fc45 	bl	800279e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe0a 	bl	8001b2c <HAL_GetTick>
 8002f18:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f1c:	f7fe fe06 	bl	8001b2c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1bd      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f2e:	f7ff fc58 	bl	80027e2 <LL_RCC_LSI2_IsReady>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f1      	beq.n	8002f1c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fc62 	bl	8002806 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002f42:	f7ff fc09 	bl	8002758 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fdf1 	bl	8001b2c <HAL_GetTick>
 8002f4a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f4e:	f7fe fded 	bl	8001b2c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1a4      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f60:	f7ff fc0b 	bl	800277a <LL_RCC_LSI1_IsReady>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f1      	bne.n	8002f4e <HAL_RCC_OscConfig+0x34e>
 8002f6a:	e050      	b.n	800300e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002f6c:	f7ff fbe3 	bl	8002736 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fddc 	bl	8001b2c <HAL_GetTick>
 8002f74:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f78:	f7fe fdd8 	bl	8001b2c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d904      	bls.n	8002f90 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e18f      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
 8002f8a:	bf00      	nop
 8002f8c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f90:	f7ff fbf3 	bl	800277a <LL_RCC_LSI1_IsReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ee      	beq.n	8002f78 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002f9a:	f7ff fc11 	bl	80027c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fa0:	f7fe fdc4 	bl	8001b2c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e17b      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002fb2:	f7ff fc16 	bl	80027e2 <LL_RCC_LSI2_IsReady>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f1      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3a0>
 8002fbc:	e027      	b.n	800300e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002fbe:	f7ff fbff 	bl	80027c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fdb3 	bl	8001b2c <HAL_GetTick>
 8002fc6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fca:	f7fe fdaf 	bl	8001b2c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e166      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fdc:	f7ff fc01 	bl	80027e2 <LL_RCC_LSI2_IsReady>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f1      	bne.n	8002fca <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002fe6:	f7ff fbb7 	bl	8002758 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe fd9f 	bl	8001b2c <HAL_GetTick>
 8002fee:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ff2:	f7fe fd9b 	bl	8001b2c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e152      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003004:	f7ff fbb9 	bl	800277a <LL_RCC_LSI1_IsReady>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f1      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d05b      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	4ba6      	ldr	r3, [pc, #664]	; (80032b4 <HAL_RCC_OscConfig+0x6b4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003026:	f7ff fa39 	bl	800249c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe fd7f 	bl	8001b2c <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fd7b 	bl	8001b2c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e132      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	4b9b      	ldr	r3, [pc, #620]	; (80032b4 <HAL_RCC_OscConfig+0x6b4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0x45e>
 8003058:	f7ff fb17 	bl	800268a <LL_RCC_LSE_Enable>
 800305c:	e00c      	b.n	8003078 <HAL_RCC_OscConfig+0x478>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d104      	bne.n	8003070 <HAL_RCC_OscConfig+0x470>
 8003066:	f7ff fb32 	bl	80026ce <LL_RCC_LSE_EnableBypass>
 800306a:	f7ff fb0e 	bl	800268a <LL_RCC_LSE_Enable>
 800306e:	e003      	b.n	8003078 <HAL_RCC_OscConfig+0x478>
 8003070:	f7ff fb1c 	bl	80026ac <LL_RCC_LSE_Disable>
 8003074:	f7ff fb3c 	bl	80026f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d014      	beq.n	80030aa <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fd54 	bl	8001b2c <HAL_GetTick>
 8003084:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fe fd50 	bl	8001b2c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e105      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800309e:	f7ff fb38 	bl	8002712 <LL_RCC_LSE_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCC_OscConfig+0x488>
 80030a8:	e013      	b.n	80030d2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fd3f 	bl	8001b2c <HAL_GetTick>
 80030ae:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fd3b 	bl	8001b2c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0f0      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030c8:	f7ff fb23 	bl	8002712 <LL_RCC_LSE_IsReady>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ef      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d02c      	beq.n	8003138 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d014      	beq.n	8003110 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e6:	f7ff fa9c 	bl	8002622 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe fd1f 	bl	8001b2c <HAL_GetTick>
 80030ee:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f2:	f7fe fd1b 	bl	8001b2c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0d2      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003104:	f7ff faaf 	bl	8002666 <LL_RCC_HSI48_IsReady>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f1      	beq.n	80030f2 <HAL_RCC_OscConfig+0x4f2>
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003110:	f7ff fa98 	bl	8002644 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fd0a 	bl	8001b2c <HAL_GetTick>
 8003118:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800311c:	f7fe fd06 	bl	8001b2c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0bd      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800312e:	f7ff fa9a 	bl	8002666 <LL_RCC_HSI48_IsReady>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f1      	bne.n	800311c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80b3 	beq.w	80032a8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003142:	f7ff fbf8 	bl	8002936 <LL_RCC_GetSysClkSource>
 8003146:	4603      	mov	r3, r0
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d076      	beq.n	800323a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2b02      	cmp	r3, #2
 8003152:	d14b      	bne.n	80031ec <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	f7ff fca5 	bl	8002aa2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fce8 	bl	8001b2c <HAL_GetTick>
 800315c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fce4 	bl	8001b2c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e09b      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003172:	f7ff fca5 	bl	8002ac0 <LL_RCC_PLL_IsReady>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f1      	bne.n	8003160 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCC_OscConfig+0x6b8>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003194:	0212      	lsls	r2, r2, #8
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031a8:	430a      	orrs	r2, r1
 80031aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b2:	f7ff fc67 	bl	8002a84 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fcb1 	bl	8001b2c <HAL_GetTick>
 80031ca:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fcad 	bl	8001b2c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e064      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80031e0:	f7ff fc6e 	bl	8002ac0 <LL_RCC_PLL_IsReady>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f1      	beq.n	80031ce <HAL_RCC_OscConfig+0x5ce>
 80031ea:	e05d      	b.n	80032a8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	f7ff fc59 	bl	8002aa2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800320a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fc8a 	bl	8001b2c <HAL_GetTick>
 8003218:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fc86 	bl	8001b2c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e03d      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800322e:	f7ff fc47 	bl	8002ac0 <LL_RCC_PLL_IsReady>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f1      	bne.n	800321c <HAL_RCC_OscConfig+0x61c>
 8003238:	e036      	b.n	80032a8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e031      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	429a      	cmp	r2, r3
 800325a:	d123      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d114      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d10d      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	372c      	adds	r7, #44	; 0x2c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	58000400 	.word	0x58000400
 80032b8:	11c1808c 	.word	0x11c1808c

080032bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e12a      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	4b97      	ldr	r3, [pc, #604]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d91b      	bls.n	8003316 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b94      	ldr	r3, [pc, #592]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	4992      	ldr	r1, [pc, #584]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ee:	f7fe fc1d 	bl	8001b2c <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032f6:	f7fe fc19 	bl	8001b2c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10e      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003308:	4b89      	ldr	r3, [pc, #548]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d1ef      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb11 	bl	800294e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800332c:	f7fe fbfe 	bl	8001b2c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003334:	f7fe fbfa 	bl	8001b2c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0ef      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003346:	f7ff fbfe 	bl	8002b46 <LL_RCC_IsActiveFlag_HPRE>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f1      	beq.n	8003334 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d016      	beq.n	800338a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fb08 	bl	8002976 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003366:	f7fe fbe1 	bl	8001b2c <HAL_GetTick>
 800336a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800336e:	f7fe fbdd 	bl	8001b2c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0d2      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003380:	f7ff fbf3 	bl	8002b6a <LL_RCC_IsActiveFlag_C2HPRE>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f1      	beq.n	800336e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fb01 	bl	80029a2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033a0:	f7fe fbc4 	bl	8001b2c <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033a8:	f7fe fbc0 	bl	8001b2c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0b5      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033ba:	f7ff fbe9 	bl	8002b90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f1      	beq.n	80033a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fafb 	bl	80029d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033da:	f7fe fba7 	bl	8001b2c <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033e2:	f7fe fba3 	bl	8001b2c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e098      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033f4:	f7ff fbdf 	bl	8002bb6 <LL_RCC_IsActiveFlag_PPRE1>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f1      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff faf1 	bl	80029f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003416:	f7fe fb89 	bl	8001b2c <HAL_GetTick>
 800341a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800341e:	f7fe fb85 	bl	8001b2c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e07a      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003430:	f7ff fbd3 	bl	8002bda <LL_RCC_IsActiveFlag_PPRE2>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f1      	beq.n	800341e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d043      	beq.n	80034ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d106      	bne.n	800345c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800344e:	f7ff f891 	bl	8002574 <LL_RCC_HSE_IsReady>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11e      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e064      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d106      	bne.n	8003472 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003464:	f7ff fb2c 	bl	8002ac0 <LL_RCC_PLL_IsReady>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d113      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e059      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800347a:	f7ff f9f9 	bl	8002870 <LL_RCC_MSI_IsReady>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d108      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04e      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003488:	f7ff f8a4 	bl	80025d4 <LL_RCC_HSI_IsReady>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e047      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fa37 	bl	800290e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fe fb44 	bl	8001b2c <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fb40 	bl	8001b2c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e033      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	f7ff fa3a 	bl	8002936 <LL_RCC_GetSysClkSource>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d1ec      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d21b      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 0207 	bic.w	r2, r3, #7
 80034e4:	4912      	ldr	r1, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fe fb1e 	bl	8001b2c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034f4:	f7fe fb1a 	bl	8001b2c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00f      	b.n	8003526 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x274>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d1ef      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003514:	f7fe f9c4 	bl	80018a0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003518:	f7fe fb14 	bl	8001b44 <HAL_GetTickPrio>
 800351c:	4603      	mov	r3, r0
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fab8 	bl	8001a94 <HAL_InitTick>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	58004000 	.word	0x58004000

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353a:	f7ff f9fc 	bl	8002936 <LL_RCC_GetSysClkSource>
 800353e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003546:	f7ff f9b8 	bl	80028ba <LL_RCC_MSI_GetRange>
 800354a:	4603      	mov	r3, r0
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e04a      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d102      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e044      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b08      	cmp	r3, #8
 800356c:	d10a      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800356e:	f7fe ffb3 	bl	80024d8 <LL_RCC_HSE_IsEnabledDiv2>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_GetSysClockFreq+0xcc>)
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e039      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e036      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003584:	f7ff fad3 	bl	8002b2e <LL_RCC_PLL_GetMainSource>
 8003588:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d002      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x62>
 8003590:	2b03      	cmp	r3, #3
 8003592:	d003      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x68>
 8003594:	e00d      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003596:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003598:	60bb      	str	r3, [r7, #8]
        break;
 800359a:	e015      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800359c:	f7fe ff9c 	bl	80024d8 <LL_RCC_HSE_IsEnabledDiv2>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035a8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80035aa:	e00d      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035ae:	60bb      	str	r3, [r7, #8]
        break;
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80035b2:	f7ff f982 	bl	80028ba <LL_RCC_MSI_GetRange>
 80035b6:	4603      	mov	r3, r0
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	60bb      	str	r3, [r7, #8]
        break;
 80035c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80035c8:	f7ff fa8c 	bl	8002ae4 <LL_RCC_PLL_GetN>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	fb03 f402 	mul.w	r4, r3, r2
 80035d4:	f7ff fa9f 	bl	8002b16 <LL_RCC_PLL_GetDivider>
 80035d8:	4603      	mov	r3, r0
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	3301      	adds	r3, #1
 80035de:	fbb4 f4f3 	udiv	r4, r4, r3
 80035e2:	f7ff fa8c 	bl	8002afe <LL_RCC_PLL_GetR>
 80035e6:	4603      	mov	r3, r0
 80035e8:	0f5b      	lsrs	r3, r3, #29
 80035ea:	3301      	adds	r3, #1
 80035ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	08008f04 	.word	0x08008f04
 8003600:	00f42400 	.word	0x00f42400
 8003604:	01e84800 	.word	0x01e84800

08003608 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b598      	push	{r3, r4, r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800360c:	f7ff ff92 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8003610:	4604      	mov	r4, r0
 8003612:	f7ff fa05 	bl	8002a20 <LL_RCC_GetAHBPrescaler>
 8003616:	4603      	mov	r3, r0
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a03      	ldr	r2, [pc, #12]	; (800362c <HAL_RCC_GetHCLKFreq+0x24>)
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd98      	pop	{r3, r4, r7, pc}
 800362c:	08008ea4 	.word	0x08008ea4

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b598      	push	{r3, r4, r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003634:	f7ff ffe8 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003638:	4604      	mov	r4, r0
 800363a:	f7ff fa0b 	bl	8002a54 <LL_RCC_GetAPB1Prescaler>
 800363e:	4603      	mov	r3, r0
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd98      	pop	{r3, r4, r7, pc}
 8003658:	08008ee4 	.word	0x08008ee4

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b598      	push	{r3, r4, r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003660:	f7ff ffd2 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003664:	4604      	mov	r4, r0
 8003666:	f7ff fa01 	bl	8002a6c <LL_RCC_GetAPB2Prescaler>
 800366a:	4603      	mov	r3, r0
 800366c:	0adb      	lsrs	r3, r3, #11
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd98      	pop	{r3, r4, r7, pc}
 8003684:	08008ee4 	.word	0x08008ee4

08003688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2bb0      	cmp	r3, #176	; 0xb0
 8003694:	d903      	bls.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e007      	b.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	4a11      	ldr	r2, [pc, #68]	; (80036ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80036ae:	f7ff f9c3 	bl	8002a38 <LL_RCC_GetAHB4Prescaler>
 80036b2:	4603      	mov	r3, r0
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9c      	lsrs	r4, r3, #18
 80036d2:	f7fe fef3 	bl	80024bc <HAL_PWREx_GetVoltageRange>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4619      	mov	r1, r3
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 f80c 	bl	80036f8 <RCC_SetFlashLatency>
 80036e0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08008f04 	.word	0x08008f04
 80036f0:	08008ea4 	.word	0x08008ea4
 80036f4:	431bde83 	.word	0x431bde83

080036f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b093      	sub	sp, #76	; 0x4c
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <RCC_SetFlashLatency+0xf0>)
 8003704:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800370a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800370e:	4a37      	ldr	r2, [pc, #220]	; (80037ec <RCC_SetFlashLatency+0xf4>)
 8003710:	f107 031c 	add.w	r3, r7, #28
 8003714:	ca07      	ldmia	r2, {r0, r1, r2}
 8003716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800371a:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <RCC_SetFlashLatency+0xf8>)
 800371c:	f107 040c 	add.w	r4, r7, #12
 8003720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003726:	2300      	movs	r3, #0
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003730:	d11c      	bne.n	800376c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003732:	2300      	movs	r3, #0
 8003734:	643b      	str	r3, [r7, #64]	; 0x40
 8003736:	e015      	b.n	8003764 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003740:	4413      	add	r3, r2
 8003742:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d808      	bhi.n	800375e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003754:	4413      	add	r3, r2
 8003756:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800375c:	e022      	b.n	80037a4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003760:	3301      	adds	r3, #1
 8003762:	643b      	str	r3, [r7, #64]	; 0x40
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	2b03      	cmp	r3, #3
 8003768:	d9e6      	bls.n	8003738 <RCC_SetFlashLatency+0x40>
 800376a:	e01b      	b.n	80037a4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800376c:	2300      	movs	r3, #0
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	e015      	b.n	800379e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800377a:	4413      	add	r3, r2
 800377c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d808      	bhi.n	8003798 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800378e:	4413      	add	r3, r2
 8003790:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003796:	e005      	b.n	80037a4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379a:	3301      	adds	r3, #1
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d9e6      	bls.n	8003772 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <RCC_SetFlashLatency+0xfc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	4911      	ldr	r1, [pc, #68]	; (80037f4 <RCC_SetFlashLatency+0xfc>)
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037b4:	f7fe f9ba 	bl	8001b2c <HAL_GetTick>
 80037b8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037ba:	e008      	b.n	80037ce <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037bc:	f7fe f9b6 	bl	8001b2c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e007      	b.n	80037de <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <RCC_SetFlashLatency+0xfc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1ef      	bne.n	80037bc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	374c      	adds	r7, #76	; 0x4c
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08008e30 	.word	0x08008e30
 80037ec:	08008e40 	.word	0x08008e40
 80037f0:	08008e4c 	.word	0x08008e4c
 80037f4:	58004000 	.word	0x58004000

080037f8 <LL_RCC_LSE_IsEnabled>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <LL_RCC_LSE_IsEnabled+0x18>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <LL_RCC_LSE_IsEnabled+0x1a>
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_RCC_LSE_IsReady>:
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d101      	bne.n	8003834 <LL_RCC_LSE_IsReady+0x18>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <LL_RCC_LSE_IsReady+0x1a>
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_RCC_MSI_EnablePLLMode>:
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_RCC_SetRFWKPClockSource>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_RCC_SetSMPSClockSource>:
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_RCC_SetSMPSPrescaler>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_RCC_SetUSARTClockSource>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_RCC_SetLPUARTClockSource>:
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_SetI2CClockSource>:
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_RCC_SetLPTIMClockSource>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	43db      	mvns	r3, r3
 8003984:	401a      	ands	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_SetSAIClockSource>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_RCC_SetRNGClockSource>:
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_SetCLK48ClockSource>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_RCC_SetUSBClockSource>:
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ffe3 	bl	80039f8 <LL_RCC_SetCLK48ClockSource>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <LL_RCC_SetADCClockSource>:
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_RCC_SetRTCClockSource>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_RCC_GetRTCClockSource>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_ForceBackupDomainReset>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ae6:	bf00      	nop
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_PLLSAI1_Enable>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_PLLSAI1_Disable>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_PLLSAI1_IsReady>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d101      	bne.n	8003b44 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d033      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d802      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b80:	e017      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b86:	d017      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003b88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003b8e:	e010      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ba0:	e00d      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f94d 	bl	8003e46 <RCCEx_PLLSAI1_ConfigNP>
 8003bac:	4603      	mov	r3, r0
 8003bae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bb0:	e005      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	77fb      	strb	r3, [r7, #31]
        break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003bb8:	bf00      	nop
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbe:	7ffb      	ldrb	r3, [r7, #31]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fee9 	bl	80039a0 <LL_RCC_SetSAIClockSource>
 8003bce:	e001      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d046      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003be0:	f7ff ff57 	bl	8003a92 <LL_RCC_GetRTCClockSource>
 8003be4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d03c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003bf0:	f7fe fc54 	bl	800249c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff31 	bl	8003a66 <LL_RCC_SetRTCClockSource>
 8003c04:	e02e      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003c10:	f7ff ff4c 	bl	8003aac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003c14:	f7ff ff5b 	bl	8003ace <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003c30:	f7ff fde2 	bl	80037f8 <LL_RCC_LSE_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d114      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c3a:	f7fd ff77 	bl	8001b2c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c40:	e00b      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fd ff73 	bl	8001b2c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d902      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	77fb      	strb	r3, [r7, #31]
              break;
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c5a:	f7ff fddf 	bl	800381c <LL_RCC_LSE_IsReady>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	77bb      	strb	r3, [r7, #30]
 8003c68:	e001      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fe2b 	bl	80038da <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fe36 	bl	8003906 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fe5e 	bl	800396c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fe53 	bl	800396c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fe2b 	bl	8003932 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fe20 	bl	8003932 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d022      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fe8e 	bl	8003a24 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d10:	d107      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d20:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f8e3 	bl	8003efc <RCCEx_PLLSAI1_ConfigNQ>
 8003d36:	4603      	mov	r3, r0
 8003d38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d3a:	7ffb      	ldrb	r3, [r7, #31]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02b      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fe2b 	bl	80039cc <LL_RCC_SetRNGClockSource>
 8003d76:	e00a      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7ff fe22 	bl	80039cc <LL_RCC_SetRNGClockSource>
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fe35 	bl	80039f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d96:	d107      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d022      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe3e 	bl	8003a3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f8e3 	bl	8003fb2 <RCCEx_PLLSAI1_ConfigNR>
 8003dec:	4603      	mov	r3, r0
 8003dee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003df0:	7ffb      	ldrb	r3, [r7, #31]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003df6:	7ffb      	ldrb	r3, [r7, #31]
 8003df8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fd27 	bl	800385e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fd46 	bl	80038b2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fd2d 	bl	800388a <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8003e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003e3e:	f7ff fcff 	bl	8003840 <LL_RCC_MSI_EnablePLLMode>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e52:	f7ff fe5c 	bl	8003b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e56:	f7fd fe69 	bl	8001b2c <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e5c:	e009      	b.n	8003e72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5e:	f7fd fe65 	bl	8001b2c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e72:	f7ff fe5b 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d137      	bne.n	8003ef2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	4313      	orrs	r3, r2
 8003e98:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eac:	4313      	orrs	r3, r2
 8003eae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003eb0:	f7ff fe1e 	bl	8003af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fd fe3a 	bl	8001b2c <HAL_GetTick>
 8003eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003eba:	e009      	b.n	8003ed0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ebc:	f7fd fe36 	bl	8001b2c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d902      	bls.n	8003ed0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ece:	e004      	b.n	8003eda <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ed0:	f7ff fe2c 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d1f0      	bne.n	8003ebc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f08:	f7ff fe01 	bl	8003b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fe0e 	bl	8001b2c <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f12:	e009      	b.n	8003f28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f14:	f7fd fe0a 	bl	8001b2c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d902      	bls.n	8003f28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e004      	b.n	8003f32 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f28:	f7ff fe00 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d137      	bne.n	8003fa8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f62:	4313      	orrs	r3, r2
 8003f64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f66:	f7ff fdc3 	bl	8003af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fddf 	bl	8001b2c <HAL_GetTick>
 8003f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f70:	e009      	b.n	8003f86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f72:	f7fd fddb 	bl	8001b2c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d902      	bls.n	8003f86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	73fb      	strb	r3, [r7, #15]
        break;
 8003f84:	e004      	b.n	8003f90 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f86:	f7ff fdd1 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d1f0      	bne.n	8003f72 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fbe:	f7ff fda6 	bl	8003b0e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fc2:	f7fd fdb3 	bl	8001b2c <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fc8:	e009      	b.n	8003fde <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fca:	f7fd fdaf 	bl	8001b2c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e004      	b.n	8003fe8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fde:	f7ff fda5 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d137      	bne.n	800405e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	4313      	orrs	r3, r2
 8004004:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800401c:	f7ff fd68 	bl	8003af0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fd fd84 	bl	8001b2c <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004026:	e009      	b.n	800403c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004028:	f7fd fd80 	bl	8001b2c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	73fb      	strb	r3, [r7, #15]
        break;
 800403a:	e004      	b.n	8004046 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800403c:	f7ff fd76 	bl	8003b2c <LL_RCC_PLLSAI1_IsReady>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d1f0      	bne.n	8004028 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e090      	b.n	800419c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fad8 	bl	8001644 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	22ca      	movs	r2, #202	; 0xca
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2253      	movs	r2, #83	; 0x53
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f89f 	bl	80041f0 <RTC_EnterInitMode>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e067      	b.n	800419c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	041a      	lsls	r2, r3, #16
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0203 	bic.w	r2, r2, #3
 800413a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d113      	bne.n	800418a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f81e 	bl	80041a4 <HAL_RTC_WaitForSynchro>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e008      	b.n	800419c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	22ff      	movs	r2, #255	; 0xff
 8004190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80041bc:	f7fd fcb6 	bl	8001b2c <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041c2:	e009      	b.n	80041d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80041c4:	f7fd fcb2 	bl	8001b2c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	d901      	bls.n	80041d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e007      	b.n	80041e8 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d119      	bne.n	800423a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004210:	f7fd fc8c 	bl	8001b2c <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004216:	e009      	b.n	800422c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004218:	f7fd fc88 	bl	8001b2c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004226:	d901      	bls.n	800422c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e007      	b.n	800423c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ee      	beq.n	8004218 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800425a:	2302      	movs	r3, #2
 800425c:	e0a8      	b.n	80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	22ca      	movs	r2, #202	; 0xca
 8004274:	625a      	str	r2, [r3, #36]	; 0x24
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2253      	movs	r2, #83	; 0x53
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 800428c:	f7fd fc4e 	bl	8001b2c <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004292:	e015      	b.n	80042c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004294:	f7fd fc4a 	bl	8001b2c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d90d      	bls.n	80042c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	22ff      	movs	r2, #255	; 0xff
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2203      	movs	r2, #3
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e077      	b.n	80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e2      	bne.n	8004294 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80042ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80042f0:	f7fd fc1c 	bl	8001b2c <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80042f6:	e015      	b.n	8004324 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80042f8:	f7fd fc18 	bl	8001b2c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004306:	d90d      	bls.n	8004324 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e045      	b.n	80043b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0e2      	beq.n	80042f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0207 	bic.w	r2, r2, #7
 8004348:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800435a:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800435c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004366:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004374:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004384:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004394:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	58000800 	.word	0x58000800

080043bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f818 	bl	8004408 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80043e8:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80043ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043f0:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	58000800 	.word	0x58000800

08004408 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_RCC_GetUSARTClockSource>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4013      	ands	r3, r2
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_RCC_GetLPUARTClockSource>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e042      	b.n	80044f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fd f8f9 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9c2 	bl	8004828 <UART_SetConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 fa1a 	bl	80058f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 faa1 	bl	8005a34 <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d118      	bne.n	800455e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d013      	beq.n	800455e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8145 	beq.w	80047de <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
      }
      return;
 800455c:	e13f      	b.n	80047de <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80e8 	beq.w	8004736 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4ba1      	ldr	r3, [pc, #644]	; (80047f0 <HAL_UART_IRQHandler+0x2f4>)
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4ba0      	ldr	r3, [pc, #640]	; (80047f4 <HAL_UART_IRQHandler+0x2f8>)
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80dd 	beq.w	8004736 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_UART_IRQHandler+0xac>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_UART_IRQHandler+0xd8>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2202      	movs	r2, #2
 80045c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f043 0204 	orr.w	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HAL_UART_IRQHandler+0x104>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00b      	beq.n	8004600 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2204      	movs	r2, #4
 80045ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f043 0202 	orr.w	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4b76      	ldr	r3, [pc, #472]	; (80047f0 <HAL_UART_IRQHandler+0x2f4>)
 8004618:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f043 0208 	orr.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <HAL_UART_IRQHandler+0x168>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80b9 	beq.w	80047e2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d004      	beq.n	80046be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d031      	beq.n	8004722 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f001 fa80 	bl	8005bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d123      	bne.n	800471a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ee:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <HAL_UART_IRQHandler+0x2fc>)
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fbc7 	bl	8001e8a <HAL_DMA_Abort_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d017      	beq.n	8004732 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e00f      	b.n	8004732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f87c 	bl	8004810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00b      	b.n	8004732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f878 	bl	8004810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e007      	b.n	8004732 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f874 	bl	8004810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004730:	e057      	b.n	80047e2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004732:	bf00      	nop
    return;
 8004734:	e055      	b.n	80047e2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_UART_IRQHandler+0x260>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fa88 	bl	8005c6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800475a:	e045      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	2b00      	cmp	r3, #0
 8004780:	d031      	beq.n	80047e6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
    }
    return;
 800478a:	e02c      	b.n	80047e6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_UART_IRQHandler+0x2ac>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 fa48 	bl	8005c36 <UART_EndTransmit_IT>
    return;
 80047a6:	e01f      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_UART_IRQHandler+0x2c8>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f001 fa68 	bl	8005c92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047c2:	e011      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da09      	bge.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fa52 	bl	8005c7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047da:	bf00      	nop
 80047dc:	e004      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80047e6:	bf00      	nop
  }
}
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	10000001 	.word	0x10000001
 80047f4:	04000120 	.word	0x04000120
 80047f8:	08005c0b 	.word	0x08005c0b

080047fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	0000      	movs	r0, r0
	...

08004828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800482c:	b08a      	sub	sp, #40	; 0x28
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4313      	orrs	r3, r2
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	4313      	orrs	r3, r2
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4ba4      	ldr	r3, [pc, #656]	; (8004af8 <UART_SetConfig+0x2d0>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004870:	430b      	orrs	r3, r1
 8004872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a99      	ldr	r2, [pc, #612]	; (8004afc <UART_SetConfig+0x2d4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	4313      	orrs	r3, r2
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f023 010f 	bic.w	r1, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a8a      	ldr	r2, [pc, #552]	; (8004b00 <UART_SetConfig+0x2d8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d126      	bne.n	800492a <UART_SetConfig+0x102>
 80048dc:	2003      	movs	r0, #3
 80048de:	f7ff fd9d 	bl	800441c <LL_RCC_GetUSARTClockSource>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d81b      	bhi.n	8004920 <UART_SetConfig+0xf8>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0xc8>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004911 	.word	0x08004911
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004919 	.word	0x08004919
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e042      	b.n	800498e <UART_SetConfig+0x166>
 8004908:	2302      	movs	r3, #2
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e03e      	b.n	800498e <UART_SetConfig+0x166>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e03a      	b.n	800498e <UART_SetConfig+0x166>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e036      	b.n	800498e <UART_SetConfig+0x166>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	bf00      	nop
 8004928:	e031      	b.n	800498e <UART_SetConfig+0x166>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a73      	ldr	r2, [pc, #460]	; (8004afc <UART_SetConfig+0x2d4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d129      	bne.n	8004988 <UART_SetConfig+0x160>
 8004934:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004938:	f7ff fd80 	bl	800443c <LL_RCC_GetLPUARTClockSource>
 800493c:	4603      	mov	r3, r0
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004942:	d014      	beq.n	800496e <UART_SetConfig+0x146>
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d802      	bhi.n	8004950 <UART_SetConfig+0x128>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <UART_SetConfig+0x136>
 800494e:	e016      	b.n	800497e <UART_SetConfig+0x156>
 8004950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004954:	d007      	beq.n	8004966 <UART_SetConfig+0x13e>
 8004956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800495a:	d00c      	beq.n	8004976 <UART_SetConfig+0x14e>
 800495c:	e00f      	b.n	800497e <UART_SetConfig+0x156>
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004964:	e013      	b.n	800498e <UART_SetConfig+0x166>
 8004966:	2302      	movs	r3, #2
 8004968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496c:	e00f      	b.n	800498e <UART_SetConfig+0x166>
 800496e:	2304      	movs	r3, #4
 8004970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x166>
 8004976:	2308      	movs	r3, #8
 8004978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497c:	e007      	b.n	800498e <UART_SetConfig+0x166>
 800497e:	2310      	movs	r3, #16
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004984:	bf00      	nop
 8004986:	e002      	b.n	800498e <UART_SetConfig+0x166>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a5a      	ldr	r2, [pc, #360]	; (8004afc <UART_SetConfig+0x2d4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	f040 8428 	bne.w	80051ea <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800499e:	2b08      	cmp	r3, #8
 80049a0:	f200 8171 	bhi.w	8004c86 <UART_SetConfig+0x45e>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x184>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	08004c87 	.word	0x08004c87
 80049b4:	08004a73 	.word	0x08004a73
 80049b8:	08004c87 	.word	0x08004c87
 80049bc:	08004b37 	.word	0x08004b37
 80049c0:	08004c87 	.word	0x08004c87
 80049c4:	08004c87 	.word	0x08004c87
 80049c8:	08004c87 	.word	0x08004c87
 80049cc:	08004bd9 	.word	0x08004bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80049d0:	f7fe fe2e 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d044      	beq.n	8004a68 <UART_SetConfig+0x240>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d03e      	beq.n	8004a64 <UART_SetConfig+0x23c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d038      	beq.n	8004a60 <UART_SetConfig+0x238>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d032      	beq.n	8004a5c <UART_SetConfig+0x234>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d02c      	beq.n	8004a58 <UART_SetConfig+0x230>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d026      	beq.n	8004a54 <UART_SetConfig+0x22c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d020      	beq.n	8004a50 <UART_SetConfig+0x228>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b07      	cmp	r3, #7
 8004a14:	d01a      	beq.n	8004a4c <UART_SetConfig+0x224>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d014      	beq.n	8004a48 <UART_SetConfig+0x220>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	d00e      	beq.n	8004a44 <UART_SetConfig+0x21c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b0a      	cmp	r3, #10
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x218>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b0b      	cmp	r3, #11
 8004a34:	d102      	bne.n	8004a3c <UART_SetConfig+0x214>
 8004a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a3a:	e016      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e014      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	e012      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	e010      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e00e      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	e00c      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a50:	230c      	movs	r3, #12
 8004a52:	e00a      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a54:	230a      	movs	r3, #10
 8004a56:	e008      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	e006      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a5c:	2306      	movs	r3, #6
 8004a5e:	e004      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a60:	2304      	movs	r3, #4
 8004a62:	e002      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e000      	b.n	8004a6a <UART_SetConfig+0x242>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	617b      	str	r3, [r7, #20]
        break;
 8004a70:	e10c      	b.n	8004c8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d05a      	beq.n	8004b30 <UART_SetConfig+0x308>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d054      	beq.n	8004b2c <UART_SetConfig+0x304>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d04e      	beq.n	8004b28 <UART_SetConfig+0x300>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d048      	beq.n	8004b24 <UART_SetConfig+0x2fc>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d02c      	beq.n	8004af4 <UART_SetConfig+0x2cc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d026      	beq.n	8004af0 <UART_SetConfig+0x2c8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d020      	beq.n	8004aec <UART_SetConfig+0x2c4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b07      	cmp	r3, #7
 8004ab0:	d01a      	beq.n	8004ae8 <UART_SetConfig+0x2c0>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d014      	beq.n	8004ae4 <UART_SetConfig+0x2bc>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b09      	cmp	r3, #9
 8004ac0:	d00e      	beq.n	8004ae0 <UART_SetConfig+0x2b8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b0a      	cmp	r3, #10
 8004ac8:	d008      	beq.n	8004adc <UART_SetConfig+0x2b4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b0b      	cmp	r3, #11
 8004ad0:	d102      	bne.n	8004ad8 <UART_SetConfig+0x2b0>
 8004ad2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ad6:	e02c      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <UART_SetConfig+0x2dc>)
 8004ada:	e02a      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <UART_SetConfig+0x2e0>)
 8004ade:	e028      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <UART_SetConfig+0x2e4>)
 8004ae2:	e026      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <UART_SetConfig+0x2e8>)
 8004ae6:	e024      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <UART_SetConfig+0x2ec>)
 8004aea:	e022      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <UART_SetConfig+0x2f0>)
 8004aee:	e020      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <UART_SetConfig+0x2f4>)
 8004af2:	e01e      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <UART_SetConfig+0x2f8>)
 8004af6:	e01c      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004af8:	cfff69f3 	.word	0xcfff69f3
 8004afc:	40008000 	.word	0x40008000
 8004b00:	40013800 	.word	0x40013800
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	0001e848 	.word	0x0001e848
 8004b0c:	0003d090 	.word	0x0003d090
 8004b10:	0007a120 	.word	0x0007a120
 8004b14:	000f4240 	.word	0x000f4240
 8004b18:	00145855 	.word	0x00145855
 8004b1c:	00186a00 	.word	0x00186a00
 8004b20:	001e8480 	.word	0x001e8480
 8004b24:	4ba6      	ldr	r3, [pc, #664]	; (8004dc0 <UART_SetConfig+0x598>)
 8004b26:	e004      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004b28:	4ba6      	ldr	r3, [pc, #664]	; (8004dc4 <UART_SetConfig+0x59c>)
 8004b2a:	e002      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004b2c:	4ba6      	ldr	r3, [pc, #664]	; (8004dc8 <UART_SetConfig+0x5a0>)
 8004b2e:	e000      	b.n	8004b32 <UART_SetConfig+0x30a>
 8004b30:	4ba6      	ldr	r3, [pc, #664]	; (8004dcc <UART_SetConfig+0x5a4>)
 8004b32:	617b      	str	r3, [r7, #20]
        break;
 8004b34:	e0aa      	b.n	8004c8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b36:	f7fe fcfd 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d044      	beq.n	8004bce <UART_SetConfig+0x3a6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d03e      	beq.n	8004bca <UART_SetConfig+0x3a2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d038      	beq.n	8004bc6 <UART_SetConfig+0x39e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d032      	beq.n	8004bc2 <UART_SetConfig+0x39a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d02c      	beq.n	8004bbe <UART_SetConfig+0x396>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d026      	beq.n	8004bba <UART_SetConfig+0x392>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d020      	beq.n	8004bb6 <UART_SetConfig+0x38e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b07      	cmp	r3, #7
 8004b7a:	d01a      	beq.n	8004bb2 <UART_SetConfig+0x38a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d014      	beq.n	8004bae <UART_SetConfig+0x386>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b09      	cmp	r3, #9
 8004b8a:	d00e      	beq.n	8004baa <UART_SetConfig+0x382>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b0a      	cmp	r3, #10
 8004b92:	d008      	beq.n	8004ba6 <UART_SetConfig+0x37e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b0b      	cmp	r3, #11
 8004b9a:	d102      	bne.n	8004ba2 <UART_SetConfig+0x37a>
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	e016      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e014      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	e012      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	e010      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bae:	2320      	movs	r3, #32
 8004bb0:	e00e      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bb2:	2310      	movs	r3, #16
 8004bb4:	e00c      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	e00a      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bba:	230a      	movs	r3, #10
 8004bbc:	e008      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e006      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e004      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e000      	b.n	8004bd0 <UART_SetConfig+0x3a8>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]
        break;
 8004bd6:	e059      	b.n	8004c8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d04e      	beq.n	8004c7e <UART_SetConfig+0x456>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d047      	beq.n	8004c78 <UART_SetConfig+0x450>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d040      	beq.n	8004c72 <UART_SetConfig+0x44a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d039      	beq.n	8004c6c <UART_SetConfig+0x444>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d032      	beq.n	8004c66 <UART_SetConfig+0x43e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d02b      	beq.n	8004c60 <UART_SetConfig+0x438>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d024      	beq.n	8004c5a <UART_SetConfig+0x432>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b07      	cmp	r3, #7
 8004c16:	d01d      	beq.n	8004c54 <UART_SetConfig+0x42c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d016      	beq.n	8004c4e <UART_SetConfig+0x426>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	d00f      	beq.n	8004c48 <UART_SetConfig+0x420>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	2b0a      	cmp	r3, #10
 8004c2e:	d008      	beq.n	8004c42 <UART_SetConfig+0x41a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2b0b      	cmp	r3, #11
 8004c36:	d101      	bne.n	8004c3c <UART_SetConfig+0x414>
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	e022      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c40:	e01f      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c46:	e01c      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c4c:	e019      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c52:	e016      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c58:	e013      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c5a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c60:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c6a:	e00a      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c6c:	f241 5355 	movw	r3, #5461	; 0x1555
 8004c70:	e007      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c76:	e004      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c7c:	e001      	b.n	8004c82 <UART_SetConfig+0x45a>
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	617b      	str	r3, [r7, #20]
        break;
 8004c84:	e002      	b.n	8004c8c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	76fb      	strb	r3, [r7, #27]
        break;
 8004c8a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8604 	beq.w	800589c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d305      	bcc.n	8004cb0 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d903      	bls.n	8004cb8 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	76fb      	strb	r3, [r7, #27]
 8004cb4:	f000 bdf2 	b.w	800589c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8004cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	f200 8281 	bhi.w	80051c4 <UART_SetConfig+0x99c>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x4a0>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	080051c5 	.word	0x080051c5
 8004cd0:	08004e3d 	.word	0x08004e3d
 8004cd4:	080051c5 	.word	0x080051c5
 8004cd8:	08004f33 	.word	0x08004f33
 8004cdc:	080051c5 	.word	0x080051c5
 8004ce0:	080051c5 	.word	0x080051c5
 8004ce4:	080051c5 	.word	0x080051c5
 8004ce8:	08005071 	.word	0x08005071
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004cec:	f7fe fca0 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d070      	beq.n	8004de4 <UART_SetConfig+0x5bc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d067      	beq.n	8004dda <UART_SetConfig+0x5b2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d05e      	beq.n	8004dd0 <UART_SetConfig+0x5a8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d04c      	beq.n	8004db4 <UART_SetConfig+0x58c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d043      	beq.n	8004daa <UART_SetConfig+0x582>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b05      	cmp	r3, #5
 8004d28:	d03a      	beq.n	8004da0 <UART_SetConfig+0x578>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d031      	beq.n	8004d96 <UART_SetConfig+0x56e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	d028      	beq.n	8004d8c <UART_SetConfig+0x564>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d01f      	beq.n	8004d82 <UART_SetConfig+0x55a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b09      	cmp	r3, #9
 8004d48:	d016      	beq.n	8004d78 <UART_SetConfig+0x550>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b0a      	cmp	r3, #10
 8004d50:	d00d      	beq.n	8004d6e <UART_SetConfig+0x546>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b0b      	cmp	r3, #11
 8004d58:	d104      	bne.n	8004d64 <UART_SetConfig+0x53c>
 8004d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	e043      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d64:	f04f 0301 	mov.w	r3, #1
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	e03e      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d72:	f04f 0400 	mov.w	r4, #0
 8004d76:	e039      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004d7c:	f04f 0400 	mov.w	r4, #0
 8004d80:	e034      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d82:	f04f 0320 	mov.w	r3, #32
 8004d86:	f04f 0400 	mov.w	r4, #0
 8004d8a:	e02f      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d8c:	f04f 0310 	mov.w	r3, #16
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	e02a      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004d96:	f04f 030c 	mov.w	r3, #12
 8004d9a:	f04f 0400 	mov.w	r4, #0
 8004d9e:	e025      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004da0:	f04f 030a 	mov.w	r3, #10
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	e020      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004daa:	f04f 0308 	mov.w	r3, #8
 8004dae:	f04f 0400 	mov.w	r4, #0
 8004db2:	e01b      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004db4:	f04f 0306 	mov.w	r3, #6
 8004db8:	f04f 0400 	mov.w	r4, #0
 8004dbc:	e016      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004dbe:	bf00      	nop
 8004dc0:	0028b0aa 	.word	0x0028b0aa
 8004dc4:	003d0900 	.word	0x003d0900
 8004dc8:	007a1200 	.word	0x007a1200
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	f04f 0304 	mov.w	r3, #4
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	e008      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004dda:	f04f 0302 	mov.w	r3, #2
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	e003      	b.n	8004dec <UART_SetConfig+0x5c4>
 8004de4:	f04f 0301 	mov.w	r3, #1
 8004de8:	f04f 0400 	mov.w	r4, #0
 8004dec:	461a      	mov	r2, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	f7fb f9ce 	bl	8000190 <__aeabi_uldivmod>
 8004df4:	4603      	mov	r3, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	f04f 0400 	mov.w	r4, #0
 8004e04:	0214      	lsls	r4, r2, #8
 8004e06:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e0a:	020b      	lsls	r3, r1, #8
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	4611      	mov	r1, r2
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	eb13 0b01 	adds.w	fp, r3, r1
 8004e1c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e20:	4658      	mov	r0, fp
 8004e22:	4661      	mov	r1, ip
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	f7fb f9ae 	bl	8000190 <__aeabi_uldivmod>
 8004e34:	4603      	mov	r3, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	61fb      	str	r3, [r7, #28]
            break;
 8004e3a:	e1c6      	b.n	80051ca <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d05b      	beq.n	8004efc <UART_SetConfig+0x6d4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d053      	beq.n	8004ef4 <UART_SetConfig+0x6cc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d04b      	beq.n	8004eec <UART_SetConfig+0x6c4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d043      	beq.n	8004ee4 <UART_SetConfig+0x6bc>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d03b      	beq.n	8004edc <UART_SetConfig+0x6b4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d033      	beq.n	8004ed4 <UART_SetConfig+0x6ac>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d02b      	beq.n	8004ecc <UART_SetConfig+0x6a4>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	2b07      	cmp	r3, #7
 8004e7a:	d023      	beq.n	8004ec4 <UART_SetConfig+0x69c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d01b      	beq.n	8004ebc <UART_SetConfig+0x694>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b09      	cmp	r3, #9
 8004e8a:	d013      	beq.n	8004eb4 <UART_SetConfig+0x68c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b0a      	cmp	r3, #10
 8004e92:	d00b      	beq.n	8004eac <UART_SetConfig+0x684>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b0b      	cmp	r3, #11
 8004e9a:	d103      	bne.n	8004ea4 <UART_SetConfig+0x67c>
 8004e9c:	4bae      	ldr	r3, [pc, #696]	; (8005158 <UART_SetConfig+0x930>)
 8004e9e:	f04f 0400 	mov.w	r4, #0
 8004ea2:	e02e      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ea4:	4bad      	ldr	r3, [pc, #692]	; (800515c <UART_SetConfig+0x934>)
 8004ea6:	f04f 0400 	mov.w	r4, #0
 8004eaa:	e02a      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004eac:	4bac      	ldr	r3, [pc, #688]	; (8005160 <UART_SetConfig+0x938>)
 8004eae:	f04f 0400 	mov.w	r4, #0
 8004eb2:	e026      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004eb4:	4bab      	ldr	r3, [pc, #684]	; (8005164 <UART_SetConfig+0x93c>)
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	e022      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ebc:	4baa      	ldr	r3, [pc, #680]	; (8005168 <UART_SetConfig+0x940>)
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	e01e      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ec4:	4ba9      	ldr	r3, [pc, #676]	; (800516c <UART_SetConfig+0x944>)
 8004ec6:	f04f 0400 	mov.w	r4, #0
 8004eca:	e01a      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ecc:	a49e      	add	r4, pc, #632	; (adr r4, 8005148 <UART_SetConfig+0x920>)
 8004ece:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004ed2:	e016      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ed4:	4ba6      	ldr	r3, [pc, #664]	; (8005170 <UART_SetConfig+0x948>)
 8004ed6:	f04f 0400 	mov.w	r4, #0
 8004eda:	e012      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004edc:	4ba5      	ldr	r3, [pc, #660]	; (8005174 <UART_SetConfig+0x94c>)
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	e00e      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ee4:	a49a      	add	r4, pc, #616	; (adr r4, 8005150 <UART_SetConfig+0x928>)
 8004ee6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004eea:	e00a      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004eec:	4ba2      	ldr	r3, [pc, #648]	; (8005178 <UART_SetConfig+0x950>)
 8004eee:	f04f 0400 	mov.w	r4, #0
 8004ef2:	e006      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004ef4:	4ba1      	ldr	r3, [pc, #644]	; (800517c <UART_SetConfig+0x954>)
 8004ef6:	f04f 0400 	mov.w	r4, #0
 8004efa:	e002      	b.n	8004f02 <UART_SetConfig+0x6da>
 8004efc:	4b97      	ldr	r3, [pc, #604]	; (800515c <UART_SetConfig+0x934>)
 8004efe:	f04f 0400 	mov.w	r4, #0
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	4611      	mov	r1, r2
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	eb13 0b01 	adds.w	fp, r3, r1
 8004f12:	eb44 0c02 	adc.w	ip, r4, r2
 8004f16:	4658      	mov	r0, fp
 8004f18:	4661      	mov	r1, ip
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f04f 0400 	mov.w	r4, #0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4623      	mov	r3, r4
 8004f26:	f7fb f933 	bl	8000190 <__aeabi_uldivmod>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	61fb      	str	r3, [r7, #28]
            break;
 8004f30:	e14b      	b.n	80051ca <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fe faff 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004f36:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f04f 0100 	mov.w	r1, #0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d067      	beq.n	8005018 <UART_SetConfig+0x7f0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d05e      	beq.n	800500e <UART_SetConfig+0x7e6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d055      	beq.n	8005004 <UART_SetConfig+0x7dc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d04c      	beq.n	8004ffa <UART_SetConfig+0x7d2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d043      	beq.n	8004ff0 <UART_SetConfig+0x7c8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d03a      	beq.n	8004fe6 <UART_SetConfig+0x7be>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d031      	beq.n	8004fdc <UART_SetConfig+0x7b4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b07      	cmp	r3, #7
 8004f7e:	d028      	beq.n	8004fd2 <UART_SetConfig+0x7aa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d01f      	beq.n	8004fc8 <UART_SetConfig+0x7a0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	d016      	beq.n	8004fbe <UART_SetConfig+0x796>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b0a      	cmp	r3, #10
 8004f96:	d00d      	beq.n	8004fb4 <UART_SetConfig+0x78c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b0b      	cmp	r3, #11
 8004f9e:	d104      	bne.n	8004faa <UART_SetConfig+0x782>
 8004fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	e03a      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004faa:	f04f 0301 	mov.w	r3, #1
 8004fae:	f04f 0400 	mov.w	r4, #0
 8004fb2:	e035      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fb4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004fb8:	f04f 0400 	mov.w	r4, #0
 8004fbc:	e030      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fbe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004fc2:	f04f 0400 	mov.w	r4, #0
 8004fc6:	e02b      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fc8:	f04f 0320 	mov.w	r3, #32
 8004fcc:	f04f 0400 	mov.w	r4, #0
 8004fd0:	e026      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fd2:	f04f 0310 	mov.w	r3, #16
 8004fd6:	f04f 0400 	mov.w	r4, #0
 8004fda:	e021      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fdc:	f04f 030c 	mov.w	r3, #12
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	e01c      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004fe6:	f04f 030a 	mov.w	r3, #10
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	e017      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004ff0:	f04f 0308 	mov.w	r3, #8
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	e012      	b.n	8005020 <UART_SetConfig+0x7f8>
 8004ffa:	f04f 0306 	mov.w	r3, #6
 8004ffe:	f04f 0400 	mov.w	r4, #0
 8005002:	e00d      	b.n	8005020 <UART_SetConfig+0x7f8>
 8005004:	f04f 0304 	mov.w	r3, #4
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	e008      	b.n	8005020 <UART_SetConfig+0x7f8>
 800500e:	f04f 0302 	mov.w	r3, #2
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	e003      	b.n	8005020 <UART_SetConfig+0x7f8>
 8005018:	f04f 0301 	mov.w	r3, #1
 800501c:	f04f 0400 	mov.w	r4, #0
 8005020:	461a      	mov	r2, r3
 8005022:	4623      	mov	r3, r4
 8005024:	f7fb f8b4 	bl	8000190 <__aeabi_uldivmod>
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	4619      	mov	r1, r3
 800502e:	4622      	mov	r2, r4
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	0214      	lsls	r4, r2, #8
 800503a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800503e:	020b      	lsls	r3, r1, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6852      	ldr	r2, [r2, #4]
 8005044:	0852      	lsrs	r2, r2, #1
 8005046:	4611      	mov	r1, r2
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	eb13 0b01 	adds.w	fp, r3, r1
 8005050:	eb44 0c02 	adc.w	ip, r4, r2
 8005054:	4658      	mov	r0, fp
 8005056:	4661      	mov	r1, ip
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	461a      	mov	r2, r3
 8005062:	4623      	mov	r3, r4
 8005064:	f7fb f894 	bl	8000190 <__aeabi_uldivmod>
 8005068:	4603      	mov	r3, r0
 800506a:	460c      	mov	r4, r1
 800506c:	61fb      	str	r3, [r7, #28]
            break;
 800506e:	e0ac      	b.n	80051ca <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8089 	beq.w	800518c <UART_SetConfig+0x964>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b01      	cmp	r3, #1
 8005080:	d05b      	beq.n	800513a <UART_SetConfig+0x912>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b02      	cmp	r3, #2
 8005088:	d052      	beq.n	8005130 <UART_SetConfig+0x908>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b03      	cmp	r3, #3
 8005090:	d04a      	beq.n	8005128 <UART_SetConfig+0x900>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b04      	cmp	r3, #4
 8005098:	d041      	beq.n	800511e <UART_SetConfig+0x8f6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d039      	beq.n	8005116 <UART_SetConfig+0x8ee>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d031      	beq.n	800510e <UART_SetConfig+0x8e6>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d028      	beq.n	8005104 <UART_SetConfig+0x8dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d01f      	beq.n	80050fa <UART_SetConfig+0x8d2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d016      	beq.n	80050f0 <UART_SetConfig+0x8c8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b0a      	cmp	r3, #10
 80050c8:	d00d      	beq.n	80050e6 <UART_SetConfig+0x8be>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d104      	bne.n	80050dc <UART_SetConfig+0x8b4>
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e05b      	b.n	8005194 <UART_SetConfig+0x96c>
 80050dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	e056      	b.n	8005194 <UART_SetConfig+0x96c>
 80050e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ea:	f04f 0400 	mov.w	r4, #0
 80050ee:	e051      	b.n	8005194 <UART_SetConfig+0x96c>
 80050f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	e04c      	b.n	8005194 <UART_SetConfig+0x96c>
 80050fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e047      	b.n	8005194 <UART_SetConfig+0x96c>
 8005104:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	e042      	b.n	8005194 <UART_SetConfig+0x96c>
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <UART_SetConfig+0x958>)
 8005110:	f04f 0400 	mov.w	r4, #0
 8005114:	e03e      	b.n	8005194 <UART_SetConfig+0x96c>
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <UART_SetConfig+0x95c>)
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	e03a      	b.n	8005194 <UART_SetConfig+0x96c>
 800511e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	e035      	b.n	8005194 <UART_SetConfig+0x96c>
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <UART_SetConfig+0x960>)
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	e031      	b.n	8005194 <UART_SetConfig+0x96c>
 8005130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e02c      	b.n	8005194 <UART_SetConfig+0x96c>
 800513a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	e027      	b.n	8005194 <UART_SetConfig+0x96c>
 8005144:	f3af 8000 	nop.w
 8005148:	14585500 	.word	0x14585500
 800514c:	00000000 	.word	0x00000000
 8005150:	28b0aa00 	.word	0x28b0aa00
 8005154:	00000000 	.word	0x00000000
 8005158:	00f42400 	.word	0x00f42400
 800515c:	f4240000 	.word	0xf4240000
 8005160:	01e84800 	.word	0x01e84800
 8005164:	03d09000 	.word	0x03d09000
 8005168:	07a12000 	.word	0x07a12000
 800516c:	0f424000 	.word	0x0f424000
 8005170:	186a0000 	.word	0x186a0000
 8005174:	1e848000 	.word	0x1e848000
 8005178:	3d090000 	.word	0x3d090000
 800517c:	7a120000 	.word	0x7a120000
 8005180:	000aaa00 	.word	0x000aaa00
 8005184:	000ccc00 	.word	0x000ccc00
 8005188:	00155500 	.word	0x00155500
 800518c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005190:	f04f 0400 	mov.w	r4, #0
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6852      	ldr	r2, [r2, #4]
 8005198:	0852      	lsrs	r2, r2, #1
 800519a:	4611      	mov	r1, r2
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	eb13 0b01 	adds.w	fp, r3, r1
 80051a4:	eb44 0c02 	adc.w	ip, r4, r2
 80051a8:	4658      	mov	r0, fp
 80051aa:	4661      	mov	r1, ip
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	461a      	mov	r2, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	f7fa ffea 	bl	8000190 <__aeabi_uldivmod>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	61fb      	str	r3, [r7, #28]
            break;
 80051c2:	e002      	b.n	80051ca <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	76fb      	strb	r3, [r7, #27]
            break;
 80051c8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d0:	d308      	bcc.n	80051e4 <UART_SetConfig+0x9bc>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d8:	d204      	bcs.n	80051e4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	60da      	str	r2, [r3, #12]
 80051e2:	e35b      	b.n	800589c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	76fb      	strb	r3, [r7, #27]
 80051e8:	e358      	b.n	800589c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	f040 81a6 	bne.w	8005542 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80051f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2b07      	cmp	r3, #7
 80051fe:	f200 8180 	bhi.w	8005502 <UART_SetConfig+0xcda>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x9e0>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005229 	.word	0x08005229
 800520c:	080052e1 	.word	0x080052e1
 8005210:	08005503 	.word	0x08005503
 8005214:	08005389 	.word	0x08005389
 8005218:	08005503 	.word	0x08005503
 800521c:	08005503 	.word	0x08005503
 8005220:	08005503 	.word	0x08005503
 8005224:	08005441 	.word	0x08005441
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005228:	f7fe fa18 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 800522c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d044      	beq.n	80052c0 <UART_SetConfig+0xa98>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b01      	cmp	r3, #1
 800523c:	d03e      	beq.n	80052bc <UART_SetConfig+0xa94>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b02      	cmp	r3, #2
 8005244:	d038      	beq.n	80052b8 <UART_SetConfig+0xa90>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b03      	cmp	r3, #3
 800524c:	d032      	beq.n	80052b4 <UART_SetConfig+0xa8c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b04      	cmp	r3, #4
 8005254:	d02c      	beq.n	80052b0 <UART_SetConfig+0xa88>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b05      	cmp	r3, #5
 800525c:	d026      	beq.n	80052ac <UART_SetConfig+0xa84>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b06      	cmp	r3, #6
 8005264:	d020      	beq.n	80052a8 <UART_SetConfig+0xa80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b07      	cmp	r3, #7
 800526c:	d01a      	beq.n	80052a4 <UART_SetConfig+0xa7c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b08      	cmp	r3, #8
 8005274:	d014      	beq.n	80052a0 <UART_SetConfig+0xa78>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b09      	cmp	r3, #9
 800527c:	d00e      	beq.n	800529c <UART_SetConfig+0xa74>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d008      	beq.n	8005298 <UART_SetConfig+0xa70>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b0b      	cmp	r3, #11
 800528c:	d102      	bne.n	8005294 <UART_SetConfig+0xa6c>
 800528e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005292:	e016      	b.n	80052c2 <UART_SetConfig+0xa9a>
 8005294:	2301      	movs	r3, #1
 8005296:	e014      	b.n	80052c2 <UART_SetConfig+0xa9a>
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	e012      	b.n	80052c2 <UART_SetConfig+0xa9a>
 800529c:	2340      	movs	r3, #64	; 0x40
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052a0:	2320      	movs	r3, #32
 80052a2:	e00e      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052a4:	2310      	movs	r3, #16
 80052a6:	e00c      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052a8:	230c      	movs	r3, #12
 80052aa:	e00a      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052ac:	230a      	movs	r3, #10
 80052ae:	e008      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052b0:	2308      	movs	r3, #8
 80052b2:	e006      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052b4:	2306      	movs	r3, #6
 80052b6:	e004      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e002      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052bc:	2302      	movs	r3, #2
 80052be:	e000      	b.n	80052c2 <UART_SetConfig+0xa9a>
 80052c0:	2301      	movs	r3, #1
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	441a      	add	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	61fb      	str	r3, [r7, #28]
        break;
 80052de:	e113      	b.n	8005508 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d043      	beq.n	8005370 <UART_SetConfig+0xb48>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d03d      	beq.n	800536c <UART_SetConfig+0xb44>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d037      	beq.n	8005368 <UART_SetConfig+0xb40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d031      	beq.n	8005364 <UART_SetConfig+0xb3c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b04      	cmp	r3, #4
 8005306:	d02b      	beq.n	8005360 <UART_SetConfig+0xb38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b05      	cmp	r3, #5
 800530e:	d025      	beq.n	800535c <UART_SetConfig+0xb34>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b06      	cmp	r3, #6
 8005316:	d01f      	beq.n	8005358 <UART_SetConfig+0xb30>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b07      	cmp	r3, #7
 800531e:	d019      	beq.n	8005354 <UART_SetConfig+0xb2c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b08      	cmp	r3, #8
 8005326:	d013      	beq.n	8005350 <UART_SetConfig+0xb28>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b09      	cmp	r3, #9
 800532e:	d00d      	beq.n	800534c <UART_SetConfig+0xb24>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b0a      	cmp	r3, #10
 8005336:	d007      	beq.n	8005348 <UART_SetConfig+0xb20>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b0b      	cmp	r3, #11
 800533e:	d101      	bne.n	8005344 <UART_SetConfig+0xb1c>
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <UART_SetConfig+0xd4c>)
 8005342:	e016      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005344:	4b8c      	ldr	r3, [pc, #560]	; (8005578 <UART_SetConfig+0xd50>)
 8005346:	e014      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005348:	4b8c      	ldr	r3, [pc, #560]	; (800557c <UART_SetConfig+0xd54>)
 800534a:	e012      	b.n	8005372 <UART_SetConfig+0xb4a>
 800534c:	4b8c      	ldr	r3, [pc, #560]	; (8005580 <UART_SetConfig+0xd58>)
 800534e:	e010      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005350:	4b8c      	ldr	r3, [pc, #560]	; (8005584 <UART_SetConfig+0xd5c>)
 8005352:	e00e      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005354:	4b8c      	ldr	r3, [pc, #560]	; (8005588 <UART_SetConfig+0xd60>)
 8005356:	e00c      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005358:	4b8c      	ldr	r3, [pc, #560]	; (800558c <UART_SetConfig+0xd64>)
 800535a:	e00a      	b.n	8005372 <UART_SetConfig+0xb4a>
 800535c:	4b8c      	ldr	r3, [pc, #560]	; (8005590 <UART_SetConfig+0xd68>)
 800535e:	e008      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <UART_SetConfig+0xd6c>)
 8005362:	e006      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005364:	4b8c      	ldr	r3, [pc, #560]	; (8005598 <UART_SetConfig+0xd70>)
 8005366:	e004      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005368:	4b8c      	ldr	r3, [pc, #560]	; (800559c <UART_SetConfig+0xd74>)
 800536a:	e002      	b.n	8005372 <UART_SetConfig+0xb4a>
 800536c:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <UART_SetConfig+0xd78>)
 800536e:	e000      	b.n	8005372 <UART_SetConfig+0xb4a>
 8005370:	4b81      	ldr	r3, [pc, #516]	; (8005578 <UART_SetConfig+0xd50>)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6852      	ldr	r2, [r2, #4]
 8005376:	0852      	lsrs	r2, r2, #1
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	b29b      	uxth	r3, r3
 8005384:	61fb      	str	r3, [r7, #28]
        break;
 8005386:	e0bf      	b.n	8005508 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005388:	f7fe f8d4 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800538c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d044      	beq.n	8005420 <UART_SetConfig+0xbf8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d03e      	beq.n	800541c <UART_SetConfig+0xbf4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d038      	beq.n	8005418 <UART_SetConfig+0xbf0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d032      	beq.n	8005414 <UART_SetConfig+0xbec>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d02c      	beq.n	8005410 <UART_SetConfig+0xbe8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d026      	beq.n	800540c <UART_SetConfig+0xbe4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d020      	beq.n	8005408 <UART_SetConfig+0xbe0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	d01a      	beq.n	8005404 <UART_SetConfig+0xbdc>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d014      	beq.n	8005400 <UART_SetConfig+0xbd8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b09      	cmp	r3, #9
 80053dc:	d00e      	beq.n	80053fc <UART_SetConfig+0xbd4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b0a      	cmp	r3, #10
 80053e4:	d008      	beq.n	80053f8 <UART_SetConfig+0xbd0>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b0b      	cmp	r3, #11
 80053ec:	d102      	bne.n	80053f4 <UART_SetConfig+0xbcc>
 80053ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053f2:	e016      	b.n	8005422 <UART_SetConfig+0xbfa>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e014      	b.n	8005422 <UART_SetConfig+0xbfa>
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	e012      	b.n	8005422 <UART_SetConfig+0xbfa>
 80053fc:	2340      	movs	r3, #64	; 0x40
 80053fe:	e010      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005400:	2320      	movs	r3, #32
 8005402:	e00e      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005404:	2310      	movs	r3, #16
 8005406:	e00c      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005408:	230c      	movs	r3, #12
 800540a:	e00a      	b.n	8005422 <UART_SetConfig+0xbfa>
 800540c:	230a      	movs	r3, #10
 800540e:	e008      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005410:	2308      	movs	r3, #8
 8005412:	e006      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005414:	2306      	movs	r3, #6
 8005416:	e004      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005418:	2304      	movs	r3, #4
 800541a:	e002      	b.n	8005422 <UART_SetConfig+0xbfa>
 800541c:	2302      	movs	r3, #2
 800541e:	e000      	b.n	8005422 <UART_SetConfig+0xbfa>
 8005420:	2301      	movs	r3, #1
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	005a      	lsls	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	fbb2 f3f3 	udiv	r3, r2, r3
 800543a:	b29b      	uxth	r3, r3
 800543c:	61fb      	str	r3, [r7, #28]
        break;
 800543e:	e063      	b.n	8005508 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d04f      	beq.n	80054e8 <UART_SetConfig+0xcc0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b01      	cmp	r3, #1
 800544e:	d048      	beq.n	80054e2 <UART_SetConfig+0xcba>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b02      	cmp	r3, #2
 8005456:	d041      	beq.n	80054dc <UART_SetConfig+0xcb4>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b03      	cmp	r3, #3
 800545e:	d03a      	beq.n	80054d6 <UART_SetConfig+0xcae>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b04      	cmp	r3, #4
 8005466:	d033      	beq.n	80054d0 <UART_SetConfig+0xca8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b05      	cmp	r3, #5
 800546e:	d02c      	beq.n	80054ca <UART_SetConfig+0xca2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b06      	cmp	r3, #6
 8005476:	d025      	beq.n	80054c4 <UART_SetConfig+0xc9c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	2b07      	cmp	r3, #7
 800547e:	d01e      	beq.n	80054be <UART_SetConfig+0xc96>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	2b08      	cmp	r3, #8
 8005486:	d017      	beq.n	80054b8 <UART_SetConfig+0xc90>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b09      	cmp	r3, #9
 800548e:	d010      	beq.n	80054b2 <UART_SetConfig+0xc8a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2b0a      	cmp	r3, #10
 8005496:	d009      	beq.n	80054ac <UART_SetConfig+0xc84>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b0b      	cmp	r3, #11
 800549e:	d102      	bne.n	80054a6 <UART_SetConfig+0xc7e>
 80054a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a4:	e022      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054aa:	e01f      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b0:	e01c      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b6:	e019      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054bc:	e016      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c2:	e013      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054c4:	f241 5354 	movw	r3, #5460	; 0x1554
 80054c8:	e010      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054ca:	f641 1398 	movw	r3, #6552	; 0x1998
 80054ce:	e00d      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d4:	e00a      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054d6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80054da:	e007      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054e0:	e004      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e6:	e001      	b.n	80054ec <UART_SetConfig+0xcc4>
 80054e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6852      	ldr	r2, [r2, #4]
 80054f0:	0852      	lsrs	r2, r2, #1
 80054f2:	441a      	add	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	61fb      	str	r3, [r7, #28]
        break;
 8005500:	e002      	b.n	8005508 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	76fb      	strb	r3, [r7, #27]
        break;
 8005506:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d916      	bls.n	800553c <UART_SetConfig+0xd14>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d212      	bcs.n	800553c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f023 030f 	bic.w	r3, r3, #15
 800551e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	b29a      	uxth	r2, r3
 800552c:	89fb      	ldrh	r3, [r7, #14]
 800552e:	4313      	orrs	r3, r2
 8005530:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	89fa      	ldrh	r2, [r7, #14]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	e1af      	b.n	800589c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	76fb      	strb	r3, [r7, #27]
 8005540:	e1ac      	b.n	800589c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8005542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005546:	3b01      	subs	r3, #1
 8005548:	2b07      	cmp	r3, #7
 800554a:	f200 8196 	bhi.w	800587a <UART_SetConfig+0x1052>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <UART_SetConfig+0xd2c>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	080055a5 	.word	0x080055a5
 8005558:	0800565b 	.word	0x0800565b
 800555c:	0800587b 	.word	0x0800587b
 8005560:	08005705 	.word	0x08005705
 8005564:	0800587b 	.word	0x0800587b
 8005568:	0800587b 	.word	0x0800587b
 800556c:	0800587b 	.word	0x0800587b
 8005570:	080057bb 	.word	0x080057bb
 8005574:	0001e848 	.word	0x0001e848
 8005578:	01e84800 	.word	0x01e84800
 800557c:	0003d090 	.word	0x0003d090
 8005580:	0007a120 	.word	0x0007a120
 8005584:	000f4240 	.word	0x000f4240
 8005588:	001e8480 	.word	0x001e8480
 800558c:	0028b0aa 	.word	0x0028b0aa
 8005590:	0030d400 	.word	0x0030d400
 8005594:	003d0900 	.word	0x003d0900
 8005598:	00516154 	.word	0x00516154
 800559c:	007a1200 	.word	0x007a1200
 80055a0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7fe f85a 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 80055a8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d044      	beq.n	800563c <UART_SetConfig+0xe14>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d03e      	beq.n	8005638 <UART_SetConfig+0xe10>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d038      	beq.n	8005634 <UART_SetConfig+0xe0c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d032      	beq.n	8005630 <UART_SetConfig+0xe08>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d02c      	beq.n	800562c <UART_SetConfig+0xe04>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d026      	beq.n	8005628 <UART_SetConfig+0xe00>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d020      	beq.n	8005624 <UART_SetConfig+0xdfc>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d01a      	beq.n	8005620 <UART_SetConfig+0xdf8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d014      	beq.n	800561c <UART_SetConfig+0xdf4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d00e      	beq.n	8005618 <UART_SetConfig+0xdf0>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b0a      	cmp	r3, #10
 8005600:	d008      	beq.n	8005614 <UART_SetConfig+0xdec>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b0b      	cmp	r3, #11
 8005608:	d102      	bne.n	8005610 <UART_SetConfig+0xde8>
 800560a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800560e:	e016      	b.n	800563e <UART_SetConfig+0xe16>
 8005610:	2301      	movs	r3, #1
 8005612:	e014      	b.n	800563e <UART_SetConfig+0xe16>
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	e012      	b.n	800563e <UART_SetConfig+0xe16>
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	e010      	b.n	800563e <UART_SetConfig+0xe16>
 800561c:	2320      	movs	r3, #32
 800561e:	e00e      	b.n	800563e <UART_SetConfig+0xe16>
 8005620:	2310      	movs	r3, #16
 8005622:	e00c      	b.n	800563e <UART_SetConfig+0xe16>
 8005624:	230c      	movs	r3, #12
 8005626:	e00a      	b.n	800563e <UART_SetConfig+0xe16>
 8005628:	230a      	movs	r3, #10
 800562a:	e008      	b.n	800563e <UART_SetConfig+0xe16>
 800562c:	2308      	movs	r3, #8
 800562e:	e006      	b.n	800563e <UART_SetConfig+0xe16>
 8005630:	2306      	movs	r3, #6
 8005632:	e004      	b.n	800563e <UART_SetConfig+0xe16>
 8005634:	2304      	movs	r3, #4
 8005636:	e002      	b.n	800563e <UART_SetConfig+0xe16>
 8005638:	2302      	movs	r3, #2
 800563a:	e000      	b.n	800563e <UART_SetConfig+0xe16>
 800563c:	2301      	movs	r3, #1
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	fbb2 f2f3 	udiv	r2, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	b29b      	uxth	r3, r3
 8005656:	61fb      	str	r3, [r7, #28]
        break;
 8005658:	e112      	b.n	8005880 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d044      	beq.n	80056ec <UART_SetConfig+0xec4>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b01      	cmp	r3, #1
 8005668:	d03e      	beq.n	80056e8 <UART_SetConfig+0xec0>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b02      	cmp	r3, #2
 8005670:	d038      	beq.n	80056e4 <UART_SetConfig+0xebc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b03      	cmp	r3, #3
 8005678:	d032      	beq.n	80056e0 <UART_SetConfig+0xeb8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	2b04      	cmp	r3, #4
 8005680:	d02c      	beq.n	80056dc <UART_SetConfig+0xeb4>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b05      	cmp	r3, #5
 8005688:	d026      	beq.n	80056d8 <UART_SetConfig+0xeb0>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	2b06      	cmp	r3, #6
 8005690:	d020      	beq.n	80056d4 <UART_SetConfig+0xeac>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b07      	cmp	r3, #7
 8005698:	d01a      	beq.n	80056d0 <UART_SetConfig+0xea8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d014      	beq.n	80056cc <UART_SetConfig+0xea4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	d00e      	beq.n	80056c8 <UART_SetConfig+0xea0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b0a      	cmp	r3, #10
 80056b0:	d008      	beq.n	80056c4 <UART_SetConfig+0xe9c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b0b      	cmp	r3, #11
 80056b8:	d102      	bne.n	80056c0 <UART_SetConfig+0xe98>
 80056ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80056be:	e016      	b.n	80056ee <UART_SetConfig+0xec6>
 80056c0:	4b80      	ldr	r3, [pc, #512]	; (80058c4 <UART_SetConfig+0x109c>)
 80056c2:	e014      	b.n	80056ee <UART_SetConfig+0xec6>
 80056c4:	4b80      	ldr	r3, [pc, #512]	; (80058c8 <UART_SetConfig+0x10a0>)
 80056c6:	e012      	b.n	80056ee <UART_SetConfig+0xec6>
 80056c8:	4b80      	ldr	r3, [pc, #512]	; (80058cc <UART_SetConfig+0x10a4>)
 80056ca:	e010      	b.n	80056ee <UART_SetConfig+0xec6>
 80056cc:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <UART_SetConfig+0x10a8>)
 80056ce:	e00e      	b.n	80056ee <UART_SetConfig+0xec6>
 80056d0:	4b80      	ldr	r3, [pc, #512]	; (80058d4 <UART_SetConfig+0x10ac>)
 80056d2:	e00c      	b.n	80056ee <UART_SetConfig+0xec6>
 80056d4:	4b80      	ldr	r3, [pc, #512]	; (80058d8 <UART_SetConfig+0x10b0>)
 80056d6:	e00a      	b.n	80056ee <UART_SetConfig+0xec6>
 80056d8:	4b80      	ldr	r3, [pc, #512]	; (80058dc <UART_SetConfig+0x10b4>)
 80056da:	e008      	b.n	80056ee <UART_SetConfig+0xec6>
 80056dc:	4b80      	ldr	r3, [pc, #512]	; (80058e0 <UART_SetConfig+0x10b8>)
 80056de:	e006      	b.n	80056ee <UART_SetConfig+0xec6>
 80056e0:	4b80      	ldr	r3, [pc, #512]	; (80058e4 <UART_SetConfig+0x10bc>)
 80056e2:	e004      	b.n	80056ee <UART_SetConfig+0xec6>
 80056e4:	4b80      	ldr	r3, [pc, #512]	; (80058e8 <UART_SetConfig+0x10c0>)
 80056e6:	e002      	b.n	80056ee <UART_SetConfig+0xec6>
 80056e8:	4b80      	ldr	r3, [pc, #512]	; (80058ec <UART_SetConfig+0x10c4>)
 80056ea:	e000      	b.n	80056ee <UART_SetConfig+0xec6>
 80056ec:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <UART_SetConfig+0x109c>)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	0852      	lsrs	r2, r2, #1
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
 8005700:	61fb      	str	r3, [r7, #28]
        break;
 8005702:	e0bd      	b.n	8005880 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005704:	f7fd ff16 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005708:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d044      	beq.n	800579c <UART_SetConfig+0xf74>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b01      	cmp	r3, #1
 8005718:	d03e      	beq.n	8005798 <UART_SetConfig+0xf70>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b02      	cmp	r3, #2
 8005720:	d038      	beq.n	8005794 <UART_SetConfig+0xf6c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b03      	cmp	r3, #3
 8005728:	d032      	beq.n	8005790 <UART_SetConfig+0xf68>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b04      	cmp	r3, #4
 8005730:	d02c      	beq.n	800578c <UART_SetConfig+0xf64>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	2b05      	cmp	r3, #5
 8005738:	d026      	beq.n	8005788 <UART_SetConfig+0xf60>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b06      	cmp	r3, #6
 8005740:	d020      	beq.n	8005784 <UART_SetConfig+0xf5c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2b07      	cmp	r3, #7
 8005748:	d01a      	beq.n	8005780 <UART_SetConfig+0xf58>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2b08      	cmp	r3, #8
 8005750:	d014      	beq.n	800577c <UART_SetConfig+0xf54>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2b09      	cmp	r3, #9
 8005758:	d00e      	beq.n	8005778 <UART_SetConfig+0xf50>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b0a      	cmp	r3, #10
 8005760:	d008      	beq.n	8005774 <UART_SetConfig+0xf4c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b0b      	cmp	r3, #11
 8005768:	d102      	bne.n	8005770 <UART_SetConfig+0xf48>
 800576a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576e:	e016      	b.n	800579e <UART_SetConfig+0xf76>
 8005770:	2301      	movs	r3, #1
 8005772:	e014      	b.n	800579e <UART_SetConfig+0xf76>
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	e012      	b.n	800579e <UART_SetConfig+0xf76>
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	e010      	b.n	800579e <UART_SetConfig+0xf76>
 800577c:	2320      	movs	r3, #32
 800577e:	e00e      	b.n	800579e <UART_SetConfig+0xf76>
 8005780:	2310      	movs	r3, #16
 8005782:	e00c      	b.n	800579e <UART_SetConfig+0xf76>
 8005784:	230c      	movs	r3, #12
 8005786:	e00a      	b.n	800579e <UART_SetConfig+0xf76>
 8005788:	230a      	movs	r3, #10
 800578a:	e008      	b.n	800579e <UART_SetConfig+0xf76>
 800578c:	2308      	movs	r3, #8
 800578e:	e006      	b.n	800579e <UART_SetConfig+0xf76>
 8005790:	2306      	movs	r3, #6
 8005792:	e004      	b.n	800579e <UART_SetConfig+0xf76>
 8005794:	2304      	movs	r3, #4
 8005796:	e002      	b.n	800579e <UART_SetConfig+0xf76>
 8005798:	2302      	movs	r3, #2
 800579a:	e000      	b.n	800579e <UART_SetConfig+0xf76>
 800579c:	2301      	movs	r3, #1
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
        break;
 80057b8:	e062      	b.n	8005880 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04e      	beq.n	8005860 <UART_SetConfig+0x1038>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d047      	beq.n	800585a <UART_SetConfig+0x1032>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d040      	beq.n	8005854 <UART_SetConfig+0x102c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d039      	beq.n	800584e <UART_SetConfig+0x1026>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d032      	beq.n	8005848 <UART_SetConfig+0x1020>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d02b      	beq.n	8005842 <UART_SetConfig+0x101a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d024      	beq.n	800583c <UART_SetConfig+0x1014>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	d01d      	beq.n	8005836 <UART_SetConfig+0x100e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d016      	beq.n	8005830 <UART_SetConfig+0x1008>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b09      	cmp	r3, #9
 8005808:	d00f      	beq.n	800582a <UART_SetConfig+0x1002>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b0a      	cmp	r3, #10
 8005810:	d008      	beq.n	8005824 <UART_SetConfig+0xffc>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b0b      	cmp	r3, #11
 8005818:	d101      	bne.n	800581e <UART_SetConfig+0xff6>
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	e022      	b.n	8005864 <UART_SetConfig+0x103c>
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	e01f      	b.n	8005864 <UART_SetConfig+0x103c>
 8005824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005828:	e01c      	b.n	8005864 <UART_SetConfig+0x103c>
 800582a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800582e:	e019      	b.n	8005864 <UART_SetConfig+0x103c>
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	e016      	b.n	8005864 <UART_SetConfig+0x103c>
 8005836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800583a:	e013      	b.n	8005864 <UART_SetConfig+0x103c>
 800583c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005840:	e010      	b.n	8005864 <UART_SetConfig+0x103c>
 8005842:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005846:	e00d      	b.n	8005864 <UART_SetConfig+0x103c>
 8005848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800584c:	e00a      	b.n	8005864 <UART_SetConfig+0x103c>
 800584e:	f241 5355 	movw	r3, #5461	; 0x1555
 8005852:	e007      	b.n	8005864 <UART_SetConfig+0x103c>
 8005854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005858:	e004      	b.n	8005864 <UART_SetConfig+0x103c>
 800585a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800585e:	e001      	b.n	8005864 <UART_SetConfig+0x103c>
 8005860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6852      	ldr	r2, [r2, #4]
 8005868:	0852      	lsrs	r2, r2, #1
 800586a:	441a      	add	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	b29b      	uxth	r3, r3
 8005876:	61fb      	str	r3, [r7, #28]
        break;
 8005878:	e002      	b.n	8005880 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	76fb      	strb	r3, [r7, #27]
        break;
 800587e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	d908      	bls.n	8005898 <UART_SetConfig+0x1070>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d204      	bcs.n	8005898 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	e001      	b.n	800589c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80058b8:	7efb      	ldrb	r3, [r7, #27]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80058c4:	00f42400 	.word	0x00f42400
 80058c8:	0001e848 	.word	0x0001e848
 80058cc:	0003d090 	.word	0x0003d090
 80058d0:	0007a120 	.word	0x0007a120
 80058d4:	000f4240 	.word	0x000f4240
 80058d8:	00145855 	.word	0x00145855
 80058dc:	00186a00 	.word	0x00186a00
 80058e0:	001e8480 	.word	0x001e8480
 80058e4:	0028b0aa 	.word	0x0028b0aa
 80058e8:	003d0900 	.word	0x003d0900
 80058ec:	007a1200 	.word	0x007a1200

080058f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ee:	d10a      	bne.n	8005a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a44:	f7fc f872 	bl	8001b2c <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d10e      	bne.n	8005a76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f82c 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e022      	b.n	8005abc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d10e      	bne.n	8005aa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f816 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e00c      	b.n	8005abc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	e062      	b.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d05e      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fc f825 	bl	8001b2c <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11d      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e045      	b.n	8005bbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02e      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d126      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b56:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e00f      	b.n	8005bbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d08d      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7fe fdf1 	bl	8004810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fe fdcd 	bl	80047fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_UARTEx_DisableFifoMode+0x16>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e027      	b.n	8005d0c <HAL_UARTEx_DisableFifoMode+0x66>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e02d      	b.n	8005d8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2224      	movs	r2, #36	; 0x24
 8005d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f84f 	bl	8005e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e02d      	b.n	8005e08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2224      	movs	r2, #36	; 0x24
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f811 	bl	8005e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b089      	sub	sp, #36	; 0x24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e26:	4a2d      	ldr	r2, [pc, #180]	; (8005edc <UARTEx_SetNbDataToProcess+0xcc>)
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e4c:	e03d      	b.n	8005eca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e4e:	2308      	movs	r3, #8
 8005e50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e52:	2308      	movs	r3, #8
 8005e54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	0e5b      	lsrs	r3, r3, #25
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	0f5b      	lsrs	r3, r3, #29
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e76:	7fbb      	ldrb	r3, [r7, #30]
 8005e78:	7f3a      	ldrb	r2, [r7, #28]
 8005e7a:	f107 0120 	add.w	r1, r7, #32
 8005e7e:	440a      	add	r2, r1
 8005e80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	7f3a      	ldrb	r2, [r7, #28]
 8005e8a:	f107 0120 	add.w	r1, r7, #32
 8005e8e:	440a      	add	r2, r1
 8005e90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	7f7a      	ldrb	r2, [r7, #29]
 8005ea4:	f107 0120 	add.w	r1, r7, #32
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	7f7a      	ldrb	r2, [r7, #29]
 8005eb4:	f107 0120 	add.w	r1, r7, #32
 8005eb8:	440a      	add	r2, r1
 8005eba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	; 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	08008e5c 	.word	0x08008e5c
 8005edc:	08008e64 	.word	0x08008e64

08005ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ee8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005eec:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	89fb      	ldrh	r3, [r7, #14]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f18:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005f1c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	4013      	ands	r3, r2
 8005f32:	b21b      	sxth	r3, r3
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	f107 0014 	add.w	r0, r7, #20
 8005f58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ffaf 	bl	8005ee0 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f8e:	b004      	add	sp, #16
 8005f90:	4770      	bx	lr

08005f92 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b088      	sub	sp, #32
 8005f96:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	2218      	movs	r2, #24
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 ff98 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8005faa:	233f      	movs	r3, #63	; 0x3f
 8005fac:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005fae:	2381      	movs	r3, #129	; 0x81
 8005fb0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005fba:	f107 0308 	add.w	r3, r7, #8
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fa25 	bl	8007410 <hci_send_req>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da01      	bge.n	8005fd0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005fcc:	23ff      	movs	r3, #255	; 0xff
 8005fce:	e005      	b.n	8005fdc <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	e000      	b.n	8005fdc <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8005fe4:	b5b0      	push	{r4, r5, r7, lr}
 8005fe6:	b0ce      	sub	sp, #312	; 0x138
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4605      	mov	r5, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	1cbb      	adds	r3, r7, #2
 8006000:	4602      	mov	r2, r0
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	1dbb      	adds	r3, r7, #6
 8006006:	460a      	mov	r2, r1
 8006008:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006012:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006016:	3308      	adds	r3, #8
 8006018:	f107 0210 	add.w	r2, r7, #16
 800601c:	4413      	add	r3, r2
 800601e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006022:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006026:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800602a:	4413      	add	r3, r2
 800602c:	3309      	adds	r3, #9
 800602e:	f107 0210 	add.w	r2, r7, #16
 8006032:	4413      	add	r3, r2
 8006034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006038:	f107 030f 	add.w	r3, r7, #15
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8006046:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800604a:	1dfa      	adds	r2, r7, #7
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006054:	3301      	adds	r3, #1
 8006056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800605a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800605e:	1d3a      	adds	r2, r7, #4
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800606a:	3302      	adds	r3, #2
 800606c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8006070:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006074:	1cba      	adds	r2, r7, #2
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800607c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006080:	3302      	adds	r3, #2
 8006082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8006086:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800608a:	1dba      	adds	r2, r7, #6
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006094:	3301      	adds	r3, #1
 8006096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800609a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800609e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80060a2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80060a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060a8:	3301      	adds	r3, #1
 80060aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 80060ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80060b6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80060b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060bc:	3301      	adds	r3, #1
 80060be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 80060c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060c6:	3308      	adds	r3, #8
 80060c8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80060cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fef2 	bl	8006eba <Osal_MemCpy>
    index_input += Local_Name_Length;
 80060d6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80060da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80060de:	4413      	add	r3, r2
 80060e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80060e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060e8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80060ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80060ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060f2:	3301      	adds	r3, #1
 80060f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 80060f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060fc:	3301      	adds	r3, #1
 80060fe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006102:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fed7 	bl	8006eba <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800610c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006110:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006114:	4413      	add	r3, r2
 8006116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800611a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006122:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006124:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006128:	3302      	adds	r3, #2
 800612a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006136:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613c:	3302      	adds	r3, #2
 800613e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006142:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006146:	2218      	movs	r2, #24
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fec5 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006150:	233f      	movs	r3, #63	; 0x3f
 8006152:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006156:	2383      	movs	r3, #131	; 0x83
 8006158:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800615c:	f107 0310 	add.w	r3, r7, #16
 8006160:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006168:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800616c:	f107 030f 	add.w	r3, r7, #15
 8006170:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006174:	2301      	movs	r3, #1
 8006176:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800617a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 f945 	bl	8007410 <hci_send_req>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	da01      	bge.n	8006190 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800618c:	23ff      	movs	r3, #255	; 0xff
 800618e:	e009      	b.n	80061a4 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8006190:	f107 030f 	add.w	r3, r7, #15
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800619a:	f107 030f 	add.w	r3, r7, #15
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	e000      	b.n	80061a4 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bdb0      	pop	{r4, r5, r7, pc}

080061ae <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b0cc      	sub	sp, #304	; 0x130
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	4602      	mov	r2, r0
 80061b6:	1dfb      	adds	r3, r7, #7
 80061b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80061c2:	f107 030f 	add.w	r3, r7, #15
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	1dfa      	adds	r2, r7, #7
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061de:	3301      	adds	r3, #1
 80061e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80061e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061e8:	2218      	movs	r2, #24
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fe74 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 80061f2:	233f      	movs	r3, #63	; 0x3f
 80061f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80061f8:	2385      	movs	r3, #133	; 0x85
 80061fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061fe:	f107 0310 	add.w	r3, r7, #16
 8006202:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006206:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800620a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800620e:	f107 030f 	add.w	r3, r7, #15
 8006212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006216:	2301      	movs	r3, #1
 8006218:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800621c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f8f4 	bl	8007410 <hci_send_req>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	da01      	bge.n	8006232 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800622e:	23ff      	movs	r3, #255	; 0xff
 8006230:	e009      	b.n	8006246 <aci_gap_set_io_capability+0x98>
  if (status) 
 8006232:	f107 030f 	add.w	r3, r7, #15
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800623c:	f107 030f 	add.w	r3, r7, #15
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	e000      	b.n	8006246 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b0cc      	sub	sp, #304	; 0x130
 8006254:	af00      	add	r7, sp, #0
 8006256:	4605      	mov	r5, r0
 8006258:	460c      	mov	r4, r1
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	1dfb      	adds	r3, r7, #7
 8006260:	462a      	mov	r2, r5
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	4622      	mov	r2, r4
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	1d7b      	adds	r3, r7, #5
 800626c:	4602      	mov	r2, r0
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	1d3b      	adds	r3, r7, #4
 8006272:	460a      	mov	r2, r1
 8006274:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800627e:	f107 030f 	add.w	r3, r7, #15
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800628c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006290:	1dfa      	adds	r2, r7, #7
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800629a:	3301      	adds	r3, #1
 800629c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80062a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a4:	1dba      	adds	r2, r7, #6
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80062aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ae:	3301      	adds	r3, #1
 80062b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	1d7a      	adds	r2, r7, #5
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80062be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062c2:	3301      	adds	r3, #1
 80062c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80062c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062cc:	1d3a      	adds	r2, r7, #4
 80062ce:	7812      	ldrb	r2, [r2, #0]
 80062d0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80062d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062d6:	3301      	adds	r3, #1
 80062d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 80062dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80062e4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80062e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ea:	3301      	adds	r3, #1
 80062ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80062f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80062fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062fe:	3301      	adds	r3, #1
 8006300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8006304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006308:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800630c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800630e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006312:	3301      	adds	r3, #1
 8006314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8006318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006320:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006328:	3304      	adds	r3, #4
 800632a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800632e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006332:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006336:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800633c:	3301      	adds	r3, #1
 800633e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006346:	2218      	movs	r2, #24
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fdc5 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006350:	233f      	movs	r3, #63	; 0x3f
 8006352:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006356:	2386      	movs	r3, #134	; 0x86
 8006358:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800635c:	f107 0310 	add.w	r3, r7, #16
 8006360:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006368:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800636c:	f107 030f 	add.w	r3, r7, #15
 8006370:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800637a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f845 	bl	8007410 <hci_send_req>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	da01      	bge.n	8006390 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800638c:	23ff      	movs	r3, #255	; 0xff
 800638e:	e009      	b.n	80063a4 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8006390:	f107 030f 	add.w	r3, r7, #15
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800639a:	f107 030f 	add.w	r3, r7, #15
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	e000      	b.n	80063a4 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bdb0      	pop	{r4, r5, r7, pc}

080063ae <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80063ae:	b590      	push	{r4, r7, lr}
 80063b0:	b0cd      	sub	sp, #308	; 0x134
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	4604      	mov	r4, r0
 80063b6:	4608      	mov	r0, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	463a      	mov	r2, r7
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	1dfb      	adds	r3, r7, #7
 80063c0:	4622      	mov	r2, r4
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	1dbb      	adds	r3, r7, #6
 80063c6:	4602      	mov	r2, r0
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	1d7b      	adds	r3, r7, #5
 80063cc:	460a      	mov	r2, r1
 80063ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	2207      	movs	r2, #7
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fd7a 	bl	8006eda <Osal_MemSet>
  int index_input = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 80063ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f0:	1dfa      	adds	r2, r7, #7
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063fa:	3301      	adds	r3, #1
 80063fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8006400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006404:	1dba      	adds	r2, r7, #6
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800640a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800640e:	3301      	adds	r3, #1
 8006410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8006414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006418:	1d7a      	adds	r2, r7, #5
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800641e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006422:	3301      	adds	r3, #1
 8006424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800642c:	2218      	movs	r2, #24
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd52 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006436:	233f      	movs	r3, #63	; 0x3f
 8006438:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800643c:	238a      	movs	r3, #138	; 0x8a
 800643e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006442:	f107 0310 	add.w	r3, r7, #16
 8006446:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800644a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800644e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800645a:	2307      	movs	r3, #7
 800645c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 ffd2 	bl	8007410 <hci_send_req>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	da01      	bge.n	8006476 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8006472:	23ff      	movs	r3, #255	; 0xff
 8006474:	e021      	b.n	80064ba <aci_gap_init+0x10c>
  if (resp.Status) 
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <aci_gap_init+0xda>
  {
    return resp.Status;
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	e018      	b.n	80064ba <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006490:	b29a      	uxth	r2, r3
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8006498:	f107 0308 	add.w	r3, r7, #8
 800649c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80064a6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80064a8:	f107 0308 	add.w	r3, r7, #8
 80064ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80064b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd90      	pop	{r4, r7, pc}

080064c4 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b0cc      	sub	sp, #304	; 0x130
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4602      	mov	r2, r0
 80064cc:	463b      	mov	r3, r7
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	1dfb      	adds	r3, r7, #7
 80064d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80064d4:	f107 0310 	add.w	r3, r7, #16
 80064d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80064dc:	f107 030f 	add.w	r3, r7, #15
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	1dfa      	adds	r2, r7, #7
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	1c58      	adds	r0, r3, #1
 8006504:	1dfb      	adds	r3, r7, #7
 8006506:	781a      	ldrb	r2, [r3, #0]
 8006508:	463b      	mov	r3, r7
 800650a:	6819      	ldr	r1, [r3, #0]
 800650c:	f000 fcd5 	bl	8006eba <Osal_MemCpy>
  index_input += AdvDataLen;
 8006510:	1dfb      	adds	r3, r7, #7
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006518:	4413      	add	r3, r2
 800651a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800651e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006522:	2218      	movs	r2, #24
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fcd7 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 800652c:	233f      	movs	r3, #63	; 0x3f
 800652e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006532:	238e      	movs	r3, #142	; 0x8e
 8006534:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006548:	f107 030f 	add.w	r3, r7, #15
 800654c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006550:	2301      	movs	r3, #1
 8006552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 ff57 	bl	8007410 <hci_send_req>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	da01      	bge.n	800656c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8006568:	23ff      	movs	r3, #255	; 0xff
 800656a:	e009      	b.n	8006580 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800656c:	f107 030f 	add.w	r3, r7, #15
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <aci_gap_update_adv_data+0xba>
  {
    return status;
 8006576:	f107 030f 	add.w	r3, r7, #15
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	e000      	b.n	8006580 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b088      	sub	sp, #32
 800658e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	2218      	movs	r2, #24
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fc9c 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 80065a2:	233f      	movs	r3, #63	; 0x3f
 80065a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80065a6:	2392      	movs	r3, #146	; 0x92
 80065a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80065aa:	1dfb      	adds	r3, r7, #7
 80065ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 ff29 	bl	8007410 <hci_send_req>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da01      	bge.n	80065c8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80065c4:	23ff      	movs	r3, #255	; 0xff
 80065c6:	e005      	b.n	80065d4 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	e000      	b.n	80065d4 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	2218      	movs	r2, #24
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fc73 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 80065f4:	233f      	movs	r3, #63	; 0x3f
 80065f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80065f8:	f240 1301 	movw	r3, #257	; 0x101
 80065fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80065fe:	1dfb      	adds	r3, r7, #7
 8006600:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006602:	2301      	movs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f000 feff 	bl	8007410 <hci_send_req>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	da01      	bge.n	800661c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006618:	23ff      	movs	r3, #255	; 0xff
 800661a:	e005      	b.n	8006628 <aci_gatt_init+0x4c>
  if (status) 
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <aci_gatt_init+0x4a>
  {
    return status;
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	e000      	b.n	8006628 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b0cf      	sub	sp, #316	; 0x13c
 8006634:	af00      	add	r7, sp, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4638      	mov	r0, r7
 800663a:	6001      	str	r1, [r0, #0]
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	1dfb      	adds	r3, r7, #7
 8006642:	4622      	mov	r2, r4
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	1dbb      	adds	r3, r7, #6
 8006648:	4602      	mov	r2, r0
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	1d7b      	adds	r3, r7, #5
 800664e:	460a      	mov	r2, r1
 8006650:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006652:	f107 0310 	add.w	r3, r7, #16
 8006656:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800665a:	1dfb      	adds	r3, r7, #7
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d007      	beq.n	8006672 <aci_gatt_add_service+0x42>
 8006662:	1dfb      	adds	r3, r7, #7
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d101      	bne.n	800666e <aci_gatt_add_service+0x3e>
 800666a:	2311      	movs	r3, #17
 800666c:	e002      	b.n	8006674 <aci_gatt_add_service+0x44>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <aci_gatt_add_service+0x44>
 8006672:	2303      	movs	r3, #3
 8006674:	f107 0210 	add.w	r2, r7, #16
 8006678:	4413      	add	r3, r2
 800667a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800667e:	f107 030c 	add.w	r3, r7, #12
 8006682:	2203      	movs	r2, #3
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fc27 	bl	8006eda <Osal_MemSet>
  int index_input = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006692:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006696:	1dfa      	adds	r2, r7, #7
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800669c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d002      	beq.n	80066b4 <aci_gatt_add_service+0x84>
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d004      	beq.n	80066bc <aci_gatt_add_service+0x8c>
 80066b2:	e007      	b.n	80066c4 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066ba:	e005      	b.n	80066c8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80066c2:	e001      	b.n	80066c8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80066c4:	2347      	movs	r3, #71	; 0x47
 80066c6:	e05d      	b.n	8006784 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80066c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066cc:	1c58      	adds	r0, r3, #1
 80066ce:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80066d2:	463b      	mov	r3, r7
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	f000 fbf0 	bl	8006eba <Osal_MemCpy>
    index_input += size;
 80066da:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80066de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066e2:	4413      	add	r3, r2
 80066e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 80066e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ec:	1dba      	adds	r2, r7, #6
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80066f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066f6:	3301      	adds	r3, #1
 80066f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	1d7a      	adds	r2, r7, #5
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006706:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800670a:	3301      	adds	r3, #1
 800670c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006710:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006714:	2218      	movs	r2, #24
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fbde 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 800671e:	233f      	movs	r3, #63	; 0x3f
 8006720:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006724:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006728:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800672c:	f107 0310 	add.w	r3, r7, #16
 8006730:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006738:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006744:	2303      	movs	r3, #3
 8006746:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800674a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fe5d 	bl	8007410 <hci_send_req>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	da01      	bge.n	8006760 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800675c:	23ff      	movs	r3, #255	; 0xff
 800675e:	e011      	b.n	8006784 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800676a:	f107 030c 	add.w	r3, r7, #12
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	e008      	b.n	8006784 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800677a:	b29a      	uxth	r2, r3
 800677c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006780:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}

0800678e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800678e:	b590      	push	{r4, r7, lr}
 8006790:	b0d1      	sub	sp, #324	; 0x144
 8006792:	af00      	add	r7, sp, #0
 8006794:	4604      	mov	r4, r0
 8006796:	4608      	mov	r0, r1
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	600a      	str	r2, [r1, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	f107 030e 	add.w	r3, r7, #14
 80067a4:	4622      	mov	r2, r4
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	f107 030d 	add.w	r3, r7, #13
 80067ac:	4602      	mov	r2, r0
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	1dbb      	adds	r3, r7, #6
 80067b2:	460a      	mov	r2, r1
 80067b4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80067b6:	f107 0318 	add.w	r3, r7, #24
 80067ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80067be:	f107 030d 	add.w	r3, r7, #13
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d008      	beq.n	80067da <aci_gatt_add_char+0x4c>
 80067c8:	f107 030d 	add.w	r3, r7, #13
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d101      	bne.n	80067d6 <aci_gatt_add_char+0x48>
 80067d2:	2313      	movs	r3, #19
 80067d4:	e002      	b.n	80067dc <aci_gatt_add_char+0x4e>
 80067d6:	2303      	movs	r3, #3
 80067d8:	e000      	b.n	80067dc <aci_gatt_add_char+0x4e>
 80067da:	2305      	movs	r3, #5
 80067dc:	f107 0218 	add.w	r2, r7, #24
 80067e0:	4413      	add	r3, r2
 80067e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	2203      	movs	r2, #3
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fb73 	bl	8006eda <Osal_MemSet>
  int index_input = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 80067fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80067fe:	f107 020e 	add.w	r2, r7, #14
 8006802:	8812      	ldrh	r2, [r2, #0]
 8006804:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006806:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800680a:	3302      	adds	r3, #2
 800680c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006810:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006814:	f107 020d 	add.w	r2, r7, #13
 8006818:	7812      	ldrb	r2, [r2, #0]
 800681a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800681c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006820:	3301      	adds	r3, #1
 8006822:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8006826:	f107 030d 	add.w	r3, r7, #13
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d002      	beq.n	8006836 <aci_gatt_add_char+0xa8>
 8006830:	2b02      	cmp	r3, #2
 8006832:	d004      	beq.n	800683e <aci_gatt_add_char+0xb0>
 8006834:	e007      	b.n	8006846 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 8006836:	2302      	movs	r3, #2
 8006838:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800683c:	e005      	b.n	800684a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800683e:	2310      	movs	r3, #16
 8006840:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006844:	e001      	b.n	800684a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8006846:	2347      	movs	r3, #71	; 0x47
 8006848:	e086      	b.n	8006958 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800684a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800684e:	1cd8      	adds	r0, r3, #3
 8006850:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	f000 fb2e 	bl	8006eba <Osal_MemCpy>
    index_input += size;
 800685e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006862:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006866:	4413      	add	r3, r2
 8006868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800686c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006870:	1dba      	adds	r2, r7, #6
 8006872:	8812      	ldrh	r2, [r2, #0]
 8006874:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800687a:	3302      	adds	r3, #2
 800687c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006880:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006884:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006888:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800688a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800688e:	3301      	adds	r3, #1
 8006890:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8006894:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006898:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800689c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800689e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 80068a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068ac:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80068b0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80068b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068b6:	3301      	adds	r3, #1
 80068b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 80068bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068c0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80068c4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80068c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068ca:	3301      	adds	r3, #1
 80068cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 80068d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068d4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80068d8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80068da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068de:	3301      	adds	r3, #1
 80068e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 80068e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80068e8:	2218      	movs	r2, #24
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 faf4 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 80068f2:	233f      	movs	r3, #63	; 0x3f
 80068f4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80068f8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068fc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006900:	f107 0318 	add.w	r3, r7, #24
 8006904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006908:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800690c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006910:	f107 0314 	add.w	r3, r7, #20
 8006914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006918:	2303      	movs	r3, #3
 800691a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800691e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006922:	2100      	movs	r1, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fd73 	bl	8007410 <hci_send_req>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	da01      	bge.n	8006934 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006930:	23ff      	movs	r3, #255	; 0xff
 8006932:	e011      	b.n	8006958 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	e008      	b.n	8006958 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800694e:	b29a      	uxth	r2, r3
 8006950:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006954:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}

08006962 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8006962:	b5b0      	push	{r4, r5, r7, lr}
 8006964:	b0cc      	sub	sp, #304	; 0x130
 8006966:	af00      	add	r7, sp, #0
 8006968:	4605      	mov	r5, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4610      	mov	r0, r2
 800696e:	4619      	mov	r1, r3
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	462a      	mov	r2, r5
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	4622      	mov	r2, r4
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	1cfb      	adds	r3, r7, #3
 800697e:	4602      	mov	r2, r0
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	1cbb      	adds	r3, r7, #2
 8006984:	460a      	mov	r2, r1
 8006986:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006988:	f107 0310 	add.w	r3, r7, #16
 800698c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006990:	f107 030f 	add.w	r3, r7, #15
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800699e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a2:	1dba      	adds	r2, r7, #6
 80069a4:	8812      	ldrh	r2, [r2, #0]
 80069a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069ac:	3302      	adds	r3, #2
 80069ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 80069b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b6:	1d3a      	adds	r2, r7, #4
 80069b8:	8812      	ldrh	r2, [r2, #0]
 80069ba:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80069bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069c0:	3302      	adds	r3, #2
 80069c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 80069c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ca:	1cfa      	adds	r2, r7, #3
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80069d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069d4:	3301      	adds	r3, #1
 80069d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80069da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069de:	1cba      	adds	r2, r7, #2
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80069e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069e8:	3301      	adds	r3, #1
 80069ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 80069ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f2:	1d98      	adds	r0, r3, #6
 80069f4:	1cbb      	adds	r3, r7, #2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80069fe:	f000 fa5c 	bl	8006eba <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006a02:	1cbb      	adds	r3, r7, #2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a14:	2218      	movs	r2, #24
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa5e 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a1e:	233f      	movs	r3, #63	; 0x3f
 8006a20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006a24:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006a28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a3c:	f107 030f 	add.w	r3, r7, #15
 8006a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fcdd 	bl	8007410 <hci_send_req>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	da01      	bge.n	8006a60 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8006a5c:	23ff      	movs	r3, #255	; 0xff
 8006a5e:	e009      	b.n	8006a74 <aci_gatt_update_char_value+0x112>
  if (status) 
 8006a60:	f107 030f 	add.w	r3, r7, #15
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <aci_gatt_update_char_value+0x110>
  {
    return status;
 8006a6a:	f107 030f 	add.w	r3, r7, #15
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	e000      	b.n	8006a74 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bdb0      	pop	{r4, r5, r7, pc}

08006a7e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b0cc      	sub	sp, #304	; 0x130
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	463b      	mov	r3, r7
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	1dfb      	adds	r3, r7, #7
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	1dbb      	adds	r3, r7, #6
 8006a90:	460a      	mov	r2, r1
 8006a92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006a94:	f107 0310 	add.w	r3, r7, #16
 8006a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a9c:	f107 030f 	add.w	r3, r7, #15
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aae:	1dfa      	adds	r2, r7, #7
 8006ab0:	7812      	ldrb	r2, [r2, #0]
 8006ab2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 8006abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac2:	1dba      	adds	r2, r7, #6
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8006ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad6:	1c98      	adds	r0, r3, #2
 8006ad8:	1dbb      	adds	r3, r7, #6
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	463b      	mov	r3, r7
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	f000 f9eb 	bl	8006eba <Osal_MemCpy>
  index_input += Length;
 8006ae4:	1dbb      	adds	r3, r7, #6
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006aec:	4413      	add	r3, r2
 8006aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006af6:	2218      	movs	r2, #24
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f9ed 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b00:	233f      	movs	r3, #63	; 0x3f
 8006b02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006b06:	230c      	movs	r3, #12
 8006b08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b0c:	f107 0310 	add.w	r3, r7, #16
 8006b10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006b1c:	f107 030f 	add.w	r3, r7, #15
 8006b20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fc6d 	bl	8007410 <hci_send_req>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da01      	bge.n	8006b40 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8006b3c:	23ff      	movs	r3, #255	; 0xff
 8006b3e:	e009      	b.n	8006b54 <aci_hal_write_config_data+0xd6>
  if (status) 
 8006b40:	f107 030f 	add.w	r3, r7, #15
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <aci_hal_write_config_data+0xd4>
  {
    return status;
 8006b4a:	f107 030f 	add.w	r3, r7, #15
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	e000      	b.n	8006b54 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b0cc      	sub	sp, #304	; 0x130
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	4602      	mov	r2, r0
 8006b66:	1dfb      	adds	r3, r7, #7
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	1dbb      	adds	r3, r7, #6
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006b70:	f107 0310 	add.w	r3, r7, #16
 8006b74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b78:	f107 030f 	add.w	r3, r7, #15
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8a:	1dfa      	adds	r2, r7, #7
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 8006b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9e:	1dba      	adds	r2, r7, #6
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba8:	3301      	adds	r3, #1
 8006baa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006bae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bb2:	2218      	movs	r2, #24
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f98f 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bbc:	233f      	movs	r3, #63	; 0x3f
 8006bbe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006bc2:	230f      	movs	r3, #15
 8006bc4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006bd8:	f107 030f 	add.w	r3, r7, #15
 8006bdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fc0f 	bl	8007410 <hci_send_req>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da01      	bge.n	8006bfc <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006bf8:	23ff      	movs	r3, #255	; 0xff
 8006bfa:	e009      	b.n	8006c10 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 8006bfc:	f107 030f 	add.w	r3, r7, #15
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 8006c06:	f107 030f 	add.w	r3, r7, #15
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	e000      	b.n	8006c10 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b0cc      	sub	sp, #304	; 0x130
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	4602      	mov	r2, r0
 8006c22:	1dbb      	adds	r3, r7, #6
 8006c24:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006c26:	f107 0310 	add.w	r3, r7, #16
 8006c2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c2e:	f107 030f 	add.w	r3, r7, #15
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8006c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c40:	1dba      	adds	r2, r7, #6
 8006c42:	8812      	ldrh	r2, [r2, #0]
 8006c44:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c54:	2218      	movs	r2, #24
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f93e 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c5e:	233f      	movs	r3, #63	; 0x3f
 8006c60:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006c64:	2318      	movs	r3, #24
 8006c66:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c6a:	f107 0310 	add.w	r3, r7, #16
 8006c6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c7a:	f107 030f 	add.w	r3, r7, #15
 8006c7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fbbe 	bl	8007410 <hci_send_req>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da01      	bge.n	8006c9e <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006c9a:	23ff      	movs	r3, #255	; 0xff
 8006c9c:	e009      	b.n	8006cb2 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 8006c9e:	f107 030f 	add.w	r3, r7, #15
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 8006ca8:	f107 030f 	add.w	r3, r7, #15
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	e000      	b.n	8006cb2 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	2218      	movs	r2, #24
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f903 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x03;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006cdc:	1dfb      	adds	r3, r7, #7
 8006cde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fb90 	bl	8007410 <hci_send_req>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da01      	bge.n	8006cfa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006cf6:	23ff      	movs	r3, #255	; 0xff
 8006cf8:	e005      	b.n	8006d06 <hci_reset+0x4a>
  if (status) 
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <hci_reset+0x48>
  {
    return status;
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	e000      	b.n	8006d06 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b0ce      	sub	sp, #312	; 0x138
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	6019      	str	r1, [r3, #0]
 8006d1a:	1d3b      	adds	r3, r7, #4
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f107 030e 	add.w	r3, r7, #14
 8006d22:	4602      	mov	r2, r0
 8006d24:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8006d2e:	f107 0310 	add.w	r3, r7, #16
 8006d32:	2205      	movs	r2, #5
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f8cf 	bl	8006eda <Osal_MemSet>
  int index_input = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8006d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d46:	f107 020e 	add.w	r2, r7, #14
 8006d4a:	8812      	ldrh	r2, [r2, #0]
 8006d4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d52:	3302      	adds	r3, #2
 8006d54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006d58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d5c:	2218      	movs	r2, #24
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f8ba 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x08;
 8006d66:	2308      	movs	r3, #8
 8006d68:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8006d6c:	2330      	movs	r3, #48	; 0x30
 8006d6e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006d72:	f107 0318 	add.w	r3, r7, #24
 8006d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006d82:	f107 0310 	add.w	r3, r7, #16
 8006d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006d8a:	2305      	movs	r3, #5
 8006d8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8006d90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fb3a 	bl	8007410 <hci_send_req>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da01      	bge.n	8006da6 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8006da2:	23ff      	movs	r3, #255	; 0xff
 8006da4:	e016      	b.n	8006dd4 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 8006da6:	f107 0310 	add.w	r3, r7, #16
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	e00d      	b.n	8006dd4 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	78da      	ldrb	r2, [r3, #3]
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 8006dc6:	f107 0310 	add.w	r3, r7, #16
 8006dca:	791a      	ldrb	r2, [r3, #4]
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 8006dde:	b590      	push	{r4, r7, lr}
 8006de0:	b0cd      	sub	sp, #308	; 0x134
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	4604      	mov	r4, r0
 8006de6:	4608      	mov	r0, r1
 8006de8:	4611      	mov	r1, r2
 8006dea:	1dfb      	adds	r3, r7, #7
 8006dec:	4622      	mov	r2, r4
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	1dbb      	adds	r3, r7, #6
 8006df2:	4602      	mov	r2, r0
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	1d7b      	adds	r3, r7, #5
 8006df8:	460a      	mov	r2, r1
 8006dfa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e04:	f107 030f 	add.w	r3, r7, #15
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	1dfa      	adds	r2, r7, #7
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 8006e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2a:	1dba      	adds	r2, r7, #6
 8006e2c:	7812      	ldrb	r2, [r2, #0]
 8006e2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e34:	3301      	adds	r3, #1
 8006e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 8006e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e3e:	1d7a      	adds	r2, r7, #5
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e48:	3301      	adds	r3, #1
 8006e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8006e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e52:	2218      	movs	r2, #24
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f83f 	bl	8006eda <Osal_MemSet>
  rq.ogf = 0x08;
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006e62:	2331      	movs	r3, #49	; 0x31
 8006e64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e78:	f107 030f 	add.w	r3, r7, #15
 8006e7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8006e86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fabf 	bl	8007410 <hci_send_req>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da01      	bge.n	8006e9c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006e98:	23ff      	movs	r3, #255	; 0xff
 8006e9a:	e009      	b.n	8006eb0 <hci_le_set_default_phy+0xd2>
  if (status) 
 8006e9c:	f107 030f 	add.w	r3, r7, #15
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <hci_le_set_default_phy+0xd0>
  {
    return status;
 8006ea6:	f107 030f 	add.w	r3, r7, #15
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	e000      	b.n	8006eb0 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd90      	pop	{r4, r7, pc}

08006eba <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f001 ff90 	bl	8008df0 <memcpy>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 ff8b 	bl	8008e06 <memset>
 8006ef0:	4603      	mov	r3, r0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2bff      	cmp	r3, #255	; 0xff
 8006f16:	d000      	beq.n	8006f1a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8006f18:	e04a      	b.n	8006fb0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f640 4301 	movw	r3, #3073	; 0xc01
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d000      	beq.n	8006f32 <PeerToPeer_Event_Handler+0x36>
          break;
 8006f30:	e03d      	b.n	8006fae <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	3302      	adds	r3, #2
 8006f36:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <PeerToPeer_Event_Handler+0xc0>)
 8006f42:	889b      	ldrh	r3, [r3, #4]
 8006f44:	3302      	adds	r3, #2
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d118      	bne.n	8006f7c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	7a1b      	ldrb	r3, [r3, #8]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fa9f 	bl	80084a8 <P2PS_STM_App_Notification>
        break;
 8006f6a:	e01f      	b.n	8006fac <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fa97 	bl	80084a8 <P2PS_STM_App_Notification>
        break;
 8006f7a:	e017      	b.n	8006fac <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <PeerToPeer_Event_Handler+0xc0>)
 8006f86:	885b      	ldrh	r3, [r3, #2]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d10e      	bne.n	8006fac <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	88db      	ldrh	r3, [r3, #6]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fa7e 	bl	80084a8 <P2PS_STM_App_Notification>
        break;
 8006fac:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8006fae:	bf00      	nop
  }

  return(return_value);
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3728      	adds	r7, #40	; 0x28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200000c4 	.word	0x200000c4

08006fc0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006fc6:	484a      	ldr	r0, [pc, #296]	; (80070f0 <P2PS_STM_Init+0x130>)
 8006fc8:	f000 f938 	bl	800723c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006fcc:	238f      	movs	r3, #143	; 0x8f
 8006fce:	703b      	strb	r3, [r7, #0]
 8006fd0:	23e5      	movs	r3, #229	; 0xe5
 8006fd2:	707b      	strb	r3, [r7, #1]
 8006fd4:	23b3      	movs	r3, #179	; 0xb3
 8006fd6:	70bb      	strb	r3, [r7, #2]
 8006fd8:	23d5      	movs	r3, #213	; 0xd5
 8006fda:	70fb      	strb	r3, [r7, #3]
 8006fdc:	232e      	movs	r3, #46	; 0x2e
 8006fde:	713b      	strb	r3, [r7, #4]
 8006fe0:	237f      	movs	r3, #127	; 0x7f
 8006fe2:	717b      	strb	r3, [r7, #5]
 8006fe4:	234a      	movs	r3, #74	; 0x4a
 8006fe6:	71bb      	strb	r3, [r7, #6]
 8006fe8:	2398      	movs	r3, #152	; 0x98
 8006fea:	71fb      	strb	r3, [r7, #7]
 8006fec:	232a      	movs	r3, #42	; 0x2a
 8006fee:	723b      	strb	r3, [r7, #8]
 8006ff0:	2348      	movs	r3, #72	; 0x48
 8006ff2:	727b      	strb	r3, [r7, #9]
 8006ff4:	237a      	movs	r3, #122	; 0x7a
 8006ff6:	72bb      	strb	r3, [r7, #10]
 8006ff8:	23cc      	movs	r3, #204	; 0xcc
 8006ffa:	72fb      	strb	r3, [r7, #11]
 8006ffc:	2340      	movs	r3, #64	; 0x40
 8006ffe:	733b      	strb	r3, [r7, #12]
 8007000:	23fe      	movs	r3, #254	; 0xfe
 8007002:	737b      	strb	r3, [r7, #13]
 8007004:	2300      	movs	r3, #0
 8007006:	73bb      	strb	r3, [r7, #14]
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800700c:	4639      	mov	r1, r7
 800700e:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <P2PS_STM_Init+0x134>)
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2308      	movs	r3, #8
 8007014:	2201      	movs	r2, #1
 8007016:	2002      	movs	r0, #2
 8007018:	f7ff fb0a 	bl	8006630 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800701c:	2319      	movs	r3, #25
 800701e:	703b      	strb	r3, [r7, #0]
 8007020:	23ed      	movs	r3, #237	; 0xed
 8007022:	707b      	strb	r3, [r7, #1]
 8007024:	2382      	movs	r3, #130	; 0x82
 8007026:	70bb      	strb	r3, [r7, #2]
 8007028:	23ae      	movs	r3, #174	; 0xae
 800702a:	70fb      	strb	r3, [r7, #3]
 800702c:	23ed      	movs	r3, #237	; 0xed
 800702e:	713b      	strb	r3, [r7, #4]
 8007030:	2321      	movs	r3, #33	; 0x21
 8007032:	717b      	strb	r3, [r7, #5]
 8007034:	234c      	movs	r3, #76	; 0x4c
 8007036:	71bb      	strb	r3, [r7, #6]
 8007038:	239d      	movs	r3, #157	; 0x9d
 800703a:	71fb      	strb	r3, [r7, #7]
 800703c:	2341      	movs	r3, #65	; 0x41
 800703e:	723b      	strb	r3, [r7, #8]
 8007040:	2345      	movs	r3, #69	; 0x45
 8007042:	727b      	strb	r3, [r7, #9]
 8007044:	2322      	movs	r3, #34	; 0x22
 8007046:	72bb      	strb	r3, [r7, #10]
 8007048:	238e      	movs	r3, #142	; 0x8e
 800704a:	72fb      	strb	r3, [r7, #11]
 800704c:	2341      	movs	r3, #65	; 0x41
 800704e:	733b      	strb	r3, [r7, #12]
 8007050:	23fe      	movs	r3, #254	; 0xfe
 8007052:	737b      	strb	r3, [r7, #13]
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <P2PS_STM_Init+0x134>)
 800705e:	8818      	ldrh	r0, [r3, #0]
 8007060:	463a      	mov	r2, r7
 8007062:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <P2PS_STM_Init+0x138>)
 8007064:	9305      	str	r3, [sp, #20]
 8007066:	2301      	movs	r3, #1
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	230a      	movs	r3, #10
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	2301      	movs	r3, #1
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	2300      	movs	r3, #0
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	2306      	movs	r3, #6
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	2302      	movs	r3, #2
 800707c:	2102      	movs	r1, #2
 800707e:	f7ff fb86 	bl	800678e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8007082:	2319      	movs	r3, #25
 8007084:	703b      	strb	r3, [r7, #0]
 8007086:	23ed      	movs	r3, #237	; 0xed
 8007088:	707b      	strb	r3, [r7, #1]
 800708a:	2382      	movs	r3, #130	; 0x82
 800708c:	70bb      	strb	r3, [r7, #2]
 800708e:	23ae      	movs	r3, #174	; 0xae
 8007090:	70fb      	strb	r3, [r7, #3]
 8007092:	23ed      	movs	r3, #237	; 0xed
 8007094:	713b      	strb	r3, [r7, #4]
 8007096:	2321      	movs	r3, #33	; 0x21
 8007098:	717b      	strb	r3, [r7, #5]
 800709a:	234c      	movs	r3, #76	; 0x4c
 800709c:	71bb      	strb	r3, [r7, #6]
 800709e:	239d      	movs	r3, #157	; 0x9d
 80070a0:	71fb      	strb	r3, [r7, #7]
 80070a2:	2341      	movs	r3, #65	; 0x41
 80070a4:	723b      	strb	r3, [r7, #8]
 80070a6:	2345      	movs	r3, #69	; 0x45
 80070a8:	727b      	strb	r3, [r7, #9]
 80070aa:	2322      	movs	r3, #34	; 0x22
 80070ac:	72bb      	strb	r3, [r7, #10]
 80070ae:	238e      	movs	r3, #142	; 0x8e
 80070b0:	72fb      	strb	r3, [r7, #11]
 80070b2:	2342      	movs	r3, #66	; 0x42
 80070b4:	733b      	strb	r3, [r7, #12]
 80070b6:	23fe      	movs	r3, #254	; 0xfe
 80070b8:	737b      	strb	r3, [r7, #13]
 80070ba:	2300      	movs	r3, #0
 80070bc:	73bb      	strb	r3, [r7, #14]
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <P2PS_STM_Init+0x134>)
 80070c4:	8818      	ldrh	r0, [r3, #0]
 80070c6:	463a      	mov	r2, r7
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <P2PS_STM_Init+0x13c>)
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	2301      	movs	r3, #1
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	230a      	movs	r3, #10
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	2301      	movs	r3, #1
 80070d6:	9302      	str	r3, [sp, #8]
 80070d8:	2300      	movs	r3, #0
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	2310      	movs	r3, #16
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2302      	movs	r3, #2
 80070e2:	2102      	movs	r1, #2
 80070e4:	f7ff fb53 	bl	800678e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80070e8:	bf00      	nop
}
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	08006efd 	.word	0x08006efd
 80070f4:	200000c4 	.word	0x200000c4
 80070f8:	200000c6 	.word	0x200000c6
 80070fc:	200000c8 	.word	0x200000c8

08007100 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return;
 8007104:	bf00      	nop
}
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800710e:	b480      	push	{r7}
 8007110:	af00      	add	r7, sp, #0
  return;
 8007112:	bf00      	nop
}
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <DIS_Init>:
__weak void DIS_Init( void )
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  return;
 8007120:	bf00      	nop
}
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800712a:	b480      	push	{r7}
 800712c:	af00      	add	r7, sp, #0
  return;
 800712e:	bf00      	nop
}
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return;
 800713c:	bf00      	nop
}
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007146:	b480      	push	{r7}
 8007148:	af00      	add	r7, sp, #0
  return;
 800714a:	bf00      	nop
}
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HTS_Init>:
__weak void HTS_Init( void )
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return;
 8007158:	bf00      	nop
}
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <IAS_Init>:
__weak void IAS_Init( void )
{
 8007162:	b480      	push	{r7}
 8007164:	af00      	add	r7, sp, #0
  return;
 8007166:	bf00      	nop
}
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LLS_Init>:
__weak void LLS_Init( void )
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  return;
 8007174:	bf00      	nop
}
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <TPS_Init>:
__weak void TPS_Init( void )
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0
  return;
 8007182:	bf00      	nop
}
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return;
 8007190:	bf00      	nop
}
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800719a:	b480      	push	{r7}
 800719c:	af00      	add	r7, sp, #0
  return;
 800719e:	bf00      	nop
}
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <MESH_Init>:
__weak void MESH_Init( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return;
 80071ac:	bf00      	nop
}
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80071b6:	b480      	push	{r7}
 80071b8:	af00      	add	r7, sp, #0
  return;
 80071ba:	bf00      	nop
}
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return;
 80071c8:	bf00      	nop
}
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <SVCCTL_Init+0x18>)
 80071da:	2200      	movs	r2, #0
 80071dc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80071de:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <SVCCTL_Init+0x1c>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80071e4:	f000 f806 	bl	80071f4 <SVCCTL_SvcInit>

  return;
 80071e8:	bf00      	nop
}
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	200000cc 	.word	0x200000cc
 80071f0:	200000ec 	.word	0x200000ec

080071f4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  BLS_Init();
 80071f8:	f7ff ff82 	bl	8007100 <BLS_Init>

  CRS_STM_Init();
 80071fc:	f7ff ff87 	bl	800710e <CRS_STM_Init>

  DIS_Init();
 8007200:	f7ff ff8c 	bl	800711c <DIS_Init>

  EDS_STM_Init();
 8007204:	f7ff ff91 	bl	800712a <EDS_STM_Init>

  HIDS_Init();
 8007208:	f7ff ff96 	bl	8007138 <HIDS_Init>

  HRS_Init();
 800720c:	f7ff ff9b 	bl	8007146 <HRS_Init>

  HTS_Init();
 8007210:	f7ff ffa0 	bl	8007154 <HTS_Init>

  IAS_Init();
 8007214:	f7ff ffa5 	bl	8007162 <IAS_Init>

  LLS_Init();
 8007218:	f7ff ffaa 	bl	8007170 <LLS_Init>

  TPS_Init();
 800721c:	f7ff ffaf 	bl	800717e <TPS_Init>

  MOTENV_STM_Init();
 8007220:	f7ff ffb4 	bl	800718c <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007224:	f7ff fecc 	bl	8006fc0 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007228:	f7ff ffb7 	bl	800719a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800722c:	f7ff ffc3 	bl	80071b6 <BVOPUS_STM_Init>

  MESH_Init();
 8007230:	f7ff ffba 	bl	80071a8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007234:	f7ff ffc6 	bl	80071c4 <SVCCTL_InitCustomSvc>
  
  return;
 8007238:	bf00      	nop
}
 800723a:	bd80      	pop	{r7, pc}

0800723c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <SVCCTL_RegisterSvcHandler+0x30>)
 8007246:	7f1b      	ldrb	r3, [r3, #28]
 8007248:	4619      	mov	r1, r3
 800724a:	4a08      	ldr	r2, [pc, #32]	; (800726c <SVCCTL_RegisterSvcHandler+0x30>)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <SVCCTL_RegisterSvcHandler+0x30>)
 8007254:	7f1b      	ldrb	r3, [r3, #28]
 8007256:	3301      	adds	r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <SVCCTL_RegisterSvcHandler+0x30>)
 800725c:	771a      	strb	r2, [r3, #28]

  return;
 800725e:	bf00      	nop
}
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	200000cc 	.word	0x200000cc

08007270 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2bff      	cmp	r3, #255	; 0xff
 8007288:	d000      	beq.n	800728c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800728a:	e025      	b.n	80072d8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	3302      	adds	r3, #2
 8007290:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800729c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a0:	d000      	beq.n	80072a4 <SVCCTL_UserEvtRx+0x34>
          break;
 80072a2:	e018      	b.n	80072d6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80072a4:	2300      	movs	r3, #0
 80072a6:	757b      	strb	r3, [r7, #21]
 80072a8:	e00d      	b.n	80072c6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80072aa:	7d7b      	ldrb	r3, [r7, #21]
 80072ac:	4a18      	ldr	r2, [pc, #96]	; (8007310 <SVCCTL_UserEvtRx+0xa0>)
 80072ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d108      	bne.n	80072d2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80072c0:	7d7b      	ldrb	r3, [r7, #21]
 80072c2:	3301      	adds	r3, #1
 80072c4:	757b      	strb	r3, [r7, #21]
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <SVCCTL_UserEvtRx+0xa0>)
 80072c8:	7f1b      	ldrb	r3, [r3, #28]
 80072ca:	7d7a      	ldrb	r2, [r7, #21]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3ec      	bcc.n	80072aa <SVCCTL_UserEvtRx+0x3a>
          break;
 80072d0:	e000      	b.n	80072d4 <SVCCTL_UserEvtRx+0x64>
              break;
 80072d2:	bf00      	nop
          break;
 80072d4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 80072d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d009      	beq.n	80072f2 <SVCCTL_UserEvtRx+0x82>
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d00a      	beq.n	80072f8 <SVCCTL_UserEvtRx+0x88>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fe10 	bl	8007f0c <SVCCTL_App_Notification>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75bb      	strb	r3, [r7, #22]
      break;
 80072f0:	e008      	b.n	8007304 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75bb      	strb	r3, [r7, #22]
      break;
 80072f6:	e005      	b.n	8007304 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75bb      	strb	r3, [r7, #22]
      break;
 80072fc:	e002      	b.n	8007304 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80072fe:	2301      	movs	r3, #1
 8007300:	75bb      	strb	r3, [r7, #22]
      break;
 8007302:	bf00      	nop
  }

  return (return_status);
 8007304:	7dbb      	ldrb	r3, [r7, #22]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200000cc 	.word	0x200000cc

08007314 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2121      	movs	r1, #33	; 0x21
 800732c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007330:	f000 fa00 	bl	8007734 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	330b      	adds	r3, #11
 8007338:	78db      	ldrb	r3, [r3, #3]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4a08      	ldr	r2, [pc, #32]	; (8007374 <hci_init+0x30>)
 8007354:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007356:	4a08      	ldr	r2, [pc, #32]	; (8007378 <hci_init+0x34>)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800735c:	4806      	ldr	r0, [pc, #24]	; (8007378 <hci_init+0x34>)
 800735e:	f000 f96f 	bl	8007640 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f8d0 	bl	800750c <TlInit>

  return;
 800736c:	bf00      	nop
}
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000200 	.word	0x20000200
 8007378:	200001d8 	.word	0x200001d8

0800737c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007382:	4820      	ldr	r0, [pc, #128]	; (8007404 <hci_user_evt_proc+0x88>)
 8007384:	f000 fc92 	bl	8007cac <LST_is_empty>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d128      	bne.n	80073e0 <hci_user_evt_proc+0x64>
 800738e:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <hci_user_evt_proc+0x8c>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d024      	beq.n	80073e0 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007396:	f107 030c 	add.w	r3, r7, #12
 800739a:	4619      	mov	r1, r3
 800739c:	4819      	ldr	r0, [pc, #100]	; (8007404 <hci_user_evt_proc+0x88>)
 800739e:	f000 fd0c 	bl	8007dba <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <hci_user_evt_proc+0x8c>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <hci_user_evt_proc+0x90>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80073b4:	4b15      	ldr	r3, [pc, #84]	; (800740c <hci_user_evt_proc+0x90>)
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	1d3a      	adds	r2, r7, #4
 80073ba:	4610      	mov	r0, r2
 80073bc:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80073be:	793a      	ldrb	r2, [r7, #4]
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <hci_user_evt_proc+0x8c>)
 80073c2:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80073c4:	4b10      	ldr	r3, [pc, #64]	; (8007408 <hci_user_evt_proc+0x8c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fbca 	bl	8007b68 <TL_MM_EvtDone>
 80073d4:	e004      	b.n	80073e0 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4619      	mov	r1, r3
 80073da:	480a      	ldr	r0, [pc, #40]	; (8007404 <hci_user_evt_proc+0x88>)
 80073dc:	f000 fc86 	bl	8007cec <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80073e0:	4808      	ldr	r0, [pc, #32]	; (8007404 <hci_user_evt_proc+0x88>)
 80073e2:	f000 fc63 	bl	8007cac <LST_is_empty>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <hci_user_evt_proc+0x80>
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <hci_user_evt_proc+0x8c>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80073f4:	4803      	ldr	r0, [pc, #12]	; (8007404 <hci_user_evt_proc+0x88>)
 80073f6:	f000 fffe 	bl	80083f6 <hci_notify_asynch_evt>
  }


  return;
 80073fa:	bf00      	nop
 80073fc:	bf00      	nop
}
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200000f4 	.word	0x200000f4
 8007408:	20000100 	.word	0x20000100
 800740c:	200001d8 	.word	0x200001d8

08007410 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800741c:	2000      	movs	r0, #0
 800741e:	f000 f8cb 	bl	80075b8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007422:	2300      	movs	r3, #0
 8007424:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	b21b      	sxth	r3, r3
 800742c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007430:	b21a      	sxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b21b      	sxth	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b21b      	sxth	r3, r3
 800743e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	b2d9      	uxtb	r1, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	8bbb      	ldrh	r3, [r7, #28]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 f88d 	bl	800756c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007452:	e04e      	b.n	80074f2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007454:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007458:	f000 ffe4 	bl	8008424 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800745c:	e043      	b.n	80074e6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800745e:	f107 030c 	add.w	r3, r7, #12
 8007462:	4619      	mov	r1, r3
 8007464:	4828      	ldr	r0, [pc, #160]	; (8007508 <hci_send_req+0xf8>)
 8007466:	f000 fca8 	bl	8007dba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	7a5b      	ldrb	r3, [r3, #9]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d114      	bne.n	800749c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	330b      	adds	r3, #11
 8007476:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	885b      	ldrh	r3, [r3, #2]
 800747c:	b29b      	uxth	r3, r3
 800747e:	8bba      	ldrh	r2, [r7, #28]
 8007480:	429a      	cmp	r2, r3
 8007482:	d104      	bne.n	800748e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	7812      	ldrb	r2, [r2, #0]
 800748c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d027      	beq.n	80074e6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007496:	2301      	movs	r3, #1
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e024      	b.n	80074e6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	330b      	adds	r3, #11
 80074a0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8bba      	ldrh	r2, [r7, #28]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d114      	bne.n	80074da <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	7a9b      	ldrb	r3, [r3, #10]
 80074b4:	3b03      	subs	r3, #3
 80074b6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	429a      	cmp	r2, r3
 80074c0:	bfa8      	it	ge
 80074c2:	461a      	movge	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6918      	ldr	r0, [r3, #16]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1cd9      	adds	r1, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	461a      	mov	r2, r3
 80074d6:	f001 fc8b 	bl	8008df0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80074e2:	2301      	movs	r3, #1
 80074e4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80074e6:	4808      	ldr	r0, [pc, #32]	; (8007508 <hci_send_req+0xf8>)
 80074e8:	f000 fbe0 	bl	8007cac <LST_is_empty>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0b5      	beq.n	800745e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ad      	beq.n	8007454 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80074f8:	2001      	movs	r0, #1
 80074fa:	f000 f85d 	bl	80075b8 <NotifyCmdStatus>

  return 0;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	200001f8 	.word	0x200001f8

0800750c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007514:	480f      	ldr	r0, [pc, #60]	; (8007554 <TlInit+0x48>)
 8007516:	f000 fbb9 	bl	8007c8c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800751a:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <TlInit+0x4c>)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007520:	480e      	ldr	r0, [pc, #56]	; (800755c <TlInit+0x50>)
 8007522:	f000 fbb3 	bl	8007c8c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <TlInit+0x54>)
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <TlInit+0x58>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <TlInit+0x5c>)
 800753a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <TlInit+0x58>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
  }

  return;
 8007548:	bf00      	nop
 800754a:	bf00      	nop
}
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200001f8 	.word	0x200001f8
 8007558:	200000fc 	.word	0x200000fc
 800755c:	200000f4 	.word	0x200000f4
 8007560:	20000100 	.word	0x20000100
 8007564:	200001d8 	.word	0x200001d8
 8007568:	080075f9 	.word	0x080075f9

0800756c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	603a      	str	r2, [r7, #0]
 8007576:	80fb      	strh	r3, [r7, #6]
 8007578:	460b      	mov	r3, r1
 800757a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <SendCmd+0x44>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <SendCmd+0x44>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	797a      	ldrb	r2, [r7, #5]
 800758c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <SendCmd+0x44>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	797a      	ldrb	r2, [r7, #5]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f001 fc29 	bl	8008df0 <memcpy>

  hciContext.io.Send(0,0);
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <SendCmd+0x48>)
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2100      	movs	r1, #0
 80075a4:	2000      	movs	r0, #0
 80075a6:	4798      	blx	r3

  return;
 80075a8:	bf00      	nop
}
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200000fc 	.word	0x200000fc
 80075b4:	200001d8 	.word	0x200001d8

080075b8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d108      	bne.n	80075da <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <NotifyCmdStatus+0x3c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <NotifyCmdStatus+0x3c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2000      	movs	r0, #0
 80075d6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80075d8:	e008      	b.n	80075ec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80075da:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <NotifyCmdStatus+0x3c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80075e2:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <NotifyCmdStatus+0x3c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2001      	movs	r0, #1
 80075e8:	4798      	blx	r3
  return;
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
}
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000200 	.word	0x20000200

080075f8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7a5b      	ldrb	r3, [r3, #9]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d003      	beq.n	8007610 <TlEvtReceived+0x18>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	7a5b      	ldrb	r3, [r3, #9]
 800760c:	2b0e      	cmp	r3, #14
 800760e:	d107      	bne.n	8007620 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4809      	ldr	r0, [pc, #36]	; (8007638 <TlEvtReceived+0x40>)
 8007614:	f000 fb8e 	bl	8007d34 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007618:	2000      	movs	r0, #0
 800761a:	f000 fef8 	bl	800840e <hci_cmd_resp_release>
 800761e:	e006      	b.n	800762e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4806      	ldr	r0, [pc, #24]	; (800763c <TlEvtReceived+0x44>)
 8007624:	f000 fb86 	bl	8007d34 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <TlEvtReceived+0x44>)
 800762a:	f000 fee4 	bl	80083f6 <hci_notify_asynch_evt>
  }

  return;
 800762e:	bf00      	nop
}
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200001f8 	.word	0x200001f8
 800763c:	200000f4 	.word	0x200000f4

08007640 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a05      	ldr	r2, [pc, #20]	; (8007660 <hci_register_io_bus+0x20>)
 800764c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a04      	ldr	r2, [pc, #16]	; (8007664 <hci_register_io_bus+0x24>)
 8007652:	611a      	str	r2, [r3, #16]

  return;
 8007654:	bf00      	nop
}
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	08007941 	.word	0x08007941
 8007664:	080079a9 	.word	0x080079a9

08007668 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4a08      	ldr	r2, [pc, #32]	; (8007698 <shci_init+0x30>)
 8007678:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800767a:	4a08      	ldr	r2, [pc, #32]	; (800769c <shci_init+0x34>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007680:	4806      	ldr	r0, [pc, #24]	; (800769c <shci_init+0x34>)
 8007682:	f000 f90d 	bl	80078a0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f890 	bl	80077b0 <TlInit>

  return;
 8007690:	bf00      	nop
}
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000224 	.word	0x20000224
 800769c:	20000204 	.word	0x20000204

080076a0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80076a6:	4820      	ldr	r0, [pc, #128]	; (8007728 <shci_user_evt_proc+0x88>)
 80076a8:	f000 fb00 	bl	8007cac <LST_is_empty>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d128      	bne.n	8007704 <shci_user_evt_proc+0x64>
 80076b2:	4b1e      	ldr	r3, [pc, #120]	; (800772c <shci_user_evt_proc+0x8c>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d024      	beq.n	8007704 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	4619      	mov	r1, r3
 80076c0:	4819      	ldr	r0, [pc, #100]	; (8007728 <shci_user_evt_proc+0x88>)
 80076c2:	f000 fb7a 	bl	8007dba <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <shci_user_evt_proc+0x8c>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 80076cc:	4b18      	ldr	r3, [pc, #96]	; (8007730 <shci_user_evt_proc+0x90>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d009      	beq.n	80076e8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <shci_user_evt_proc+0x90>)
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	1d3a      	adds	r2, r7, #4
 80076de:	4610      	mov	r0, r2
 80076e0:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80076e2:	793a      	ldrb	r2, [r7, #4]
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <shci_user_evt_proc+0x8c>)
 80076e6:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80076e8:	4b10      	ldr	r3, [pc, #64]	; (800772c <shci_user_evt_proc+0x8c>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa38 	bl	8007b68 <TL_MM_EvtDone>
 80076f8:	e004      	b.n	8007704 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4619      	mov	r1, r3
 80076fe:	480a      	ldr	r0, [pc, #40]	; (8007728 <shci_user_evt_proc+0x88>)
 8007700:	f000 faf4 	bl	8007cec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007704:	4808      	ldr	r0, [pc, #32]	; (8007728 <shci_user_evt_proc+0x88>)
 8007706:	f000 fad1 	bl	8007cac <LST_is_empty>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <shci_user_evt_proc+0x80>
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <shci_user_evt_proc+0x8c>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007718:	4803      	ldr	r0, [pc, #12]	; (8007728 <shci_user_evt_proc+0x88>)
 800771a:	f7f8 ff4a 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800771e:	bf00      	nop
 8007720:	bf00      	nop
}
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000104 	.word	0x20000104
 800772c:	20000114 	.word	0x20000114
 8007730:	20000204 	.word	0x20000204

08007734 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60ba      	str	r2, [r7, #8]
 800773c:	607b      	str	r3, [r7, #4]
 800773e:	4603      	mov	r3, r0
 8007740:	81fb      	strh	r3, [r7, #14]
 8007742:	460b      	mov	r3, r1
 8007744:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007746:	2000      	movs	r0, #0
 8007748:	f000 f864 	bl	8007814 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <shci_send+0x74>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	89fa      	ldrh	r2, [r7, #14]
 8007752:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <shci_send+0x74>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	7b7a      	ldrb	r2, [r7, #13]
 800775c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <shci_send+0x74>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	7b7a      	ldrb	r2, [r7, #13]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fb41 	bl	8008df0 <memcpy>

  shciContext.io.Send(0,0);
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <shci_send+0x78>)
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2100      	movs	r1, #0
 8007774:	2000      	movs	r0, #0
 8007776:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007778:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800777c:	f7f8 ff30 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0008 	add.w	r0, r3, #8
 8007786:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <shci_send+0x74>)
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <shci_send+0x74>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	789b      	ldrb	r3, [r3, #2]
 8007790:	3303      	adds	r3, #3
 8007792:	461a      	mov	r2, r3
 8007794:	f001 fb2c 	bl	8008df0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007798:	2001      	movs	r0, #1
 800779a:	f000 f83b 	bl	8007814 <Cmd_SetStatus>

  return;
 800779e:	bf00      	nop
}
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000110 	.word	0x20000110
 80077ac:	20000204 	.word	0x20000204

080077b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80077b8:	4a10      	ldr	r2, [pc, #64]	; (80077fc <TlInit+0x4c>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80077be:	4810      	ldr	r0, [pc, #64]	; (8007800 <TlInit+0x50>)
 80077c0:	f000 fa64 	bl	8007c8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80077c4:	2001      	movs	r0, #1
 80077c6:	f000 f825 	bl	8007814 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <TlInit+0x54>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <TlInit+0x58>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <TlInit+0x5c>)
 80077de:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <TlInit+0x60>)
 80077e2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80077e4:	4b08      	ldr	r3, [pc, #32]	; (8007808 <TlInit+0x58>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f107 020c 	add.w	r2, r7, #12
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
  }

  return;
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
}
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000110 	.word	0x20000110
 8007800:	20000104 	.word	0x20000104
 8007804:	20000114 	.word	0x20000114
 8007808:	20000204 	.word	0x20000204
 800780c:	08007865 	.word	0x08007865
 8007810:	0800787d 	.word	0x0800787d

08007814 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <Cmd_SetStatus+0x48>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <Cmd_SetStatus+0x48>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2000      	movs	r0, #0
 8007832:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <Cmd_SetStatus+0x4c>)
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800783a:	e00b      	b.n	8007854 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <Cmd_SetStatus+0x4c>)
 800783e:	2201      	movs	r2, #1
 8007840:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007842:	4b06      	ldr	r3, [pc, #24]	; (800785c <Cmd_SetStatus+0x48>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <Cmd_SetStatus+0x48>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2001      	movs	r0, #1
 8007850:	4798      	blx	r3
  return;
 8007852:	bf00      	nop
 8007854:	bf00      	nop
}
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000224 	.word	0x20000224
 8007860:	2000010c 	.word	0x2000010c

08007864 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800786c:	2000      	movs	r0, #0
 800786e:	f7f8 feac 	bl	80005ca <shci_cmd_resp_release>

  return;
 8007872:	bf00      	nop
}
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <TlUserEvtReceived+0x20>)
 8007888:	f000 fa54 	bl	8007d34 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800788c:	4803      	ldr	r0, [pc, #12]	; (800789c <TlUserEvtReceived+0x20>)
 800788e:	f7f8 fe90 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 8007892:	bf00      	nop
}
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000104 	.word	0x20000104

080078a0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a05      	ldr	r2, [pc, #20]	; (80078c0 <shci_register_io_bus+0x20>)
 80078ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <shci_register_io_bus+0x24>)
 80078b2:	611a      	str	r2, [r3, #16]

  return;
 80078b4:	bf00      	nop
}
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	08007a1d 	.word	0x08007a1d
 80078c4:	08007a71 	.word	0x08007a71

080078c8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80078cc:	f000 ff6a 	bl	80087a4 <HW_IPCC_Enable>

  return;
 80078d0:	bf00      	nop
}
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <TL_Init>:


void TL_Init( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <TL_Init+0x44>)
 80078da:	4a10      	ldr	r2, [pc, #64]	; (800791c <TL_Init+0x48>)
 80078dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80078de:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <TL_Init+0x44>)
 80078e0:	4a0f      	ldr	r2, [pc, #60]	; (8007920 <TL_Init+0x4c>)
 80078e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <TL_Init+0x44>)
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <TL_Init+0x50>)
 80078e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <TL_Init+0x44>)
 80078ec:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <TL_Init+0x54>)
 80078ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <TL_Init+0x44>)
 80078f2:	4a0e      	ldr	r2, [pc, #56]	; (800792c <TL_Init+0x58>)
 80078f4:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80078f6:	4b08      	ldr	r3, [pc, #32]	; (8007918 <TL_Init+0x44>)
 80078f8:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <TL_Init+0x5c>)
 80078fa:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <TL_Init+0x44>)
 80078fe:	4a0d      	ldr	r2, [pc, #52]	; (8007934 <TL_Init+0x60>)
 8007900:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <TL_Init+0x44>)
 8007904:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <TL_Init+0x64>)
 8007906:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007908:	4b03      	ldr	r3, [pc, #12]	; (8007918 <TL_Init+0x44>)
 800790a:	4a0c      	ldr	r2, [pc, #48]	; (800793c <TL_Init+0x68>)
 800790c:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800790e:	f000 ff51 	bl	80087b4 <HW_IPCC_Init>

  return;
 8007912:	bf00      	nop
}
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20030000 	.word	0x20030000
 800791c:	20030024 	.word	0x20030024
 8007920:	20030044 	.word	0x20030044
 8007924:	20030054 	.word	0x20030054
 8007928:	20030060 	.word	0x20030060
 800792c:	20030068 	.word	0x20030068
 8007930:	20030070 	.word	0x20030070
 8007934:	2003008c 	.word	0x2003008c
 8007938:	20030090 	.word	0x20030090
 800793c:	2003009c 	.word	0x2003009c

08007940 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800794c:	4811      	ldr	r0, [pc, #68]	; (8007994 <TL_BLE_Init+0x54>)
 800794e:	f000 f99d 	bl	8007c8c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <TL_BLE_Init+0x58>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4a0c      	ldr	r2, [pc, #48]	; (800799c <TL_BLE_Init+0x5c>)
 800796c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4a08      	ldr	r2, [pc, #32]	; (8007994 <TL_BLE_Init+0x54>)
 8007972:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007974:	f000 ff34 	bl	80087e0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <TL_BLE_Init+0x60>)
 800797e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <TL_BLE_Init+0x64>)
 8007986:	6013      	str	r3, [r2, #0]

  return 0;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20030a34 	.word	0x20030a34
 8007998:	20030000 	.word	0x20030000
 800799c:	20030a24 	.word	0x20030a24
 80079a0:	20000230 	.word	0x20000230
 80079a4:	20000234 	.word	0x20000234

080079a8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <TL_BLE_SendCmd+0x24>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2201      	movs	r2, #1
 80079bc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 80079be:	f000 ff19 	bl	80087f4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20030000 	.word	0x20030000

080079d0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80079d6:	e009      	b.n	80079ec <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4808      	ldr	r0, [pc, #32]	; (8007a00 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80079de:	f000 f9ec 	bl	8007dba <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <HW_IPCC_BLE_RxEvtNot+0x34>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80079ee:	f000 f95d 	bl	8007cac <LST_is_empty>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0ef      	beq.n	80079d8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80079f8:	bf00      	nop
}
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20030a34 	.word	0x20030a34
 8007a04:	20000230 	.word	0x20000230

08007a08 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4798      	blx	r3

  return;
 8007a12:	bf00      	nop
}
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000234 	.word	0x20000234

08007a1c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007a28:	480d      	ldr	r0, [pc, #52]	; (8007a60 <TL_SYS_Init+0x44>)
 8007a2a:	f000 f92f 	bl	8007c8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <TL_SYS_Init+0x48>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4a08      	ldr	r2, [pc, #32]	; (8007a60 <TL_SYS_Init+0x44>)
 8007a40:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007a42:	f000 fef9 	bl	8008838 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <TL_SYS_Init+0x4c>)
 8007a4c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	4a06      	ldr	r2, [pc, #24]	; (8007a6c <TL_SYS_Init+0x50>)
 8007a54:	6013      	str	r3, [r2, #0]

  return 0;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20030a3c 	.word	0x20030a3c
 8007a64:	20030000 	.word	0x20030000
 8007a68:	20000238 	.word	0x20000238
 8007a6c:	2000023c 	.word	0x2000023c

08007a70 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <TL_SYS_SendCmd+0x24>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2210      	movs	r2, #16
 8007a84:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8007a86:	f000 fee1 	bl	800884c <HW_IPCC_SYS_SendCmd>

  return 0;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20030000 	.word	0x20030000

08007a98 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a04      	ldr	r2, [pc, #16]	; (8007ab4 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8007aa2:	68d2      	ldr	r2, [r2, #12]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4798      	blx	r3

  return;
 8007aaa:	bf00      	nop
}
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000238 	.word	0x20000238
 8007ab4:	20030000 	.word	0x20030000

08007ab8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007abe:	e009      	b.n	8007ad4 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4808      	ldr	r0, [pc, #32]	; (8007ae8 <HW_IPCC_SYS_EvtNot+0x30>)
 8007ac6:	f000 f978 	bl	8007dba <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <HW_IPCC_SYS_EvtNot+0x34>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007ad4:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <HW_IPCC_SYS_EvtNot+0x30>)
 8007ad6:	f000 f8e9 	bl	8007cac <LST_is_empty>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ef      	beq.n	8007ac0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007ae0:	bf00      	nop
}
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20030a3c 	.word	0x20030a3c
 8007aec:	2000023c 	.word	0x2000023c

08007af0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007af8:	4817      	ldr	r0, [pc, #92]	; (8007b58 <TL_MM_Init+0x68>)
 8007afa:	f000 f8c7 	bl	8007c8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007afe:	4817      	ldr	r0, [pc, #92]	; (8007b5c <TL_MM_Init+0x6c>)
 8007b00:	f000 f8c4 	bl	8007c8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007b04:	4b16      	ldr	r3, [pc, #88]	; (8007b60 <TL_MM_Init+0x70>)
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <TL_MM_Init+0x74>)
 8007b0a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007b0c:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <TL_MM_Init+0x74>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6892      	ldr	r2, [r2, #8]
 8007b14:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007b16:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <TL_MM_Init+0x74>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	68d2      	ldr	r2, [r2, #12]
 8007b1e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007b20:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <TL_MM_Init+0x74>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0c      	ldr	r2, [pc, #48]	; (8007b58 <TL_MM_Init+0x68>)
 8007b26:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007b28:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <TL_MM_Init+0x74>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6812      	ldr	r2, [r2, #0]
 8007b30:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <TL_MM_Init+0x74>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6852      	ldr	r2, [r2, #4]
 8007b3a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <TL_MM_Init+0x74>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6912      	ldr	r2, [r2, #16]
 8007b44:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <TL_MM_Init+0x74>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6952      	ldr	r2, [r2, #20]
 8007b4e:	619a      	str	r2, [r3, #24]

  return;
 8007b50:	bf00      	nop
}
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200300a8 	.word	0x200300a8
 8007b5c:	20000228 	.word	0x20000228
 8007b60:	20030000 	.word	0x20030000
 8007b64:	20000240 	.word	0x20000240

08007b68 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4805      	ldr	r0, [pc, #20]	; (8007b88 <TL_MM_EvtDone+0x20>)
 8007b74:	f000 f8de 	bl	8007d34 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007b78:	4804      	ldr	r0, [pc, #16]	; (8007b8c <TL_MM_EvtDone+0x24>)
 8007b7a:	f000 fe8d 	bl	8008898 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007b7e:	bf00      	nop
}
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000228 	.word	0x20000228
 8007b8c:	08007b91 	.word	0x08007b91

08007b90 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007b96:	e00c      	b.n	8007bb2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007b98:	1d3b      	adds	r3, r7, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	480a      	ldr	r0, [pc, #40]	; (8007bc8 <SendFreeBuf+0x38>)
 8007b9e:	f000 f90c 	bl	8007dba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <SendFreeBuf+0x3c>)
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f8c1 	bl	8007d34 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007bb2:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <SendFreeBuf+0x38>)
 8007bb4:	f000 f87a 	bl	8007cac <LST_is_empty>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0ec      	beq.n	8007b98 <SendFreeBuf+0x8>
  }

  return;
 8007bbe:	bf00      	nop
}
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000228 	.word	0x20000228
 8007bcc:	20030000 	.word	0x20030000

08007bd0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <TL_TRACES_Init+0x1c>)
 8007bd6:	f000 f859 	bl	8007c8c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <TL_TRACES_Init+0x20>)
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4a03      	ldr	r2, [pc, #12]	; (8007bec <TL_TRACES_Init+0x1c>)
 8007be0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007be2:	f000 fe8f 	bl	8008904 <HW_IPCC_TRACES_Init>

  return;
 8007be6:	bf00      	nop
}
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200300b0 	.word	0x200300b0
 8007bf0:	20030000 	.word	0x20030000

08007bf4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007bfa:	e008      	b.n	8007c0e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007bfc:	1d3b      	adds	r3, r7, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4808      	ldr	r0, [pc, #32]	; (8007c24 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007c02:	f000 f8da 	bl	8007dba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f80d 	bl	8007c28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007c0e:	4805      	ldr	r0, [pc, #20]	; (8007c24 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007c10:	f000 f84c 	bl	8007cac <LST_is_empty>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007c1a:	bf00      	nop
}
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200300b0 	.word	0x200300b0

08007c28 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <OTP_Read+0x48>)
 8007c48:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007c4a:	e002      	b.n	8007c52 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b08      	subs	r3, #8
 8007c50:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3307      	adds	r3, #7
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	79fa      	ldrb	r2, [r7, #7]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d003      	beq.n	8007c66 <OTP_Read+0x2a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4a09      	ldr	r2, [pc, #36]	; (8007c88 <OTP_Read+0x4c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d1f2      	bne.n	8007c4c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3307      	adds	r3, #7
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	79fa      	ldrb	r2, [r7, #7]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	1fff73f8 	.word	0x1fff73f8
 8007c88:	1fff7000 	.word	0x1fff7000

08007c8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	605a      	str	r2, [r3, #4]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cbe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d102      	bne.n	8007cd0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
 8007cce:	e001      	b.n	8007cd4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d42:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d44:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d48:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d84:	f3ef 8310 	mrs	r3, PRIMASK
 8007d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6852      	ldr	r2, [r2, #4]
 8007da2:	605a      	str	r2, [r3, #4]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff ffcd 	bl	8007d7c <LST_remove_node>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007dec:	bf00      	nop
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <LL_FLASH_GetUDN+0x14>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	1fff7580 	.word	0x1fff7580

08007e0c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <LL_FLASH_GetDeviceID+0x14>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	b2db      	uxtb	r3, r3
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	1fff7584 	.word	0x1fff7584

08007e24 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007e28:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <LL_FLASH_GetSTCompanyID+0x14>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	1fff7584 	.word	0x1fff7584

08007e3c <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007e3c:	b5b0      	push	{r4, r5, r7, lr}
 8007e3e:	b08c      	sub	sp, #48	; 0x30
 8007e40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007e42:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <APP_BLE_Init+0xa8>)
 8007e44:	463c      	mov	r4, r7
 8007e46:	461d      	mov	r5, r3
 8007e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e54:	c407      	stmia	r4!, {r0, r1, r2}
 8007e56:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007e58:	f000 f8fe 	bl	8008058 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f000 fd78 	bl	8008954 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007e64:	4a20      	ldr	r2, [pc, #128]	; (8007ee8 <APP_BLE_Init+0xac>)
 8007e66:	2100      	movs	r1, #0
 8007e68:	2004      	movs	r0, #4
 8007e6a:	f000 fe7d 	bl	8008b68 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fa4f 	bl	8007314 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007e76:	f000 f905 	bl	8008084 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007e7a:	f7ff f9ab 	bl	80071d4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <APP_BLE_Init+0xb0>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8007e86:	4b19      	ldr	r3, [pc, #100]	; (8007eec <APP_BLE_Init+0xb0>)
 8007e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e8c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <APP_BLE_Init+0xb4>)
 8007e90:	2100      	movs	r1, #0
 8007e92:	2001      	movs	r0, #1
 8007e94:	f000 fe68 	bl	8008b68 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 8007e98:	2006      	movs	r0, #6
 8007e9a:	f7fe febe 	bl	8006c1a <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8007e9e:	f000 fb2f 	bl	8008500 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <APP_BLE_Init+0xb8>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4914      	ldr	r1, [pc, #80]	; (8007ef8 <APP_BLE_Init+0xbc>)
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7f8 ffdb 	bl	8000e64 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <APP_BLE_Init+0xc0>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4913      	ldr	r1, [pc, #76]	; (8007f00 <APP_BLE_Init+0xc4>)
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f7f8 ffd5 	bl	8000e64 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <APP_BLE_Init+0xb0>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <APP_BLE_Init+0xb0>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <APP_BLE_Init+0xc8>)
 8007ecc:	2280      	movs	r2, #128	; 0x80
 8007ece:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007ed0:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <APP_BLE_Init+0xcc>)
 8007ed2:	22a0      	movs	r2, #160	; 0xa0
 8007ed4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 f9ae 	bl	8008238 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007edc:	bf00      	nop
}
 8007ede:	3730      	adds	r7, #48	; 0x30
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee4:	08008e6c 	.word	0x08008e6c
 8007ee8:	0800737d 	.word	0x0800737d
 8007eec:	20000118 	.word	0x20000118
 8007ef0:	080083a5 	.word	0x080083a5
 8007ef4:	080083d9 	.word	0x080083d9
 8007ef8:	200001a9 	.word	0x200001a9
 8007efc:	080083e9 	.word	0x080083e9
 8007f00:	200001aa 	.word	0x200001aa
 8007f04:	200001ac 	.word	0x200001ac
 8007f08:	200001ae 	.word	0x200001ae

08007f0c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	; 0x28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f14:	2342      	movs	r3, #66	; 0x42
 8007f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b3e      	cmp	r3, #62	; 0x3e
 8007f26:	d024      	beq.n	8007f72 <SVCCTL_App_Notification+0x66>
 8007f28:	2bff      	cmp	r3, #255	; 0xff
 8007f2a:	d070      	beq.n	800800e <SVCCTL_App_Notification+0x102>
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d000      	beq.n	8007f32 <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 8007f30:	e086      	b.n	8008040 <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	3302      	adds	r3, #2
 8007f36:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	4b42      	ldr	r3, [pc, #264]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d106      	bne.n	8007f56 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007f48:	4b40      	ldr	r3, [pc, #256]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007f4e:	4b3f      	ldr	r3, [pc, #252]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8007f56:	2001      	movs	r0, #1
 8007f58:	f000 f96e 	bl	8008238 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007f5c:	4b3c      	ldr	r3, [pc, #240]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007f62:	4b3a      	ldr	r3, [pc, #232]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007f64:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007f66:	4b3a      	ldr	r3, [pc, #232]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8007f68:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 8007f6a:	4839      	ldr	r0, [pc, #228]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8007f6c:	f000 fab4 	bl	80084d8 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8007f70:	e066      	b.n	8008040 <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	3302      	adds	r3, #2
 8007f76:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d042      	beq.n	8008006 <SVCCTL_App_Notification+0xfa>
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d002      	beq.n	8007f8a <SVCCTL_App_Notification+0x7e>
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d016      	beq.n	8007fb6 <SVCCTL_App_Notification+0xaa>
          break;
 8007f88:	e040      	b.n	800800c <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8007f90:	4b2e      	ldr	r3, [pc, #184]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f94:	f107 020a 	add.w	r2, r7, #10
 8007f98:	f107 010b 	add.w	r1, r7, #11
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe feb6 	bl	8006d0e <hci_le_read_phy>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d12c      	bne.n	800800a <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	2b02      	cmp	r3, #2
          break;
 8007fb4:	e029      	b.n	800800a <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007fbe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7f8 ffc4 	bl	8000f50 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007fc8:	4b20      	ldr	r3, [pc, #128]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007fca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d104      	bne.n	8007fdc <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007fd2:	4b1e      	ldr	r3, [pc, #120]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007fd4:	2206      	movs	r2, #6
 8007fd6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8007fda:	e003      	b.n	8007fe4 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007fde:	2205      	movs	r2, #5
 8007fe0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007fea:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 8007fec:	4b17      	ldr	r3, [pc, #92]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007fee:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <SVCCTL_App_Notification+0x140>)
 8007ff8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8007ffc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007ffe:	4814      	ldr	r0, [pc, #80]	; (8008050 <SVCCTL_App_Notification+0x144>)
 8008000:	f000 fa6a 	bl	80084d8 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8008004:	e002      	b.n	800800c <SVCCTL_App_Notification+0x100>
          break;
 8008006:	bf00      	nop
 8008008:	e01a      	b.n	8008040 <SVCCTL_App_Notification+0x134>
          break;
 800800a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800800c:	e018      	b.n	8008040 <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	3302      	adds	r3, #2
 8008012:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	f240 4207 	movw	r2, #1031	; 0x407
 800801e:	4293      	cmp	r3, r2
 8008020:	d00a      	beq.n	8008038 <SVCCTL_App_Notification+0x12c>
 8008022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008026:	d009      	beq.n	800803c <SVCCTL_App_Notification+0x130>
 8008028:	2b04      	cmp	r3, #4
 800802a:	d000      	beq.n	800802e <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800802c:	e007      	b.n	800803e <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800802e:	2101      	movs	r1, #1
 8008030:	4808      	ldr	r0, [pc, #32]	; (8008054 <SVCCTL_App_Notification+0x148>)
 8008032:	f7fa f911 	bl	8002258 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 8008036:	e002      	b.n	800803e <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8008038:	bf00      	nop
 800803a:	e000      	b.n	800803e <SVCCTL_App_Notification+0x132>
      break;
 800803c:	bf00      	nop
      break; /* EVT_VENDOR */
 800803e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008040:	2301      	movs	r3, #1
}
 8008042:	4618      	mov	r0, r3
 8008044:	3728      	adds	r7, #40	; 0x28
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000118 	.word	0x20000118
 8008050:	20000620 	.word	0x20000620
 8008054:	48000400 	.word	0x48000400

08008058 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <Ble_Tl_Init+0x20>)
 8008060:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008062:	4b06      	ldr	r3, [pc, #24]	; (800807c <Ble_Tl_Init+0x24>)
 8008064:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008066:	463b      	mov	r3, r7
 8008068:	4619      	mov	r1, r3
 800806a:	4805      	ldr	r0, [pc, #20]	; (8008080 <Ble_Tl_Init+0x28>)
 800806c:	f7ff f96a 	bl	8007344 <hci_init>

  return;
 8008070:	bf00      	nop
}
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	200300b8 	.word	0x200300b8
 800807c:	08008473 	.word	0x08008473
 8008080:	0800843b 	.word	0x0800843b

08008084 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 8008084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008086:	b091      	sub	sp, #68	; 0x44
 8008088:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800808a:	2300      	movs	r3, #0
 800808c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800808e:	f7fe fe15 	bl	8006cbc <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8008092:	f000 f943 	bl	800831c <BleGetBdAddress>
 8008096:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	2106      	movs	r1, #6
 800809c:	2000      	movs	r0, #0
 800809e:	f7fe fcee 	bl	8006a7e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	795a      	ldrb	r2, [r3, #5]
 80080a6:	4b5e      	ldr	r3, [pc, #376]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080a8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	791a      	ldrb	r2, [r3, #4]
 80080ae:	4b5c      	ldr	r3, [pc, #368]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080b0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	78da      	ldrb	r2, [r3, #3]
 80080b6:	4b5a      	ldr	r3, [pc, #360]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080b8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	789a      	ldrb	r2, [r3, #2]
 80080be:	4b58      	ldr	r3, [pc, #352]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080c0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	785a      	ldrb	r2, [r3, #1]
 80080c6:	4b56      	ldr	r3, [pc, #344]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080c8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	4b54      	ldr	r3, [pc, #336]	; (8008220 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80080d0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80080d2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80080d6:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80080d8:	f7ff fe8c 	bl	8007df4 <LL_FLASH_GetUDN>
 80080dc:	4603      	mov	r3, r0
 80080de:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	461a      	mov	r2, r3
 80080e6:	2106      	movs	r1, #6
 80080e8:	202e      	movs	r0, #46	; 0x2e
 80080ea:	f7fe fcc8 	bl	8006a7e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80080ee:	4a4d      	ldr	r2, [pc, #308]	; (8008224 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80080f0:	2110      	movs	r1, #16
 80080f2:	2018      	movs	r0, #24
 80080f4:	f7fe fcc3 	bl	8006a7e <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80080f8:	4a4b      	ldr	r2, [pc, #300]	; (8008228 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80080fa:	2110      	movs	r1, #16
 80080fc:	2008      	movs	r0, #8
 80080fe:	f7fe fcbe 	bl	8006a7e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008102:	2118      	movs	r1, #24
 8008104:	2001      	movs	r0, #1
 8008106:	f7fe fd2a 	bl	8006b5e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800810a:	f7fe fa67 	bl	80065dc <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008112:	7ffb      	ldrb	r3, [r7, #31]
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800811a:	7ffb      	ldrb	r3, [r7, #31]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01e      	beq.n	800815e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 8008120:	4b42      	ldr	r3, [pc, #264]	; (800822c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8008122:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8008124:	f107 0216 	add.w	r2, r7, #22
 8008128:	7ff8      	ldrb	r0, [r7, #31]
 800812a:	f107 0312 	add.w	r3, r7, #18
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	f107 0314 	add.w	r3, r7, #20
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	2207      	movs	r2, #7
 800813a:	2100      	movs	r1, #0
 800813c:	f7fe f937 	bl	80063ae <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008140:	8afc      	ldrh	r4, [r7, #22]
 8008142:	8abd      	ldrh	r5, [r7, #20]
 8008144:	69b8      	ldr	r0, [r7, #24]
 8008146:	f7f8 f81b 	bl	8000180 <strlen>
 800814a:	4603      	mov	r3, r0
 800814c:	b2da      	uxtb	r2, r3
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4613      	mov	r3, r2
 8008154:	2200      	movs	r2, #0
 8008156:	4629      	mov	r1, r5
 8008158:	4620      	mov	r0, r4
 800815a:	f7fe fc02 	bl	8006962 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800815e:	8af8      	ldrh	r0, [r7, #22]
 8008160:	8a79      	ldrh	r1, [r7, #18]
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2302      	movs	r3, #2
 8008168:	2200      	movs	r2, #0
 800816a:	f7fe fbfa 	bl	8006962 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800816e:	2202      	movs	r2, #2
 8008170:	2102      	movs	r1, #2
 8008172:	2000      	movs	r0, #0
 8008174:	f7fe fe33 	bl	8006dde <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008178:	4b2d      	ldr	r3, [pc, #180]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800817a:	2201      	movs	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe f813 	bl	80061ae <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008188:	4b29      	ldr	r3, [pc, #164]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800818a:	2201      	movs	r2, #1
 800818c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800818e:	4b28      	ldr	r3, [pc, #160]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008190:	2200      	movs	r2, #0
 8008192:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8008194:	4b26      	ldr	r3, [pc, #152]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8008196:	2208      	movs	r2, #8
 8008198:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800819a:	4b25      	ldr	r3, [pc, #148]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800819c:	2210      	movs	r2, #16
 800819e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 80081a0:	4b23      	ldr	r3, [pc, #140]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 80081a6:	4b22      	ldr	r3, [pc, #136]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081a8:	4a22      	ldr	r2, [pc, #136]	; (8008234 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80081aa:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 80081ac:	4b20      	ldr	r3, [pc, #128]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081b8:	e00b      	b.n	80081d2 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80081ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081be:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081c0:	4413      	add	r3, r2
 80081c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081c6:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 80081c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081cc:	3301      	adds	r3, #1
 80081ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d9ef      	bls.n	80081ba <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081dc:	789d      	ldrb	r5, [r3, #2]
 80081de:	4b14      	ldr	r3, [pc, #80]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081e0:	785e      	ldrb	r6, [r3, #1]
 80081e2:	4b13      	ldr	r3, [pc, #76]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081e4:	7d5b      	ldrb	r3, [r3, #21]
 80081e6:	4a12      	ldr	r2, [pc, #72]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081e8:	7d92      	ldrb	r2, [r2, #22]
 80081ea:	4911      	ldr	r1, [pc, #68]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081ec:	7d09      	ldrb	r1, [r1, #20]
 80081ee:	4810      	ldr	r0, [pc, #64]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80081f0:	6980      	ldr	r0, [r0, #24]
 80081f2:	2400      	movs	r4, #0
 80081f4:	9404      	str	r4, [sp, #16]
 80081f6:	9003      	str	r0, [sp, #12]
 80081f8:	9102      	str	r1, [sp, #8]
 80081fa:	9201      	str	r2, [sp, #4]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	2300      	movs	r3, #0
 8008200:	2201      	movs	r2, #1
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	f7fe f823 	bl	8006250 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8008212:	f7fe f9ba 	bl	800658a <aci_gap_configure_whitelist>
   }
}
 8008216:	bf00      	nop
 8008218:	372c      	adds	r7, #44	; 0x2c
 800821a:	46bd      	mov	sp, r7
 800821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821e:	bf00      	nop
 8008220:	20000010 	.word	0x20000010
 8008224:	08008f4c 	.word	0x08008f4c
 8008228:	08008f5c 	.word	0x08008f5c
 800822c:	08008e9c 	.word	0x08008e9c
 8008230:	20000118 	.word	0x20000118
 8008234:	0001b207 	.word	0x0001b207

08008238 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08c      	sub	sp, #48	; 0x30
 800823c:	af08      	add	r7, sp, #32
 800823e:	4603      	mov	r3, r0
 8008240:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008242:	2342      	movs	r3, #66	; 0x42
 8008244:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d106      	bne.n	800825a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800824c:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <Adv_Request+0xc8>)
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8008252:	4b2c      	ldr	r3, [pc, #176]	; (8008304 <Adv_Request+0xcc>)
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	81bb      	strh	r3, [r7, #12]
 8008258:	e005      	b.n	8008266 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800825a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800825e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8008260:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008264:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008266:	4b28      	ldr	r3, [pc, #160]	; (8008308 <Adv_Request+0xd0>)
 8008268:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800826c:	4618      	mov	r0, r3
 800826e:	f7f8 fe6f 	bl	8000f50 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d10d      	bne.n	8008294 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8008278:	4b23      	ldr	r3, [pc, #140]	; (8008308 <Adv_Request+0xd0>)
 800827a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800827e:	2b01      	cmp	r3, #1
 8008280:	d004      	beq.n	800828c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8008282:	4b21      	ldr	r3, [pc, #132]	; (8008308 <Adv_Request+0xd0>)
 8008284:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008288:	2b02      	cmp	r3, #2
 800828a:	d103      	bne.n	8008294 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800828c:	f7fd fe81 	bl	8005f92 <aci_gap_set_non_discoverable>
 8008290:	4603      	mov	r3, r0
 8008292:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008294:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <Adv_Request+0xd0>)
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <Adv_Request+0xd0>)
 800829e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a2:	89b8      	ldrh	r0, [r7, #12]
 80082a4:	89f9      	ldrh	r1, [r7, #14]
 80082a6:	2200      	movs	r2, #0
 80082a8:	9206      	str	r2, [sp, #24]
 80082aa:	2200      	movs	r2, #0
 80082ac:	9205      	str	r2, [sp, #20]
 80082ae:	4a17      	ldr	r2, [pc, #92]	; (800830c <Adv_Request+0xd4>)
 80082b0:	9204      	str	r2, [sp, #16]
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	4b16      	ldr	r3, [pc, #88]	; (8008310 <Adv_Request+0xd8>)
 80082b6:	9302      	str	r3, [sp, #8]
 80082b8:	2306      	movs	r3, #6
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	2300      	movs	r3, #0
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2300      	movs	r3, #0
 80082c2:	4602      	mov	r2, r0
 80082c4:	2000      	movs	r0, #0
 80082c6:	f7fd fe8d 	bl	8005fe4 <aci_gap_set_discoverable>
 80082ca:	4603      	mov	r3, r0
 80082cc:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80082ce:	4911      	ldr	r1, [pc, #68]	; (8008314 <Adv_Request+0xdc>)
 80082d0:	200e      	movs	r0, #14
 80082d2:	f7fe f8f7 	bl	80064c4 <aci_gap_update_adv_data>
 80082d6:	4603      	mov	r3, r0
 80082d8:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d107      	bne.n	80082f6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <Adv_Request+0xd0>)
 80082e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80082ec:	490a      	ldr	r1, [pc, #40]	; (8008318 <Adv_Request+0xe0>)
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f8 feb8 	bl	8001064 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
}
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200001ac 	.word	0x200001ac
 8008304:	200001ae 	.word	0x200001ae
 8008308:	20000118 	.word	0x20000118
 800830c:	20000141 	.word	0x20000141
 8008310:	08008f6c 	.word	0x08008f6c
 8008314:	20000010 	.word	0x20000010
 8008318:	0001e046 	.word	0x0001e046

0800831c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008322:	f7ff fd67 	bl	8007df4 <LL_FLASH_GetUDN>
 8008326:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d023      	beq.n	8008378 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008330:	f7ff fd78 	bl	8007e24 <LL_FLASH_GetSTCompanyID>
 8008334:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008336:	f7ff fd69 	bl	8007e0c <LL_FLASH_GetDeviceID>
 800833a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	4b16      	ldr	r3, [pc, #88]	; (800839c <BleGetBdAddress+0x80>)
 8008342:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	b2da      	uxtb	r2, r3
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <BleGetBdAddress+0x80>)
 800834c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	b2da      	uxtb	r2, r3
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <BleGetBdAddress+0x80>)
 8008356:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	b2da      	uxtb	r2, r3
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <BleGetBdAddress+0x80>)
 800835e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <BleGetBdAddress+0x80>)
 8008366:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	0a1b      	lsrs	r3, r3, #8
 800836c:	b2da      	uxtb	r2, r3
 800836e:	4b0b      	ldr	r3, [pc, #44]	; (800839c <BleGetBdAddress+0x80>)
 8008370:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <BleGetBdAddress+0x80>)
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	e00b      	b.n	8008390 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008378:	2000      	movs	r0, #0
 800837a:	f7ff fc5f 	bl	8007c3c <OTP_Read>
 800837e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	e001      	b.n	8008390 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <BleGetBdAddress+0x84>)
 800838e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8008390:	697b      	ldr	r3, [r7, #20]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000244 	.word	0x20000244
 80083a0:	08008f44 	.word	0x08008f44

080083a4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <Adv_Cancel+0x30>)
 80083ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	d00a      	beq.n	80083ca <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80083b4:	2300      	movs	r3, #0
 80083b6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80083b8:	f7fd fdeb 	bl	8005f92 <aci_gap_set_non_discoverable>
 80083bc:	4603      	mov	r3, r0
 80083be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <Adv_Cancel+0x30>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
}
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000118 	.word	0x20000118

080083d8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80083dc:	2100      	movs	r1, #0
 80083de:	2001      	movs	r0, #1
 80083e0:	f000 fbe2 	bl	8008ba8 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80083e4:	bf00      	nop
}
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80083fe:	2100      	movs	r1, #0
 8008400:	2004      	movs	r0, #4
 8008402:	f000 fbd1 	bl	8008ba8 <UTIL_SEQ_SetTask>
  return;
 8008406:	bf00      	nop
}
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008416:	2001      	movs	r0, #1
 8008418:	f000 fc2c 	bl	8008c74 <UTIL_SEQ_SetEvt>
  return;
 800841c:	bf00      	nop
}
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800842c:	2001      	movs	r0, #1
 800842e:	f000 fc3f 	bl	8008cb0 <UTIL_SEQ_WaitEvt>
  return;
 8008432:	bf00      	nop
}
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	3308      	adds	r3, #8
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe ff0f 	bl	8007270 <SVCCTL_UserEvtRx>
 8008452:	4603      	mov	r3, r0
 8008454:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008462:	e002      	b.n	800846a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	701a      	strb	r2, [r3, #0]
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	4603      	mov	r3, r0
 800847a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <BLE_StatusNot+0x16>
 8008482:	2b01      	cmp	r3, #1
 8008484:	d006      	beq.n	8008494 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008486:	e00b      	b.n	80084a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008488:	2307      	movs	r3, #7
 800848a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fbb5 	bl	8008bfc <UTIL_SEQ_PauseTask>
      break;
 8008492:	e005      	b.n	80084a0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008494:	2307      	movs	r3, #7
 8008496:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fbcd 	bl	8008c38 <UTIL_SEQ_ResumeTask>
      break;
 800849e:	bf00      	nop
  }
  return;
 80084a0:	bf00      	nop
}
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d004      	beq.n	80084c2 <P2PS_STM_App_Notification+0x1a>
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d004      	beq.n	80084c6 <P2PS_STM_App_Notification+0x1e>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80084c0:	e004      	b.n	80084cc <P2PS_STM_App_Notification+0x24>
      break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <P2PS_STM_App_Notification+0x24>
      break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <P2PS_STM_App_Notification+0x24>
      break;
 80084ca:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80084cc:	bf00      	nop
}
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <P2PS_APP_Notification+0x16>
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d002      	beq.n	80084f2 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80084ec:	e002      	b.n	80084f4 <P2PS_APP_Notification+0x1c>
    break;
 80084ee:	bf00      	nop
 80084f0:	e000      	b.n	80084f4 <P2PS_APP_Notification+0x1c>
    break;
 80084f2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80084f4:	bf00      	nop
}
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8008504:	bf00      	nop
}
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <LL_PWR_EnableBootC2+0x1c>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	4a04      	ldr	r2, [pc, #16]	; (800852c <LL_PWR_EnableBootC2+0x1c>)
 800851a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851e:	60d3      	str	r3, [r2, #12]
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	58000400 	.word	0x58000400

08008530 <LL_AHB3_GRP1_EnableClock>:
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800853e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4313      	orrs	r3, r2
 8008546:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800854c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4013      	ands	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f043 0201 	orr.w	r2, r3, #1
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	43db      	mvns	r3, r3
 80085b6:	401a      	ands	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	605a      	str	r2, [r3, #4]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	041b      	lsls	r3, r3, #16
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	605a      	str	r2, [r3, #4]
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	401a      	ands	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	041a      	lsls	r2, r3, #16
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	609a      	str	r2, [r3, #8]
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	4013      	ands	r3, r2
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d101      	bne.n	8008666 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69da      	ldr	r2, [r3, #28]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	4013      	ands	r3, r2
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d101      	bne.n	8008690 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80086a4:	2102      	movs	r1, #2
 80086a6:	4819      	ldr	r0, [pc, #100]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086a8:	f7ff ffe4 	bl	8008674 <LL_C2_IPCC_IsActiveFlag_CHx>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HW_IPCC_Rx_Handler+0x26>
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	43db      	mvns	r3, r3
 80086b8:	f003 0302 	and.w	r3, r3, #2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80086c0:	f000 f8de 	bl	8008880 <HW_IPCC_SYS_EvtHandler>
 80086c4:	e01f      	b.n	8008706 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80086c6:	2101      	movs	r1, #1
 80086c8:	4810      	ldr	r0, [pc, #64]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086ca:	f7ff ffd3 	bl	8008674 <LL_C2_IPCC_IsActiveFlag_CHx>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HW_IPCC_Rx_Handler+0x46>
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80086e0:	f000 f892 	bl	8008808 <HW_IPCC_BLE_EvtHandler>
 80086e4:	e00f      	b.n	8008706 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80086e6:	2108      	movs	r1, #8
 80086e8:	4808      	ldr	r0, [pc, #32]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086ea:	f7ff ffc3 	bl	8008674 <LL_C2_IPCC_IsActiveFlag_CHx>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HW_IPCC_Rx_Handler+0x68>
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <HW_IPCC_Rx_Handler+0x6c>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	43db      	mvns	r3, r3
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008702:	f000 f909 	bl	8008918 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008706:	bf00      	nop
 8008708:	bf00      	nop
}
 800870a:	bd80      	pop	{r7, pc}
 800870c:	58000c00 	.word	0x58000c00

08008710 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008714:	2102      	movs	r1, #2
 8008716:	4822      	ldr	r0, [pc, #136]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 8008718:	f7ff ff97 	bl	800864a <LL_C1_IPCC_IsActiveFlag_CHx>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <HW_IPCC_Tx_Handler+0x26>
 8008722:	4b1f      	ldr	r3, [pc, #124]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	43db      	mvns	r3, r3
 8008728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008730:	f000 f89a 	bl	8008868 <HW_IPCC_SYS_CmdEvtHandler>
 8008734:	e031      	b.n	800879a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008736:	2102      	movs	r1, #2
 8008738:	4819      	ldr	r0, [pc, #100]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 800873a:	f7ff ff86 	bl	800864a <LL_C1_IPCC_IsActiveFlag_CHx>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <HW_IPCC_Tx_Handler+0x48>
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	43db      	mvns	r3, r3
 800874a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008752:	f000 f889 	bl	8008868 <HW_IPCC_SYS_CmdEvtHandler>
 8008756:	e020      	b.n	800879a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008758:	2108      	movs	r1, #8
 800875a:	4811      	ldr	r0, [pc, #68]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 800875c:	f7ff ff75 	bl	800864a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <HW_IPCC_Tx_Handler+0x6a>
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	43db      	mvns	r3, r3
 800876c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008774:	f000 f8b2 	bl	80088dc <HW_IPCC_MM_FreeBufHandler>
 8008778:	e00f      	b.n	800879a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800877a:	2120      	movs	r1, #32
 800877c:	4808      	ldr	r0, [pc, #32]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 800877e:	f7ff ff64 	bl	800864a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HW_IPCC_Tx_Handler+0x8c>
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HW_IPCC_Tx_Handler+0x90>)
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	43db      	mvns	r3, r3
 800878e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008796:	f000 f843 	bl	8008820 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800879a:	bf00      	nop
 800879c:	bf00      	nop
}
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58000c00 	.word	0x58000c00

080087a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80087a8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80087aa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80087ac:	f7ff feb0 	bl	8008510 <LL_PWR_EnableBootC2>

  return;
 80087b0:	bf00      	nop
}
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80087b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087bc:	f7ff feb8 	bl	8008530 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80087c0:	4806      	ldr	r0, [pc, #24]	; (80087dc <HW_IPCC_Init+0x28>)
 80087c2:	f7ff fede 	bl	8008582 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80087c6:	4805      	ldr	r0, [pc, #20]	; (80087dc <HW_IPCC_Init+0x28>)
 80087c8:	f7ff fecb 	bl	8008562 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80087cc:	202c      	movs	r0, #44	; 0x2c
 80087ce:	f7f9 fb18 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80087d2:	202d      	movs	r0, #45	; 0x2d
 80087d4:	f7f9 fb15 	bl	8001e02 <HAL_NVIC_EnableIRQ>

  return;
 80087d8:	bf00      	nop
}
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	58000c00 	.word	0x58000c00

080087e0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80087e4:	2101      	movs	r1, #1
 80087e6:	4802      	ldr	r0, [pc, #8]	; (80087f0 <HW_IPCC_BLE_Init+0x10>)
 80087e8:	f7ff ff00 	bl	80085ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80087ec:	bf00      	nop
}
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	58000c00 	.word	0x58000c00

080087f4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80087f8:	2101      	movs	r1, #1
 80087fa:	4802      	ldr	r0, [pc, #8]	; (8008804 <HW_IPCC_BLE_SendCmd+0x10>)
 80087fc:	f7ff ff16 	bl	800862c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008800:	bf00      	nop
}
 8008802:	bd80      	pop	{r7, pc}
 8008804:	58000c00 	.word	0x58000c00

08008808 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800880c:	f7ff f8e0 	bl	80079d0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008810:	2101      	movs	r1, #1
 8008812:	4802      	ldr	r0, [pc, #8]	; (800881c <HW_IPCC_BLE_EvtHandler+0x14>)
 8008814:	f7ff fefc 	bl	8008610 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008818:	bf00      	nop
}
 800881a:	bd80      	pop	{r7, pc}
 800881c:	58000c00 	.word	0x58000c00

08008820 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008824:	2120      	movs	r1, #32
 8008826:	4803      	ldr	r0, [pc, #12]	; (8008834 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008828:	f7ff fece 	bl	80085c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800882c:	f7ff f8ec 	bl	8007a08 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008830:	bf00      	nop
}
 8008832:	bd80      	pop	{r7, pc}
 8008834:	58000c00 	.word	0x58000c00

08008838 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800883c:	2102      	movs	r1, #2
 800883e:	4802      	ldr	r0, [pc, #8]	; (8008848 <HW_IPCC_SYS_Init+0x10>)
 8008840:	f7ff fed4 	bl	80085ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008844:	bf00      	nop
}
 8008846:	bd80      	pop	{r7, pc}
 8008848:	58000c00 	.word	0x58000c00

0800884c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008850:	2102      	movs	r1, #2
 8008852:	4804      	ldr	r0, [pc, #16]	; (8008864 <HW_IPCC_SYS_SendCmd+0x18>)
 8008854:	f7ff feea 	bl	800862c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008858:	2102      	movs	r1, #2
 800885a:	4802      	ldr	r0, [pc, #8]	; (8008864 <HW_IPCC_SYS_SendCmd+0x18>)
 800885c:	f7ff fea1 	bl	80085a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008860:	bf00      	nop
}
 8008862:	bd80      	pop	{r7, pc}
 8008864:	58000c00 	.word	0x58000c00

08008868 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800886c:	2102      	movs	r1, #2
 800886e:	4803      	ldr	r0, [pc, #12]	; (800887c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008870:	f7ff feaa 	bl	80085c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008874:	f7ff f910 	bl	8007a98 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008878:	bf00      	nop
}
 800887a:	bd80      	pop	{r7, pc}
 800887c:	58000c00 	.word	0x58000c00

08008880 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008884:	f7ff f918 	bl	8007ab8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008888:	2102      	movs	r1, #2
 800888a:	4802      	ldr	r0, [pc, #8]	; (8008894 <HW_IPCC_SYS_EvtHandler+0x14>)
 800888c:	f7ff fec0 	bl	8008610 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008890:	bf00      	nop
}
 8008892:	bd80      	pop	{r7, pc}
 8008894:	58000c00 	.word	0x58000c00

08008898 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80088a0:	2108      	movs	r1, #8
 80088a2:	480c      	ldr	r0, [pc, #48]	; (80088d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80088a4:	f7ff fed1 	bl	800864a <LL_C1_IPCC_IsActiveFlag_CHx>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80088ae:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088b4:	2108      	movs	r1, #8
 80088b6:	4807      	ldr	r0, [pc, #28]	; (80088d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80088b8:	f7ff fe73 	bl	80085a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80088bc:	e006      	b.n	80088cc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088c2:	2108      	movs	r1, #8
 80088c4:	4803      	ldr	r0, [pc, #12]	; (80088d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80088c6:	f7ff feb1 	bl	800862c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80088ca:	bf00      	nop
}
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	58000c00 	.word	0x58000c00
 80088d8:	2000024c 	.word	0x2000024c

080088dc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088e0:	2108      	movs	r1, #8
 80088e2:	4806      	ldr	r0, [pc, #24]	; (80088fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80088e4:	f7ff fe70 	bl	80085c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088ee:	2108      	movs	r1, #8
 80088f0:	4802      	ldr	r0, [pc, #8]	; (80088fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80088f2:	f7ff fe9b 	bl	800862c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80088f6:	bf00      	nop
}
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	58000c00 	.word	0x58000c00
 8008900:	2000024c 	.word	0x2000024c

08008904 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008908:	2108      	movs	r1, #8
 800890a:	4802      	ldr	r0, [pc, #8]	; (8008914 <HW_IPCC_TRACES_Init+0x10>)
 800890c:	f7ff fe6e 	bl	80085ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008910:	bf00      	nop
}
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58000c00 	.word	0x58000c00

08008918 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800891c:	f7ff f96a 	bl	8007bf4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008920:	2108      	movs	r1, #8
 8008922:	4802      	ldr	r0, [pc, #8]	; (800892c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008924:	f7ff fe74 	bl	8008610 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008928:	bf00      	nop
}
 800892a:	bd80      	pop	{r7, pc}
 800892c:	58000c00 	.word	0x58000c00

08008930 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <UTIL_LPM_Init+0x1c>)
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <UTIL_LPM_Init+0x20>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008940:	bf00      	nop
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000250 	.word	0x20000250
 8008950:	20000254 	.word	0x20000254

08008954 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008960:	f3ef 8310 	mrs	r3, PRIMASK
 8008964:	613b      	str	r3, [r7, #16]
  return(result);
 8008966:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800896a:	b672      	cpsid	i
  
  switch(state)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <UTIL_LPM_SetOffMode+0x32>
 8008972:	2b01      	cmp	r3, #1
 8008974:	d000      	beq.n	8008978 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8008976:	e00e      	b.n	8008996 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <UTIL_LPM_SetOffMode+0x58>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4313      	orrs	r3, r2
 8008980:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <UTIL_LPM_SetOffMode+0x58>)
 8008982:	6013      	str	r3, [r2, #0]
      break;
 8008984:	e007      	b.n	8008996 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	43da      	mvns	r2, r3
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <UTIL_LPM_SetOffMode+0x58>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4013      	ands	r3, r2
 8008990:	4a06      	ldr	r2, [pc, #24]	; (80089ac <UTIL_LPM_SetOffMode+0x58>)
 8008992:	6013      	str	r3, [r2, #0]
      break;
 8008994:	bf00      	nop
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	20000254 	.word	0x20000254

080089b0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08c      	sub	sp, #48	; 0x30
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80089b8:	4b63      	ldr	r3, [pc, #396]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 80089be:	4b62      	ldr	r3, [pc, #392]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4013      	ands	r3, r2
 80089c6:	4a60      	ldr	r2, [pc, #384]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 80089c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80089ca:	e082      	b.n	8008ad2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80089d0:	e002      	b.n	80089d8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	3301      	adds	r3, #1
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80089d8:	4a5c      	ldr	r2, [pc, #368]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089e0:	4b5b      	ldr	r3, [pc, #364]	; (8008b50 <UTIL_SEQ_Run+0x1a0>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	401a      	ands	r2, r3
 80089e6:	4b58      	ldr	r3, [pc, #352]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f0      	beq.n	80089d2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80089f0:	4a56      	ldr	r2, [pc, #344]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089f8:	4b55      	ldr	r3, [pc, #340]	; (8008b50 <UTIL_SEQ_Run+0x1a0>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	401a      	ands	r2, r3
 80089fe:	4b52      	ldr	r3, [pc, #328]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4013      	ands	r3, r2
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8008a06:	4a51      	ldr	r2, [pc, #324]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008a18:	4a4c      	ldr	r2, [pc, #304]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4413      	add	r3, r2
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8008a26:	4a49      	ldr	r2, [pc, #292]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	4013      	ands	r3, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f97d 	bl	8008d34 <bit_position>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b45      	ldr	r3, [pc, #276]	; (8008b54 <UTIL_SEQ_Run+0x1a4>)
 8008a3e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8008a40:	4a42      	ldr	r2, [pc, #264]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4413      	add	r3, r2
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4a42      	ldr	r2, [pc, #264]	; (8008b54 <UTIL_SEQ_Run+0x1a4>)
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	2101      	movs	r1, #1
 8008a50:	fa01 f202 	lsl.w	r2, r1, r2
 8008a54:	43d2      	mvns	r2, r2
 8008a56:	401a      	ands	r2, r3
 8008a58:	493c      	ldr	r1, [pc, #240]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	440b      	add	r3, r1
 8008a60:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a62:	f3ef 8310 	mrs	r3, PRIMASK
 8008a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a68:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008a6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a6c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8008a6e:	4b39      	ldr	r3, [pc, #228]	; (8008b54 <UTIL_SEQ_Run+0x1a4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2201      	movs	r2, #1
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <UTIL_SEQ_Run+0x1a8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4013      	ands	r3, r2
 8008a82:	4a35      	ldr	r2, [pc, #212]	; (8008b58 <UTIL_SEQ_Run+0x1a8>)
 8008a84:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8008a86:	2302      	movs	r3, #2
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8a:	e014      	b.n	8008ab6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	4a2e      	ldr	r2, [pc, #184]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008a92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008a96:	4b2f      	ldr	r3, [pc, #188]	; (8008b54 <UTIL_SEQ_Run+0x1a4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa0:	43db      	mvns	r3, r3
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	400a      	ands	r2, r1
 8008aaa:	4928      	ldr	r1, [pc, #160]	; (8008b4c <UTIL_SEQ_Run+0x19c>)
 8008aac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e7      	bne.n	8008a8c <UTIL_SEQ_Run+0xdc>
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008ac6:	4b23      	ldr	r3, [pc, #140]	; (8008b54 <UTIL_SEQ_Run+0x1a4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a24      	ldr	r2, [pc, #144]	; (8008b5c <UTIL_SEQ_Run+0x1ac>)
 8008acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8008ad2:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <UTIL_SEQ_Run+0x1a8>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b1e      	ldr	r3, [pc, #120]	; (8008b50 <UTIL_SEQ_Run+0x1a0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	401a      	ands	r2, r3
 8008adc:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <UTIL_SEQ_Run+0x146>
 8008ae6:	4b1e      	ldr	r3, [pc, #120]	; (8008b60 <UTIL_SEQ_Run+0x1b0>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <UTIL_SEQ_Run+0x1b4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f43f af6b 	beq.w	80089cc <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8008af6:	f000 f90f 	bl	8008d18 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008afa:	f3ef 8310 	mrs	r3, PRIMASK
 8008afe:	613b      	str	r3, [r7, #16]
  return(result);
 8008b00:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b04:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <UTIL_SEQ_Run+0x1a8>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <UTIL_SEQ_Run+0x1a0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	401a      	ands	r2, r3
 8008b10:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <UTIL_SEQ_Run+0x17c>
 8008b1a:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <UTIL_SEQ_Run+0x1b0>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <UTIL_SEQ_Run+0x1b4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8008b28:	f7f7 fd2f 	bl	800058a <UTIL_SEQ_Idle>
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8008b36:	f000 f8f6 	bl	8008d26 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008b3a:	4a03      	ldr	r2, [pc, #12]	; (8008b48 <UTIL_SEQ_Run+0x198>)
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	6013      	str	r3, [r2, #0]

  return;
 8008b40:	bf00      	nop
}
 8008b42:	3730      	adds	r7, #48	; 0x30
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000024 	.word	0x20000024
 8008b4c:	200002e8 	.word	0x200002e8
 8008b50:	20000020 	.word	0x20000020
 8008b54:	20000264 	.word	0x20000264
 8008b58:	20000258 	.word	0x20000258
 8008b5c:	20000268 	.word	0x20000268
 8008b60:	2000025c 	.word	0x2000025c
 8008b64:	20000260 	.word	0x20000260

08008b68 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b74:	f3ef 8310 	mrs	r3, PRIMASK
 8008b78:	617b      	str	r3, [r7, #20]
  return(result);
 8008b7a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008b7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b7e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f8d7 	bl	8008d34 <bit_position>
 8008b86:	4601      	mov	r1, r0
 8008b88:	4a06      	ldr	r2, [pc, #24]	; (8008ba4 <UTIL_SEQ_RegTask+0x3c>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008b9a:	bf00      	nop
}
 8008b9c:	3720      	adds	r7, #32
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000268 	.word	0x20000268

08008ba8 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bbc:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <UTIL_SEQ_SetTask+0x4c>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	4a0b      	ldr	r2, [pc, #44]	; (8008bf4 <UTIL_SEQ_SetTask+0x4c>)
 8008bc8:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8008bca:	4a0b      	ldr	r2, [pc, #44]	; (8008bf8 <UTIL_SEQ_SetTask+0x50>)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	4908      	ldr	r1, [pc, #32]	; (8008bf8 <UTIL_SEQ_SetTask+0x50>)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008be8:	bf00      	nop
}
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20000258 	.word	0x20000258
 8008bf8:	200002e8 	.word	0x200002e8

08008bfc <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c04:	f3ef 8310 	mrs	r3, PRIMASK
 8008c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c0e:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	43da      	mvns	r2, r3
 8008c14:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <UTIL_SEQ_PauseTask+0x38>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	4a06      	ldr	r2, [pc, #24]	; (8008c34 <UTIL_SEQ_PauseTask+0x38>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c28:	bf00      	nop
}
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	20000020 	.word	0x20000020

08008c38 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c40:	f3ef 8310 	mrs	r3, PRIMASK
 8008c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c4a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8008c4c:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <UTIL_SEQ_ResumeTask+0x38>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	4a06      	ldr	r2, [pc, #24]	; (8008c70 <UTIL_SEQ_ResumeTask+0x38>)
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c62:	bf00      	nop
}
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20000020 	.word	0x20000020

08008c74 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c82:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c86:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <UTIL_SEQ_SetEvt+0x38>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	4a06      	ldr	r2, [pc, #24]	; (8008cac <UTIL_SEQ_SetEvt+0x38>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c9e:	bf00      	nop
}
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	2000025c 	.word	0x2000025c

08008cb0 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <UTIL_SEQ_WaitEvt+0x5c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008cc4:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8008cca:	4a11      	ldr	r2, [pc, #68]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8008cd0:	e005      	b.n	8008cde <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7f7 fc5d 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <UTIL_SEQ_WaitEvt+0x64>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0f2      	beq.n	8008cd2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	43da      	mvns	r2, r3
 8008cf2:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <UTIL_SEQ_WaitEvt+0x64>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	4a06      	ldr	r2, [pc, #24]	; (8008d14 <UTIL_SEQ_WaitEvt+0x64>)
 8008cfa:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008cfc:	4a04      	ldr	r2, [pc, #16]	; (8008d10 <UTIL_SEQ_WaitEvt+0x60>)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6013      	str	r3, [r2, #0]

  return;
 8008d02:	bf00      	nop
}
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000264 	.word	0x20000264
 8008d10:	20000260 	.word	0x20000260
 8008d14:	2000025c 	.word	0x2000025c

08008d18 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d1c:	bf00      	nop
}
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008d26:	b480      	push	{r7}
 8008d28:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d2a:	bf00      	nop
}
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	0c1b      	lsrs	r3, r3, #16
 8008d44:	041b      	lsls	r3, r3, #16
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <bit_position+0x20>
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	041b      	lsls	r3, r3, #16
 8008d52:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <bit_position+0x36>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3308      	adds	r3, #8
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <bit_position+0x4c>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3304      	adds	r3, #4
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	0f1b      	lsrs	r3, r3, #28
 8008d84:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <bit_position+0x70>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f1c3 031f 	rsb	r3, r3, #31
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	08008f74 	.word	0x08008f74

08008da8 <__libc_init_array>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	4e0d      	ldr	r6, [pc, #52]	; (8008de0 <__libc_init_array+0x38>)
 8008dac:	4c0d      	ldr	r4, [pc, #52]	; (8008de4 <__libc_init_array+0x3c>)
 8008dae:	1ba4      	subs	r4, r4, r6
 8008db0:	10a4      	asrs	r4, r4, #2
 8008db2:	2500      	movs	r5, #0
 8008db4:	42a5      	cmp	r5, r4
 8008db6:	d109      	bne.n	8008dcc <__libc_init_array+0x24>
 8008db8:	4e0b      	ldr	r6, [pc, #44]	; (8008de8 <__libc_init_array+0x40>)
 8008dba:	4c0c      	ldr	r4, [pc, #48]	; (8008dec <__libc_init_array+0x44>)
 8008dbc:	f000 f82c 	bl	8008e18 <_init>
 8008dc0:	1ba4      	subs	r4, r4, r6
 8008dc2:	10a4      	asrs	r4, r4, #2
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	42a5      	cmp	r5, r4
 8008dc8:	d105      	bne.n	8008dd6 <__libc_init_array+0x2e>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dd0:	4798      	blx	r3
 8008dd2:	3501      	adds	r5, #1
 8008dd4:	e7ee      	b.n	8008db4 <__libc_init_array+0xc>
 8008dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dda:	4798      	blx	r3
 8008ddc:	3501      	adds	r5, #1
 8008dde:	e7f2      	b.n	8008dc6 <__libc_init_array+0x1e>
 8008de0:	08008f8c 	.word	0x08008f8c
 8008de4:	08008f8c 	.word	0x08008f8c
 8008de8:	08008f8c 	.word	0x08008f8c
 8008dec:	08008f90 	.word	0x08008f90

08008df0 <memcpy>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	440a      	add	r2, r1
 8008df6:	4291      	cmp	r1, r2
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	bd10      	pop	{r4, pc}
 8008dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e04:	e7f7      	b.n	8008df6 <memcpy+0x6>

08008e06 <memset>:
 8008e06:	4402      	add	r2, r0
 8008e08:	4603      	mov	r3, r0
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d100      	bne.n	8008e10 <memset+0xa>
 8008e0e:	4770      	bx	lr
 8008e10:	f803 1b01 	strb.w	r1, [r3], #1
 8008e14:	e7f9      	b.n	8008e0a <memset+0x4>
	...

08008e18 <_init>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr

08008e24 <_fini>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr
