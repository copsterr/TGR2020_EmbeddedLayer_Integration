
tgr2020_handson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcc0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800de00  0800de00  0001de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df54  0800df54  0001df54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800df60  0800df60  0001df60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000170  20000004  0800df64  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000174  0800e0d4  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000045  20000210  0800e16d  00020210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000258  0800e1b2  00020258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000aa  2000026c  0800e1c3  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003d4  20000318  0800e26d  00020318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006ec  0800e26d  000206ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020316  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   00053998  00000000  00000000  00020346  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000076c4  00000000  00000000  00073cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003d98  00000000  00000000  0007b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003a50  00000000  00000000  0007f140  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e879  00000000  00000000  00082b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002c09d  00000000  00000000  000b1409  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001076de  00000000  00000000  000dd4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e4b84  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010618  00000000  00000000  001e4c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000318 	.word	0x20000318
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dde8 	.word	0x0800dde8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000031c 	.word	0x2000031c
 800017c:	0800dde8 	.word	0x0800dde8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80a 	bl	80004d4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4903      	ldr	r1, [pc, #12]	; (80004d0 <APPE_Init+0x18>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbe 	bl	8000e44 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004c8:	f000 f80e 	bl	80004e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000628 	.word	0x20000628

080004d4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004dc:	f7ff ffd8 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e0:	f00d fa0e 	bl	800d900 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ee:	f00c f915 	bl	800c71c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <appe_Tl_Init+0x50>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	2020      	movs	r0, #32
 80004f8:	f00d fb1e 	bl	800db38 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <appe_Tl_Init+0x54>)
 80004fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <appe_Tl_Init+0x58>)
 8000502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <appe_Tl_Init+0x5c>)
 800050a:	f00b ffd1 	bl	800c4b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x60>)
 8000510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <appe_Tl_Init+0x64>)
 8000514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x68>)
 8000518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800051a:	f240 533c 	movw	r3, #1340	; 0x53c
 800051e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f00c fa07 	bl	800c938 <TL_MM_Init>

  TL_Enable();
 800052a:	f00c f8f1 	bl	800c710 <TL_Enable>

  return;
 800052e:	bf00      	nop
}
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	0800c4e9 	.word	0x0800c4e9
 800053c:	20030700 	.word	0x20030700
 8000540:	08000555 	.word	0x08000555
 8000544:	0800056b 	.word	0x0800056b
 8000548:	20030918 	.word	0x20030918
 800054c:	2003080c 	.word	0x2003080c
 8000550:	200301c4 	.word	0x200301c4

08000554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800055e:	bf00      	nop
}
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000572:	f00c fa51 	bl	800ca18 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000576:	f00c fb85 	bl	800cc84 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f00d f9d1 	bl	800d924 <UTIL_LPM_SetOffMode>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800058e:	bf00      	nop
}
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a2:	f04f 30ff 	mov.w	r0, #4294967295
 80005a6:	f00d f9eb 	bl	800d980 <UTIL_SEQ_Run>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2020      	movs	r0, #32
 80005be:	f00d fadb 	bl	800db78 <UTIL_SEQ_SetTask>
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d2:	2002      	movs	r0, #2
 80005d4:	f00d fb36 	bl	800dc44 <UTIL_SEQ_SetEvt>
  return;
 80005d8:	bf00      	nop
}
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005e8:	2002      	movs	r0, #2
 80005ea:	f00d fb49 	bl	800dc80 <UTIL_SEQ_WaitEvt>
  return;
 80005ee:	bf00      	nop
}
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <LL_EXTI_EnableIT_0_31+0x24>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	58000800 	.word	0x58000800

08000620 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]

}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	58000800 	.word	0x58000800

08000644 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <ReadRtcSsrValue+0x3c>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800065a:	e005      	b.n	8000668 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <ReadRtcSsrValue+0x3c>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	b29b      	uxth	r3, r3
 8000666:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1f5      	bne.n	800065c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000670:	683b      	ldr	r3, [r7, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40002800 	.word	0x40002800

08000684 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	491d      	ldr	r1, [pc, #116]	; (800070c <LinkTimerAfter+0x88>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	440b      	add	r3, r1
 80006a2:	3315      	adds	r3, #21
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d009      	beq.n	80006c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ae:	7bfa      	ldrb	r2, [r7, #15]
 80006b0:	4916      	ldr	r1, [pc, #88]	; (800070c <LinkTimerAfter+0x88>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3314      	adds	r3, #20
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <LinkTimerAfter+0x88>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3315      	adds	r3, #21
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <LinkTimerAfter+0x88>)
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	440b      	add	r3, r1
 80006e4:	3314      	adds	r3, #20
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3315      	adds	r3, #21
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]

  return;
 80006fe:	bf00      	nop
}
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000174 	.word	0x20000174

08000710 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <LinkTimerBefore+0xb8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	429a      	cmp	r2, r3
 800072a:	d032      	beq.n	8000792 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	4927      	ldr	r1, [pc, #156]	; (80007cc <LinkTimerBefore+0xbc>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3314      	adds	r3, #20
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000740:	7bfa      	ldrb	r2, [r7, #15]
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <LinkTimerBefore+0xbc>)
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	3315      	adds	r3, #21
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <LinkTimerBefore+0xbc>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4913      	ldr	r1, [pc, #76]	; (80007cc <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3314      	adds	r3, #20
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000790:	e014      	b.n	80007bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <LinkTimerBefore+0xbc>)
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	3315      	adds	r3, #21
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <LinkTimerBefore+0xbc>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	79fa      	ldrb	r2, [r7, #7]
 80007b8:	701a      	strb	r2, [r3, #0]
  return;
 80007ba:	bf00      	nop
}
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000204 	.word	0x20000204
 80007cc:	20000174 	.word	0x20000174

080007d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <linkTimer+0x144>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d118      	bne.n	8000816 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <linkTimer+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <linkTimer+0x148>)
 80007ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <linkTimer+0x144>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4949      	ldr	r1, [pc, #292]	; (800091c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	2206      	movs	r2, #6
 8000806:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <linkTimer+0x150>)
 800080a:	f04f 32ff 	mov.w	r2, #4294967295
 800080e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e078      	b.n	8000908 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000816:	f000 f909 	bl	8000a2c <ReturnTimeElapsed>
 800081a:	4603      	mov	r3, r0
 800081c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	493e      	ldr	r1, [pc, #248]	; (800091c <linkTimer+0x14c>)
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	440b      	add	r3, r1
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4419      	add	r1, r3
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <linkTimer+0x14c>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4403      	add	r3, r0
 8000842:	3308      	adds	r3, #8
 8000844:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	4934      	ldr	r1, [pc, #208]	; (800091c <linkTimer+0x14c>)
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	440b      	add	r3, r1
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <linkTimer+0x144>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <linkTimer+0x14c>)
 8000864:	460b      	mov	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	429a      	cmp	r2, r3
 8000876:	d337      	bcc.n	80008e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000892:	e013      	b.n	80008bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	4921      	ldr	r1, [pc, #132]	; (800091c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	3315      	adds	r3, #21
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008a8:	7b7a      	ldrb	r2, [r7, #13]
 80008aa:	491c      	ldr	r1, [pc, #112]	; (800091c <linkTimer+0x14c>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	3315      	adds	r3, #21
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008bc:	7b3b      	ldrb	r3, [r7, #12]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d00b      	beq.n	80008da <linkTimer+0x10a>
 80008c2:	7b3a      	ldrb	r2, [r7, #12]
 80008c4:	4915      	ldr	r1, [pc, #84]	; (800091c <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d2dc      	bcs.n	8000894 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008da:	7b7a      	ldrb	r2, [r7, #13]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fecf 	bl	8000684 <LinkTimerAfter>
 80008e6:	e00f      	b.n	8000908 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff0c 	bl	8000710 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <linkTimer+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <linkTimer+0x148>)
 8000900:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <linkTimer+0x144>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000908:	89fb      	ldrh	r3, [r7, #14]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000204 	.word	0x20000204
 8000918:	20000205 	.word	0x20000205
 800091c:	20000174 	.word	0x20000174
 8000920:	20000208 	.word	0x20000208

08000924 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <UnlinkTimer+0xf8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	429a      	cmp	r2, r3
 800093e:	d111      	bne.n	8000964 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <UnlinkTimer+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <UnlinkTimer+0xfc>)
 8000948:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4935      	ldr	r1, [pc, #212]	; (8000a24 <UnlinkTimer+0x100>)
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3315      	adds	r3, #21
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <UnlinkTimer+0xf8>)
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03e      	b.n	80009e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	492f      	ldr	r1, [pc, #188]	; (8000a24 <UnlinkTimer+0x100>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	3314      	adds	r3, #20
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	492a      	ldr	r1, [pc, #168]	; (8000a24 <UnlinkTimer+0x100>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <UnlinkTimer+0x100>)
 8000992:	460b      	mov	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	440b      	add	r3, r1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4403      	add	r3, r0
 800099c:	3315      	adds	r3, #21
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4920      	ldr	r1, [pc, #128]	; (8000a24 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	4602      	mov	r2, r0
 80009b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d013      	beq.n	80009e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009ba:	79f9      	ldrb	r1, [r7, #7]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <UnlinkTimer+0x100>)
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4403      	add	r3, r0
 80009ca:	3314      	adds	r3, #20
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <UnlinkTimer+0x100>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3314      	adds	r3, #20
 80009de:	4602      	mov	r2, r0
 80009e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	490f      	ldr	r1, [pc, #60]	; (8000a24 <UnlinkTimer+0x100>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	330c      	adds	r3, #12
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <UnlinkTimer+0xf8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b06      	cmp	r3, #6
 80009fe:	d107      	bne.n	8000a10 <UnlinkTimer+0xec>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <UnlinkTimer+0x104>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000204 	.word	0x20000204
 8000a20:	20000205 	.word	0x20000205
 8000a24:	20000174 	.word	0x20000174
 8000a28:	20000208 	.word	0x20000208

08000a2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3a:	d026      	beq.n	8000a8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a3c:	f7ff fe02 	bl	8000644 <ReadRtcSsrValue>
 8000a40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d805      	bhi.n	8000a58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e00a      	b.n	8000a6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <ReturnTimeElapsed+0x74>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <ReturnTimeElapsed+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <ReturnTimeElapsed+0x78>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <ReturnTimeElapsed+0x7c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	e001      	b.n	8000a8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000208 	.word	0x20000208
 8000aa0:	2000033a 	.word	0x2000033a
 8000aa4:	20000339 	.word	0x20000339
 8000aa8:	20000338 	.word	0x20000338

08000aac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000abc:	f7ff fdc2 	bl	8000644 <ReadRtcSsrValue>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000ac4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f004 ff81 	bl	80059ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000acc:	e03e      	b.n	8000b4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d803      	bhi.n	8000adc <RestartWakeupCounter+0x30>
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RestartWakeupCounter+0xac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d002      	beq.n	8000ae2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ae2:	bf00      	nop
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <RestartWakeupCounter+0xb4>)
 8000b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b12:	2003      	movs	r0, #3
 8000b14:	f004 ff69 	bl	80059ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <RestartWakeupCounter+0xb8>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b28:	f7ff fd8c 	bl	8000644 <ReadRtcSsrValue>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <RestartWakeupCounter+0xa8>)
 8000b30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RestartWakeupCounter+0xb0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b46:	f3af 8000 	nop.w
  return ;
 8000b4a:	bf00      	nop
}
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000208 	.word	0x20000208
 8000b58:	20000338 	.word	0x20000338
 8000b5c:	20000334 	.word	0x20000334
 8000b60:	58000800 	.word	0x58000800
 8000b64:	40002800 	.word	0x40002800

08000b68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <RescheduleTimerList+0x124>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d108      	bne.n	8000b8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b7c:	bf00      	nop
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f7      	bne.n	8000b7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <RescheduleTimerList+0x128>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <RescheduleTimerList+0x12c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	493b      	ldr	r1, [pc, #236]	; (8000c98 <RescheduleTimerList+0x130>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000bbc:	f7ff ff36 	bl	8000a2c <ReturnTimeElapsed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d205      	bcs.n	8000bd8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e04d      	b.n	8000c74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d906      	bls.n	8000bf8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <RescheduleTimerList+0x138>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <RescheduleTimerList+0x134>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e03d      	b.n	8000c74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <RescheduleTimerList+0x134>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c08:	e034      	b.n	8000c74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	4922      	ldr	r1, [pc, #136]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d20a      	bcs.n	8000c38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c22:	7bfa      	ldrb	r2, [r7, #15]
 8000c24:	491c      	ldr	r1, [pc, #112]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3308      	adds	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e013      	b.n	8000c60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	4917      	ldr	r1, [pc, #92]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3308      	adds	r3, #8
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	1ac9      	subs	r1, r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <RescheduleTimerList+0x130>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d1c7      	bne.n	8000c0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff15 	bl	8000aac <RestartWakeupCounter>

  return ;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	20000334 	.word	0x20000334
 8000c94:	20000204 	.word	0x20000204
 8000c98:	20000174 	.word	0x20000174
 8000c9c:	2000020c 	.word	0x2000020c
 8000ca0:	2000033c 	.word	0x2000033c

08000ca4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000caa:	f3ef 8310 	mrs	r3, PRIMASK
 8000cae:	617b      	str	r3, [r7, #20]
  return(result);
 8000cb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	22ca      	movs	r2, #202	; 0xca
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2253      	movs	r2, #83	; 0x53
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	4953      	ldr	r1, [pc, #332]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d170      	bne.n	8000de2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d04:	494c      	ldr	r1, [pc, #304]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d18:	4947      	ldr	r1, [pc, #284]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d04e      	beq.n	8000dd2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d38:	493f      	ldr	r1, [pc, #252]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	330d      	adds	r3, #13
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d125      	bne.n	8000d9a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde5 	bl	8000924 <UnlinkTimer>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d68:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa40 	bl	8001204 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	22ca      	movs	r2, #202	; 0xca
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2253      	movs	r2, #83	; 0x53
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
 8000d98:	e013      	b.n	8000dc2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f9a1 	bl	80010f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22ca      	movs	r2, #202	; 0xca
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2253      	movs	r2, #83	; 0x53
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	69b8      	ldr	r0, [r7, #24]
 8000dcc:	f000 faa0 	bl	8001310 <HW_TS_RTC_Int_AppNot>
 8000dd0:	e024      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000dd2:	f7ff fec9 	bl	8000b68 <RescheduleTimerList>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f383 8810 	msr	PRIMASK, r3
 8000de0:	e01c      	b.n	8000e1c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e26:	bf00      	nop
}
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000334 	.word	0x20000334
 8000e34:	20000204 	.word	0x20000204
 8000e38:	20000174 	.word	0x20000174
 8000e3c:	2000020c 	.word	0x2000020c
 8000e40:	58000800 	.word	0x58000800

08000e44 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e50:	4a61      	ldr	r2, [pc, #388]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22ca      	movs	r2, #202	; 0xca
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HW_TS_Init+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2253      	movs	r2, #83	; 0x53
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HW_TS_Init+0x198>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HW_TS_Init+0x198>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HW_TS_Init+0x198>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f1c3 0304 	rsb	r3, r3, #4
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000e8a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HW_TS_Init+0x198>)
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e94:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e98:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000eb4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HW_TS_Init+0x198>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ec8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HW_TS_Init+0x1a4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HW_TS_Init+0x1a0>)
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000edc:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HW_TS_Init+0x19c>)
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	40d3      	lsrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d904      	bls.n	8000ef8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HW_TS_Init+0x1a8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HW_TS_Init+0x1a8>)
 8000efe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f04:	f7ff fb8c 	bl	8000620 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f0c:	f7ff fb74 	bl	80005f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d143      	bne.n	8000f9e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HW_TS_Init+0x1ac>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HW_TS_Init+0x1b0>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e00c      	b.n	8000f44 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	4932      	ldr	r1, [pc, #200]	; (8000ff8 <HW_TS_Init+0x1b4>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	330c      	adds	r3, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	3301      	adds	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d9ef      	bls.n	8000f2a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HW_TS_Init+0x1b8>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f62:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HW_TS_Init+0x1bc>)
 8000f7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f004 fd31 	bl	80059ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HW_TS_Init+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	e00a      	b.n	8000fb4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f004 fd0d 	bl	80059ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HW_TS_Init+0x194>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f004 fcc1 	bl	800594a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f004 fcd8 	bl	800597e <HAL_NVIC_EnableIRQ>

  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000334 	.word	0x20000334
 8000fdc:	40002800 	.word	0x40002800
 8000fe0:	20000338 	.word	0x20000338
 8000fe4:	20000339 	.word	0x20000339
 8000fe8:	2000033a 	.word	0x2000033a
 8000fec:	2000033c 	.word	0x2000033c
 8000ff0:	2000020c 	.word	0x2000020c
 8000ff4:	20000208 	.word	0x20000208
 8000ff8:	20000174 	.word	0x20000174
 8000ffc:	20000204 	.word	0x20000204
 8001000:	58000800 	.word	0x58000800

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001020:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001026:	e004      	b.n	8001032 <HW_TS_Create+0x2e>
  {
    loop++;
 8001028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001036:	2b05      	cmp	r3, #5
 8001038:	d80c      	bhi.n	8001054 <HW_TS_Create+0x50>
 800103a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103e:	492b      	ldr	r1, [pc, #172]	; (80010ec <HW_TS_Create+0xe8>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001058:	2b06      	cmp	r3, #6
 800105a:	d037      	beq.n	80010cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	330c      	adds	r3, #12
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800107c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <HW_TS_Create+0xe8>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	3310      	adds	r3, #16
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001092:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001096:	4915      	ldr	r1, [pc, #84]	; (80010ec <HW_TS_Create+0xe8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	330d      	adds	r3, #13
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <HW_TS_Create+0xe8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ca:	e007      	b.n	80010dc <HW_TS_Create+0xd8>
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000174 	.word	0x20000174

080010f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8310 	mrs	r3, PRIMASK
 80010fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001100:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001106:	2003      	movs	r0, #3
 8001108:	f004 fc47 	bl	800599a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HW_TS_Stop+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22ca      	movs	r2, #202	; 0xca
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Stop+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	4933      	ldr	r1, [pc, #204]	; (80011f0 <HW_TS_Stop+0x100>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d148      	bne.n	80011ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbf1 	bl	8000924 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HW_TS_Stop+0x104>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d135      	bne.n	80011ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HW_TS_Stop+0x108>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d108      	bne.n	800116e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115c:	bf00      	nop
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HW_TS_Stop+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f7      	bne.n	800115e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HW_TS_Stop+0xfc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HW_TS_Stop+0xfc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001180:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001182:	bf00      	nop
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HW_TS_Stop+0xfc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HW_TS_Stop+0xfc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HW_TS_Stop+0xfc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HW_TS_Stop+0x10c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b2:	2003      	movs	r0, #3
 80011b4:	f004 fc19 	bl	80059ea <HAL_NVIC_ClearPendingIRQ>
 80011b8:	e007      	b.n	80011ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HW_TS_Stop+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011c6:	f7ff fccf 	bl	8000b68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HW_TS_Stop+0xfc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d4:	2003      	movs	r0, #3
 80011d6:	f004 fbd2 	bl	800597e <HAL_NVIC_EnableIRQ>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011e4:	bf00      	nop
}
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000334 	.word	0x20000334
 80011f0:	20000174 	.word	0x20000174
 80011f4:	20000204 	.word	0x20000204
 80011f8:	40002800 	.word	0x40002800
 80011fc:	58000800 	.word	0x58000800
 8001200:	20000205 	.word	0x20000205

08001204 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	493b      	ldr	r1, [pc, #236]	; (8001300 <HW_TS_Start+0xfc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330c      	adds	r3, #12
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff60 	bl	80010f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60fb      	str	r3, [r7, #12]
  return(result);
 8001236:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800123c:	2003      	movs	r0, #3
 800123e:	f004 fbac 	bl	800599a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HW_TS_Start+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	22ca      	movs	r2, #202	; 0xca
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4929      	ldr	r1, [pc, #164]	; (8001300 <HW_TS_Start+0xfc>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4924      	ldr	r1, [pc, #144]	; (8001300 <HW_TS_Start+0xfc>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	491f      	ldr	r1, [pc, #124]	; (8001300 <HW_TS_Start+0xfc>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa9b 	bl	80007d0 <linkTimer>
 800129a:	4603      	mov	r3, r0
 800129c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Start+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HW_TS_Start+0x108>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7c7a      	ldrb	r2, [r7, #17]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d002      	beq.n	80012b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80012b0:	f7ff fc5a 	bl	8000b68 <RescheduleTimerList>
 80012b4:	e013      	b.n	80012de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HW_TS_Start+0xfc>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <HW_TS_Start+0xfc>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4403      	add	r3, r0
 80012da:	3308      	adds	r3, #8
 80012dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HW_TS_Start+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22ff      	movs	r2, #255	; 0xff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f004 fb48 	bl	800597e <HAL_NVIC_EnableIRQ>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f8:	bf00      	nop
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000174 	.word	0x20000174
 8001304:	20000334 	.word	0x20000334
 8001308:	20000204 	.word	0x20000204
 800130c:	20000205 	.word	0x20000205

08001310 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4798      	blx	r3

  return;
 8001322:	bf00      	nop
}
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_TxCpltCallback+0x30>)
 800133c:	429a      	cmp	r2, r3
 800133e:	d000      	beq.n	8001342 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001340:	e007      	b.n	8001352 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_TxCpltCallback+0x34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4798      	blx	r3
            break;
 8001350:	bf00      	nop
    }

    return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	20000558 	.word	0x20000558

08001364 <LL_RCC_LSE_SetDriveCapability>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	f023 0218 	bic.w	r2, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f004 f902 	bl	80055d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f912 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM16_Init();
 80013d0:	f000 f9c0 	bl	8001754 <MX_TIM16_Init>
  MX_TIM17_Init();
 80013d4:	f000 f9e6 	bl	80017a4 <MX_TIM17_Init>
  MX_GPIO_Init();
 80013d8:	f000 fa56 	bl	8001888 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013dc:	f000 fa08 	bl	80017f0 <MX_USART1_UART_Init>
  MX_RF_Init();
 80013e0:	f000 f988 	bl	80016f4 <MX_RF_Init>
  MX_RTC_Init();
 80013e4:	f000 f98e 	bl	8001704 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80013e8:	f7ff f866 	bl	80004b8 <APPE_Init>

  MX_MEMS_Init();
 80013ec:	f009 fb88 	bl	800ab00 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f00c fac4 	bl	800d980 <UTIL_SEQ_Run>
    /* USER CODE END WHILE */

    MX_MEMS_Process();
 80013f8:	f009 fb8e 	bl	800ab18 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */

    if (run_this_once) {
 80013fc:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <main+0x1e8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <main+0x52>
      HAL_TIM_Base_Start_IT(&htim16);
 8001404:	486a      	ldr	r0, [pc, #424]	; (80015b0 <main+0x1ec>)
 8001406:	f007 fb9b 	bl	8008b40 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim17);
 800140a:	486a      	ldr	r0, [pc, #424]	; (80015b4 <main+0x1f0>)
 800140c:	f007 fb98 	bl	8008b40 <HAL_TIM_Base_Start_IT>
      run_this_once = 0;
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <main+0x1e8>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    }


    /* STATE SWITCHING ------------------------------------------------------ */
    switch (state)
 8001416:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <main+0x1f4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b03      	cmp	r3, #3
 800141c:	f200 80be 	bhi.w	800159c <main+0x1d8>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <main+0x64>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	0800148b 	.word	0x0800148b
 8001430:	080014c1 	.word	0x080014c1
 8001434:	0800157f 	.word	0x0800157f
    {
    case NORMAL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_moving, strlen(prompt_moving), 1000);
 8001438:	4860      	ldr	r0, [pc, #384]	; (80015bc <main+0x1f8>)
 800143a:	f7fe fea1 	bl	8000180 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	495d      	ldr	r1, [pc, #372]	; (80015bc <main+0x1f8>)
 8001448:	485d      	ldr	r0, [pc, #372]	; (80015c0 <main+0x1fc>)
 800144a:	f007 fddd 	bl	8009008 <HAL_UART_Transmit>

      if (still_timeout_count == STILL_TIMEOUT) {
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <main+0x200>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10a      	bne.n	800146e <main+0xaa>
        // send noti that the person is dead
    	  // UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

        // send noti when person die
        state = UNCONCIOUS;
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <main+0x1f4>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
        motion_status = MAYBE_DEAD;
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <main+0x204>)
 8001460:	2208      	movs	r2, #8
 8001462:	701a      	strb	r2, [r3, #0]
        UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 8001464:	2100      	movs	r1, #0
 8001466:	2010      	movs	r0, #16
 8001468:	f00c fb86 	bl	800db78 <UTIL_SEQ_SetTask>
      else if (motion_status == MAN_FLY) {
        state = FALL;
        UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
      }

      break;
 800146c:	e098      	b.n	80015a0 <main+0x1dc>
      else if (motion_status == MAN_FLY) {
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <main+0x204>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b81      	cmp	r3, #129	; 0x81
 8001476:	f040 8093 	bne.w	80015a0 <main+0x1dc>
        state = FALL;
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <main+0x1f4>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]
        UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 8001480:	2100      	movs	r1, #0
 8001482:	2010      	movs	r0, #16
 8001484:	f00c fb78 	bl	800db78 <UTIL_SEQ_SetTask>
      break;
 8001488:	e08a      	b.n	80015a0 <main+0x1dc>
    
    case UNCONCIOUS:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_dead, strlen(prompt_dead), 1000);
 800148a:	4850      	ldr	r0, [pc, #320]	; (80015cc <main+0x208>)
 800148c:	f7fe fe78 	bl	8000180 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	494c      	ldr	r1, [pc, #304]	; (80015cc <main+0x208>)
 800149a:	4849      	ldr	r0, [pc, #292]	; (80015c0 <main+0x1fc>)
 800149c:	f007 fdb4 	bl	8009008 <HAL_UART_Transmit>

      still_timeout_count = 0;
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <main+0x200>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
      if (motion_status == OK) {
 80014a6:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <main+0x204>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d179      	bne.n	80015a4 <main+0x1e0>
        state = NORMAL;
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <main+0x1f4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
        UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2010      	movs	r0, #16
 80014ba:	f00c fb5d 	bl	800db78 <UTIL_SEQ_SetTask>
      }

      break;
 80014be:	e071      	b.n	80015a4 <main+0x1e0>

    case FALL:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_fall, strlen(prompt_fall), 1000);
 80014c0:	4843      	ldr	r0, [pc, #268]	; (80015d0 <main+0x20c>)
 80014c2:	f7fe fe5d 	bl	8000180 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	4940      	ldr	r1, [pc, #256]	; (80015d0 <main+0x20c>)
 80014d0:	483b      	ldr	r0, [pc, #236]	; (80015c0 <main+0x1fc>)
 80014d2:	f007 fd99 	bl	8009008 <HAL_UART_Transmit>

      axe_x_diff = accelero_val.x - old_axe_x;
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <main+0x210>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <main+0x214>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a3e      	ldr	r2, [pc, #248]	; (80015dc <main+0x218>)
 80014e2:	6013      	str	r3, [r2, #0]
      axe_y_diff = accelero_val.y - old_axe_y;
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <main+0x210>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <main+0x21c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <main+0x220>)
 80014f0:	6013      	str	r3, [r2, #0]

      if ((axe_x_diff > 700 || axe_x_diff < -700 || axe_y_diff > 700 || axe_y_diff < -700) && trip_period < 500) {
 80014f2:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <main+0x218>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014fa:	dc0e      	bgt.n	800151a <main+0x156>
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <main+0x218>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8001504:	db09      	blt.n	800151a <main+0x156>
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <main+0x220>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800150e:	dc04      	bgt.n	800151a <main+0x156>
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <main+0x220>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8001518:	da13      	bge.n	8001542 <main+0x17e>
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <main+0x224>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001524:	d20d      	bcs.n	8001542 <main+0x17e>
        motion_status = TRIP_TO_HEAVEN; 
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <main+0x204>)
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*) prompt_trip, strlen(prompt_trip), 1000);
 800152c:	482f      	ldr	r0, [pc, #188]	; (80015ec <main+0x228>)
 800152e:	f7fe fe27 	bl	8000180 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	492c      	ldr	r1, [pc, #176]	; (80015ec <main+0x228>)
 800153c:	4820      	ldr	r0, [pc, #128]	; (80015c0 <main+0x1fc>)
 800153e:	f007 fd63 	bl	8009008 <HAL_UART_Transmit>
      }

      // Damn I'm dead.
      if (still_timeout_count == STILL_TIMEOUT) {
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <main+0x200>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b05      	cmp	r3, #5
 800154a:	d109      	bne.n	8001560 <main+0x19c>
        state = UNCONCIOUS;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <main+0x1f4>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
    	  UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 8001552:	2100      	movs	r1, #0
 8001554:	2010      	movs	r0, #16
 8001556:	f00c fb0f 	bl	800db78 <UTIL_SEQ_SetTask>
        motion_status = MAYBE_DEAD; 
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <main+0x204>)
 800155c:	2208      	movs	r2, #8
 800155e:	701a      	strb	r2, [r3, #0]
      }

      // shit I'm alive
      if (motion_status == MAN_FLY) {
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <main+0x204>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b81      	cmp	r3, #129	; 0x81
 8001568:	d11e      	bne.n	80015a8 <main+0x1e4>
        state = NORMAL;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <main+0x1f4>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
        still_timeout_count = 0;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <main+0x200>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
        trip_period = 0;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <main+0x224>)
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
      }

      break;
 800157c:	e014      	b.n	80015a8 <main+0x1e4>
    
    case FLY:
      HAL_UART_Transmit(&huart1, (uint8_t*) prompt_up, strlen(prompt_up), 1000);
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <main+0x22c>)
 8001580:	f7fe fdfe 	bl	8000180 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	b29a      	uxth	r2, r3
 8001588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158c:	4918      	ldr	r1, [pc, #96]	; (80015f0 <main+0x22c>)
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <main+0x1fc>)
 8001590:	f007 fd3a 	bl	8009008 <HAL_UART_Transmit>
      state = NORMAL;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <main+0x1f4>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
      break;
 800159a:	e006      	b.n	80015aa <main+0x1e6>

    default:
      break;
 800159c:	bf00      	nop
 800159e:	e727      	b.n	80013f0 <main+0x2c>
      break;
 80015a0:	bf00      	nop
 80015a2:	e725      	b.n	80013f0 <main+0x2c>
      break;
 80015a4:	bf00      	nop
 80015a6:	e723      	b.n	80013f0 <main+0x2c>
      break;
 80015a8:	bf00      	nop
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015aa:	e721      	b.n	80013f0 <main+0x2c>
 80015ac:	20000005 	.word	0x20000005
 80015b0:	2000064c 	.word	0x2000064c
 80015b4:	2000055c 	.word	0x2000055c
 80015b8:	2000034d 	.word	0x2000034d
 80015bc:	20000008 	.word	0x20000008
 80015c0:	2000059c 	.word	0x2000059c
 80015c4:	2000034c 	.word	0x2000034c
 80015c8:	2000034e 	.word	0x2000034e
 80015cc:	20000020 	.word	0x20000020
 80015d0:	20000038 	.word	0x20000038
 80015d4:	20000340 	.word	0x20000340
 80015d8:	20000354 	.word	0x20000354
 80015dc:	20000364 	.word	0x20000364
 80015e0:	20000358 	.word	0x20000358
 80015e4:	20000368 	.word	0x20000368
 80015e8:	20000350 	.word	0x20000350
 80015ec:	20000068 	.word	0x20000068
 80015f0:	20000050 	.word	0x20000050

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0ae      	sub	sp, #184	; 0xb8
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015fe:	2248      	movs	r2, #72	; 0x48
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00c fbe7 	bl	800ddd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2250      	movs	r2, #80	; 0x50
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00c fbd7 	bl	800ddd6 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fe9b 	bl	8001364 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <SystemClock_Config+0xfc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001636:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <SystemClock_Config+0xfc>)
 8001638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <SystemClock_Config+0xfc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800164a:	2307      	movs	r3, #7
 800164c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001652:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800166e:	4618      	mov	r0, r3
 8001670:	f005 fe40 	bl	80072f4 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800167a:	f000 fa2b 	bl	8001ad4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800167e:	236f      	movs	r3, #111	; 0x6f
 8001680:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001682:	2302      	movs	r3, #2
 8001684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800169a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800169e:	2101      	movs	r1, #1
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 f985 	bl	80079b0 <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80016ac:	f000 fa12 	bl	8001ad4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80016b0:	f643 0305 	movw	r3, #14341	; 0x3805
 80016b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80016cc:	2302      	movs	r3, #2
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fda5 	bl	8008226 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80016e2:	f000 f9f7 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016e6:	bf00      	nop
 80016e8:	37b8      	adds	r7, #184	; 0xb8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	58000400 	.word	0x58000400

080016f4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_RTC_Init+0x48>)
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <MX_RTC_Init+0x4c>)
 800170c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_RTC_Init+0x48>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MX_RTC_Init+0x48>)
 8001716:	220f      	movs	r2, #15
 8001718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_RTC_Init+0x48>)
 800171c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001720:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <MX_RTC_Init+0x48>)
 8001724:	f007 f805 	bl	8008732 <HAL_RTC_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800172e:	f000 f9d1 	bl	8001ad4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_RTC_Init+0x48>)
 8001738:	f007 f8ea 	bl	8008910 <HAL_RTCEx_SetWakeUpTimer_IT>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001742:	f000 f9c7 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000628 	.word	0x20000628
 8001750:	40002800 	.word	0x40002800

08001754 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_TIM16_Init+0x48>)
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <MX_TIM16_Init+0x4c>)
 800175c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16001;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_TIM16_Init+0x48>)
 8001760:	f643 6281 	movw	r2, #16001	; 0x3e81
 8001764:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_TIM16_Init+0x48>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2001;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_TIM16_Init+0x48>)
 800176e:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001772:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_TIM16_Init+0x48>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_TIM16_Init+0x48>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_TIM16_Init+0x48>)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM16_Init+0x48>)
 8001788:	f007 f9ae 	bl	8008ae8 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001792:	f000 f99f 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000064c 	.word	0x2000064c
 80017a0:	40014400 	.word	0x40014400

080017a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <MX_TIM17_Init+0x48>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 161;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017b0:	22a1      	movs	r2, #161	; 0xa1
 80017b2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2001;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017bc:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80017c0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_TIM17_Init+0x44>)
 80017d6:	f007 f987 	bl	8008ae8 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80017e0:	f000 f978 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000055c 	.word	0x2000055c
 80017ec:	40014800 	.word	0x40014800

080017f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <MX_USART1_UART_Init+0x90>)
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <MX_USART1_UART_Init+0x94>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_USART1_UART_Init+0x90>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_USART1_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001838:	4811      	ldr	r0, [pc, #68]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800183a:	f007 fb95 	bl	8008f68 <HAL_UART_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001844:	f000 f946 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800184c:	f009 f874 	bl	800a938 <HAL_UARTEx_SetTxFifoThreshold>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001856:	f000 f93d 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185a:	2100      	movs	r1, #0
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800185e:	f009 f8a9 	bl	800a9b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001868:	f000 f934 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_USART1_UART_Init+0x90>)
 800186e:	f009 f82a 	bl	800a8c6 <HAL_UARTEx_DisableFifoMode>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001878:	f000 f92c 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000059c 	.word	0x2000059c
 8001884:	40013800 	.word	0x40013800

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189c:	2004      	movs	r0, #4
 800189e:	f7ff fd77 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2002      	movs	r0, #2
 80018a4:	f7ff fd74 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fd71 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	2008      	movs	r0, #8
 80018b0:	f7ff fd6e 	bl	8001390 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2123      	movs	r1, #35	; 0x23
 80018b8:	4821      	ldr	r0, [pc, #132]	; (8001940 <MX_GPIO_Init+0xb8>)
 80018ba:	f004 fb51 	bl	8005f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN1_Pin */
  GPIO_InitStruct.Pin = USER_BTN1_Pin;
 80018be:	2310      	movs	r3, #16
 80018c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <MX_GPIO_Init+0xbc>)
 80018c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BTN1_GPIO_Port, &GPIO_InitStruct);
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	481e      	ldr	r0, [pc, #120]	; (8001948 <MX_GPIO_Init+0xc0>)
 80018d0:	f004 f8f8 	bl	8005ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80018d4:	2323      	movs	r3, #35	; 0x23
 80018d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4815      	ldr	r0, [pc, #84]	; (8001940 <MX_GPIO_Init+0xb8>)
 80018ea:	f004 f8eb 	bl	8005ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001900:	230a      	movs	r3, #10
 8001902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f004 f8da 	bl	8005ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001910:	2303      	movs	r3, #3
 8001912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	480a      	ldr	r0, [pc, #40]	; (800194c <MX_GPIO_Init+0xc4>)
 8001922:	f004 f8cf 	bl	8005ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	200a      	movs	r0, #10
 800192c:	f004 f80d 	bl	800594a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001930:	200a      	movs	r0, #10
 8001932:	f004 f824 	bl	800597e <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	48000400 	.word	0x48000400
 8001944:	10210000 	.word	0x10210000
 8001948:	48000800 	.word	0x48000800
 800194c:	48000c00 	.word	0x48000c00

08001950 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* ISR ---------------------------------------------------------------------- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d127      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0x60>
    
    if (!is_moving(&old_axe_x, &old_axe_y, &old_axe_z)) {
 8001960:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001962:	492b      	ldr	r1, [pc, #172]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001964:	482b      	ldr	r0, [pc, #172]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001966:	f000 f865 	bl	8001a34 <is_moving>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x40>
      still_timeout_count++;
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800197c:	701a      	strb	r2, [r3, #0]

      if (state == FALL) {
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x46>
    	  UTIL_SEQ_SetTask(1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
 8001986:	2100      	movs	r1, #0
 8001988:	2010      	movs	r0, #16
 800198a:	f00c f8f5 	bl	800db78 <UTIL_SEQ_SetTask>
 800198e:	e002      	b.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x46>
      }
    } else {
      still_timeout_count = 0;
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    }

    old_axe_x = accelero_val.x;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800199c:	6013      	str	r3, [r2, #0]
    old_axe_y = accelero_val.y;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019a4:	6013      	str	r3, [r2, #0]
    old_axe_z = accelero_val.z;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019ac:	6013      	str	r3, [r2, #0]
    if (motion_status == MAN_DOWN) {
      trip_period += 10;
    }
  }

}
 80019ae:	e027      	b.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0xb0>
  else if (htim == &htim17) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d123      	bne.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0xb0>
    axe_z_diff = accelero_val.z - old_axe_z;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019c4:	6013      	str	r3, [r2, #0]
    if (axe_z_diff > 700) {
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80019ce:	dd03      	ble.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x88>
      motion_status = MAN_DOWN;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x98>
    else if (axe_z_diff < -700) {
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 80019e0:	da02      	bge.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x98>
      motion_status = MAN_FLY;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019e4:	2281      	movs	r2, #129	; 0x81
 80019e6:	701a      	strb	r2, [r3, #0]
    if (motion_status == MAN_DOWN) {
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b80      	cmp	r3, #128	; 0x80
 80019f0:	d106      	bne.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0xb0>
      trip_period += 10;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	330a      	adds	r3, #10
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019fe:	801a      	strh	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000064c 	.word	0x2000064c
 8001a0c:	2000035c 	.word	0x2000035c
 8001a10:	20000358 	.word	0x20000358
 8001a14:	20000354 	.word	0x20000354
 8001a18:	2000034c 	.word	0x2000034c
 8001a1c:	2000034d 	.word	0x2000034d
 8001a20:	20000340 	.word	0x20000340
 8001a24:	2000055c 	.word	0x2000055c
 8001a28:	20000360 	.word	0x20000360
 8001a2c:	2000034e 	.word	0x2000034e
 8001a30:	20000350 	.word	0x20000350

08001a34 <is_moving>:


/* USER DEFINED ------------------------------------------------------------- */
code_status is_moving(int32_t* x, int32_t* y, int32_t* z)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint8_t is_really_moving = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]

  if (accelero_val.x - *x > 20 || accelero_val.x - *x < -20) {
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <is_moving+0x98>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b14      	cmp	r3, #20
 8001a50:	dc07      	bgt.n	8001a62 <is_moving+0x2e>
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <is_moving+0x98>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f113 0f14 	cmn.w	r3, #20
 8001a60:	da02      	bge.n	8001a68 <is_moving+0x34>
    is_really_moving = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
 8001a66:	e022      	b.n	8001aae <is_moving+0x7a>
  }
  else if (accelero_val.y - *y > 20 || accelero_val.y - *y < -20) {
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <is_moving+0x98>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b14      	cmp	r3, #20
 8001a74:	dc07      	bgt.n	8001a86 <is_moving+0x52>
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <is_moving+0x98>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f113 0f14 	cmn.w	r3, #20
 8001a84:	da02      	bge.n	8001a8c <is_moving+0x58>
    is_really_moving = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
 8001a8a:	e010      	b.n	8001aae <is_moving+0x7a>
  }
  else if (accelero_val.z - *z > 20 || accelero_val.z - *z < -20) {
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <is_moving+0x98>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b14      	cmp	r3, #20
 8001a98:	dc07      	bgt.n	8001aaa <is_moving+0x76>
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <is_moving+0x98>)
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f113 0f14 	cmn.w	r3, #20
 8001aa8:	da01      	bge.n	8001aae <is_moving+0x7a>
    is_really_moving = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
  }

  if (is_really_moving) {
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <is_moving+0x8a>
    motion_status = OK;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <is_moving+0x9c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    return 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <is_moving+0x8c>
  }

  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000340 	.word	0x20000340
 8001ad0:	2000034e 	.word	0x2000034e

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_AHB2_GRP1_EnableClock>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b28:	68fb      	ldr	r3, [r7, #12]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ba2:	f7ff ffc8 	bl	8001b36 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_RTC_MspInit+0x30>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bbe:	f7ff ff90 	bl	8001ae2 <LL_RCC_EnableRTC>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f003 febf 	bl	800594a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f003 fed6 	bl	800597e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40002800 	.word	0x40002800

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_TIM_Base_MspInit+0x58>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10c      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bf2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bf6:	f7ff ffb7 	bl	8001b68 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2019      	movs	r0, #25
 8001c00:	f003 fea3 	bl	800594a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c04:	2019      	movs	r0, #25
 8001c06:	f003 feba 	bl	800597e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c0a:	e010      	b.n	8001c2e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_TIM_Base_MspInit+0x5c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10b      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c1a:	f7ff ffa5 	bl	8001b68 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	201a      	movs	r0, #26
 8001c24:	f003 fe91 	bl	800594a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c28:	201a      	movs	r0, #26
 8001c2a:	f003 fea8 	bl	800597e <HAL_NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40014400 	.word	0x40014400
 8001c3c:	40014800 	.word	0x40014800

08001c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_UART_MspInit+0x68>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11e      	bne.n	8001ca0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c66:	f7ff ff7f 	bl	8001b68 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7ff ff4a 	bl	8001b04 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c80:	2307      	movs	r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4808      	ldr	r0, [pc, #32]	; (8001cac <HAL_UART_MspInit+0x6c>)
 8001c8c:	f003 ff1a 	bl	8005ac4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2024      	movs	r0, #36	; 0x24
 8001c96:	f003 fe58 	bl	800594a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c9a:	2024      	movs	r0, #36	; 0x24
 8001c9c:	f003 fe6f 	bl	800597e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	48000400 	.word	0x48000400

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d04:	f003 fcbe 	bl	8005684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <RTC_WKUP_IRQHandler+0x14>)
 8001d12:	f006 feb9 	bl	8008a88 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HW_TS_RTC_Wakeup_Handler();
 8001d16:	f7fe ffc5 	bl	8000ca4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000628 	.word	0x20000628

08001d24 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d28:	2010      	movs	r0, #16
 8001d2a:	f004 f94b 	bl	8005fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d3a:	f006 ff2b 	bl	8008b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000064c 	.word	0x2000064c

08001d48 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d4e:	f006 ff21 	bl	8008b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000055c 	.word	0x2000055c

08001d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <USART1_IRQHandler+0x10>)
 8001d62:	f007 f9e7 	bl	8009134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000059c 	.word	0x2000059c

08001d70 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001d74:	f00b fcb4 	bl	800d6e0 <HW_IPCC_Tx_Handler>
  return;
 8001d78:	bf00      	nop
}
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001d80:	f00b fc76 	bl	800d670 <HW_IPCC_Rx_Handler>
  return;
 8001d84:	bf00      	nop
}
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LL_AHB2_GRP1_EnableClock>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_APB1_GRP1_EnableClock>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_APB1_GRP1_DisableClock>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	4013      	ands	r3, r2
 8001e04:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <BSP_I2C1_Init+0x70>)
 8001e20:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <BSP_I2C1_Init+0x74>)
 8001e22:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <BSP_I2C1_Init+0x78>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	4918      	ldr	r1, [pc, #96]	; (8001e8c <BSP_I2C1_Init+0x78>)
 8001e2c:	600a      	str	r2, [r1, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d122      	bne.n	8001e78 <BSP_I2C1_Init+0x64>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <BSP_I2C1_Init+0x70>)
 8001e34:	f004 fbde 	bl	80065f4 <HAL_I2C_GetState>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11c      	bne.n	8001e78 <BSP_I2C1_Init+0x64>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <BSP_I2C1_Init+0x70>)
 8001e40:	f000 f8fe 	bl	8002040 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <BSP_I2C1_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001e4a:	480e      	ldr	r0, [pc, #56]	; (8001e84 <BSP_I2C1_Init+0x70>)
 8001e4c:	f000 f8b4 	bl	8001fb8 <MX_I2C1_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <BSP_I2C1_Init+0x4a>
    	{
      		ret = BSP_ERROR_BUS_FAILURE;
 8001e56:	f06f 0307 	mvn.w	r3, #7
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e00c      	b.n	8001e78 <BSP_I2C1_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <BSP_I2C1_Init+0x70>)
 8001e62:	f004 fdfd 	bl	8006a60 <HAL_I2CEx_ConfigAnalogFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <BSP_I2C1_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;    		
 8001e6c:	f06f 0307 	mvn.w	r3, #7
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	e001      	b.n	8001e78 <BSP_I2C1_Init+0x64>
    	}
    	else
    	{
      		ret = BSP_ERROR_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
    	}
	  }	
    }
  }
  return ret;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000068c 	.word	0x2000068c
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	2000036c 	.word	0x2000036c

08001e90 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <BSP_I2C1_DeInit+0x48>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <BSP_I2C1_DeInit+0x48>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <BSP_I2C1_DeInit+0x48>)
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <BSP_I2C1_DeInit+0x48>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    	/* DeInit the I2C */ 
    	I2C1_MspDeInit(&hi2c1);
 8001eb4:	4809      	ldr	r0, [pc, #36]	; (8001edc <BSP_I2C1_DeInit+0x4c>)
 8001eb6:	f000 f8e5 	bl	8002084 <I2C1_MspDeInit>
  #endif  
  		/* DeInit the I2C */ 
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001eba:	4808      	ldr	r0, [pc, #32]	; (8001edc <BSP_I2C1_DeInit+0x4c>)
 8001ebc:	f004 f929 	bl	8006112 <HAL_I2C_DeInit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <BSP_I2C1_DeInit+0x3c>
  		{
    		ret = BSP_ERROR_BUS_FAILURE;
 8001ec6:	f06f 0307 	mvn.w	r3, #7
 8001eca:	607b      	str	r3, [r7, #4]
  		}
    }
  }
  return ret;
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000036c 	.word	0x2000036c
 8001edc:	2000068c 	.word	0x2000068c

08001ee0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	81fb      	strh	r3, [r7, #14]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	81bb      	strh	r3, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001efa:	89ba      	ldrh	r2, [r7, #12]
 8001efc:	89f9      	ldrh	r1, [r7, #14]
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <BSP_I2C1_WriteReg+0x60>)
 8001f10:	f004 f942 	bl	8006198 <HAL_I2C_Mem_Write>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001f1a:	4809      	ldr	r0, [pc, #36]	; (8001f40 <BSP_I2C1_WriteReg+0x60>)
 8001f1c:	f004 fb78 	bl	8006610 <HAL_I2C_GetError>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d103      	bne.n	8001f2e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f26:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e002      	b.n	8001f34 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f2e:	f06f 0303 	mvn.w	r3, #3
 8001f32:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001f34:	697b      	ldr	r3, [r7, #20]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000068c 	.word	0x2000068c

08001f44 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	60ba      	str	r2, [r7, #8]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	81fb      	strh	r3, [r7, #14]
 8001f52:	460b      	mov	r3, r1
 8001f54:	81bb      	strh	r3, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001f5e:	89ba      	ldrh	r2, [r7, #12]
 8001f60:	89f9      	ldrh	r1, [r7, #14]
 8001f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2301      	movs	r3, #1
 8001f72:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <BSP_I2C1_ReadReg+0x60>)
 8001f74:	f004 fa24 	bl	80063c0 <HAL_I2C_Mem_Read>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001f7e:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <BSP_I2C1_ReadReg+0x60>)
 8001f80:	f004 fb46 	bl	8006610 <HAL_I2C_GetError>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d103      	bne.n	8001f92 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f8a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e002      	b.n	8001f98 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f92:	f06f 0303 	mvn.w	r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001f98:	697b      	ldr	r3, [r7, #20]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000068c 	.word	0x2000068c

08001fa8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001fac:	f003 fb7c 	bl	80056a8 <HAL_GetTick>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <MX_I2C1_Init>:

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <MX_I2C1_Init+0x80>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <MX_I2C1_Init+0x84>)
 8001fce:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f003 fffa 	bl	8005ff4 <HAL_I2C_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200a:	2100      	movs	r1, #0
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f004 fd27 	bl	8006a60 <HAL_I2CEx_ConfigAnalogFilter>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f004 fd69 	bl	8006af6 <HAL_I2CEx_ConfigDigitalFilter>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005400 	.word	0x40005400
 800203c:	00707cbb 	.word	0x00707cbb

08002040 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	2002      	movs	r0, #2
 800204a:	f7ff fe9d 	bl	8001d88 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002052:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002060:	2304      	movs	r3, #4
 8002062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <I2C1_MspInit+0x40>)
 800206c:	f003 fd2a 	bl	8005ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002070:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002074:	f7ff fea1 	bl	8001dba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	48000400 	.word	0x48000400

08002084 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800208c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002090:	f7ff feac 	bl	8001dec <LL_APB1_GRP1_DisableClock>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8002094:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <I2C1_MspDeInit+0x24>)
 800209a:	f003 fe83 	bl	8005da4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	48000400 	.word	0x48000400

080020ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <SystemInit+0xa0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <SystemInit+0xa0>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <SystemInit+0xa0>)
 80020be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80020de:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <SystemInit+0xa4>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	f023 0305 	bic.w	r3, r3, #5
 8002100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <SystemInit+0xa8>)
 800211e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <SystemInit+0xa8>)
 8002126:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	faf6fefb 	.word	0xfaf6fefb
 8002154:	22041000 	.word	0x22041000

08002158 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	4a47      	ldr	r2, [pc, #284]	; (8002288 <SystemCoreClockUpdate+0x130>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d867      	bhi.n	8002250 <SystemCoreClockUpdate+0xf8>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <SystemCoreClockUpdate+0x30>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	080021bd 	.word	0x080021bd
 800218c:	08002251 	.word	0x08002251
 8002190:	08002251 	.word	0x08002251
 8002194:	08002251 	.word	0x08002251
 8002198:	080021c5 	.word	0x080021c5
 800219c:	08002251 	.word	0x08002251
 80021a0:	08002251 	.word	0x08002251
 80021a4:	08002251 	.word	0x08002251
 80021a8:	080021cd 	.word	0x080021cd
 80021ac:	08002251 	.word	0x08002251
 80021b0:	08002251 	.word	0x08002251
 80021b4:	08002251 	.word	0x08002251
 80021b8:	080021d5 	.word	0x080021d5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80021bc:	4a33      	ldr	r2, [pc, #204]	; (800228c <SystemCoreClockUpdate+0x134>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6013      	str	r3, [r2, #0]
      break;
 80021c2:	e049      	b.n	8002258 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <SystemCoreClockUpdate+0x134>)
 80021c6:	4a32      	ldr	r2, [pc, #200]	; (8002290 <SystemCoreClockUpdate+0x138>)
 80021c8:	601a      	str	r2, [r3, #0]
      break;
 80021ca:	e045      	b.n	8002258 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <SystemCoreClockUpdate+0x134>)
 80021ce:	4a31      	ldr	r2, [pc, #196]	; (8002294 <SystemCoreClockUpdate+0x13c>)
 80021d0:	601a      	str	r2, [r3, #0]
      break;
 80021d2:	e041      	b.n	8002258 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	3301      	adds	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d105      	bne.n	8002202 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <SystemCoreClockUpdate+0x138>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e00d      	b.n	800221e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d105      	bne.n	8002214 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <SystemCoreClockUpdate+0x13c>)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e004      	b.n	800221e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0f5b      	lsrs	r3, r3, #29
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <SystemCoreClockUpdate+0x134>)
 800224c:	6013      	str	r3, [r2, #0]
      break;
 800224e:	e003      	b.n	8002258 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <SystemCoreClockUpdate+0x134>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6013      	str	r3, [r2, #0]
      break;
 8002256:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <SystemCoreClockUpdate+0x140>)
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <SystemCoreClockUpdate+0x134>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <SystemCoreClockUpdate+0x134>)
 8002278:	6013      	str	r3, [r2, #0]

}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	0800ded4 	.word	0x0800ded4
 800228c:	2000007c 	.word	0x2000007c
 8002290:	00f42400 	.word	0x00f42400
 8002294:	01e84800 	.word	0x01e84800
 8002298:	0800de74 	.word	0x0800de74

0800229c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800229c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a0:	3304      	adds	r3, #4

080022a2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80022a6:	d3f9      	bcc.n	800229c <CopyDataInit>
  bx lr
 80022a8:	4770      	bx	lr

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80022aa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80022ac:	3004      	adds	r0, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80022ae:	4288      	cmp	r0, r1
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>
  bx lr
 80022b2:	4770      	bx	lr

080022b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80022b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <LoopForever+0x8>)
 80022ba:	490d      	ldr	r1, [pc, #52]	; (80022f0 <LoopForever+0xc>)
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <LoopForever+0x10>)
 80022be:	2300      	movs	r3, #0
 80022c0:	f7ff ffef 	bl	80022a2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <LoopForever+0x14>)
 80022c6:	490d      	ldr	r1, [pc, #52]	; (80022fc <LoopForever+0x18>)
 80022c8:	2300      	movs	r3, #0
 80022ca:	f7ff fff0 	bl	80022ae <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80022ce:	480c      	ldr	r0, [pc, #48]	; (8002300 <LoopForever+0x1c>)
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <LoopForever+0x20>)
 80022d2:	2300      	movs	r3, #0
 80022d4:	f7ff ffeb 	bl	80022ae <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022d8:	f7ff fee8 	bl	80020ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80022dc:	f00b fd4c 	bl	800dd78 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80022e0:	f7ff f870 	bl	80013c4 <main>

080022e4 <LoopForever>:

LoopForever:
  b LoopForever
 80022e4:	e7fe      	b.n	80022e4 <LoopForever>
 80022e6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80022e8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80022ec:	20000004 	.word	0x20000004
 80022f0:	20000174 	.word	0x20000174
 80022f4:	0800df64 	.word	0x0800df64
  INIT_BSS _sbss, _ebss
 80022f8:	20000318 	.word	0x20000318
 80022fc:	200006ec 	.word	0x200006ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002300:	200301c4 	.word	0x200301c4
 8002304:	20030a44 	.word	0x20030a44

08002308 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_IRQHandler>
	...

0800230c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e04d      	b.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	7b1a      	ldrb	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002364:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800236a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e020      	b.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4798      	blx	r3
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e016      	b.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d112      	bne.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80023a8:	2301      	movs	r3, #1
 80023aa:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	461a      	mov	r2, r3
 80023b0:	2123      	movs	r1, #35	; 0x23
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fb52 	bl	8002a5c <LSM303AGR_ACC_Write_Reg>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e000      	b.n	80023c6 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800326d 	.word	0x0800326d
 80023d4:	080032cf 	.word	0x080032cf

080023d8 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	331c      	adds	r3, #28
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f948 	bl	800367c <lsm303agr_xl_block_data_update_set>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e02c      	b.n	8002452 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	331c      	adds	r3, #28
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fa77 	bl	80038f2 <lsm303agr_xl_fifo_mode_set>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e020      	b.n	8002452 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2205      	movs	r2, #5
 8002414:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	331c      	adds	r3, #28
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f84c 	bl	80034bc <lsm303agr_xl_data_rate_set>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	e010      	b.n	8002452 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	331c      	adds	r3, #28
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f001 f8c2 	bl	80035c0 <lsm303agr_xl_full_scale_set>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e004      	b.n	8002452 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f87c 	bl	8002560 <LSM303AGR_ACC_Disable>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e008      	b.n	8002486 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	331c      	adds	r3, #28
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 f9df 	bl	8003862 <lsm303agr_xl_device_id_get>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e000      	b.n	80024b2 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2210      	movs	r2, #16
 80024e8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80024fc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	43c80000 	.word	0x43c80000

08002518 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e014      	b.n	8002558 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 021c 	add.w	r2, r3, #28
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f000 ffbd 	bl	80034bc <lsm303agr_xl_data_rate_set>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	e004      	b.n	8002558 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e01f      	b.n	80025b6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f103 021c 	add.w	r2, r3, #28
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	332a      	adds	r3, #42	; 0x2a
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 ffc0 	bl	8003508 <lsm303agr_xl_data_rate_get>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e010      	b.n	80025b6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	331c      	adds	r3, #28
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 ff8e 	bl	80034bc <lsm303agr_xl_data_rate_set>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e004      	b.n	80025b6 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	331c      	adds	r3, #28
 80025d0:	f107 020b 	add.w	r2, r7, #11
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 ff3c 	bl	8003454 <lsm303agr_xl_operating_mode_get>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e02e      	b.n	8002646 <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d00d      	beq.n	800260a <LSM303AGR_ACC_GetSensitivity+0x4c>
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d015      	beq.n	800261e <LSM303AGR_ACC_GetSensitivity+0x60>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11d      	bne.n	8002632 <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fca9 	bl	8002f50 <LSM303AGR_ACC_GetSensitivityHR>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01a      	beq.n	800263a <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	e01d      	b.n	8002646 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fce5 	bl	8002fdc <LSM303AGR_ACC_GetSensitivityNM>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	e013      	b.n	8002646 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fd21 	bl	8003068 <LSM303AGR_ACC_GetSensitivityLP>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	e009      	b.n	8002646 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	60fb      	str	r3, [r7, #12]
      break;
 8002638:	e004      	b.n	8002644 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8002642:	bf00      	nop
  }

  return ret;
 8002644:	68fb      	ldr	r3, [r7, #12]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	331c      	adds	r3, #28
 8002662:	f107 020b 	add.w	r2, r7, #11
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fef3 	bl	8003454 <lsm303agr_xl_operating_mode_get>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e09f      	b.n	80027ba <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	331c      	adds	r3, #28
 800267e:	f107 020a 	add.w	r2, r7, #10
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f000 ff3f 	bl	8003508 <lsm303agr_xl_data_rate_get>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	e091      	b.n	80027ba <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002696:	7afb      	ldrb	r3, [r7, #11]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d148      	bne.n	800272e <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 800269c:	7abb      	ldrb	r3, [r7, #10]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d840      	bhi.n	8002724 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026db 	.word	0x080026db
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026ed 	.word	0x080026ed
 80026b8:	080026f5 	.word	0x080026f5
 80026bc:	080026fd 	.word	0x080026fd
 80026c0:	08002705 	.word	0x08002705
 80026c4:	0800270d 	.word	0x0800270d
 80026c8:	08002715 	.word	0x08002715
 80026cc:	0800271d 	.word	0x0800271d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
        break;
 80026d8:	e06e      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026e0:	601a      	str	r2, [r3, #0]
        break;
 80026e2:	e069      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80026e8:	601a      	str	r2, [r3, #0]
        break;
 80026ea:	e065      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80026f0:	601a      	str	r2, [r3, #0]
        break;
 80026f2:	e061      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4a35      	ldr	r2, [pc, #212]	; (80027cc <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80026f8:	601a      	str	r2, [r3, #0]
        break;
 80026fa:	e05d      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002700:	601a      	str	r2, [r3, #0]
        break;
 8002702:	e059      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002708:	601a      	str	r2, [r3, #0]
        break;
 800270a:	e055      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4a32      	ldr	r2, [pc, #200]	; (80027d8 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002710:	601a      	str	r2, [r3, #0]
        break;
 8002712:	e051      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4a31      	ldr	r2, [pc, #196]	; (80027dc <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002718:	601a      	str	r2, [r3, #0]
        break;
 800271a:	e04d      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002720:	601a      	str	r2, [r3, #0]
        break;
 8002722:	e049      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	60fb      	str	r3, [r7, #12]
        break;
 800272a:	bf00      	nop
 800272c:	e044      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800272e:	7abb      	ldrb	r3, [r7, #10]
 8002730:	2b09      	cmp	r3, #9
 8002732:	d83d      	bhi.n	80027b0 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	08002765 	.word	0x08002765
 8002740:	0800276f 	.word	0x0800276f
 8002744:	08002779 	.word	0x08002779
 8002748:	08002781 	.word	0x08002781
 800274c:	08002789 	.word	0x08002789
 8002750:	08002791 	.word	0x08002791
 8002754:	08002799 	.word	0x08002799
 8002758:	080027a1 	.word	0x080027a1
 800275c:	080027b1 	.word	0x080027b1
 8002760:	080027a9 	.word	0x080027a9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
        break;
 800276c:	e024      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002774:	601a      	str	r2, [r3, #0]
        break;
 8002776:	e01f      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800277c:	601a      	str	r2, [r3, #0]
        break;
 800277e:	e01b      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002784:	601a      	str	r2, [r3, #0]
        break;
 8002786:	e017      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800278c:	601a      	str	r2, [r3, #0]
        break;
 800278e:	e013      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002794:	601a      	str	r2, [r3, #0]
        break;
 8002796:	e00f      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 800279c:	601a      	str	r2, [r3, #0]
        break;
 800279e:	e00b      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80027a4:	601a      	str	r2, [r3, #0]
        break;
 80027a6:	e007      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 80027ac:	601a      	str	r2, [r3, #0]
        break;
 80027ae:	e003      	b.n	80027b8 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	60fb      	str	r3, [r7, #12]
        break;
 80027b6:	bf00      	nop
    }
  }

  return ret;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	41200000 	.word	0x41200000
 80027c8:	41c80000 	.word	0x41c80000
 80027cc:	42480000 	.word	0x42480000
 80027d0:	42c80000 	.word	0x42c80000
 80027d4:	43480000 	.word	0x43480000
 80027d8:	43c80000 	.word	0x43c80000
 80027dc:	44ca8000 	.word	0x44ca8000
 80027e0:	45a80000 	.word	0x45a80000
 80027e4:	44a80000 	.word	0x44a80000

080027e8 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80027fe:	ed97 0a00 	vldr	s0, [r7]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fc76 	bl	80030f4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002808:	4603      	mov	r3, r0
 800280a:	e005      	b.n	8002818 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800280c:	ed97 0a00 	vldr	s0, [r7]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fcd1 	bl	80031b8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002816:	4603      	mov	r3, r0
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	331c      	adds	r3, #28
 8002832:	f107 020b 	add.w	r2, r7, #11
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fee7 	bl	800360c <lsm303agr_xl_full_scale_get>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	e023      	b.n	8002892 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d81b      	bhi.n	8002888 <LSM303AGR_ACC_GetFullScale+0x68>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	08002871 	.word	0x08002871
 8002860:	08002879 	.word	0x08002879
 8002864:	08002881 	.word	0x08002881
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
      break;
 800286e:	e00f      	b.n	8002890 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2204      	movs	r2, #4
 8002874:	601a      	str	r2, [r3, #0]
      break;
 8002876:	e00b      	b.n	8002890 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2208      	movs	r2, #8
 800287c:	601a      	str	r2, [r3, #0]
      break;
 800287e:	e007      	b.n	8002890 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	601a      	str	r2, [r3, #0]
      break;
 8002886:	e003      	b.n	8002890 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	60fb      	str	r3, [r7, #12]
      break;
 800288e:	bf00      	nop
  }

  return ret;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop

0800289c <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	dd0b      	ble.n	80028c4 <LSM303AGR_ACC_SetFullScale+0x28>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	dd06      	ble.n	80028c0 <LSM303AGR_ACC_SetFullScale+0x24>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	dc01      	bgt.n	80028bc <LSM303AGR_ACC_SetFullScale+0x20>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e004      	b.n	80028c6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80028bc:	2303      	movs	r3, #3
 80028be:	e002      	b.n	80028c6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LSM303AGR_ACC_SetFullScale+0x2a>
 80028c4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 80028c6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	331c      	adds	r3, #28
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fe75 	bl	80035c0 <lsm303agr_xl_full_scale_set>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	e000      	b.n	80028e4 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	331c      	adds	r3, #28
 8002902:	f107 020f 	add.w	r2, r7, #15
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fda3 	bl	8003454 <lsm303agr_xl_operating_mode_get>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	e047      	b.n	80029aa <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d006      	beq.n	800292e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002920:	2b02      	cmp	r3, #2
 8002922:	d007      	beq.n	8002934 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002928:	2310      	movs	r3, #16
 800292a:	83fb      	strh	r3, [r7, #30]
      break;
 800292c:	e00a      	b.n	8002944 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800292e:	2340      	movs	r3, #64	; 0x40
 8002930:	83fb      	strh	r3, [r7, #30]
      break;
 8002932:	e007      	b.n	8002944 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002938:	83fb      	strh	r3, [r7, #30]
      break;
 800293a:	e003      	b.n	8002944 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	61bb      	str	r3, [r7, #24]
      break;
 8002942:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d101      	bne.n	8002950 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	e02c      	b.n	80029aa <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	331c      	adds	r3, #28
 8002954:	f107 0210 	add.w	r2, r7, #16
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f000 feb4 	bl	80036c8 <lsm303agr_acceleration_raw_get>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e01e      	b.n	80029aa <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 800296c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002970:	461a      	mov	r2, r3
 8002972:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002976:	fb92 f3f3 	sdiv	r3, r2, r3
 800297a:	b21a      	sxth	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002984:	461a      	mov	r2, r3
 8002986:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800298a:	fb92 f3f3 	sdiv	r3, r2, r3
 800298e:	b21a      	sxth	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002994:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002998:	461a      	mov	r2, r3
 800299a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800299e:	fb92 f3f3 	sdiv	r3, r2, r3
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	809a      	strh	r2, [r3, #4]

  return ret;
 80029a8:	69bb      	ldr	r3, [r7, #24]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff8f 	bl	80028ec <LSM303AGR_ACC_GetAxesRaw>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	e03c      	b.n	8002a54 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fdec 	bl	80025be <LSM303AGR_ACC_GetSensitivity>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	e030      	b.n	8002a54 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80029f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0a:	ee17 2a90 	vmov	r2, s15
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002a12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2a:	ee17 2a90 	vmov	r2, s15
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a4a:	ee17 2a90 	vmov	r2, s15
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f103 001c 	add.w	r0, r3, #28
 8002a72:	1cba      	adds	r2, r7, #2
 8002a74:	78f9      	ldrb	r1, [r7, #3]
 8002a76:	2301      	movs	r3, #1
 8002a78:	f000 fcd4 	bl	8003424 <lsm303agr_write_reg>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e000      	b.n	8002a8a <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e04b      	b.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7b1a      	ldrb	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002aec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002af2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e01e      	b.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4798      	blx	r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e014      	b.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	331c      	adds	r3, #28
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 ff01 	bl	800393e <lsm303agr_mag_i2c_interface_set>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e000      	b.n	8002b4a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08003331 	.word	0x08003331
 8002b58:	08003393 	.word	0x08003393

08002b5c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	331c      	adds	r3, #28
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fe42 	bl	80037f4 <lsm303agr_mag_block_data_update_set>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e028      	b.n	8002bce <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	331c      	adds	r3, #28
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fdb1 	bl	80036ea <lsm303agr_mag_operating_mode_set>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	e01c      	b.n	8002bce <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	331c      	adds	r3, #28
 8002b98:	2103      	movs	r1, #3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fdcb 	bl	8003736 <lsm303agr_mag_data_rate_set>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e010      	b.n	8002bce <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	331c      	adds	r3, #28
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fe77 	bl	80038a6 <lsm303agr_mag_self_test_set>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e004      	b.n	8002bce <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f874 	bl	8002ccc <LSM303AGR_MAG_Disable>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e004      	b.n	8002bfa <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	331c      	adds	r3, #28
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fe36 	bl	8003884 <lsm303agr_mag_device_id_get>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e000      	b.n	8002c26 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2232      	movs	r2, #50	; 0x32
 8002c62:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002c78:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	42c80000 	.word	0x42c80000

08002c8c <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e010      	b.n	8002cc4 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	331c      	adds	r3, #28
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fd1e 	bl	80036ea <lsm303agr_mag_operating_mode_set>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb8:	e004      	b.n	8002cc4 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e010      	b.n	8002d04 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	331c      	adds	r3, #28
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fcfe 	bl	80036ea <lsm303agr_mag_operating_mode_set>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	e004      	b.n	8002d04 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002d1c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	331c      	adds	r3, #28
 8002d3e:	f107 020b 	add.w	r2, r7, #11
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fd1d 	bl	8003784 <lsm303agr_mag_data_rate_get>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e023      	b.n	8002d9e <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002d56:	7afb      	ldrb	r3, [r7, #11]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d81b      	bhi.n	8002d94 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002d5c:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002d75 	.word	0x08002d75
 8002d68:	08002d7d 	.word	0x08002d7d
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002d8d 	.word	0x08002d8d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002d78:	601a      	str	r2, [r3, #0]
      break;
 8002d7a:	e00f      	b.n	8002d9c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002d80:	601a      	str	r2, [r3, #0]
      break;
 8002d82:	e00b      	b.n	8002d9c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002d88:	601a      	str	r2, [r3, #0]
      break;
 8002d8a:	e007      	b.n	8002d9c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002d90:	601a      	str	r2, [r3, #0]
      break;
 8002d92:	e003      	b.n	8002d9c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	60fb      	str	r3, [r7, #12]
      break;
 8002d9a:	bf00      	nop
  }

  return ret;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	41200000 	.word	0x41200000
 8002dac:	41a00000 	.word	0x41a00000
 8002db0:	42480000 	.word	0x42480000
 8002db4:	42c80000 	.word	0x42c80000

08002db8 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002dc4:	edd7 7a00 	vldr	s15, [r7]
 8002dc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	d801      	bhi.n	8002dda <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e016      	b.n	8002e08 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002dda:	edd7 7a00 	vldr	s15, [r7]
 8002dde:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	d801      	bhi.n	8002df0 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e00b      	b.n	8002e08 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002df0:	edd7 7a00 	vldr	s15, [r7]
 8002df4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e30 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d801      	bhi.n	8002e06 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e000      	b.n	8002e08 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002e06:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002e08:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	331c      	adds	r3, #28
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fc8f 	bl	8003736 <lsm303agr_mag_data_rate_set>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e000      	b.n	8002e26 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	42480000 	.word	0x42480000

08002e34 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2232      	movs	r2, #50	; 0x32
 8002e42:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	331c      	adds	r3, #28
 8002e78:	f107 0208 	add.w	r2, r7, #8
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fcde 	bl	8003840 <lsm303agr_magnetic_raw_get>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e00c      	b.n	8002eaa <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002e90:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002e98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002ea0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	331c      	adds	r3, #28
 8002ec0:	f107 0210 	add.w	r2, r7, #16
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fcba 	bl	8003840 <lsm303agr_magnetic_raw_get>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e036      	b.n	8002f46 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff14 	bl	8002d0c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efc:	ee17 2a90 	vmov	r2, s15
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002f04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002f24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3c:	ee17 2a90 	vmov	r2, s15
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	331c      	adds	r3, #28
 8002f62:	f107 020b 	add.w	r2, r7, #11
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb4f 	bl	800360c <lsm303agr_xl_full_scale_get>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e023      	b.n	8002fc2 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d81b      	bhi.n	8002fb8 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fa1 	.word	0x08002fa1
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb1 	.word	0x08002fb1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8002f9c:	601a      	str	r2, [r3, #0]
      break;
 8002f9e:	e00f      	b.n	8002fc0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8002fa4:	601a      	str	r2, [r3, #0]
      break;
 8002fa6:	e00b      	b.n	8002fc0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8002fac:	601a      	str	r2, [r3, #0]
      break;
 8002fae:	e007      	b.n	8002fc0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8002fb4:	601a      	str	r2, [r3, #0]
      break;
 8002fb6:	e003      	b.n	8002fc0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	60fb      	str	r3, [r7, #12]
      break;
 8002fbe:	bf00      	nop
  }

  return ret;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	3f7ae148 	.word	0x3f7ae148
 8002fd0:	3ff9999a 	.word	0x3ff9999a
 8002fd4:	4079999a 	.word	0x4079999a
 8002fd8:	413b851f 	.word	0x413b851f

08002fdc <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	331c      	adds	r3, #28
 8002fee:	f107 020b 	add.w	r2, r7, #11
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fb09 	bl	800360c <lsm303agr_xl_full_scale_get>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	e023      	b.n	800304e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d81b      	bhi.n	8003044 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003035 	.word	0x08003035
 8003020:	0800303d 	.word	0x0800303d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003028:	601a      	str	r2, [r3, #0]
      break;
 800302a:	e00f      	b.n	800304c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003030:	601a      	str	r2, [r3, #0]
      break;
 8003032:	e00b      	b.n	800304c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003038:	601a      	str	r2, [r3, #0]
      break;
 800303a:	e007      	b.n	800304c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003040:	601a      	str	r2, [r3, #0]
      break;
 8003042:	e003      	b.n	800304c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	60fb      	str	r3, [r7, #12]
      break;
 800304a:	bf00      	nop
  }

  return ret;
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	4079999a 	.word	0x4079999a
 800305c:	40fa3d71 	.word	0x40fa3d71
 8003060:	417a147b 	.word	0x417a147b
 8003064:	423b999a 	.word	0x423b999a

08003068 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	331c      	adds	r3, #28
 800307a:	f107 020b 	add.w	r2, r7, #11
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fac3 	bl	800360c <lsm303agr_xl_full_scale_get>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	e023      	b.n	80030da <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d81b      	bhi.n	80030d0 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030c1 	.word	0x080030c1
 80030ac:	080030c9 	.word	0x080030c9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80030b4:	601a      	str	r2, [r3, #0]
      break;
 80030b6:	e00f      	b.n	80030d8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80030bc:	601a      	str	r2, [r3, #0]
      break;
 80030be:	e00b      	b.n	80030d8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80030c4:	601a      	str	r2, [r3, #0]
      break;
 80030c6:	e007      	b.n	80030d8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80030cc:	601a      	str	r2, [r3, #0]
      break;
 80030ce:	e003      	b.n	80030d8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	60fb      	str	r3, [r7, #12]
      break;
 80030d6:	bf00      	nop
  }

  return ret;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	417a147b 	.word	0x417a147b
 80030e8:	41fa147b 	.word	0x41fa147b
 80030ec:	427a147b 	.word	0x427a147b
 80030f0:	433b947b 	.word	0x433b947b

080030f4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003100:	edd7 7a00 	vldr	s15, [r7]
 8003104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	d801      	bhi.n	8003116 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003112:	2301      	movs	r3, #1
 8003114:	e037      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003116:	edd7 7a00 	vldr	s15, [r7]
 800311a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800311e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	d801      	bhi.n	800312c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003128:	2302      	movs	r3, #2
 800312a:	e02c      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800312c:	edd7 7a00 	vldr	s15, [r7]
 8003130:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d801      	bhi.n	8003142 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800313e:	2303      	movs	r3, #3
 8003140:	e021      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003142:	edd7 7a00 	vldr	s15, [r7]
 8003146:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80031ac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800314a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	d801      	bhi.n	8003158 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003154:	2304      	movs	r3, #4
 8003156:	e016      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003158:	edd7 7a00 	vldr	s15, [r7]
 800315c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80031b0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d801      	bhi.n	800316e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800316a:	2305      	movs	r3, #5
 800316c:	e00b      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800316e:	edd7 7a00 	vldr	s15, [r7]
 8003172:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80031b4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	d801      	bhi.n	8003184 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003180:	2306      	movs	r3, #6
 8003182:	e000      	b.n	8003186 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003184:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003186:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	331c      	adds	r3, #28
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f993 	bl	80034bc <lsm303agr_xl_data_rate_set>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	e000      	b.n	80031a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	42480000 	.word	0x42480000
 80031b0:	42c80000 	.word	0x42c80000
 80031b4:	43480000 	.word	0x43480000

080031b8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80031c4:	edd7 7a00 	vldr	s15, [r7]
 80031c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	d801      	bhi.n	80031da <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e037      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031da:	edd7 7a00 	vldr	s15, [r7]
 80031de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d801      	bhi.n	80031f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e02c      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031f0:	edd7 7a00 	vldr	s15, [r7]
 80031f4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d801      	bhi.n	8003206 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003202:	2303      	movs	r3, #3
 8003204:	e021      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003206:	edd7 7a00 	vldr	s15, [r7]
 800320a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003260 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800320e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d801      	bhi.n	800321c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003218:	2304      	movs	r3, #4
 800321a:	e016      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800321c:	edd7 7a00 	vldr	s15, [r7]
 8003220:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003264 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d801      	bhi.n	8003232 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800322e:	2305      	movs	r3, #5
 8003230:	e00b      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003232:	edd7 7a00 	vldr	s15, [r7]
 8003236:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003268 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800323a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d801      	bhi.n	8003248 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003244:	2306      	movs	r3, #6
 8003246:	e000      	b.n	800324a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003248:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	42480000 	.word	0x42480000
 8003264:	42c80000 	.word	0x42c80000
 8003268:	43480000 	.word	0x43480000

0800326c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	72fb      	strb	r3, [r7, #11]
 800327c:	4613      	mov	r3, r2
 800327e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10e      	bne.n	80032aa <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	695c      	ldr	r4, [r3, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	7b1b      	ldrb	r3, [r3, #12]
 8003294:	b298      	uxth	r0, r3
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800329c:	b2db      	uxtb	r3, r3
 800329e:	b299      	uxth	r1, r3
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	47a0      	blx	r4
 80032a6:	4603      	mov	r3, r0
 80032a8:	e00d      	b.n	80032c6 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	695c      	ldr	r4, [r3, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	7b1b      	ldrb	r3, [r3, #12]
 80032b2:	b298      	uxth	r0, r3
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	b299      	uxth	r1, r3
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	47a0      	blx	r4
 80032c4:	4603      	mov	r3, r0
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}

080032ce <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	460b      	mov	r3, r1
 80032dc:	72fb      	strb	r3, [r7, #11]
 80032de:	4613      	mov	r3, r2
 80032e0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	691c      	ldr	r4, [r3, #16]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	7b1b      	ldrb	r3, [r3, #12]
 80032f6:	b298      	uxth	r0, r3
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	b299      	uxth	r1, r3
 8003302:	893b      	ldrh	r3, [r7, #8]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	47a0      	blx	r4
 8003308:	4603      	mov	r3, r0
 800330a:	e00d      	b.n	8003328 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	691c      	ldr	r4, [r3, #16]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	7b1b      	ldrb	r3, [r3, #12]
 8003314:	b298      	uxth	r0, r3
 8003316:	7afb      	ldrb	r3, [r7, #11]
 8003318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331c:	b2db      	uxtb	r3, r3
 800331e:	b299      	uxth	r1, r3
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	47a0      	blx	r4
 8003326:	4603      	mov	r3, r0
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	72fb      	strb	r3, [r7, #11]
 8003340:	4613      	mov	r3, r2
 8003342:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10e      	bne.n	800336e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	695c      	ldr	r4, [r3, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	7b1b      	ldrb	r3, [r3, #12]
 8003358:	b298      	uxth	r0, r3
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003360:	b2db      	uxtb	r3, r3
 8003362:	b299      	uxth	r1, r3
 8003364:	893b      	ldrh	r3, [r7, #8]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	47a0      	blx	r4
 800336a:	4603      	mov	r3, r0
 800336c:	e00d      	b.n	800338a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	695c      	ldr	r4, [r3, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	7b1b      	ldrb	r3, [r3, #12]
 8003376:	b298      	uxth	r0, r3
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800337e:	b2db      	uxtb	r3, r3
 8003380:	b299      	uxth	r1, r3
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	47a0      	blx	r4
 8003388:	4603      	mov	r3, r0
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}

08003392 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	461a      	mov	r2, r3
 800339e:	460b      	mov	r3, r1
 80033a0:	72fb      	strb	r3, [r7, #11]
 80033a2:	4613      	mov	r3, r2
 80033a4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10e      	bne.n	80033d0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	691c      	ldr	r4, [r3, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	7b1b      	ldrb	r3, [r3, #12]
 80033ba:	b298      	uxth	r0, r3
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	b299      	uxth	r1, r3
 80033c6:	893b      	ldrh	r3, [r7, #8]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	47a0      	blx	r4
 80033cc:	4603      	mov	r3, r0
 80033ce:	e00d      	b.n	80033ec <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	691c      	ldr	r4, [r3, #16]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
 80033d8:	b298      	uxth	r0, r3
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	b299      	uxth	r1, r3
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	47a0      	blx	r4
 80033ea:	4603      	mov	r3, r0
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd90      	pop	{r4, r7, pc}

080033f4 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	461a      	mov	r2, r3
 8003400:	460b      	mov	r3, r1
 8003402:	72fb      	strb	r3, [r7, #11]
 8003404:	4613      	mov	r3, r2
 8003406:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685c      	ldr	r4, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6898      	ldr	r0, [r3, #8]
 8003410:	893b      	ldrh	r3, [r7, #8]
 8003412:	7af9      	ldrb	r1, [r7, #11]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	47a0      	blx	r4
 8003418:	6178      	str	r0, [r7, #20]
  return ret;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	4618      	mov	r0, r3
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	460b      	mov	r3, r1
 8003432:	72fb      	strb	r3, [r7, #11]
 8003434:	4613      	mov	r3, r2
 8003436:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681c      	ldr	r4, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6898      	ldr	r0, [r3, #8]
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	7af9      	ldrb	r1, [r7, #11]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	47a0      	blx	r4
 8003448:	6178      	str	r0, [r7, #20]
  return ret;
 800344a:	697b      	ldr	r3, [r7, #20]
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800345e:	f107 020c 	add.w	r2, r7, #12
 8003462:	2301      	movs	r3, #1
 8003464:	2120      	movs	r1, #32
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffc4 	bl	80033f4 <lsm303agr_read_reg>
 800346c:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003474:	f107 0210 	add.w	r2, r7, #16
 8003478:	2301      	movs	r3, #1
 800347a:	2123      	movs	r1, #35	; 0x23
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ffb9 	bl	80033f4 <lsm303agr_read_reg>
 8003482:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8003484:	7b3b      	ldrb	r3, [r7, #12]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e00c      	b.n	80034b2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003498:	7c3b      	ldrb	r3, [r7, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e002      	b.n	80034b2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80034b2:	697b      	ldr	r3, [r7, #20]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80034c8:	f107 0208 	add.w	r2, r7, #8
 80034cc:	2301      	movs	r3, #1
 80034ce:	2120      	movs	r1, #32
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff8f 	bl	80033f4 <lsm303agr_read_reg>
 80034d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	7a3b      	ldrb	r3, [r7, #8]
 80034e8:	f362 1307 	bfi	r3, r2, #4, #4
 80034ec:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	2301      	movs	r3, #1
 80034f4:	2120      	movs	r1, #32
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff94 	bl	8003424 <lsm303agr_write_reg>
 80034fc:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003512:	f107 0208 	add.w	r2, r7, #8
 8003516:	2301      	movs	r3, #1
 8003518:	2120      	movs	r1, #32
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff6a 	bl	80033f4 <lsm303agr_read_reg>
 8003520:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 8003522:	7a3b      	ldrb	r3, [r7, #8]
 8003524:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b09      	cmp	r3, #9
 800352c:	d83e      	bhi.n	80035ac <lsm303agr_xl_data_rate_get+0xa4>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <lsm303agr_xl_data_rate_get+0x2c>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	0800355d 	.word	0x0800355d
 8003538:	08003565 	.word	0x08003565
 800353c:	0800356d 	.word	0x0800356d
 8003540:	08003575 	.word	0x08003575
 8003544:	0800357d 	.word	0x0800357d
 8003548:	08003585 	.word	0x08003585
 800354c:	0800358d 	.word	0x0800358d
 8003550:	08003595 	.word	0x08003595
 8003554:	0800359d 	.word	0x0800359d
 8003558:	080035a5 	.word	0x080035a5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
      break;
 8003562:	e027      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
      break;
 800356a:	e023      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
      break;
 8003572:	e01f      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2203      	movs	r2, #3
 8003578:	701a      	strb	r2, [r3, #0]
      break;
 800357a:	e01b      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2204      	movs	r2, #4
 8003580:	701a      	strb	r2, [r3, #0]
      break;
 8003582:	e017      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2205      	movs	r2, #5
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	e013      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2206      	movs	r2, #6
 8003590:	701a      	strb	r2, [r3, #0]
      break;
 8003592:	e00f      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2207      	movs	r2, #7
 8003598:	701a      	strb	r2, [r3, #0]
      break;
 800359a:	e00b      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2208      	movs	r2, #8
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	e007      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2209      	movs	r2, #9
 80035a8:	701a      	strb	r2, [r3, #0]
      break;
 80035aa:	e003      	b.n	80035b4 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
      break;
 80035b2:	bf00      	nop
  }

  return ret;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop

080035c0 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035cc:	f107 0208 	add.w	r2, r7, #8
 80035d0:	2301      	movs	r3, #1
 80035d2:	2123      	movs	r1, #35	; 0x23
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff0d 	bl	80033f4 <lsm303agr_read_reg>
 80035da:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	7a3b      	ldrb	r3, [r7, #8]
 80035ec:	f362 1305 	bfi	r3, r2, #4, #2
 80035f0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035f2:	f107 0208 	add.w	r2, r7, #8
 80035f6:	2301      	movs	r3, #1
 80035f8:	2123      	movs	r1, #35	; 0x23
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff12 	bl	8003424 <lsm303agr_write_reg>
 8003600:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003616:	f107 0208 	add.w	r2, r7, #8
 800361a:	2301      	movs	r3, #1
 800361c:	2123      	movs	r1, #35	; 0x23
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fee8 	bl	80033f4 <lsm303agr_read_reg>
 8003624:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8003626:	7a3b      	ldrb	r3, [r7, #8]
 8003628:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b03      	cmp	r3, #3
 8003630:	d81a      	bhi.n	8003668 <lsm303agr_xl_full_scale_get+0x5c>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <lsm303agr_xl_full_scale_get+0x2c>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	08003649 	.word	0x08003649
 800363c:	08003651 	.word	0x08003651
 8003640:	08003659 	.word	0x08003659
 8003644:	08003661 	.word	0x08003661
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
      break;
 800364e:	e00f      	b.n	8003670 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
      break;
 8003656:	e00b      	b.n	8003670 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
      break;
 800365e:	e007      	b.n	8003670 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2203      	movs	r2, #3
 8003664:	701a      	strb	r2, [r3, #0]
      break;
 8003666:	e003      	b.n	8003670 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
      break;
 800366e:	bf00      	nop
  }
  return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003688:	f107 0208 	add.w	r2, r7, #8
 800368c:	2301      	movs	r3, #1
 800368e:	2123      	movs	r1, #35	; 0x23
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff feaf 	bl	80033f4 <lsm303agr_read_reg>
 8003696:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	7a3b      	ldrb	r3, [r7, #8]
 80036a8:	f362 13c7 	bfi	r3, r2, #7, #1
 80036ac:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80036ae:	f107 0208 	add.w	r2, r7, #8
 80036b2:	2301      	movs	r3, #1
 80036b4:	2123      	movs	r1, #35	; 0x23
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff feb4 	bl	8003424 <lsm303agr_write_reg>
 80036bc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80036d2:	2306      	movs	r3, #6
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	2128      	movs	r1, #40	; 0x28
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fe8b 	bl	80033f4 <lsm303agr_read_reg>
 80036de:	60f8      	str	r0, [r7, #12]
  return ret;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80036f6:	f107 0208 	add.w	r2, r7, #8
 80036fa:	2301      	movs	r3, #1
 80036fc:	2160      	movs	r1, #96	; 0x60
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fe78 	bl	80033f4 <lsm303agr_read_reg>
 8003704:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	7a3b      	ldrb	r3, [r7, #8]
 8003716:	f362 0301 	bfi	r3, r2, #0, #2
 800371a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800371c:	f107 0208 	add.w	r2, r7, #8
 8003720:	2301      	movs	r3, #1
 8003722:	2160      	movs	r1, #96	; 0x60
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fe7d 	bl	8003424 <lsm303agr_write_reg>
 800372a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003742:	f107 0208 	add.w	r2, r7, #8
 8003746:	2301      	movs	r3, #1
 8003748:	2160      	movs	r1, #96	; 0x60
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fe52 	bl	80033f4 <lsm303agr_read_reg>
 8003750:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	b2da      	uxtb	r2, r3
 8003760:	7a3b      	ldrb	r3, [r7, #8]
 8003762:	f362 0383 	bfi	r3, r2, #2, #2
 8003766:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003768:	f107 0208 	add.w	r2, r7, #8
 800376c:	2301      	movs	r3, #1
 800376e:	2160      	movs	r1, #96	; 0x60
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fe57 	bl	8003424 <lsm303agr_write_reg>
 8003776:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800378e:	f107 0208 	add.w	r2, r7, #8
 8003792:	2301      	movs	r3, #1
 8003794:	2160      	movs	r1, #96	; 0x60
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe2c 	bl	80033f4 <lsm303agr_read_reg>
 800379c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 800379e:	7a3b      	ldrb	r3, [r7, #8]
 80037a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d81a      	bhi.n	80037e0 <lsm303agr_mag_data_rate_get+0x5c>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <lsm303agr_mag_data_rate_get+0x2c>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037c1 	.word	0x080037c1
 80037b4:	080037c9 	.word	0x080037c9
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037d9 	.word	0x080037d9
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
      break;
 80037c6:	e00f      	b.n	80037e8 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
      break;
 80037ce:	e00b      	b.n	80037e8 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	e007      	b.n	80037e8 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2203      	movs	r2, #3
 80037dc:	701a      	strb	r2, [r3, #0]
      break;
 80037de:	e003      	b.n	80037e8 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
      break;
 80037e6:	bf00      	nop
  }
  return ret;
 80037e8:	68fb      	ldr	r3, [r7, #12]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop

080037f4 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	2301      	movs	r3, #1
 8003806:	2162      	movs	r1, #98	; 0x62
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fdf3 	bl	80033f4 <lsm303agr_read_reg>
 800380e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	b2da      	uxtb	r2, r3
 800381e:	7a3b      	ldrb	r3, [r7, #8]
 8003820:	f362 1304 	bfi	r3, r2, #4, #1
 8003824:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003826:	f107 0208 	add.w	r2, r7, #8
 800382a:	2301      	movs	r3, #1
 800382c:	2162      	movs	r1, #98	; 0x62
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fdf8 	bl	8003424 <lsm303agr_write_reg>
 8003834:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800384a:	2306      	movs	r3, #6
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	2168      	movs	r1, #104	; 0x68
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fdcf 	bl	80033f4 <lsm303agr_read_reg>
 8003856:	60f8      	str	r0, [r7, #12]
  return ret;
 8003858:	68fb      	ldr	r3, [r7, #12]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800386c:	2301      	movs	r3, #1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	210f      	movs	r1, #15
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fdbe 	bl	80033f4 <lsm303agr_read_reg>
 8003878:	60f8      	str	r0, [r7, #12]
  return ret;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800388e:	2301      	movs	r3, #1
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	214f      	movs	r1, #79	; 0x4f
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fdad 	bl	80033f4 <lsm303agr_read_reg>
 800389a:	60f8      	str	r0, [r7, #12]
  return ret;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80038b2:	f107 0208 	add.w	r2, r7, #8
 80038b6:	2301      	movs	r3, #1
 80038b8:	2162      	movs	r1, #98	; 0x62
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fd9a 	bl	80033f4 <lsm303agr_read_reg>
 80038c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	7a3b      	ldrb	r3, [r7, #8]
 80038d2:	f362 0341 	bfi	r3, r2, #1, #1
 80038d6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80038d8:	f107 0208 	add.w	r2, r7, #8
 80038dc:	2301      	movs	r3, #1
 80038de:	2162      	movs	r1, #98	; 0x62
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fd9f 	bl	8003424 <lsm303agr_write_reg>
 80038e6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80038fe:	f107 0208 	add.w	r2, r7, #8
 8003902:	2301      	movs	r3, #1
 8003904:	212e      	movs	r1, #46	; 0x2e
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fd74 	bl	80033f4 <lsm303agr_read_reg>
 800390c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	b2da      	uxtb	r2, r3
 800391c:	7a3b      	ldrb	r3, [r7, #8]
 800391e:	f362 1387 	bfi	r3, r2, #6, #2
 8003922:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	2301      	movs	r3, #1
 800392a:	212e      	movs	r1, #46	; 0x2e
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fd79 	bl	8003424 <lsm303agr_write_reg>
 8003932:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800394a:	f107 0208 	add.w	r2, r7, #8
 800394e:	2301      	movs	r3, #1
 8003950:	2162      	movs	r1, #98	; 0x62
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fd4e 	bl	80033f4 <lsm303agr_read_reg>
 8003958:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10f      	bne.n	8003980 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	7a3b      	ldrb	r3, [r7, #8]
 800396a:	f362 1345 	bfi	r3, r2, #5, #1
 800396e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003970:	f107 0208 	add.w	r2, r7, #8
 8003974:	2301      	movs	r3, #1
 8003976:	2162      	movs	r1, #98	; 0x62
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fd53 	bl	8003424 <lsm303agr_write_reg>
 800397e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e04d      	b.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	7b1a      	ldrb	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <LSM6DSL_RegisterBusIO+0xc4>)
 80039e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <LSM6DSL_RegisterBusIO+0xc8>)
 80039ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e020      	b.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4798      	blx	r3
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e016      	b.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d112      	bne.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2112      	movs	r1, #18
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fd2d 	bl	8004492 <LSM6DSL_Write_Reg>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a44:	68fb      	ldr	r3, [r7, #12]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	08004901 	.word	0x08004901
 8003a54:	08004937 	.word	0x08004937

08003a58 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	331c      	adds	r3, #28
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f9e5 	bl	8004e36 <lsm6dsl_auto_increment_set>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	e054      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	331c      	adds	r3, #28
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f980 	bl	8004d84 <lsm6dsl_block_data_update_set>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	e048      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	331c      	adds	r3, #28
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f9f3 	bl	8004e82 <lsm6dsl_fifo_mode_set>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	e03c      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	331c      	adds	r3, #28
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 ffe6 	bl	8004a88 <lsm6dsl_xl_data_rate_set>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e02c      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	331c      	adds	r3, #28
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ff7c 	bl	80049cc <lsm6dsl_xl_full_scale_set>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e020      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	331c      	adds	r3, #28
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f8c0 	bl	8004c74 <lsm6dsl_gy_data_rate_set>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e010      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	331c      	adds	r3, #28
 8003b04:	2106      	movs	r1, #6
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f84c 	bl	8004ba4 <lsm6dsl_gy_full_scale_set>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e004      	b.n	8003b22 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f888 	bl	8003c48 <LSM6DSL_ACC_Disable>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	e015      	b.n	8003b70 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa9a 	bl	800407e <LSM6DSL_GYRO_Disable>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	e00c      	b.n	8003b70 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	331c      	adds	r3, #28
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f943 	bl	8004e14 <lsm6dsl_device_id_get>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
 8003b98:	e000      	b.n	8003b9c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bcc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <LSM6DSL_GetCapabilities+0x58>)
 8003bde:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <LSM6DSL_GetCapabilities+0x58>)
 8003be4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	45d02000 	.word	0x45d02000

08003c00 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e014      	b.n	8003c40 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f103 021c 	add.w	r2, r3, #28
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 ff2f 	bl	8004a88 <lsm6dsl_xl_data_rate_set>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e004      	b.n	8003c40 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e01f      	b.n	8003c9e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f103 021c 	add.w	r2, r3, #28
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	332b      	adds	r3, #43	; 0x2b
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 ff32 	bl	8004ad4 <lsm6dsl_xl_data_rate_get>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e010      	b.n	8003c9e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	331c      	adds	r3, #28
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff00 	bl	8004a88 <lsm6dsl_xl_data_rate_set>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	e004      	b.n	8003c9e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	331c      	adds	r3, #28
 8003cba:	f107 020b 	add.w	r2, r7, #11
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fea9 	bl	8004a18 <lsm6dsl_xl_full_scale_get>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e023      	b.n	8003d1a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d81b      	bhi.n	8003d10 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d01 	.word	0x08003d01
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003cf4:	601a      	str	r2, [r3, #0]
      break;
 8003cf6:	e00f      	b.n	8003d18 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003cfc:	601a      	str	r2, [r3, #0]
      break;
 8003cfe:	e00b      	b.n	8003d18 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003d04:	601a      	str	r2, [r3, #0]
      break;
 8003d06:	e007      	b.n	8003d18 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003d0c:	601a      	str	r2, [r3, #0]
      break;
 8003d0e:	e003      	b.n	8003d18 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	60fb      	str	r3, [r7, #12]
      break;
 8003d16:	bf00      	nop
  }

  return ret;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	3d79db23 	.word	0x3d79db23
 8003d28:	3df9db23 	.word	0x3df9db23
 8003d2c:	3e79db23 	.word	0x3e79db23
 8003d30:	3ef9db23 	.word	0x3ef9db23

08003d34 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	331c      	adds	r3, #28
 8003d46:	f107 020b 	add.w	r2, r7, #11
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fec1 	bl	8004ad4 <lsm6dsl_xl_data_rate_get>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5c:	e054      	b.n	8003e08 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	2b0b      	cmp	r3, #11
 8003d62:	d84c      	bhi.n	8003dfe <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d9d 	.word	0x08003d9d
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003db7 	.word	0x08003db7
 8003d78:	08003dbf 	.word	0x08003dbf
 8003d7c:	08003dc7 	.word	0x08003dc7
 8003d80:	08003dcf 	.word	0x08003dcf
 8003d84:	08003dd7 	.word	0x08003dd7
 8003d88:	08003ddf 	.word	0x08003ddf
 8003d8c:	08003de7 	.word	0x08003de7
 8003d90:	08003def 	.word	0x08003def
 8003d94:	08003df7 	.word	0x08003df7
 8003d98:	08003da7 	.word	0x08003da7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
      break;
 8003da4:	e02f      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003daa:	601a      	str	r2, [r3, #0]
      break;
 8003dac:	e02b      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003db2:	601a      	str	r2, [r3, #0]
      break;
 8003db4:	e027      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003dba:	601a      	str	r2, [r3, #0]
      break;
 8003dbc:	e023      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003dc2:	601a      	str	r2, [r3, #0]
      break;
 8003dc4:	e01f      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003dca:	601a      	str	r2, [r3, #0]
      break;
 8003dcc:	e01b      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003dd2:	601a      	str	r2, [r3, #0]
      break;
 8003dd4:	e017      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003dda:	601a      	str	r2, [r3, #0]
      break;
 8003ddc:	e013      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003de2:	601a      	str	r2, [r3, #0]
      break;
 8003de4:	e00f      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003dea:	601a      	str	r2, [r3, #0]
      break;
 8003dec:	e00b      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003df2:	601a      	str	r2, [r3, #0]
      break;
 8003df4:	e007      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003dfa:	601a      	str	r2, [r3, #0]
      break;
 8003dfc:	e003      	b.n	8003e06 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	60fb      	str	r3, [r7, #12]
      break;
 8003e04:	bf00      	nop
  }

  return ret;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	3fcccccd 	.word	0x3fcccccd
 8003e14:	41480000 	.word	0x41480000
 8003e18:	41d00000 	.word	0x41d00000
 8003e1c:	42500000 	.word	0x42500000
 8003e20:	42d00000 	.word	0x42d00000
 8003e24:	43500000 	.word	0x43500000
 8003e28:	43d00000 	.word	0x43d00000
 8003e2c:	44504000 	.word	0x44504000
 8003e30:	44cf8000 	.word	0x44cf8000
 8003e34:	45502000 	.word	0x45502000
 8003e38:	45d02000 	.word	0x45d02000

08003e3c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d106      	bne.n	8003e60 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003e52:	ed97 0a00 	vldr	s0, [r7]
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fb36 	bl	80044c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	e005      	b.n	8003e6c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003e60:	ed97 0a00 	vldr	s0, [r7]
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fbbb 	bl	80045e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8003e6a:	4603      	mov	r3, r0
  }
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	331c      	adds	r3, #28
 8003e86:	f107 020b 	add.w	r2, r7, #11
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fdc3 	bl	8004a18 <lsm6dsl_xl_full_scale_get>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e023      	b.n	8003ee6 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <LSM6DSL_ACC_GetFullScale+0x68>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <LSM6DSL_ACC_GetFullScale+0x38>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ecd 	.word	0x08003ecd
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	601a      	str	r2, [r3, #0]
      break;
 8003ec2:	e00f      	b.n	8003ee4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	601a      	str	r2, [r3, #0]
      break;
 8003eca:	e00b      	b.n	8003ee4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
      break;
 8003ed2:	e007      	b.n	8003ee4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	601a      	str	r2, [r3, #0]
      break;
 8003eda:	e003      	b.n	8003ee4 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	60fb      	str	r3, [r7, #12]
      break;
 8003ee2:	bf00      	nop
  }

  return ret;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	dd0b      	ble.n	8003f18 <LSM6DSL_ACC_SetFullScale+0x28>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	dd06      	ble.n	8003f14 <LSM6DSL_ACC_SetFullScale+0x24>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	dc01      	bgt.n	8003f10 <LSM6DSL_ACC_SetFullScale+0x20>
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e004      	b.n	8003f1a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e002      	b.n	8003f1a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e000      	b.n	8003f1a <LSM6DSL_ACC_SetFullScale+0x2a>
 8003f18:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003f1a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	331c      	adds	r3, #28
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fd51 	bl	80049cc <lsm6dsl_xl_full_scale_set>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e000      	b.n	8003f38 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	f107 0208 	add.w	r2, r7, #8
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 ff4c 	bl	8004df2 <lsm6dsl_acceleration_raw_get>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e00c      	b.n	8003f80 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003f66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003f6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003f76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	331c      	adds	r3, #28
 8003f9c:	f107 0210 	add.w	r2, r7, #16
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 ff25 	bl	8004df2 <lsm6dsl_acceleration_raw_get>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	e03c      	b.n	800402e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe74 	bl	8003ca8 <LSM6DSL_ACC_GetSensitivity>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e030      	b.n	800402e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003fcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe4:	ee17 2a90 	vmov	r2, s15
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004004:	ee17 2a90 	vmov	r2, s15
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800400c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004018:	edd7 7a03 	vldr	s15, [r7, #12]
 800401c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004024:	ee17 2a90 	vmov	r2, s15
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e014      	b.n	8004076 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f103 021c 	add.w	r2, r3, #28
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fe0a 	bl	8004c74 <lsm6dsl_gy_data_rate_set>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	e004      	b.n	8004076 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e01f      	b.n	80040d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 021c 	add.w	r2, r3, #28
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	332c      	adds	r3, #44	; 0x2c
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fe0d 	bl	8004cc0 <lsm6dsl_gy_data_rate_get>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	e010      	b.n	80040d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	331c      	adds	r3, #28
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fddb 	bl	8004c74 <lsm6dsl_gy_data_rate_set>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	e004      	b.n	80040d4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	331c      	adds	r3, #28
 80040ee:	f107 020b 	add.w	r2, r7, #11
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd7b 	bl	8004bf0 <lsm6dsl_gy_full_scale_get>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	e02d      	b.n	8004162 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d825      	bhi.n	8004158 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004139 	.word	0x08004139
 8004118:	08004131 	.word	0x08004131
 800411c:	08004141 	.word	0x08004141
 8004120:	08004159 	.word	0x08004159
 8004124:	08004149 	.word	0x08004149
 8004128:	08004159 	.word	0x08004159
 800412c:	08004151 	.word	0x08004151
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004134:	601a      	str	r2, [r3, #0]
      break;
 8004136:	e013      	b.n	8004160 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800413c:	601a      	str	r2, [r3, #0]
      break;
 800413e:	e00f      	b.n	8004160 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004144:	601a      	str	r2, [r3, #0]
      break;
 8004146:	e00b      	b.n	8004160 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800414c:	601a      	str	r2, [r3, #0]
      break;
 800414e:	e007      	b.n	8004160 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004154:	601a      	str	r2, [r3, #0]
      break;
 8004156:	e003      	b.n	8004160 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	60fb      	str	r3, [r7, #12]
      break;
 800415e:	bf00      	nop
  }

  return ret;
 8004160:	68fb      	ldr	r3, [r7, #12]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	408c0000 	.word	0x408c0000
 8004170:	410c0000 	.word	0x410c0000
 8004174:	418c0000 	.word	0x418c0000
 8004178:	420c0000 	.word	0x420c0000
 800417c:	428c0000 	.word	0x428c0000

08004180 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	331c      	adds	r3, #28
 8004192:	f107 020b 	add.w	r2, r7, #11
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fd91 	bl	8004cc0 <lsm6dsl_gy_data_rate_get>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
 80041a8:	e04e      	b.n	8004248 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	2b0a      	cmp	r3, #10
 80041ae:	d846      	bhi.n	800423e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041f7 	.word	0x080041f7
 80041c4:	080041ff 	.word	0x080041ff
 80041c8:	08004207 	.word	0x08004207
 80041cc:	0800420f 	.word	0x0800420f
 80041d0:	08004217 	.word	0x08004217
 80041d4:	0800421f 	.word	0x0800421f
 80041d8:	08004227 	.word	0x08004227
 80041dc:	0800422f 	.word	0x0800422f
 80041e0:	08004237 	.word	0x08004237
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
      break;
 80041ec:	e02b      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80041f2:	601a      	str	r2, [r3, #0]
      break;
 80041f4:	e027      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80041fa:	601a      	str	r2, [r3, #0]
      break;
 80041fc:	e023      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004202:	601a      	str	r2, [r3, #0]
      break;
 8004204:	e01f      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800420a:	601a      	str	r2, [r3, #0]
      break;
 800420c:	e01b      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	4a13      	ldr	r2, [pc, #76]	; (8004260 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004212:	601a      	str	r2, [r3, #0]
      break;
 8004214:	e017      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800421a:	601a      	str	r2, [r3, #0]
      break;
 800421c:	e013      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004222:	601a      	str	r2, [r3, #0]
      break;
 8004224:	e00f      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800422a:	601a      	str	r2, [r3, #0]
      break;
 800422c:	e00b      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004232:	601a      	str	r2, [r3, #0]
      break;
 8004234:	e007      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800423a:	601a      	str	r2, [r3, #0]
      break;
 800423c:	e003      	b.n	8004246 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	60fb      	str	r3, [r7, #12]
      break;
 8004244:	bf00      	nop
  }

  return ret;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	41480000 	.word	0x41480000
 8004254:	41d00000 	.word	0x41d00000
 8004258:	42500000 	.word	0x42500000
 800425c:	42d00000 	.word	0x42d00000
 8004260:	43500000 	.word	0x43500000
 8004264:	43d00000 	.word	0x43d00000
 8004268:	44504000 	.word	0x44504000
 800426c:	44cf8000 	.word	0x44cf8000
 8004270:	45502000 	.word	0x45502000
 8004274:	45d02000 	.word	0x45d02000

08004278 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800428a:	2b01      	cmp	r3, #1
 800428c:	d106      	bne.n	800429c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800428e:	ed97 0a00 	vldr	s0, [r7]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa26 	bl	80046e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004298:	4603      	mov	r3, r0
 800429a:	e005      	b.n	80042a8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800429c:	ed97 0a00 	vldr	s0, [r7]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 faab 	bl	80047fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80042a6:	4603      	mov	r3, r0
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	331c      	adds	r3, #28
 80042c2:	f107 020b 	add.w	r2, r7, #11
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc91 	bl	8004bf0 <lsm6dsl_gy_full_scale_get>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
 80042d8:	e030      	b.n	800433c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d828      	bhi.n	8004332 <LSM6DSL_GYRO_GetFullScale+0x82>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004305 	.word	0x08004305
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004333 	.word	0x08004333
 80042f8:	0800431f 	.word	0x0800431f
 80042fc:	08004333 	.word	0x08004333
 8004300:	08004329 	.word	0x08004329
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	227d      	movs	r2, #125	; 0x7d
 8004308:	601a      	str	r2, [r3, #0]
      break;
 800430a:	e016      	b.n	800433a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	22fa      	movs	r2, #250	; 0xfa
 8004310:	601a      	str	r2, [r3, #0]
      break;
 8004312:	e012      	b.n	800433a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800431a:	601a      	str	r2, [r3, #0]
      break;
 800431c:	e00d      	b.n	800433a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004324:	601a      	str	r2, [r3, #0]
      break;
 8004326:	e008      	b.n	800433a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800432e:	601a      	str	r2, [r3, #0]
      break;
 8004330:	e003      	b.n	800433a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	60fb      	str	r3, [r7, #12]
      break;
 8004338:	bf00      	nop
  }

  return ret;
 800433a:	68fb      	ldr	r3, [r7, #12]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b7d      	cmp	r3, #125	; 0x7d
 8004352:	dd12      	ble.n	800437a <LSM6DSL_GYRO_SetFullScale+0x36>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2bfa      	cmp	r3, #250	; 0xfa
 8004358:	dd0d      	ble.n	8004376 <LSM6DSL_GYRO_SetFullScale+0x32>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004360:	dd07      	ble.n	8004372 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004368:	dc01      	bgt.n	800436e <LSM6DSL_GYRO_SetFullScale+0x2a>
 800436a:	2304      	movs	r3, #4
 800436c:	e006      	b.n	800437c <LSM6DSL_GYRO_SetFullScale+0x38>
 800436e:	2306      	movs	r3, #6
 8004370:	e004      	b.n	800437c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004372:	2302      	movs	r3, #2
 8004374:	e002      	b.n	800437c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <LSM6DSL_GYRO_SetFullScale+0x38>
 800437a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800437c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	331c      	adds	r3, #28
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fc0c 	bl	8004ba4 <lsm6dsl_gy_full_scale_set>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e000      	b.n	800439a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	331c      	adds	r3, #28
 80043b0:	f107 0208 	add.w	r2, r7, #8
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fd0a 	bl	8004dd0 <lsm6dsl_angular_rate_raw_get>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	e00c      	b.n	80043e2 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80043c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80043d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80043d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	331c      	adds	r3, #28
 80043f8:	f107 0210 	add.w	r2, r7, #16
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fce6 	bl	8004dd0 <lsm6dsl_angular_rate_raw_get>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e03c      	b.n	800448a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004410:	f107 030c 	add.w	r3, r7, #12
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fe60 	bl	80040dc <LSM6DSL_GYRO_GetSensitivity>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	e030      	b.n	800448a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004428:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004434:	edd7 7a03 	vldr	s15, [r7, #12]
 8004438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004440:	ee17 2a90 	vmov	r2, s15
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004454:	edd7 7a03 	vldr	s15, [r7, #12]
 8004458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004460:	ee17 2a90 	vmov	r2, s15
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004468:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004474:	edd7 7a03 	vldr	s15, [r7, #12]
 8004478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004480:	ee17 2a90 	vmov	r2, s15
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
 800449e:	4613      	mov	r3, r2
 80044a0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f103 001c 	add.w	r0, r3, #28
 80044a8:	1cba      	adds	r2, r7, #2
 80044aa:	78f9      	ldrb	r1, [r7, #3]
 80044ac:	2301      	movs	r3, #1
 80044ae:	f000 fa75 	bl	800499c <lsm6dsl_write_reg>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
 80044bc:	e000      	b.n	80044c0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80044d4:	edd7 7a00 	vldr	s15, [r7]
 80044d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e4:	d801      	bhi.n	80044ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e058      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80044ea:	edd7 7a00 	vldr	s15, [r7]
 80044ee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	d801      	bhi.n	8004500 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e04d      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004500:	edd7 7a00 	vldr	s15, [r7]
 8004504:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80045c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004510:	d801      	bhi.n	8004516 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004512:	2303      	movs	r3, #3
 8004514:	e042      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004516:	edd7 7a00 	vldr	s15, [r7]
 800451a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80045c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800451e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004526:	d801      	bhi.n	800452c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004528:	2304      	movs	r3, #4
 800452a:	e037      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800452c:	edd7 7a00 	vldr	s15, [r7]
 8004530:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80045cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	d801      	bhi.n	8004542 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800453e:	2305      	movs	r3, #5
 8004540:	e02c      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004542:	edd7 7a00 	vldr	s15, [r7]
 8004546:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80045d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800454a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	d801      	bhi.n	8004558 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004554:	2306      	movs	r3, #6
 8004556:	e021      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004558:	edd7 7a00 	vldr	s15, [r7]
 800455c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80045d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004568:	d801      	bhi.n	800456e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800456a:	2307      	movs	r3, #7
 800456c:	e016      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800456e:	edd7 7a00 	vldr	s15, [r7]
 8004572:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80045d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d801      	bhi.n	8004584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004580:	2308      	movs	r3, #8
 8004582:	e00b      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004584:	edd7 7a00 	vldr	s15, [r7]
 8004588:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800458c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	d801      	bhi.n	800459a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004596:	2309      	movs	r3, #9
 8004598:	e000      	b.n	800459c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800459a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800459c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	331c      	adds	r3, #28
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa6e 	bl	8004a88 <lsm6dsl_xl_data_rate_set>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e000      	b.n	80045ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	42500000 	.word	0x42500000
 80045c8:	42d00000 	.word	0x42d00000
 80045cc:	43500000 	.word	0x43500000
 80045d0:	43d00000 	.word	0x43d00000
 80045d4:	44504000 	.word	0x44504000
 80045d8:	44cf8000 	.word	0x44cf8000
 80045dc:	45502000 	.word	0x45502000

080045e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80045ec:	edd7 7a00 	vldr	s15, [r7]
 80045f0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	d801      	bhi.n	8004602 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80045fe:	2301      	movs	r3, #1
 8004600:	e058      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004602:	edd7 7a00 	vldr	s15, [r7]
 8004606:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800460a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d801      	bhi.n	8004618 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004614:	2302      	movs	r3, #2
 8004616:	e04d      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004618:	edd7 7a00 	vldr	s15, [r7]
 800461c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80046c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	d801      	bhi.n	800462e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800462a:	2303      	movs	r3, #3
 800462c:	e042      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800462e:	edd7 7a00 	vldr	s15, [r7]
 8004632:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d801      	bhi.n	8004644 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004640:	2304      	movs	r3, #4
 8004642:	e037      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004644:	edd7 7a00 	vldr	s15, [r7]
 8004648:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80046d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800464c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004654:	d801      	bhi.n	800465a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004656:	2305      	movs	r3, #5
 8004658:	e02c      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800465a:	edd7 7a00 	vldr	s15, [r7]
 800465e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	d801      	bhi.n	8004670 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800466c:	2306      	movs	r3, #6
 800466e:	e021      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004670:	edd7 7a00 	vldr	s15, [r7]
 8004674:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80046d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	d801      	bhi.n	8004686 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004682:	2307      	movs	r3, #7
 8004684:	e016      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004686:	edd7 7a00 	vldr	s15, [r7]
 800468a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800468e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	d801      	bhi.n	800469c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004698:	2308      	movs	r3, #8
 800469a:	e00b      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800469c:	edd7 7a00 	vldr	s15, [r7]
 80046a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80046e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d801      	bhi.n	80046b2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80046ae:	2309      	movs	r3, #9
 80046b0:	e000      	b.n	80046b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80046b2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	42500000 	.word	0x42500000
 80046cc:	42d00000 	.word	0x42d00000
 80046d0:	43500000 	.word	0x43500000
 80046d4:	43d00000 	.word	0x43d00000
 80046d8:	44504000 	.word	0x44504000
 80046dc:	44cf8000 	.word	0x44cf8000
 80046e0:	45502000 	.word	0x45502000

080046e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80046f0:	edd7 7a00 	vldr	s15, [r7]
 80046f4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80046f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	d801      	bhi.n	8004706 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004702:	2301      	movs	r3, #1
 8004704:	e058      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004706:	edd7 7a00 	vldr	s15, [r7]
 800470a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800470e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	d801      	bhi.n	800471c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004718:	2302      	movs	r3, #2
 800471a:	e04d      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800471c:	edd7 7a00 	vldr	s15, [r7]
 8004720:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80047e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	d801      	bhi.n	8004732 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800472e:	2303      	movs	r3, #3
 8004730:	e042      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004732:	edd7 7a00 	vldr	s15, [r7]
 8004736:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80047e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800473a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d801      	bhi.n	8004748 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004744:	2304      	movs	r3, #4
 8004746:	e037      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004748:	edd7 7a00 	vldr	s15, [r7]
 800474c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80047e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	d801      	bhi.n	800475e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800475a:	2305      	movs	r3, #5
 800475c:	e02c      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800475e:	edd7 7a00 	vldr	s15, [r7]
 8004762:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80047ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	d801      	bhi.n	8004774 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004770:	2306      	movs	r3, #6
 8004772:	e021      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004774:	edd7 7a00 	vldr	s15, [r7]
 8004778:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800477c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	d801      	bhi.n	800478a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004786:	2307      	movs	r3, #7
 8004788:	e016      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800478a:	edd7 7a00 	vldr	s15, [r7]
 800478e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80047f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479a:	d801      	bhi.n	80047a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800479c:	2308      	movs	r3, #8
 800479e:	e00b      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047a0:	edd7 7a00 	vldr	s15, [r7]
 80047a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80047f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80047a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	d801      	bhi.n	80047b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80047b2:	2309      	movs	r3, #9
 80047b4:	e000      	b.n	80047b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047b6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80047b8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	331c      	adds	r3, #28
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fa56 	bl	8004c74 <lsm6dsl_gy_data_rate_set>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e000      	b.n	80047d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	42500000 	.word	0x42500000
 80047e4:	42d00000 	.word	0x42d00000
 80047e8:	43500000 	.word	0x43500000
 80047ec:	43d00000 	.word	0x43d00000
 80047f0:	44504000 	.word	0x44504000
 80047f4:	44cf8000 	.word	0x44cf8000
 80047f8:	45502000 	.word	0x45502000

080047fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004808:	edd7 7a00 	vldr	s15, [r7]
 800480c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	d801      	bhi.n	800481e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800481a:	2301      	movs	r3, #1
 800481c:	e058      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800481e:	edd7 7a00 	vldr	s15, [r7]
 8004822:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482e:	d801      	bhi.n	8004834 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004830:	2302      	movs	r3, #2
 8004832:	e04d      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004834:	edd7 7a00 	vldr	s15, [r7]
 8004838:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80048e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800483c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	d801      	bhi.n	800484a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004846:	2303      	movs	r3, #3
 8004848:	e042      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800484a:	edd7 7a00 	vldr	s15, [r7]
 800484e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80048e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	d801      	bhi.n	8004860 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800485c:	2304      	movs	r3, #4
 800485e:	e037      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004860:	edd7 7a00 	vldr	s15, [r7]
 8004864:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80048ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d801      	bhi.n	8004876 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004872:	2305      	movs	r3, #5
 8004874:	e02c      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004876:	edd7 7a00 	vldr	s15, [r7]
 800487a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80048f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800487e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	d801      	bhi.n	800488c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004888:	2306      	movs	r3, #6
 800488a:	e021      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800488c:	edd7 7a00 	vldr	s15, [r7]
 8004890:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80048f4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	d801      	bhi.n	80048a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800489e:	2307      	movs	r3, #7
 80048a0:	e016      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048a2:	edd7 7a00 	vldr	s15, [r7]
 80048a6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80048f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80048aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d801      	bhi.n	80048b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80048b4:	2308      	movs	r3, #8
 80048b6:	e00b      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048b8:	edd7 7a00 	vldr	s15, [r7]
 80048bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80048fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80048c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d801      	bhi.n	80048ce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80048ca:	2309      	movs	r3, #9
 80048cc:	e000      	b.n	80048d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048ce:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	42500000 	.word	0x42500000
 80048e8:	42d00000 	.word	0x42d00000
 80048ec:	43500000 	.word	0x43500000
 80048f0:	43d00000 	.word	0x43d00000
 80048f4:	44504000 	.word	0x44504000
 80048f8:	44cf8000 	.word	0x44cf8000
 80048fc:	45502000 	.word	0x45502000

08004900 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	461a      	mov	r2, r3
 800490c:	460b      	mov	r3, r1
 800490e:	72fb      	strb	r3, [r7, #11]
 8004910:	4613      	mov	r3, r2
 8004912:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	695c      	ldr	r4, [r3, #20]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	7b1b      	ldrb	r3, [r3, #12]
 8004920:	b298      	uxth	r0, r3
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	b299      	uxth	r1, r3
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	47a0      	blx	r4
 800492c:	4603      	mov	r3, r0
}
 800492e:	4618      	mov	r0, r3
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}

08004936 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004936:	b590      	push	{r4, r7, lr}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	461a      	mov	r2, r3
 8004942:	460b      	mov	r3, r1
 8004944:	72fb      	strb	r3, [r7, #11]
 8004946:	4613      	mov	r3, r2
 8004948:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	691c      	ldr	r4, [r3, #16]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	7b1b      	ldrb	r3, [r3, #12]
 8004956:	b298      	uxth	r0, r3
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	b299      	uxth	r1, r3
 800495c:	893b      	ldrh	r3, [r7, #8]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	47a0      	blx	r4
 8004962:	4603      	mov	r3, r0
}
 8004964:	4618      	mov	r0, r3
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd90      	pop	{r4, r7, pc}

0800496c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	461a      	mov	r2, r3
 8004978:	460b      	mov	r3, r1
 800497a:	72fb      	strb	r3, [r7, #11]
 800497c:	4613      	mov	r3, r2
 800497e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685c      	ldr	r4, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6898      	ldr	r0, [r3, #8]
 8004988:	893b      	ldrh	r3, [r7, #8]
 800498a:	7af9      	ldrb	r1, [r7, #11]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	47a0      	blx	r4
 8004990:	6178      	str	r0, [r7, #20]
  return ret;
 8004992:	697b      	ldr	r3, [r7, #20]
}
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd90      	pop	{r4, r7, pc}

0800499c <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	461a      	mov	r2, r3
 80049a8:	460b      	mov	r3, r1
 80049aa:	72fb      	strb	r3, [r7, #11]
 80049ac:	4613      	mov	r3, r2
 80049ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681c      	ldr	r4, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6898      	ldr	r0, [r3, #8]
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	7af9      	ldrb	r1, [r7, #11]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	47a0      	blx	r4
 80049c0:	6178      	str	r0, [r7, #20]
  return ret;
 80049c2:	697b      	ldr	r3, [r7, #20]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049d8:	f107 0208 	add.w	r2, r7, #8
 80049dc:	2301      	movs	r3, #1
 80049de:	2110      	movs	r1, #16
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ffc3 	bl	800496c <lsm6dsl_read_reg>
 80049e6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	7a3b      	ldrb	r3, [r7, #8]
 80049f8:	f362 0383 	bfi	r3, r2, #2, #2
 80049fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80049fe:	f107 0208 	add.w	r2, r7, #8
 8004a02:	2301      	movs	r3, #1
 8004a04:	2110      	movs	r1, #16
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffc8 	bl	800499c <lsm6dsl_write_reg>
 8004a0c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004a22:	f107 0208 	add.w	r2, r7, #8
 8004a26:	2301      	movs	r3, #1
 8004a28:	2110      	movs	r1, #16
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff9e 	bl	800496c <lsm6dsl_read_reg>
 8004a30:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8004a32:	7a3b      	ldrb	r3, [r7, #8]
 8004a34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d81a      	bhi.n	8004a74 <lsm6dsl_xl_full_scale_get+0x5c>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a55 	.word	0x08004a55
 8004a48:	08004a5d 	.word	0x08004a5d
 8004a4c:	08004a65 	.word	0x08004a65
 8004a50:	08004a6d 	.word	0x08004a6d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e00f      	b.n	8004a7c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e00b      	b.n	8004a7c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2202      	movs	r2, #2
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e007      	b.n	8004a7c <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	701a      	strb	r2, [r3, #0]
      break;
 8004a72:	e003      	b.n	8004a7c <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
      break;
 8004a7a:	bf00      	nop
  }

  return ret;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004a94:	f107 0208 	add.w	r2, r7, #8
 8004a98:	2301      	movs	r3, #1
 8004a9a:	2110      	movs	r1, #16
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff65 	bl	800496c <lsm6dsl_read_reg>
 8004aa2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	7a3b      	ldrb	r3, [r7, #8]
 8004ab4:	f362 1307 	bfi	r3, r2, #4, #4
 8004ab8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff6a 	bl	800499c <lsm6dsl_write_reg>
 8004ac8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8004ade:	f107 0208 	add.w	r2, r7, #8
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	2110      	movs	r1, #16
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff40 	bl	800496c <lsm6dsl_read_reg>
 8004aec:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8004aee:	7a3b      	ldrb	r3, [r7, #8]
 8004af0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d84a      	bhi.n	8004b90 <lsm6dsl_xl_data_rate_get+0xbc>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b49 	.word	0x08004b49
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b59 	.word	0x08004b59
 8004b18:	08004b61 	.word	0x08004b61
 8004b1c:	08004b69 	.word	0x08004b69
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b89 	.word	0x08004b89
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
      break;
 8004b36:	e02f      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
      break;
 8004b3e:	e02b      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
      break;
 8004b46:	e027      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	701a      	strb	r2, [r3, #0]
      break;
 8004b4e:	e023      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2204      	movs	r2, #4
 8004b54:	701a      	strb	r2, [r3, #0]
      break;
 8004b56:	e01f      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	701a      	strb	r2, [r3, #0]
      break;
 8004b5e:	e01b      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2206      	movs	r2, #6
 8004b64:	701a      	strb	r2, [r3, #0]
      break;
 8004b66:	e017      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2207      	movs	r2, #7
 8004b6c:	701a      	strb	r2, [r3, #0]
      break;
 8004b6e:	e013      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	701a      	strb	r2, [r3, #0]
      break;
 8004b76:	e00f      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2209      	movs	r2, #9
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e00b      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	220a      	movs	r2, #10
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e007      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	220b      	movs	r2, #11
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e003      	b.n	8004b98 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	220c      	movs	r2, #12
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	bf00      	nop
  }

  return ret;
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop

08004ba4 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bb0:	f107 0208 	add.w	r2, r7, #8
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	2111      	movs	r1, #17
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fed7 	bl	800496c <lsm6dsl_read_reg>
 8004bbe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	7a3b      	ldrb	r3, [r7, #8]
 8004bd0:	f362 0343 	bfi	r3, r2, #1, #3
 8004bd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bd6:	f107 0208 	add.w	r2, r7, #8
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2111      	movs	r1, #17
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fedc 	bl	800499c <lsm6dsl_write_reg>
 8004be4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004bfa:	f107 0208 	add.w	r2, r7, #8
 8004bfe:	2301      	movs	r3, #1
 8004c00:	2111      	movs	r1, #17
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff feb2 	bl	800496c <lsm6dsl_read_reg>
 8004c08:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8004c0a:	7a3b      	ldrb	r3, [r7, #8]
 8004c0c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d824      	bhi.n	8004c60 <lsm6dsl_gy_full_scale_get+0x70>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <lsm6dsl_gy_full_scale_get+0x2c>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	08004c41 	.word	0x08004c41
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c59 	.word	0x08004c59
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e013      	b.n	8004c68 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
      break;
 8004c46:	e00f      	b.n	8004c68 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	701a      	strb	r2, [r3, #0]
      break;
 8004c4e:	e00b      	b.n	8004c68 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2204      	movs	r2, #4
 8004c54:	701a      	strb	r2, [r3, #0]
      break;
 8004c56:	e007      	b.n	8004c68 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	701a      	strb	r2, [r3, #0]
      break;
 8004c5e:	e003      	b.n	8004c68 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2207      	movs	r2, #7
 8004c64:	701a      	strb	r2, [r3, #0]
      break;
 8004c66:	bf00      	nop
  }

  return ret;
 8004c68:	68fb      	ldr	r3, [r7, #12]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004c80:	f107 0208 	add.w	r2, r7, #8
 8004c84:	2301      	movs	r3, #1
 8004c86:	2111      	movs	r1, #17
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fe6f 	bl	800496c <lsm6dsl_read_reg>
 8004c8e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ca0:	f362 1307 	bfi	r3, r2, #4, #4
 8004ca4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004ca6:	f107 0208 	add.w	r2, r7, #8
 8004caa:	2301      	movs	r3, #1
 8004cac:	2111      	movs	r1, #17
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fe74 	bl	800499c <lsm6dsl_write_reg>
 8004cb4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8004cca:	f107 0208 	add.w	r2, r7, #8
 8004cce:	2301      	movs	r3, #1
 8004cd0:	2111      	movs	r1, #17
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fe4a 	bl	800496c <lsm6dsl_read_reg>
 8004cd8:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8004cda:	7a3b      	ldrb	r3, [r7, #8]
 8004cdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d844      	bhi.n	8004d70 <lsm6dsl_gy_data_rate_get+0xb0>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <lsm6dsl_gy_data_rate_get+0x2c>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	08004d21 	.word	0x08004d21
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d31 	.word	0x08004d31
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	08004d41 	.word	0x08004d41
 8004d04:	08004d49 	.word	0x08004d49
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d59 	.word	0x08004d59
 8004d10:	08004d61 	.word	0x08004d61
 8004d14:	08004d69 	.word	0x08004d69
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
      break;
 8004d1e:	e02b      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
      break;
 8004d26:	e027      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]
      break;
 8004d2e:	e023      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2203      	movs	r2, #3
 8004d34:	701a      	strb	r2, [r3, #0]
      break;
 8004d36:	e01f      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	701a      	strb	r2, [r3, #0]
      break;
 8004d3e:	e01b      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2205      	movs	r2, #5
 8004d44:	701a      	strb	r2, [r3, #0]
      break;
 8004d46:	e017      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2206      	movs	r2, #6
 8004d4c:	701a      	strb	r2, [r3, #0]
      break;
 8004d4e:	e013      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2207      	movs	r2, #7
 8004d54:	701a      	strb	r2, [r3, #0]
      break;
 8004d56:	e00f      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	701a      	strb	r2, [r3, #0]
      break;
 8004d5e:	e00b      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2209      	movs	r2, #9
 8004d64:	701a      	strb	r2, [r3, #0]
      break;
 8004d66:	e007      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	220a      	movs	r2, #10
 8004d6c:	701a      	strb	r2, [r3, #0]
      break;
 8004d6e:	e003      	b.n	8004d78 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	220b      	movs	r2, #11
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	bf00      	nop
  }

  return ret;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004d90:	f107 0208 	add.w	r2, r7, #8
 8004d94:	2301      	movs	r3, #1
 8004d96:	2112      	movs	r1, #18
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fde7 	bl	800496c <lsm6dsl_read_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	7a3b      	ldrb	r3, [r7, #8]
 8004db0:	f362 1386 	bfi	r3, r2, #6, #1
 8004db4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004db6:	f107 0208 	add.w	r2, r7, #8
 8004dba:	2301      	movs	r3, #1
 8004dbc:	2112      	movs	r1, #18
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fdec 	bl	800499c <lsm6dsl_write_reg>
 8004dc4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004dda:	2306      	movs	r3, #6
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	2122      	movs	r1, #34	; 0x22
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fdc3 	bl	800496c <lsm6dsl_read_reg>
 8004de6:	60f8      	str	r0, [r7, #12]
  return ret;
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004dfc:	2306      	movs	r3, #6
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	2128      	movs	r1, #40	; 0x28
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff fdb2 	bl	800496c <lsm6dsl_read_reg>
 8004e08:	60f8      	str	r0, [r7, #12]
  return ret;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004e1e:	2301      	movs	r3, #1
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	210f      	movs	r1, #15
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fda1 	bl	800496c <lsm6dsl_read_reg>
 8004e2a:	60f8      	str	r0, [r7, #12]
  return ret;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	2301      	movs	r3, #1
 8004e48:	2112      	movs	r1, #18
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fd8e 	bl	800496c <lsm6dsl_read_reg>
 8004e50:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	7a3b      	ldrb	r3, [r7, #8]
 8004e62:	f362 0382 	bfi	r3, r2, #2, #1
 8004e66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2112      	movs	r1, #18
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fd93 	bl	800499c <lsm6dsl_write_reg>
 8004e76:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2301      	movs	r3, #1
 8004e94:	210a      	movs	r1, #10
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fd68 	bl	800496c <lsm6dsl_read_reg>
 8004e9c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	7a3b      	ldrb	r3, [r7, #8]
 8004eae:	f362 0302 	bfi	r3, r2, #0, #3
 8004eb2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8004eb4:	f107 0208 	add.w	r2, r7, #8
 8004eb8:	2301      	movs	r3, #1
 8004eba:	210a      	movs	r1, #10
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff fd6d 	bl	800499c <lsm6dsl_write_reg>
 8004ec2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	; 0x38
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d036      	beq.n	8004f5a <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d302      	bcc.n	8004ef6 <IKS01A2_MOTION_SENSOR_Init+0x26>
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d064      	beq.n	8004fbe <IKS01A2_MOTION_SENSOR_Init+0xee>
 8004ef4:	e095      	b.n	8005022 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8004ef6:	6838      	ldr	r0, [r7, #0]
 8004ef8:	f000 f966 	bl	80051c8 <LSM6DSL_0_Probe>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295
 8004f06:	e0cc      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004f08:	4a68      	ldr	r2, [pc, #416]	; (80050ac <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4967      	ldr	r1, [pc, #412]	; (80050b0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f1a:	f107 010c 	add.w	r1, r7, #12
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4798      	blx	r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f28:	f06f 0306 	mvn.w	r3, #6
 8004f2c:	e0b9      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004f2e:	7b3b      	ldrb	r3, [r7, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d103      	bne.n	8004f3c <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004f3c:	7b7b      	ldrb	r3, [r7, #13]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d103      	bne.n	8004f4a <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d16c      	bne.n	800502a <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004f58:	e067      	b.n	800502a <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	f000 f9f0 	bl	8005340 <LSM303AGR_ACC_0_Probe>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8004f66:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6a:	e09a      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004f6c:	4a4f      	ldr	r2, [pc, #316]	; (80050ac <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	494e      	ldr	r1, [pc, #312]	; (80050b0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f7e:	f107 010c 	add.w	r1, r7, #12
 8004f82:	4610      	mov	r0, r2
 8004f84:	4798      	blx	r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f8c:	f06f 0306 	mvn.w	r3, #6
 8004f90:	e087      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004f92:	7b3b      	ldrb	r3, [r7, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d103      	bne.n	8004fa0 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004fa0:	7b7b      	ldrb	r3, [r7, #13]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d103      	bne.n	8004fae <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d13c      	bne.n	800502e <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004fbc:	e037      	b.n	800502e <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8004fbe:	6838      	ldr	r0, [r7, #0]
 8004fc0:	f000 fa62 	bl	8005488 <LSM303AGR_MAG_0_Probe>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	e068      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004fd0:	4a36      	ldr	r2, [pc, #216]	; (80050ac <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4935      	ldr	r1, [pc, #212]	; (80050b0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fe2:	f107 010c 	add.w	r1, r7, #12
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4798      	blx	r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004ff0:	f06f 0306 	mvn.w	r3, #6
 8004ff4:	e055      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8004ff6:	7b3b      	ldrb	r3, [r7, #12]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d103      	bne.n	8005004 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005004:	7b7b      	ldrb	r3, [r7, #13]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d103      	bne.n	8005012 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005012:	7bbb      	ldrb	r3, [r7, #14]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10c      	bne.n	8005032 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	f043 0304 	orr.w	r3, r3, #4
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005020:	e007      	b.n	8005032 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005022:	f06f 0301 	mvn.w	r3, #1
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005028:	e004      	b.n	8005034 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800502a:	bf00      	nop
 800502c:	e002      	b.n	8005034 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8005032:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	e031      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	e02a      	b.n	800509a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	4013      	ands	r3, r2
 800504a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504c:	429a      	cmp	r2, r3
 800504e:	d11e      	bne.n	800508e <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8005050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	4013      	ands	r3, r2
 8005056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005058:	429a      	cmp	r2, r3
 800505a:	d118      	bne.n	800508e <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005064:	4814      	ldr	r0, [pc, #80]	; (80050b8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	440b      	add	r3, r1
 8005070:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	490e      	ldr	r1, [pc, #56]	; (80050b0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800507e:	4610      	mov	r0, r2
 8005080:	4798      	blx	r3
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005088:	f06f 0304 	mvn.w	r3, #4
 800508c:	e009      	b.n	80050a2 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	3301      	adds	r3, #1
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b02      	cmp	r3, #2
 800509e:	d9d1      	bls.n	8005044 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3738      	adds	r7, #56	; 0x38
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000394 	.word	0x20000394
 80050b0:	200006d8 	.word	0x200006d8
 80050b4:	20000140 	.word	0x20000140
 80050b8:	20000370 	.word	0x20000370

080050bc <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d903      	bls.n	80050d4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050cc:	f06f 0301 	mvn.w	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e028      	b.n	8005126 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80050d4:	4a16      	ldr	r2, [pc, #88]	; (8005130 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d11c      	bne.n	8005120 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80050e6:	4a13      	ldr	r2, [pc, #76]	; (8005134 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050ee:	4812      	ldr	r0, [pc, #72]	; (8005138 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	440b      	add	r3, r1
 80050fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	490e      	ldr	r1, [pc, #56]	; (800513c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005112:	f06f 0304 	mvn.w	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e005      	b.n	8005126 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e002      	b.n	8005126 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005120:	f06f 0301 	mvn.w	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	200003a0 	.word	0x200003a0
 8005134:	20000140 	.word	0x20000140
 8005138:	20000370 	.word	0x20000370
 800513c:	200006d8 	.word	0x200006d8

08005140 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d903      	bls.n	800515a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005152:	f06f 0301 	mvn.w	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e029      	b.n	80051ae <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d11d      	bne.n	80051a8 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800516c:	4a13      	ldr	r2, [pc, #76]	; (80051bc <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005174:	4812      	ldr	r0, [pc, #72]	; (80051c0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	440b      	add	r3, r1
 8005180:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	490f      	ldr	r1, [pc, #60]	; (80051c4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800519a:	f06f 0304 	mvn.w	r3, #4
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e005      	b.n	80051ae <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e002      	b.n	80051ae <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80051a8:	f06f 0301 	mvn.w	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	200003a0 	.word	0x200003a0
 80051bc:	20000140 	.word	0x20000140
 80051c0:	20000370 	.word	0x20000370
 80051c4:	200006d8 	.word	0x200006d8

080051c8 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b092      	sub	sp, #72	; 0x48
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80051d4:	2300      	movs	r3, #0
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80051d8:	23d7      	movs	r3, #215	; 0xd7
 80051da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <LSM6DSL_0_Probe+0x140>)
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80051e2:	4b4a      	ldr	r3, [pc, #296]	; (800530c <LSM6DSL_0_Probe+0x144>)
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80051e6:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <LSM6DSL_0_Probe+0x148>)
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80051ea:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <LSM6DSL_0_Probe+0x14c>)
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80051ee:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <LSM6DSL_0_Probe+0x150>)
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80051f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051f6:	4619      	mov	r1, r3
 80051f8:	4848      	ldr	r0, [pc, #288]	; (800531c <LSM6DSL_0_Probe+0x154>)
 80051fa:	f7fe fbc7 	bl	800398c <LSM6DSL_RegisterBusIO>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005204:	f06f 0306 	mvn.w	r3, #6
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	e077      	b.n	80052fc <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800520c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005210:	4619      	mov	r1, r3
 8005212:	4842      	ldr	r0, [pc, #264]	; (800531c <LSM6DSL_0_Probe+0x154>)
 8005214:	f7fe fcb0 	bl	8003b78 <LSM6DSL_ReadID>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800521e:	f06f 0306 	mvn.w	r3, #6
 8005222:	647b      	str	r3, [r7, #68]	; 0x44
 8005224:	e06a      	b.n	80052fc <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800522a:	2b6a      	cmp	r3, #106	; 0x6a
 800522c:	d003      	beq.n	8005236 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800522e:	f06f 0306 	mvn.w	r3, #6
 8005232:	647b      	str	r3, [r7, #68]	; 0x44
 8005234:	e062      	b.n	80052fc <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4619      	mov	r1, r3
 800523c:	4837      	ldr	r0, [pc, #220]	; (800531c <LSM6DSL_0_Probe+0x154>)
 800523e:	f7fe fcb1 	bl	8003ba4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005242:	7a7b      	ldrb	r3, [r7, #9]
 8005244:	461a      	mov	r2, r3
 8005246:	7a3b      	ldrb	r3, [r7, #8]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	431a      	orrs	r2, r3
 800524c:	7abb      	ldrb	r3, [r7, #10]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4313      	orrs	r3, r2
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <LSM6DSL_0_Probe+0x158>)
 8005254:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005256:	4b33      	ldr	r3, [pc, #204]	; (8005324 <LSM6DSL_0_Probe+0x15c>)
 8005258:	4a30      	ldr	r2, [pc, #192]	; (800531c <LSM6DSL_0_Probe+0x154>)
 800525a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800525c:	4b32      	ldr	r3, [pc, #200]	; (8005328 <LSM6DSL_0_Probe+0x160>)
 800525e:	4a33      	ldr	r2, [pc, #204]	; (800532c <LSM6DSL_0_Probe+0x164>)
 8005260:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11d      	bne.n	80052a4 <LSM6DSL_0_Probe+0xdc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <LSM6DSL_0_Probe+0xdc>
 8005272:	7a7b      	ldrb	r3, [r7, #9]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d115      	bne.n	80052a4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005278:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <LSM6DSL_0_Probe+0x168>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <LSM6DSL_0_Probe+0x16c>)
 800527e:	492e      	ldr	r1, [pc, #184]	; (8005338 <LSM6DSL_0_Probe+0x170>)
 8005280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <LSM6DSL_0_Probe+0x160>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a26      	ldr	r2, [pc, #152]	; (8005324 <LSM6DSL_0_Probe+0x15c>)
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	4610      	mov	r0, r2
 8005290:	4798      	blx	r3
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005298:	f06f 0304 	mvn.w	r3, #4
 800529c:	647b      	str	r3, [r7, #68]	; 0x44
 800529e:	e001      	b.n	80052a4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11d      	bne.n	80052e6 <LSM6DSL_0_Probe+0x11e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d018      	beq.n	80052e6 <LSM6DSL_0_Probe+0x11e>
 80052b4:	7a3b      	ldrb	r3, [r7, #8]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d115      	bne.n	80052e6 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80052ba:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <LSM6DSL_0_Probe+0x168>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <LSM6DSL_0_Probe+0x16c>)
 80052c0:	491e      	ldr	r1, [pc, #120]	; (800533c <LSM6DSL_0_Probe+0x174>)
 80052c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80052c6:	4b18      	ldr	r3, [pc, #96]	; (8005328 <LSM6DSL_0_Probe+0x160>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <LSM6DSL_0_Probe+0x15c>)
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	4610      	mov	r0, r2
 80052d2:	4798      	blx	r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052da:	f06f 0304 	mvn.w	r3, #4
 80052de:	647b      	str	r3, [r7, #68]	; 0x44
 80052e0:	e001      	b.n	80052e6 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <LSM6DSL_0_Probe+0x134>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052f6:	f06f 0304 	mvn.w	r3, #4
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80052fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3748      	adds	r7, #72	; 0x48
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	08001e15 	.word	0x08001e15
 800530c:	08001e91 	.word	0x08001e91
 8005310:	08001f45 	.word	0x08001f45
 8005314:	08001ee1 	.word	0x08001ee1
 8005318:	08001fa9 	.word	0x08001fa9
 800531c:	200003ac 	.word	0x200003ac
 8005320:	200003a0 	.word	0x200003a0
 8005324:	200006d8 	.word	0x200006d8
 8005328:	20000394 	.word	0x20000394
 800532c:	200000e8 	.word	0x200000e8
 8005330:	20000140 	.word	0x20000140
 8005334:	20000370 	.word	0x20000370
 8005338:	2000011c 	.word	0x2000011c
 800533c:	200000f8 	.word	0x200000f8

08005340 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b092      	sub	sp, #72	; 0x48
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005348:	2300      	movs	r3, #0
 800534a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800534c:	2300      	movs	r3, #0
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005350:	2333      	movs	r3, #51	; 0x33
 8005352:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <LSM303AGR_ACC_0_Probe+0x114>)
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800535a:	4b3f      	ldr	r3, [pc, #252]	; (8005458 <LSM303AGR_ACC_0_Probe+0x118>)
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800535e:	4b3f      	ldr	r3, [pc, #252]	; (800545c <LSM303AGR_ACC_0_Probe+0x11c>)
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <LSM303AGR_ACC_0_Probe+0x120>)
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <LSM303AGR_ACC_0_Probe+0x124>)
 8005368:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800536a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800536e:	4619      	mov	r1, r3
 8005370:	483d      	ldr	r0, [pc, #244]	; (8005468 <LSM303AGR_ACC_0_Probe+0x128>)
 8005372:	f7fc ffcb 	bl	800230c <LSM303AGR_ACC_RegisterBusIO>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800537c:	f06f 0306 	mvn.w	r3, #6
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
 8005382:	e062      	b.n	800544a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005384:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005388:	4619      	mov	r1, r3
 800538a:	4837      	ldr	r0, [pc, #220]	; (8005468 <LSM303AGR_ACC_0_Probe+0x128>)
 800538c:	f7fd f87f 	bl	800248e <LSM303AGR_ACC_ReadID>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005396:	f06f 0306 	mvn.w	r3, #6
 800539a:	647b      	str	r3, [r7, #68]	; 0x44
 800539c:	e055      	b.n	800544a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800539e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053a2:	2b33      	cmp	r3, #51	; 0x33
 80053a4:	d003      	beq.n	80053ae <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80053a6:	f06f 0306 	mvn.w	r3, #6
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
 80053ac:	e04d      	b.n	800544a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	4619      	mov	r1, r3
 80053b4:	482c      	ldr	r0, [pc, #176]	; (8005468 <LSM303AGR_ACC_0_Probe+0x128>)
 80053b6:	f7fd f881 	bl	80024bc <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80053ba:	7a7b      	ldrb	r3, [r7, #9]
 80053bc:	461a      	mov	r2, r3
 80053be:	7a3b      	ldrb	r3, [r7, #8]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80053c4:	7abb      	ldrb	r3, [r7, #10]
 80053c6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80053c8:	4313      	orrs	r3, r2
 80053ca:	4a28      	ldr	r2, [pc, #160]	; (800546c <LSM303AGR_ACC_0_Probe+0x12c>)
 80053cc:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <LSM303AGR_ACC_0_Probe+0x130>)
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <LSM303AGR_ACC_0_Probe+0x128>)
 80053d2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <LSM303AGR_ACC_0_Probe+0x134>)
 80053d6:	4a28      	ldr	r2, [pc, #160]	; (8005478 <LSM303AGR_ACC_0_Probe+0x138>)
 80053d8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80053da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11e      	bne.n	800541e <LSM303AGR_ACC_0_Probe+0xde>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d019      	beq.n	800541e <LSM303AGR_ACC_0_Probe+0xde>
 80053ea:	7a3b      	ldrb	r3, [r7, #8]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d116      	bne.n	800541e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80053f0:	4b22      	ldr	r3, [pc, #136]	; (800547c <LSM303AGR_ACC_0_Probe+0x13c>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <LSM303AGR_ACC_0_Probe+0x140>)
 80053f6:	3303      	adds	r3, #3
 80053f8:	4922      	ldr	r1, [pc, #136]	; (8005484 <LSM303AGR_ACC_0_Probe+0x144>)
 80053fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <LSM303AGR_ACC_0_Probe+0x134>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <LSM303AGR_ACC_0_Probe+0x130>)
 8005406:	6852      	ldr	r2, [r2, #4]
 8005408:	4610      	mov	r0, r2
 800540a:	4798      	blx	r3
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005412:	f06f 0304 	mvn.w	r3, #4
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	e001      	b.n	800541e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800541a:	2300      	movs	r3, #0
 800541c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800541e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005420:	2b00      	cmp	r3, #0
 8005422:	d107      	bne.n	8005434 <LSM303AGR_ACC_0_Probe+0xf4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800542e:	f06f 0304 	mvn.w	r3, #4
 8005432:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <LSM303AGR_ACC_0_Probe+0x10a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005444:	f06f 0304 	mvn.w	r3, #4
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800544a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800544c:	4618      	mov	r0, r3
 800544e:	3748      	adds	r7, #72	; 0x48
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08001e15 	.word	0x08001e15
 8005458:	08001e91 	.word	0x08001e91
 800545c:	08001f45 	.word	0x08001f45
 8005460:	08001ee1 	.word	0x08001ee1
 8005464:	08001fa9 	.word	0x08001fa9
 8005468:	200003dc 	.word	0x200003dc
 800546c:	200003a0 	.word	0x200003a0
 8005470:	200006d8 	.word	0x200006d8
 8005474:	20000394 	.word	0x20000394
 8005478:	20000080 	.word	0x20000080
 800547c:	20000140 	.word	0x20000140
 8005480:	20000370 	.word	0x20000370
 8005484:	20000090 	.word	0x20000090

08005488 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b092      	sub	sp, #72	; 0x48
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005490:	2300      	movs	r3, #0
 8005492:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005494:	2300      	movs	r3, #0
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005498:	233d      	movs	r3, #61	; 0x3d
 800549a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800549e:	4b3f      	ldr	r3, [pc, #252]	; (800559c <LSM303AGR_MAG_0_Probe+0x114>)
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <LSM303AGR_MAG_0_Probe+0x118>)
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80054a6:	4b3f      	ldr	r3, [pc, #252]	; (80055a4 <LSM303AGR_MAG_0_Probe+0x11c>)
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80054aa:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <LSM303AGR_MAG_0_Probe+0x120>)
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <LSM303AGR_MAG_0_Probe+0x124>)
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80054b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b6:	4619      	mov	r1, r3
 80054b8:	483d      	ldr	r0, [pc, #244]	; (80055b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80054ba:	f7fd faeb 	bl	8002a94 <LSM303AGR_MAG_RegisterBusIO>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054c4:	f06f 0306 	mvn.w	r3, #6
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	e062      	b.n	8005592 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80054cc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80054d0:	4619      	mov	r1, r3
 80054d2:	4837      	ldr	r0, [pc, #220]	; (80055b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80054d4:	f7fd fb95 	bl	8002c02 <LSM303AGR_MAG_ReadID>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054de:	f06f 0306 	mvn.w	r3, #6
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
 80054e4:	e055      	b.n	8005592 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80054e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d003      	beq.n	80054f6 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054ee:	f06f 0306 	mvn.w	r3, #6
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
 80054f4:	e04d      	b.n	8005592 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4619      	mov	r1, r3
 80054fc:	482c      	ldr	r0, [pc, #176]	; (80055b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80054fe:	f7fd fb97 	bl	8002c30 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005502:	7a7b      	ldrb	r3, [r7, #9]
 8005504:	461a      	mov	r2, r3
 8005506:	7a3b      	ldrb	r3, [r7, #8]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800550c:	7abb      	ldrb	r3, [r7, #10]
 800550e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005510:	4313      	orrs	r3, r2
 8005512:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005514:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005516:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <LSM303AGR_MAG_0_Probe+0x130>)
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <LSM303AGR_MAG_0_Probe+0x128>)
 800551a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800551c:	4b27      	ldr	r3, [pc, #156]	; (80055bc <LSM303AGR_MAG_0_Probe+0x134>)
 800551e:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <LSM303AGR_MAG_0_Probe+0x138>)
 8005520:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11e      	bne.n	8005566 <LSM303AGR_MAG_0_Probe+0xde>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d019      	beq.n	8005566 <LSM303AGR_MAG_0_Probe+0xde>
 8005532:	7abb      	ldrb	r3, [r7, #10]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d116      	bne.n	8005566 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <LSM303AGR_MAG_0_Probe+0x13c>)
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <LSM303AGR_MAG_0_Probe+0x140>)
 800553e:	3306      	adds	r3, #6
 8005540:	4922      	ldr	r1, [pc, #136]	; (80055cc <LSM303AGR_MAG_0_Probe+0x144>)
 8005542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005546:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <LSM303AGR_MAG_0_Probe+0x134>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <LSM303AGR_MAG_0_Probe+0x130>)
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800555a:	f06f 0304 	mvn.w	r3, #4
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
 8005560:	e001      	b.n	8005566 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005562:	2300      	movs	r3, #0
 8005564:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <LSM303AGR_MAG_0_Probe+0xf4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005576:	f06f 0304 	mvn.w	r3, #4
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800557c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <LSM303AGR_MAG_0_Probe+0x10a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800558c:	f06f 0304 	mvn.w	r3, #4
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005594:	4618      	mov	r0, r3
 8005596:	3748      	adds	r7, #72	; 0x48
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	08001e15 	.word	0x08001e15
 80055a0:	08001e91 	.word	0x08001e91
 80055a4:	08001f45 	.word	0x08001f45
 80055a8:	08001ee1 	.word	0x08001ee1
 80055ac:	08001fa9 	.word	0x08001fa9
 80055b0:	20000408 	.word	0x20000408
 80055b4:	200003a0 	.word	0x200003a0
 80055b8:	200006d8 	.word	0x200006d8
 80055bc:	20000394 	.word	0x20000394
 80055c0:	200000b4 	.word	0x200000b4
 80055c4:	20000140 	.word	0x20000140
 80055c8:	20000370 	.word	0x20000370
 80055cc:	200000c4 	.word	0x200000c4

080055d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_Init+0x3c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <HAL_Init+0x3c>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e6:	2003      	movs	r0, #3
 80055e8:	f000 f9a4 	bl	8005934 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ec:	2000      	movs	r0, #0
 80055ee:	f000 f80f 	bl	8005610 <HAL_InitTick>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	71fb      	strb	r3, [r7, #7]
 80055fc:	e001      	b.n	8005602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055fe:	f7fc facc 	bl	8001b9a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005602:	79fb      	ldrb	r3, [r7, #7]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	58004000 	.word	0x58004000

08005610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_InitTick+0x6c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d023      	beq.n	800566c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8005624:	f002 fb6a 	bl	8007cfc <HAL_RCC_GetHCLKFreq>
 8005628:	4601      	mov	r1, r0
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <HAL_InitTick+0x6c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	fbb1 f3f3 	udiv	r3, r1, r3
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f9bb 	bl	80059b6 <HAL_SYSTICK_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d809      	bhi.n	8005660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800564c:	2200      	movs	r2, #0
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	f000 f979 	bl	800594a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005658:	4a09      	ldr	r2, [pc, #36]	; (8005680 <HAL_InitTick+0x70>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e007      	b.n	8005670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e004      	b.n	8005670 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
 800566a:	e001      	b.n	8005670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000158 	.word	0x20000158
 8005680:	20000154 	.word	0x20000154

08005684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_IncTick+0x1c>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_IncTick+0x20>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4413      	add	r3, r2
 8005692:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <HAL_IncTick+0x1c>)
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	200006e4 	.word	0x200006e4
 80056a4:	20000158 	.word	0x20000158

080056a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return uwTick;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_GetTick+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	200006e4 	.word	0x200006e4

080056c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <HAL_GetTickPrio+0x14>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000154 	.word	0x20000154

080056d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <__NVIC_SetPriorityGrouping+0x44>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800570a:	4a04      	ldr	r2, [pc, #16]	; (800571c <__NVIC_SetPriorityGrouping+0x44>)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	60d3      	str	r3, [r2, #12]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__NVIC_GetPriorityGrouping+0x18>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f003 0307 	and.w	r3, r3, #7
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db0b      	blt.n	8005766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4907      	ldr	r1, [pc, #28]	; (8005774 <__NVIC_EnableIRQ+0x38>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2001      	movs	r0, #1
 800575e:	fa00 f202 	lsl.w	r2, r0, r2
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	e000e100 	.word	0xe000e100

08005778 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005786:	2b00      	cmp	r3, #0
 8005788:	db10      	blt.n	80057ac <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	4909      	ldr	r1, [pc, #36]	; (80057b8 <__NVIC_DisableIRQ+0x40>)
 8005792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2001      	movs	r0, #1
 800579a:	fa00 f202 	lsl.w	r2, r0, r2
 800579e:	3320      	adds	r3, #32
 80057a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80057a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80057a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100

080057bc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	db0c      	blt.n	80057e8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	f003 021f 	and.w	r2, r3, #31
 80057d4:	4907      	ldr	r1, [pc, #28]	; (80057f4 <__NVIC_SetPendingIRQ+0x38>)
 80057d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2001      	movs	r0, #1
 80057de:	fa00 f202 	lsl.w	r2, r0, r2
 80057e2:	3340      	adds	r3, #64	; 0x40
 80057e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000e100 	.word	0xe000e100

080057f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	2b00      	cmp	r3, #0
 8005808:	db0c      	blt.n	8005824 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	f003 021f 	and.w	r2, r3, #31
 8005810:	4907      	ldr	r1, [pc, #28]	; (8005830 <__NVIC_ClearPendingIRQ+0x38>)
 8005812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2001      	movs	r0, #1
 800581a:	fa00 f202 	lsl.w	r2, r0, r2
 800581e:	3360      	adds	r3, #96	; 0x60
 8005820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e100 	.word	0xe000e100

08005834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	6039      	str	r1, [r7, #0]
 800583e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005844:	2b00      	cmp	r3, #0
 8005846:	db0a      	blt.n	800585e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	490c      	ldr	r1, [pc, #48]	; (8005880 <__NVIC_SetPriority+0x4c>)
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	0112      	lsls	r2, r2, #4
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	440b      	add	r3, r1
 8005858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800585c:	e00a      	b.n	8005874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	4908      	ldr	r1, [pc, #32]	; (8005884 <__NVIC_SetPriority+0x50>)
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	3b04      	subs	r3, #4
 800586c:	0112      	lsls	r2, r2, #4
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	440b      	add	r3, r1
 8005872:	761a      	strb	r2, [r3, #24]
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	e000e100 	.word	0xe000e100
 8005884:	e000ed00 	.word	0xe000ed00

08005888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005888:	b480      	push	{r7}
 800588a:	b089      	sub	sp, #36	; 0x24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f1c3 0307 	rsb	r3, r3, #7
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	bf28      	it	cs
 80058a6:	2304      	movcs	r3, #4
 80058a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3304      	adds	r3, #4
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d902      	bls.n	80058b8 <NVIC_EncodePriority+0x30>
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3b03      	subs	r3, #3
 80058b6:	e000      	b.n	80058ba <NVIC_EncodePriority+0x32>
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	f04f 32ff 	mov.w	r2, #4294967295
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43da      	mvns	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	401a      	ands	r2, r3
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058d0:	f04f 31ff 	mov.w	r1, #4294967295
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	fa01 f303 	lsl.w	r3, r1, r3
 80058da:	43d9      	mvns	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e0:	4313      	orrs	r3, r2
         );
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3724      	adds	r7, #36	; 0x24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005900:	d301      	bcc.n	8005906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005902:	2301      	movs	r3, #1
 8005904:	e00f      	b.n	8005926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <SysTick_Config+0x40>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3b01      	subs	r3, #1
 800590c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800590e:	210f      	movs	r1, #15
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	f7ff ff8e 	bl	8005834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <SysTick_Config+0x40>)
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <SysTick_Config+0x40>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000e010 	.word	0xe000e010

08005934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fecb 	bl	80056d8 <__NVIC_SetPriorityGrouping>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	4603      	mov	r3, r0
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005958:	f7ff fee2 	bl	8005720 <__NVIC_GetPriorityGrouping>
 800595c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7ff ff90 	bl	8005888 <NVIC_EncodePriority>
 8005968:	4602      	mov	r2, r0
 800596a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff5f 	bl	8005834 <__NVIC_SetPriority>
}
 8005976:	bf00      	nop
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	4603      	mov	r3, r0
 8005986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fed5 	bl	800573c <__NVIC_EnableIRQ>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80059a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fee5 	bl	8005778 <__NVIC_DisableIRQ>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff ff96 	bl	80058f0 <SysTick_Config>
 80059c4:	4603      	mov	r3, r0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80059d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff feed 	bl	80057bc <__NVIC_SetPendingIRQ>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	4603      	mov	r3, r0
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80059f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fefd 	bl	80057f8 <__NVIC_ClearPendingIRQ>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d005      	beq.n	8005a2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e047      	b.n	8005aba <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020e 	bic.w	r2, r2, #14
 8005a38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 021c 	and.w	r2, r3, #28
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
    }
  }
  return status;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ad2:	e14c      	b.n	8005d6e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2101      	movs	r1, #1
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 813e 	beq.w	8005d68 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x38>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b12      	cmp	r3, #18
 8005afa:	d123      	bne.n	8005b44 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	220f      	movs	r2, #15
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	08da      	lsrs	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	6939      	ldr	r1, [r7, #16]
 8005b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f003 0203 	and.w	r2, r3, #3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d00b      	beq.n	8005b98 <HAL_GPIO_Init+0xd4>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d007      	beq.n	8005b98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b8c:	2b11      	cmp	r3, #17
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b12      	cmp	r3, #18
 8005b96:	d130      	bne.n	8005bfa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bce:	2201      	movs	r2, #1
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 0201 	and.w	r2, r3, #1
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	2203      	movs	r2, #3
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8098 	beq.w	8005d68 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005c38:	4a54      	ldr	r2, [pc, #336]	; (8005d8c <HAL_GPIO_Init+0x2c8>)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	220f      	movs	r2, #15
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c62:	d019      	beq.n	8005c98 <HAL_GPIO_Init+0x1d4>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <HAL_GPIO_Init+0x2cc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <HAL_GPIO_Init+0x1d0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a49      	ldr	r2, [pc, #292]	; (8005d94 <HAL_GPIO_Init+0x2d0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00d      	beq.n	8005c90 <HAL_GPIO_Init+0x1cc>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a48      	ldr	r2, [pc, #288]	; (8005d98 <HAL_GPIO_Init+0x2d4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <HAL_GPIO_Init+0x1c8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a47      	ldr	r2, [pc, #284]	; (8005d9c <HAL_GPIO_Init+0x2d8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_GPIO_Init+0x1c4>
 8005c84:	2304      	movs	r3, #4
 8005c86:	e008      	b.n	8005c9a <HAL_GPIO_Init+0x1d6>
 8005c88:	2307      	movs	r3, #7
 8005c8a:	e006      	b.n	8005c9a <HAL_GPIO_Init+0x1d6>
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e004      	b.n	8005c9a <HAL_GPIO_Init+0x1d6>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e002      	b.n	8005c9a <HAL_GPIO_Init+0x1d6>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <HAL_GPIO_Init+0x1d6>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	f002 0203 	and.w	r2, r2, #3
 8005ca0:	0092      	lsls	r2, r2, #2
 8005ca2:	4093      	lsls	r3, r2
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005caa:	4938      	ldr	r1, [pc, #224]	; (8005d8c <HAL_GPIO_Init+0x2c8>)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005cb8:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d0c:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4013      	ands	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d62:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <HAL_GPIO_Init+0x2dc>)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f aeab 	bne.w	8005ad4 <HAL_GPIO_Init+0x10>
  }
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	48000400 	.word	0x48000400
 8005d94:	48000800 	.word	0x48000800
 8005d98:	48000c00 	.word	0x48000c00
 8005d9c:	48001000 	.word	0x48001000
 8005da0:	58000800 	.word	0x58000800

08005da4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005db2:	e0bb      	b.n	8005f2c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005db4:	2201      	movs	r2, #1
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80ae 	beq.w	8005f26 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005dca:	4a5f      	ldr	r2, [pc, #380]	; (8005f48 <HAL_GPIO_DeInit+0x1a4>)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005df2:	d019      	beq.n	8005e28 <HAL_GPIO_DeInit+0x84>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a55      	ldr	r2, [pc, #340]	; (8005f4c <HAL_GPIO_DeInit+0x1a8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_GPIO_DeInit+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a54      	ldr	r2, [pc, #336]	; (8005f50 <HAL_GPIO_DeInit+0x1ac>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00d      	beq.n	8005e20 <HAL_GPIO_DeInit+0x7c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a53      	ldr	r2, [pc, #332]	; (8005f54 <HAL_GPIO_DeInit+0x1b0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <HAL_GPIO_DeInit+0x78>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a52      	ldr	r2, [pc, #328]	; (8005f58 <HAL_GPIO_DeInit+0x1b4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d101      	bne.n	8005e18 <HAL_GPIO_DeInit+0x74>
 8005e14:	2304      	movs	r3, #4
 8005e16:	e008      	b.n	8005e2a <HAL_GPIO_DeInit+0x86>
 8005e18:	2307      	movs	r3, #7
 8005e1a:	e006      	b.n	8005e2a <HAL_GPIO_DeInit+0x86>
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e004      	b.n	8005e2a <HAL_GPIO_DeInit+0x86>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e002      	b.n	8005e2a <HAL_GPIO_DeInit+0x86>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_GPIO_DeInit+0x86>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	f002 0203 	and.w	r2, r2, #3
 8005e30:	0092      	lsls	r2, r2, #2
 8005e32:	4093      	lsls	r3, r2
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d136      	bne.n	8005ea8 <HAL_GPIO_DeInit+0x104>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	220f      	movs	r2, #15
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005e4a:	4a3f      	ldr	r2, [pc, #252]	; (8005f48 <HAL_GPIO_DeInit+0x1a4>)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	3302      	adds	r3, #2
 8005e52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	43da      	mvns	r2, r3
 8005e5a:	483b      	ldr	r0, [pc, #236]	; (8005f48 <HAL_GPIO_DeInit+0x1a4>)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	089b      	lsrs	r3, r3, #2
 8005e60:	400a      	ands	r2, r1
 8005e62:	3302      	adds	r3, #2
 8005e64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005e68:	4b3c      	ldr	r3, [pc, #240]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	493a      	ldr	r1, [pc, #232]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005e7a:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	4935      	ldr	r1, [pc, #212]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	4931      	ldr	r1, [pc, #196]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	492e      	ldr	r1, [pc, #184]	; (8005f5c <HAL_GPIO_DeInit+0x1b8>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2103      	movs	r1, #3
 8005eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	08da      	lsrs	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3208      	adds	r2, #8
 8005ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	08d2      	lsrs	r2, r2, #3
 8005edc:	4019      	ands	r1, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3208      	adds	r2, #8
 8005ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	2103      	movs	r1, #3
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	2101      	movs	r1, #1
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	2103      	movs	r1, #3
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	401a      	ands	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60da      	str	r2, [r3, #12]
    }
    
    position++;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f47f af3d 	bne.w	8005db4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	48000400 	.word	0x48000400
 8005f50:	48000800 	.word	0x48000800
 8005f54:	48000c00 	.word	0x48000c00
 8005f58:	48001000 	.word	0x48001000
 8005f5c:	58000800 	.word	0x58000800

08005f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f70:	787b      	ldrb	r3, [r7, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f7c:	e002      	b.n	8005f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fa8:	887a      	ldrh	r2, [r7, #2]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005fae:	e002      	b.n	8005fb6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fb0:	887a      	ldrh	r2, [r7, #2]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	619a      	str	r2, [r3, #24]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d006      	beq.n	8005fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fda:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f006 ff5e 	bl	800cea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	58000800 	.word	0x58000800

08005ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e081      	b.n	800610a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8a8 	bl	8006170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2224      	movs	r2, #36	; 0x24
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e006      	b.n	800607c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800607a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d104      	bne.n	800608e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800609c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	ea42 0103 	orr.w	r1, r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69d9      	ldr	r1, [r3, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e021      	b.n	8006168 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f821 	bl	8006184 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	f040 80f9 	bne.w	80063b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_I2C_Mem_Write+0x34>
 80061c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0ed      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2C_Mem_Write+0x4e>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e0e6      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061ee:	f7ff fa5b 	bl	80056a8 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2319      	movs	r3, #25
 80061fa:	2201      	movs	r2, #1
 80061fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fadd 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0d1      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2221      	movs	r2, #33	; 0x21
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006238:	88f8      	ldrh	r0, [r7, #6]
 800623a:	893a      	ldrh	r2, [r7, #8]
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4603      	mov	r3, r0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f9ed 	bl	8006628 <I2C_RequestMemoryWrite>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0a9      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2bff      	cmp	r3, #255	; 0xff
 8006268:	d90e      	bls.n	8006288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	; 0xff
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006274:	b2da      	uxtb	r2, r3
 8006276:	8979      	ldrh	r1, [r7, #10]
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fbbf 	bl	8006a04 <I2C_TransferConfig>
 8006286:	e00f      	b.n	80062a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	8979      	ldrh	r1, [r7, #10]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fbae 	bl	8006a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fac7 	bl	8006840 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e07b      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d034      	beq.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d130      	bne.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fa59 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e04d      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	2bff      	cmp	r3, #255	; 0xff
 8006320:	d90e      	bls.n	8006340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	b2da      	uxtb	r2, r3
 800632e:	8979      	ldrh	r1, [r7, #10]
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fb63 	bl	8006a04 <I2C_TransferConfig>
 800633e:	e00f      	b.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634e:	b2da      	uxtb	r2, r3
 8006350:	8979      	ldrh	r1, [r7, #10]
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fb52 	bl	8006a04 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d19e      	bne.n	80062a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 faa6 	bl	80068c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e01a      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2220      	movs	r2, #32
 8006384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_I2C_Mem_Write+0x224>)
 8006392:	400b      	ands	r3, r1
 8006394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 80fd 	bne.w	80065e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_I2C_Mem_Read+0x34>
 80063ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0f1      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_I2C_Mem_Read+0x4e>
 800640a:	2302      	movs	r3, #2
 800640c:	e0ea      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006416:	f7ff f947 	bl	80056a8 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2319      	movs	r3, #25
 8006422:	2201      	movs	r2, #1
 8006424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f9c9 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d5      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2222      	movs	r2, #34	; 0x22
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2240      	movs	r2, #64	; 0x40
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006460:	88f8      	ldrh	r0, [r7, #6]
 8006462:	893a      	ldrh	r2, [r7, #8]
 8006464:	8979      	ldrh	r1, [r7, #10]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4603      	mov	r3, r0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f92d 	bl	80066d0 <I2C_RequestMemoryRead>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0ad      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2bff      	cmp	r3, #255	; 0xff
 8006490:	d90e      	bls.n	80064b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8979      	ldrh	r1, [r7, #10]
 80064a0:	4b52      	ldr	r3, [pc, #328]	; (80065ec <HAL_I2C_Mem_Read+0x22c>)
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 faab 	bl	8006a04 <I2C_TransferConfig>
 80064ae:	e00f      	b.n	80064d0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	8979      	ldrh	r1, [r7, #10]
 80064c2:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_I2C_Mem_Read+0x22c>)
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fa9a 	bl	8006a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2200      	movs	r2, #0
 80064d8:	2104      	movs	r1, #4
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f970 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07c      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d034      	beq.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d130      	bne.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f941 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e04d      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2bff      	cmp	r3, #255	; 0xff
 8006550:	d90e      	bls.n	8006570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	22ff      	movs	r2, #255	; 0xff
 8006556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655c:	b2da      	uxtb	r2, r3
 800655e:	8979      	ldrh	r1, [r7, #10]
 8006560:	2300      	movs	r3, #0
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa4b 	bl	8006a04 <I2C_TransferConfig>
 800656e:	e00f      	b.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657e:	b2da      	uxtb	r2, r3
 8006580:	8979      	ldrh	r1, [r7, #10]
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fa3a 	bl	8006a04 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d19a      	bne.n	80064d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f98e 	bl	80068c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e01a      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2220      	movs	r2, #32
 80065b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6859      	ldr	r1, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_I2C_Mem_Read+0x230>)
 80065c2:	400b      	ands	r3, r1
 80065c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	80002400 	.word	0x80002400
 80065f0:	fe00e800 	.word	0xfe00e800

080065f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006602:	b2db      	uxtb	r3, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	4603      	mov	r3, r0
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	460b      	mov	r3, r1
 800663c:	813b      	strh	r3, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	b2da      	uxtb	r2, r3
 8006646:	8979      	ldrh	r1, [r7, #10]
 8006648:	4b20      	ldr	r3, [pc, #128]	; (80066cc <I2C_RequestMemoryWrite+0xa4>)
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f9d7 	bl	8006a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8f0 	bl	8006840 <I2C_WaitOnTXISFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e02c      	b.n	80066c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d105      	bne.n	800667c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006670:	893b      	ldrh	r3, [r7, #8]
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	629a      	str	r2, [r3, #40]	; 0x28
 800667a:	e015      	b.n	80066a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800667c:	893b      	ldrh	r3, [r7, #8]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	b29b      	uxth	r3, r3
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	69b9      	ldr	r1, [r7, #24]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f8d6 	bl	8006840 <I2C_WaitOnTXISFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e012      	b.n	80066c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2200      	movs	r2, #0
 80066b0:	2180      	movs	r1, #128	; 0x80
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f884 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	80002000 	.word	0x80002000

080066d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	817b      	strh	r3, [r7, #10]
 80066e2:	460b      	mov	r3, r1
 80066e4:	813b      	strh	r3, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	8979      	ldrh	r1, [r7, #10]
 80066f0:	4b20      	ldr	r3, [pc, #128]	; (8006774 <I2C_RequestMemoryRead+0xa4>)
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f984 	bl	8006a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	69b9      	ldr	r1, [r7, #24]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f89d 	bl	8006840 <I2C_WaitOnTXISFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e02c      	b.n	800676a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28
 8006720:	e015      	b.n	800674e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006722:	893b      	ldrh	r3, [r7, #8]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	b29b      	uxth	r3, r3
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	69b9      	ldr	r1, [r7, #24]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f883 	bl	8006840 <I2C_WaitOnTXISFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e012      	b.n	800676a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006744:	893b      	ldrh	r3, [r7, #8]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2200      	movs	r2, #0
 8006756:	2140      	movs	r1, #64	; 0x40
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f831 	bl	80067c0 <I2C_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	80002000 	.word	0x80002000

08006778 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d103      	bne.n	8006796 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d007      	beq.n	80067b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	619a      	str	r2, [r3, #24]
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	4613      	mov	r3, r2
 80067ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d0:	e022      	b.n	8006818 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d01e      	beq.n	8006818 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fe ff65 	bl	80056a8 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d113      	bne.n	8006818 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e00f      	b.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	d0cd      	beq.n	80067d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800684c:	e02c      	b.n	80068a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f870 	bl	8006938 <I2C_IsAcknowledgeFailed>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e02a      	b.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d01e      	beq.n	80068a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fe ff1d 	bl	80056a8 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f043 0220 	orr.w	r2, r3, #32
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e007      	b.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d1cb      	bne.n	800684e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068cc:	e028      	b.n	8006920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f830 	bl	8006938 <I2C_IsAcknowledgeFailed>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e026      	b.n	8006930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fe fee1 	bl	80056a8 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d113      	bne.n	8006920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d1cf      	bne.n	80068ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b10      	cmp	r3, #16
 8006950:	d151      	bne.n	80069f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006952:	e022      	b.n	800699a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d01e      	beq.n	800699a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695c:	f7fe fea4 	bl	80056a8 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	429a      	cmp	r2, r3
 800696a:	d302      	bcc.n	8006972 <I2C_IsAcknowledgeFailed+0x3a>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d113      	bne.n	800699a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e02e      	b.n	80069f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d1d5      	bne.n	8006954 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2210      	movs	r2, #16
 80069ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2220      	movs	r2, #32
 80069b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f7ff fedd 	bl	8006778 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <I2C_IsAcknowledgeFailed+0xc8>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	fe00e800 	.word	0xfe00e800

08006a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	817b      	strh	r3, [r7, #10]
 8006a12:	4613      	mov	r3, r2
 8006a14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	0d5b      	lsrs	r3, r3, #21
 8006a20:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <I2C_TransferConfig+0x58>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	ea02 0103 	and.w	r1, r2, r3
 8006a2e:	897b      	ldrh	r3, [r7, #10]
 8006a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a34:	7a7b      	ldrb	r3, [r7, #9]
 8006a36:	041b      	lsls	r3, r3, #16
 8006a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	03ff63ff 	.word	0x03ff63ff

08006a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d138      	bne.n	8006ae8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e032      	b.n	8006aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	; 0x24
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ab2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d139      	bne.n	8006b80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e033      	b.n	8006b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2224      	movs	r2, #36	; 0x24
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a04      	ldr	r2, [pc, #16]	; (8006bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	58000400 	.word	0x58000400

08006bb0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	58000400 	.word	0x58000400

08006bcc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d101      	bne.n	8006be4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_RCC_HSE_EnableBypass>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c02:	6013      	str	r3, [r2, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <LL_RCC_HSE_DisableBypass>:
{
 8006c0e:	b480      	push	{r7}
 8006c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c20:	6013      	str	r3, [r2, #0]
}
 8006c22:	bf00      	nop
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <LL_RCC_HSE_Enable>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3e:	6013      	str	r3, [r2, #0]
}
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <LL_RCC_HSE_Disable>:
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5c:	6013      	str	r3, [r2, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_RCC_HSE_IsReady>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c7a:	d101      	bne.n	8006c80 <LL_RCC_HSE_IsReady+0x18>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <LL_RCC_HSE_IsReady+0x1a>
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_HSI_Enable>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <LL_RCC_HSI_Disable>:
{
 8006caa:	b480      	push	{r7}
 8006cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <LL_RCC_HSI_IsReady>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cda:	d101      	bne.n	8006ce0 <LL_RCC_HSI_IsReady+0x18>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e000      	b.n	8006ce2 <LL_RCC_HSI_IsReady+0x1a>
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <LL_RCC_HSI_SetCalibTrimming>:
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d06:	4313      	orrs	r3, r2
 8006d08:	604b      	str	r3, [r1, #4]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_HSI48_Enable>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006d2e:	bf00      	nop
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <LL_RCC_HSI48_Disable>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_HSI48_IsReady>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d101      	bne.n	8006d72 <LL_RCC_HSI48_IsReady+0x18>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <LL_RCC_HSI48_IsReady+0x1a>
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_RCC_LSE_Enable>:
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d96:	bf00      	nop
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_LSE_Disable>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <LL_RCC_LSE_EnableBypass>:
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dd2:	f043 0304 	orr.w	r3, r3, #4
 8006dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_LSE_DisableBypass>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df4:	f023 0304 	bic.w	r3, r3, #4
 8006df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006dfc:	bf00      	nop
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <LL_RCC_LSE_IsReady>:
{
 8006e06:	b480      	push	{r7}
 8006e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d101      	bne.n	8006e1e <LL_RCC_LSE_IsReady+0x18>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <LL_RCC_LSE_IsReady+0x1a>
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_LSI1_Enable>:
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e42:	bf00      	nop
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_RCC_LSI1_Disable>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <LL_RCC_LSI1_IsReady>:
{
 8006e6e:	b480      	push	{r7}
 8006e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d101      	bne.n	8006e86 <LL_RCC_LSI1_IsReady+0x18>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <LL_RCC_LSI1_IsReady+0x1a>
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <LL_RCC_LSI2_Enable>:
{
 8006e92:	b480      	push	{r7}
 8006e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea2:	f043 0304 	orr.w	r3, r3, #4
 8006ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006eaa:	bf00      	nop
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <LL_RCC_LSI2_Disable>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec4:	f023 0304 	bic.w	r3, r3, #4
 8006ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_LSI2_IsReady>:
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d101      	bne.n	8006eee <LL_RCC_LSI2_IsReady+0x18>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <LL_RCC_LSI2_IsReady+0x1a>
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_RCC_LSI2_SetTrimming>:
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <LL_RCC_MSI_Enable>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	6013      	str	r3, [r2, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_RCC_MSI_Disable>:
{
 8006f46:	b480      	push	{r7}
 8006f48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	6013      	str	r3, [r2, #0]
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <LL_RCC_MSI_IsReady>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d101      	bne.n	8006f7a <LL_RCC_MSI_IsReady+0x16>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <LL_RCC_MSI_IsReady+0x18>
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <LL_RCC_MSI_SetRange>:
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	600b      	str	r3, [r1, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <LL_RCC_MSI_GetRange>:
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fbe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2bb0      	cmp	r3, #176	; 0xb0
 8006fc4:	d901      	bls.n	8006fca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006fc6:	23b0      	movs	r3, #176	; 0xb0
 8006fc8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006fca:	687b      	ldr	r3, [r7, #4]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <LL_RCC_SetSysClkSource>:
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 0203 	bic.w	r2, r3, #3
 8007014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <LL_RCC_GetSysClkSource>:
{
 800702a:	b480      	push	{r7}
 800702c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 030c 	and.w	r3, r3, #12
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_RCC_SetAHBPrescaler>:
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800704a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4313      	orrs	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_C2_RCC_SetAHBPrescaler>:
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007076:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800707a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800707e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <LL_RCC_SetAHB4Prescaler>:
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800709e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070a6:	f023 020f 	bic.w	r2, r3, #15
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	091b      	lsrs	r3, r3, #4
 80070ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <LL_RCC_SetAPB1Prescaler>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4313      	orrs	r3, r2
 80070de:	608b      	str	r3, [r1, #8]
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <LL_RCC_SetAPB2Prescaler>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80070f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4313      	orrs	r3, r2
 8007106:	608b      	str	r3, [r1, #8]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <LL_RCC_GetAHBPrescaler>:
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007122:	4618      	mov	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <LL_RCC_GetAHB4Prescaler>:
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007134:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800713e:	4618      	mov	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_RCC_GetAPB1Prescaler>:
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800714c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007156:	4618      	mov	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <LL_RCC_GetAPB2Prescaler>:
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800718a:	6013      	str	r3, [r2, #0]
}
 800718c:	bf00      	nop
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007196:	b480      	push	{r7}
 8007198:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071a8:	6013      	str	r3, [r2, #0]
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071c6:	d101      	bne.n	80071cc <LL_RCC_PLL_IsReady+0x18>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <LL_RCC_PLL_IsReady+0x1a>
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80071f2:	b480      	push	{r7}
 80071f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80071f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007200:	4618      	mov	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800720a:	b480      	push	{r7}
 800720c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800720e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007218:	4618      	mov	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007222:	b480      	push	{r7}
 8007224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f003 0303 	and.w	r3, r3, #3
}
 8007230:	4618      	mov	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800723a:	b480      	push	{r7}
 800723c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800723e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d101      	bne.n	8007252 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800725e:	b480      	push	{r7}
 8007260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007266:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800726a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007272:	d101      	bne.n	8007278 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007298:	d101      	bne.n	800729e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072bc:	d101      	bne.n	80072c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80072ce:	b480      	push	{r7}
 80072d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80072d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e0:	d101      	bne.n	80072e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b08b      	sub	sp, #44	; 0x2c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e34b      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 808f 	beq.w	8007432 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007314:	f7ff fe89 	bl	800702a <LL_RCC_GetSysClkSource>
 8007318:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800731a:	f7ff ff82 	bl	8007222 <LL_RCC_PLL_GetMainSource>
 800731e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_RCC_OscConfig+0x3e>
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	2b0c      	cmp	r3, #12
 800732a:	d149      	bne.n	80073c0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d146      	bne.n	80073c0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007332:	f7ff fe17 	bl	8006f64 <LL_RCC_MSI_IsReady>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_RCC_OscConfig+0x54>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e32a      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800734c:	f7ff fe2f 	bl	8006fae <LL_RCC_MSI_GetRange>
 8007350:	4603      	mov	r3, r0
 8007352:	429c      	cmp	r4, r3
 8007354:	d914      	bls.n	8007380 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd0e 	bl	8007d7c <RCC_SetFlashLatencyFromMSIRange>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e319      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fe09 	bl	8006f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fe2d 	bl	8006fd8 <LL_RCC_MSI_SetCalibTrimming>
 800737e:	e013      	b.n	80073a8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fdfe 	bl	8006f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fe22 	bl	8006fd8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fcef 	bl	8007d7c <RCC_SetFlashLatencyFromMSIRange>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e2fa      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80073a8:	f7fa fed6 	bl	8002158 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073ac:	4bb4      	ldr	r3, [pc, #720]	; (8007680 <HAL_RCC_OscConfig+0x38c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe f92d 	bl	8005610 <HAL_InitTick>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d039      	beq.n	8007430 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e2ee      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01e      	beq.n	8007406 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073c8:	f7ff fdae 	bl	8006f28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073cc:	f7fe f96c 	bl	80056a8 <HAL_GetTick>
 80073d0:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073d4:	f7fe f968 	bl	80056a8 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e2db      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80073e6:	f7ff fdbd 	bl	8006f64 <LL_RCC_MSI_IsReady>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f1      	beq.n	80073d4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fdc6 	bl	8006f86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fdea 	bl	8006fd8 <LL_RCC_MSI_SetCalibTrimming>
 8007404:	e015      	b.n	8007432 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007406:	f7ff fd9e 	bl	8006f46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800740a:	f7fe f94d 	bl	80056a8 <HAL_GetTick>
 800740e:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007410:	e008      	b.n	8007424 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007412:	f7fe f949 	bl	80056a8 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e2bc      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007424:	f7ff fd9e 	bl	8006f64 <LL_RCC_MSI_IsReady>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f1      	bne.n	8007412 <HAL_RCC_OscConfig+0x11e>
 800742e:	e000      	b.n	8007432 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007430:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d05a      	beq.n	80074f4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800743e:	f7ff fdf4 	bl	800702a <LL_RCC_GetSysClkSource>
 8007442:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007444:	f7ff feed 	bl	8007222 <LL_RCC_PLL_GetMainSource>
 8007448:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d005      	beq.n	800745c <HAL_RCC_OscConfig+0x168>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b0c      	cmp	r3, #12
 8007454:	d10d      	bne.n	8007472 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d10a      	bne.n	8007472 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800745c:	f7ff fc04 	bl	8006c68 <LL_RCC_HSE_IsReady>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d045      	beq.n	80074f2 <HAL_RCC_OscConfig+0x1fe>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d141      	bne.n	80074f2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e295      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747a:	d102      	bne.n	8007482 <HAL_RCC_OscConfig+0x18e>
 800747c:	f7ff fbd6 	bl	8006c2c <LL_RCC_HSE_Enable>
 8007480:	e00d      	b.n	800749e <HAL_RCC_OscConfig+0x1aa>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800748a:	d104      	bne.n	8007496 <HAL_RCC_OscConfig+0x1a2>
 800748c:	f7ff fbb0 	bl	8006bf0 <LL_RCC_HSE_EnableBypass>
 8007490:	f7ff fbcc 	bl	8006c2c <LL_RCC_HSE_Enable>
 8007494:	e003      	b.n	800749e <HAL_RCC_OscConfig+0x1aa>
 8007496:	f7ff fbd8 	bl	8006c4a <LL_RCC_HSE_Disable>
 800749a:	f7ff fbb8 	bl	8006c0e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d012      	beq.n	80074cc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a6:	f7fe f8ff 	bl	80056a8 <HAL_GetTick>
 80074aa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074ae:	f7fe f8fb 	bl	80056a8 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b64      	cmp	r3, #100	; 0x64
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e26e      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80074c0:	f7ff fbd2 	bl	8006c68 <LL_RCC_HSE_IsReady>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f1      	beq.n	80074ae <HAL_RCC_OscConfig+0x1ba>
 80074ca:	e013      	b.n	80074f4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fe f8ec 	bl	80056a8 <HAL_GetTick>
 80074d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d4:	f7fe f8e8 	bl	80056a8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b64      	cmp	r3, #100	; 0x64
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e25b      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80074e6:	f7ff fbbf 	bl	8006c68 <LL_RCC_HSE_IsReady>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f1      	bne.n	80074d4 <HAL_RCC_OscConfig+0x1e0>
 80074f0:	e000      	b.n	80074f4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d051      	beq.n	80075a4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007500:	f7ff fd93 	bl	800702a <LL_RCC_GetSysClkSource>
 8007504:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007506:	f7ff fe8c 	bl	8007222 <LL_RCC_PLL_GetMainSource>
 800750a:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b04      	cmp	r3, #4
 8007510:	d005      	beq.n	800751e <HAL_RCC_OscConfig+0x22a>
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b0c      	cmp	r3, #12
 8007516:	d113      	bne.n	8007540 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d110      	bne.n	8007540 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800751e:	f7ff fbd3 	bl	8006cc8 <LL_RCC_HSI_IsReady>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RCC_OscConfig+0x240>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e234      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fbd7 	bl	8006cec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800753e:	e031      	b.n	80075a4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d019      	beq.n	800757c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007548:	f7ff fba0 	bl	8006c8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754c:	f7fe f8ac 	bl	80056a8 <HAL_GetTick>
 8007550:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007554:	f7fe f8a8 	bl	80056a8 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e21b      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007566:	f7ff fbaf 	bl	8006cc8 <LL_RCC_HSI_IsReady>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f1      	beq.n	8007554 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fbb9 	bl	8006cec <LL_RCC_HSI_SetCalibTrimming>
 800757a:	e013      	b.n	80075a4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800757c:	f7ff fb95 	bl	8006caa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007580:	f7fe f892 	bl	80056a8 <HAL_GetTick>
 8007584:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007588:	f7fe f88e 	bl	80056a8 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e201      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800759a:	f7ff fb95 	bl	8006cc8 <LL_RCC_HSI_IsReady>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1f1      	bne.n	8007588 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a2 	beq.w	8007702 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d075      	beq.n	80076b2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d046      	beq.n	8007660 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80075d2:	f7ff fc4c 	bl	8006e6e <LL_RCC_LSI1_IsReady>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d113      	bne.n	8007604 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80075dc:	f7ff fc25 	bl	8006e2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075e0:	f7fe f862 	bl	80056a8 <HAL_GetTick>
 80075e4:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80075e8:	f7fe f85e 	bl	80056a8 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e1d1      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80075fa:	f7ff fc38 	bl	8006e6e <LL_RCC_LSI1_IsReady>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f1      	beq.n	80075e8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007604:	f7ff fc45 	bl	8006e92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fe f84e 	bl	80056a8 <HAL_GetTick>
 800760c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007610:	f7fe f84a 	bl	80056a8 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e1bd      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007622:	f7ff fc58 	bl	8006ed6 <LL_RCC_LSI2_IsReady>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f1      	beq.n	8007610 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fc62 	bl	8006efa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007636:	f7ff fc09 	bl	8006e4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fe f835 	bl	80056a8 <HAL_GetTick>
 800763e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007642:	f7fe f831 	bl	80056a8 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e1a4      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007654:	f7ff fc0b 	bl	8006e6e <LL_RCC_LSI1_IsReady>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f1      	bne.n	8007642 <HAL_RCC_OscConfig+0x34e>
 800765e:	e050      	b.n	8007702 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007660:	f7ff fbe3 	bl	8006e2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fe f820 	bl	80056a8 <HAL_GetTick>
 8007668:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800766a:	e00b      	b.n	8007684 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800766c:	f7fe f81c 	bl	80056a8 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d904      	bls.n	8007684 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e18f      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
 800767e:	bf00      	nop
 8007680:	20000154 	.word	0x20000154
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007684:	f7ff fbf3 	bl	8006e6e <LL_RCC_LSI1_IsReady>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0ee      	beq.n	800766c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800768e:	f7ff fc11 	bl	8006eb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007694:	f7fe f808 	bl	80056a8 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e17b      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80076a6:	f7ff fc16 	bl	8006ed6 <LL_RCC_LSI2_IsReady>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f1      	bne.n	8007694 <HAL_RCC_OscConfig+0x3a0>
 80076b0:	e027      	b.n	8007702 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80076b2:	f7ff fbff 	bl	8006eb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b6:	f7fd fff7 	bl	80056a8 <HAL_GetTick>
 80076ba:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80076be:	f7fd fff3 	bl	80056a8 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e166      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80076d0:	f7ff fc01 	bl	8006ed6 <LL_RCC_LSI2_IsReady>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f1      	bne.n	80076be <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80076da:	f7ff fbb7 	bl	8006e4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076de:	f7fd ffe3 	bl	80056a8 <HAL_GetTick>
 80076e2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80076e6:	f7fd ffdf 	bl	80056a8 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e152      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80076f8:	f7ff fbb9 	bl	8006e6e <LL_RCC_LSI1_IsReady>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f1      	bne.n	80076e6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0304 	and.w	r3, r3, #4
 800770a:	2b00      	cmp	r3, #0
 800770c:	d05b      	beq.n	80077c6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800770e:	4ba6      	ldr	r3, [pc, #664]	; (80079a8 <HAL_RCC_OscConfig+0x6b4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d114      	bne.n	8007744 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800771a:	f7ff fa39 	bl	8006b90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800771e:	f7fd ffc3 	bl	80056a8 <HAL_GetTick>
 8007722:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007726:	f7fd ffbf 	bl	80056a8 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e132      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007738:	4b9b      	ldr	r3, [pc, #620]	; (80079a8 <HAL_RCC_OscConfig+0x6b4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0f0      	beq.n	8007726 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d102      	bne.n	8007752 <HAL_RCC_OscConfig+0x45e>
 800774c:	f7ff fb17 	bl	8006d7e <LL_RCC_LSE_Enable>
 8007750:	e00c      	b.n	800776c <HAL_RCC_OscConfig+0x478>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d104      	bne.n	8007764 <HAL_RCC_OscConfig+0x470>
 800775a:	f7ff fb32 	bl	8006dc2 <LL_RCC_LSE_EnableBypass>
 800775e:	f7ff fb0e 	bl	8006d7e <LL_RCC_LSE_Enable>
 8007762:	e003      	b.n	800776c <HAL_RCC_OscConfig+0x478>
 8007764:	f7ff fb1c 	bl	8006da0 <LL_RCC_LSE_Disable>
 8007768:	f7ff fb3c 	bl	8006de4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d014      	beq.n	800779e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007774:	f7fd ff98 	bl	80056a8 <HAL_GetTick>
 8007778:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800777a:	e00a      	b.n	8007792 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777c:	f7fd ff94 	bl	80056a8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	; 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e105      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007792:	f7ff fb38 	bl	8006e06 <LL_RCC_LSE_IsReady>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0ef      	beq.n	800777c <HAL_RCC_OscConfig+0x488>
 800779c:	e013      	b.n	80077c6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779e:	f7fd ff83 	bl	80056a8 <HAL_GetTick>
 80077a2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80077a4:	e00a      	b.n	80077bc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a6:	f7fd ff7f 	bl	80056a8 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e0f0      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80077bc:	f7ff fb23 	bl	8006e06 <LL_RCC_LSE_IsReady>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1ef      	bne.n	80077a6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02c      	beq.n	800782c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d014      	beq.n	8007804 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077da:	f7ff fa9c 	bl	8006d16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fd ff63 	bl	80056a8 <HAL_GetTick>
 80077e2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80077e4:	e008      	b.n	80077f8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077e6:	f7fd ff5f 	bl	80056a8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e0d2      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80077f8:	f7ff faaf 	bl	8006d5a <LL_RCC_HSI48_IsReady>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f1      	beq.n	80077e6 <HAL_RCC_OscConfig+0x4f2>
 8007802:	e013      	b.n	800782c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007804:	f7ff fa98 	bl	8006d38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007808:	f7fd ff4e 	bl	80056a8 <HAL_GetTick>
 800780c:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007810:	f7fd ff4a 	bl	80056a8 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e0bd      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007822:	f7ff fa9a 	bl	8006d5a <LL_RCC_HSI48_IsReady>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f1      	bne.n	8007810 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80b3 	beq.w	800799c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007836:	f7ff fbf8 	bl	800702a <LL_RCC_GetSysClkSource>
 800783a:	4603      	mov	r3, r0
 800783c:	2b0c      	cmp	r3, #12
 800783e:	d076      	beq.n	800792e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	2b02      	cmp	r3, #2
 8007846:	d14b      	bne.n	80078e0 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007848:	f7ff fca5 	bl	8007196 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fd ff2c 	bl	80056a8 <HAL_GetTick>
 8007850:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007854:	f7fd ff28 	bl	80056a8 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e09b      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007866:	f7ff fca5 	bl	80071b4 <LL_RCC_PLL_IsReady>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1f1      	bne.n	8007854 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	4b4d      	ldr	r3, [pc, #308]	; (80079ac <HAL_RCC_OscConfig+0x6b8>)
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007882:	4311      	orrs	r1, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007888:	0212      	lsls	r2, r2, #8
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007890:	4311      	orrs	r1, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007896:	4311      	orrs	r1, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800789c:	430a      	orrs	r2, r1
 800789e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a6:	f7ff fc67 	bl	8007178 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ba:	f7fd fef5 	bl	80056a8 <HAL_GetTick>
 80078be:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c2:	f7fd fef1 	bl	80056a8 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e064      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80078d4:	f7ff fc6e 	bl	80071b4 <LL_RCC_PLL_IsReady>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f1      	beq.n	80078c2 <HAL_RCC_OscConfig+0x5ce>
 80078de:	e05d      	b.n	800799c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e0:	f7ff fc59 	bl	8007196 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80078e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80078f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078fe:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007906:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fd fece 	bl	80056a8 <HAL_GetTick>
 800790c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fd feca 	bl	80056a8 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e03d      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007922:	f7ff fc47 	bl	80071b4 <LL_RCC_PLL_IsReady>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f1      	bne.n	8007910 <HAL_RCC_OscConfig+0x61c>
 800792c:	e036      	b.n	800799c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e031      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800793a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f003 0203 	and.w	r2, r3, #3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794c:	429a      	cmp	r2, r3
 800794e:	d123      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d11c      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800796a:	429a      	cmp	r2, r3
 800796c:	d114      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007978:	429a      	cmp	r2, r3
 800797a:	d10d      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007986:	429a      	cmp	r2, r3
 8007988:	d106      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007994:	429a      	cmp	r2, r3
 8007996:	d001      	beq.n	800799c <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	372c      	adds	r7, #44	; 0x2c
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd90      	pop	{r4, r7, pc}
 80079a6:	bf00      	nop
 80079a8:	58000400 	.word	0x58000400
 80079ac:	11c1808c 	.word	0x11c1808c

080079b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e12a      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079c4:	4b97      	ldr	r3, [pc, #604]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d91b      	bls.n	8007a0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d2:	4b94      	ldr	r3, [pc, #592]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 0207 	bic.w	r2, r3, #7
 80079da:	4992      	ldr	r1, [pc, #584]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e2:	f7fd fe61 	bl	80056a8 <HAL_GetTick>
 80079e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e8:	e008      	b.n	80079fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079ea:	f7fd fe5d 	bl	80056a8 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e10e      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fc:	4b89      	ldr	r3, [pc, #548]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d1ef      	bne.n	80079ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d016      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fb11 	bl	8007042 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a20:	f7fd fe42 	bl	80056a8 <HAL_GetTick>
 8007a24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a28:	f7fd fe3e 	bl	80056a8 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e0ef      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007a3a:	f7ff fbfe 	bl	800723a <LL_RCC_IsActiveFlag_HPRE>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f1      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d016      	beq.n	8007a7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fb08 	bl	800706a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a5a:	f7fd fe25 	bl	80056a8 <HAL_GetTick>
 8007a5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007a60:	e008      	b.n	8007a74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a62:	f7fd fe21 	bl	80056a8 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e0d2      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007a74:	f7ff fbf3 	bl	800725e <LL_RCC_IsActiveFlag_C2HPRE>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f1      	beq.n	8007a62 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d016      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fb01 	bl	8007096 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a94:	f7fd fe08 	bl	80056a8 <HAL_GetTick>
 8007a98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a9c:	f7fd fe04 	bl	80056a8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0b5      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007aae:	f7ff fbe9 	bl	8007284 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0f1      	beq.n	8007a9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d016      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff fafb 	bl	80070c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ace:	f7fd fdeb 	bl	80056a8 <HAL_GetTick>
 8007ad2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ad6:	f7fd fde7 	bl	80056a8 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e098      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ae8:	f7ff fbdf 	bl	80072aa <LL_RCC_IsActiveFlag_PPRE1>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f1      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d017      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff faf1 	bl	80070ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b0a:	f7fd fdcd 	bl	80056a8 <HAL_GetTick>
 8007b0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b12:	f7fd fdc9 	bl	80056a8 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e07a      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b24:	f7ff fbd3 	bl	80072ce <LL_RCC_IsActiveFlag_PPRE2>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0f1      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d043      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d106      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007b42:	f7ff f891 	bl	8006c68 <LL_RCC_HSE_IsReady>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11e      	bne.n	8007b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e064      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d106      	bne.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007b58:	f7ff fb2c 	bl	80071b4 <LL_RCC_PLL_IsReady>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d113      	bne.n	8007b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e059      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007b6e:	f7ff f9f9 	bl	8006f64 <LL_RCC_MSI_IsReady>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d108      	bne.n	8007b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e04e      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007b7c:	f7ff f8a4 	bl	8006cc8 <LL_RCC_HSI_IsReady>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e047      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fa37 	bl	8007002 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b94:	f7fd fd88 	bl	80056a8 <HAL_GetTick>
 8007b98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b9c:	f7fd fd84 	bl	80056a8 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e033      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb2:	f7ff fa3a 	bl	800702a <LL_RCC_GetSysClkSource>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d1ec      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bc2:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d21b      	bcs.n	8007c08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bd0:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f023 0207 	bic.w	r2, r3, #7
 8007bd8:	4912      	ldr	r1, [pc, #72]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be0:	f7fd fd62 	bl	80056a8 <HAL_GetTick>
 8007be4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007be8:	f7fd fd5e 	bl	80056a8 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e00f      	b.n	8007c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <HAL_RCC_ClockConfig+0x274>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d1ef      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007c08:	f7fa faa6 	bl	8002158 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007c0c:	f7fd fd58 	bl	80056c0 <HAL_GetTickPrio>
 8007c10:	4603      	mov	r3, r0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fcfc 	bl	8005610 <HAL_InitTick>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	58004000 	.word	0x58004000

08007c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c2e:	f7ff f9fc 	bl	800702a <LL_RCC_GetSysClkSource>
 8007c32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007c3a:	f7ff f9b8 	bl	8006fae <LL_RCC_MSI_GetRange>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	091b      	lsrs	r3, r3, #4
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	4a2a      	ldr	r2, [pc, #168]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e04a      	b.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d102      	bne.n	8007c5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c56:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	e044      	b.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d10a      	bne.n	8007c78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c62:	f7fe ffb3 	bl	8006bcc <LL_RCC_HSE_IsEnabledDiv2>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007c6c:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e039      	b.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007c72:	4b21      	ldr	r3, [pc, #132]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e036      	b.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007c78:	f7ff fad3 	bl	8007222 <LL_RCC_PLL_GetMainSource>
 8007c7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d002      	beq.n	8007c8a <HAL_RCC_GetSysClockFreq+0x62>
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d003      	beq.n	8007c90 <HAL_RCC_GetSysClockFreq+0x68>
 8007c88:	e00d      	b.n	8007ca6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007c8a:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c8c:	60bb      	str	r3, [r7, #8]
        break;
 8007c8e:	e015      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c90:	f7fe ff9c 	bl	8006bcc <LL_RCC_HSE_IsEnabledDiv2>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d102      	bne.n	8007ca0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007c9a:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007c9c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007c9e:	e00d      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ca2:	60bb      	str	r3, [r7, #8]
        break;
 8007ca4:	e00a      	b.n	8007cbc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007ca6:	f7ff f982 	bl	8006fae <LL_RCC_MSI_GetRange>
 8007caa:	4603      	mov	r3, r0
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	4a0f      	ldr	r2, [pc, #60]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb8:	60bb      	str	r3, [r7, #8]
        break;
 8007cba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8007cbc:	f7ff fa8c 	bl	80071d8 <LL_RCC_PLL_GetN>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	fb03 f402 	mul.w	r4, r3, r2
 8007cc8:	f7ff fa9f 	bl	800720a <LL_RCC_PLL_GetDivider>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	091b      	lsrs	r3, r3, #4
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	fbb4 f4f3 	udiv	r4, r4, r3
 8007cd6:	f7ff fa8c 	bl	80071f2 <LL_RCC_PLL_GetR>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	0f5b      	lsrs	r3, r3, #29
 8007cde:	3301      	adds	r3, #1
 8007ce0:	fbb4 f3f3 	udiv	r3, r4, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd90      	pop	{r4, r7, pc}
 8007cf0:	0800ded4 	.word	0x0800ded4
 8007cf4:	00f42400 	.word	0x00f42400
 8007cf8:	01e84800 	.word	0x01e84800

08007cfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cfc:	b598      	push	{r3, r4, r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007d00:	f7ff ff92 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8007d04:	4604      	mov	r4, r0
 8007d06:	f7ff fa05 	bl	8007114 <LL_RCC_GetAHBPrescaler>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	091b      	lsrs	r3, r3, #4
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	4a03      	ldr	r2, [pc, #12]	; (8007d20 <HAL_RCC_GetHCLKFreq+0x24>)
 8007d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd98      	pop	{r3, r4, r7, pc}
 8007d20:	0800de74 	.word	0x0800de74

08007d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d24:	b598      	push	{r3, r4, r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007d28:	f7ff ffe8 	bl	8007cfc <HAL_RCC_GetHCLKFreq>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	f7ff fa0b 	bl	8007148 <LL_RCC_GetAPB1Prescaler>
 8007d32:	4603      	mov	r3, r0
 8007d34:	0a1b      	lsrs	r3, r3, #8
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	4a04      	ldr	r2, [pc, #16]	; (8007d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd98      	pop	{r3, r4, r7, pc}
 8007d4c:	0800deb4 	.word	0x0800deb4

08007d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d50:	b598      	push	{r3, r4, r7, lr}
 8007d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007d54:	f7ff ffd2 	bl	8007cfc <HAL_RCC_GetHCLKFreq>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	f7ff fa01 	bl	8007160 <LL_RCC_GetAPB2Prescaler>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	0adb      	lsrs	r3, r3, #11
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	4a04      	ldr	r2, [pc, #16]	; (8007d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	bd98      	pop	{r3, r4, r7, pc}
 8007d78:	0800deb4 	.word	0x0800deb4

08007d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2bb0      	cmp	r3, #176	; 0xb0
 8007d88:	d903      	bls.n	8007d92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e007      	b.n	8007da2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	091b      	lsrs	r3, r3, #4
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	4a11      	ldr	r2, [pc, #68]	; (8007de0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007da2:	f7ff f9c3 	bl	800712c <LL_RCC_GetAHB4Prescaler>
 8007da6:	4603      	mov	r3, r0
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	4a0d      	ldr	r2, [pc, #52]	; (8007de4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	0c9c      	lsrs	r4, r3, #18
 8007dc6:	f7fe fef3 	bl	8006bb0 <HAL_PWREx_GetVoltageRange>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f80c 	bl	8007dec <RCC_SetFlashLatency>
 8007dd4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd90      	pop	{r4, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	0800ded4 	.word	0x0800ded4
 8007de4:	0800de74 	.word	0x0800de74
 8007de8:	431bde83 	.word	0x431bde83

08007dec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b093      	sub	sp, #76	; 0x4c
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007df6:	4b39      	ldr	r3, [pc, #228]	; (8007edc <RCC_SetFlashLatency+0xf0>)
 8007df8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007e02:	4a37      	ldr	r2, [pc, #220]	; (8007ee0 <RCC_SetFlashLatency+0xf4>)
 8007e04:	f107 031c 	add.w	r3, r7, #28
 8007e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007e0e:	4b35      	ldr	r3, [pc, #212]	; (8007ee4 <RCC_SetFlashLatency+0xf8>)
 8007e10:	f107 040c 	add.w	r4, r7, #12
 8007e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d11c      	bne.n	8007e60 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e26:	2300      	movs	r3, #0
 8007e28:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2a:	e015      	b.n	8007e58 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e34:	4413      	add	r3, r2
 8007e36:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d808      	bhi.n	8007e52 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e48:	4413      	add	r3, r2
 8007e4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007e50:	e022      	b.n	8007e98 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e54:	3301      	adds	r3, #1
 8007e56:	643b      	str	r3, [r7, #64]	; 0x40
 8007e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d9e6      	bls.n	8007e2c <RCC_SetFlashLatency+0x40>
 8007e5e:	e01b      	b.n	8007e98 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e64:	e015      	b.n	8007e92 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e6e:	4413      	add	r3, r2
 8007e70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d808      	bhi.n	8007e8c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007e82:	4413      	add	r3, r2
 8007e84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007e88:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007e8a:	e005      	b.n	8007e98 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8e:	3301      	adds	r3, #1
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d9e6      	bls.n	8007e66 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007e98:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <RCC_SetFlashLatency+0xfc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f023 0207 	bic.w	r2, r3, #7
 8007ea0:	4911      	ldr	r1, [pc, #68]	; (8007ee8 <RCC_SetFlashLatency+0xfc>)
 8007ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ea8:	f7fd fbfe 	bl	80056a8 <HAL_GetTick>
 8007eac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007eae:	e008      	b.n	8007ec2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007eb0:	f7fd fbfa 	bl	80056a8 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e007      	b.n	8007ed2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <RCC_SetFlashLatency+0xfc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d1ef      	bne.n	8007eb0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	374c      	adds	r7, #76	; 0x4c
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd90      	pop	{r4, r7, pc}
 8007eda:	bf00      	nop
 8007edc:	0800de00 	.word	0x0800de00
 8007ee0:	0800de10 	.word	0x0800de10
 8007ee4:	0800de1c 	.word	0x0800de1c
 8007ee8:	58004000 	.word	0x58004000

08007eec <LL_RCC_LSE_IsEnabled>:
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <LL_RCC_LSE_IsEnabled+0x18>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <LL_RCC_LSE_IsEnabled+0x1a>
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <LL_RCC_LSE_IsReady>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d101      	bne.n	8007f28 <LL_RCC_LSE_IsReady+0x18>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <LL_RCC_LSE_IsReady+0x1a>
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <LL_RCC_SetRFWKPClockSource>:
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <LL_RCC_SetSMPSClockSource>:
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	f023 0203 	bic.w	r2, r3, #3
 8007f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <LL_RCC_SetSMPSPrescaler>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <LL_RCC_SetUSARTClockSource>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc0:	f023 0203 	bic.w	r2, r3, #3
 8007fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <LL_RCC_SetLPUARTClockSource>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <LL_RCC_SetI2CClockSource>:
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008014:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	091b      	lsrs	r3, r3, #4
 800801c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800802c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <LL_RCC_SetLPTIMClockSource>:
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	0c1b      	lsrs	r3, r3, #16
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	43db      	mvns	r3, r3
 800805a:	401a      	ands	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <LL_RCC_SetSAIClockSource>:
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800807e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800808a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <LL_RCC_SetRNGClockSource>:
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80080aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <LL_RCC_SetCLK48ClockSource>:
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80080d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <LL_RCC_SetUSBClockSource>:
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ffe3 	bl	80080ce <LL_RCC_SetCLK48ClockSource>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <LL_RCC_SetADCClockSource>:
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <LL_RCC_SetRTCClockSource>:
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <LL_RCC_GetRTCClockSource>:
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800816c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008174:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <LL_RCC_ForceBackupDomainReset>:
{
 8008182:	b480      	push	{r7}
 8008184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800819a:	bf00      	nop
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80081bc:	bf00      	nop
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <LL_RCC_PLLSAI1_Enable>:
{
 80081c6:	b480      	push	{r7}
 80081c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80081ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081d8:	6013      	str	r3, [r2, #0]
}
 80081da:	bf00      	nop
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <LL_RCC_PLLSAI1_Disable>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80081e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081f6:	6013      	str	r3, [r2, #0]
}
 80081f8:	bf00      	nop
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <LL_RCC_PLLSAI1_IsReady>:
{
 8008202:	b480      	push	{r7}
 8008204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008214:	d101      	bne.n	800821a <LL_RCC_PLLSAI1_IsReady+0x18>
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800822e:	2300      	movs	r3, #0
 8008230:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008232:	2300      	movs	r3, #0
 8008234:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d033      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800824a:	d00c      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800824c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008250:	d802      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d010      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008256:	e017      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800825c:	d017      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800825e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008262:	d016      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008264:	e010      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008274:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008276:	e00d      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f947 	bl	8008510 <RCCEx_PLLSAI1_ConfigNP>
 8008282:	4603      	mov	r3, r0
 8008284:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008286:	e005      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	77fb      	strb	r3, [r7, #31]
        break;
 800828c:	e002      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800828e:	bf00      	nop
 8008290:	e000      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008294:	7ffb      	ldrb	r3, [r7, #31]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fee9 	bl	8008076 <LL_RCC_SetSAIClockSource>
 80082a4:	e001      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	7ffb      	ldrb	r3, [r7, #31]
 80082a8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d046      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80082b6:	f7ff ff57 	bl	8008168 <LL_RCC_GetRTCClockSource>
 80082ba:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d03c      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80082c6:	f7fe fc63 	bl	8006b90 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d105      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ff31 	bl	800813c <LL_RCC_SetRTCClockSource>
 80082da:	e02e      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80082dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80082e6:	f7ff ff4c 	bl	8008182 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80082ea:	f7ff ff5b 	bl	80081a4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80082fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008306:	f7ff fdf1 	bl	8007eec <LL_RCC_LSE_IsEnabled>
 800830a:	4603      	mov	r3, r0
 800830c:	2b01      	cmp	r3, #1
 800830e:	d114      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008310:	f7fd f9ca 	bl	80056a8 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008316:	e00b      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008318:	f7fd f9c6 	bl	80056a8 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	f241 3288 	movw	r2, #5000	; 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d902      	bls.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	77fb      	strb	r3, [r7, #31]
              break;
 800832e:	e004      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008330:	f7ff fdee 	bl	8007f10 <LL_RCC_LSE_IsReady>
 8008334:	4603      	mov	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d1ee      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800833a:	7ffb      	ldrb	r3, [r7, #31]
 800833c:	77bb      	strb	r3, [r7, #30]
 800833e:	e001      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	7ffb      	ldrb	r3, [r7, #31]
 8008342:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fe2b 	bl	8007fb0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fe36 	bl	8007fdc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fe5e 	bl	8008042 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d004      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fe53 	bl	8008042 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff fe2b 	bl	8008008 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fe20 	bl	8008008 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d022      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fe8e 	bl	80080fa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083e6:	d107      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80083e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008400:	d10b      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f8dd 	bl	80085c6 <RCCEx_PLLSAI1_ConfigNQ>
 800840c:	4603      	mov	r3, r0
 800840e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008410:	7ffb      	ldrb	r3, [r7, #31]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8008416:	7ffb      	ldrb	r3, [r7, #31]
 8008418:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02b      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	d008      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008438:	d003      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fe2b 	bl	80080a2 <LL_RCC_SetRNGClockSource>
 800844c:	e00a      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	2000      	movs	r0, #0
 800845a:	f7ff fe22 	bl	80080a2 <LL_RCC_SetRNGClockSource>
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff fe35 	bl	80080ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800846c:	d107      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800847c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008486:	2b00      	cmp	r3, #0
 8008488:	d022      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fe3e 	bl	8008110 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849c:	d107      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800849e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ac:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084b6:	d10b      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f8dd 	bl	800867c <RCCEx_PLLSAI1_ConfigNR>
 80084c2:	4603      	mov	r3, r0
 80084c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80084c6:	7ffb      	ldrb	r3, [r7, #31]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 80084cc:	7ffb      	ldrb	r3, [r7, #31]
 80084ce:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fd27 	bl	8007f34 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fd46 	bl	8007f88 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fd2d 	bl	8007f60 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8008506:	7fbb      	ldrb	r3, [r7, #30]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800851c:	f7ff fe62 	bl	80081e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008520:	f7fd f8c2 	bl	80056a8 <HAL_GetTick>
 8008524:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008526:	e009      	b.n	800853c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008528:	f7fd f8be 	bl	80056a8 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d902      	bls.n	800853c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	73fb      	strb	r3, [r7, #15]
      break;
 800853a:	e004      	b.n	8008546 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800853c:	f7ff fe61 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d137      	bne.n	80085bc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800854c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008560:	4313      	orrs	r3, r2
 8008562:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008576:	4313      	orrs	r3, r2
 8008578:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800857a:	f7ff fe24 	bl	80081c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857e:	f7fd f893 	bl	80056a8 <HAL_GetTick>
 8008582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008584:	e009      	b.n	800859a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008586:	f7fd f88f 	bl	80056a8 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d902      	bls.n	800859a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	73fb      	strb	r3, [r7, #15]
        break;
 8008598:	e004      	b.n	80085a4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800859a:	f7ff fe32 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d1f0      	bne.n	8008586 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80085aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ae:	691a      	ldr	r2, [r3, #16]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085b8:	4313      	orrs	r3, r2
 80085ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80085d2:	f7ff fe07 	bl	80081e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085d6:	f7fd f867 	bl	80056a8 <HAL_GetTick>
 80085da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80085dc:	e009      	b.n	80085f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085de:	f7fd f863 	bl	80056a8 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d902      	bls.n	80085f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
      break;
 80085f0:	e004      	b.n	80085fc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80085f2:	f7ff fe06 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d137      	bne.n	8008672 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008616:	4313      	orrs	r3, r2
 8008618:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800861a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800862c:	4313      	orrs	r3, r2
 800862e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008630:	f7ff fdc9 	bl	80081c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008634:	f7fd f838 	bl	80056a8 <HAL_GetTick>
 8008638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800863a:	e009      	b.n	8008650 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800863c:	f7fd f834 	bl	80056a8 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b02      	cmp	r3, #2
 8008648:	d902      	bls.n	8008650 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	73fb      	strb	r3, [r7, #15]
        break;
 800864e:	e004      	b.n	800865a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008650:	f7ff fdd7 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d1f0      	bne.n	800863c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d108      	bne.n	8008672 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008664:	691a      	ldr	r2, [r3, #16]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800866e:	4313      	orrs	r3, r2
 8008670:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008688:	f7ff fdac 	bl	80081e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800868c:	f7fd f80c 	bl	80056a8 <HAL_GetTick>
 8008690:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008692:	e009      	b.n	80086a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008694:	f7fd f808 	bl	80056a8 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d902      	bls.n	80086a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
      break;
 80086a6:	e004      	b.n	80086b2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80086a8:	f7ff fdab 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d137      	bne.n	8008728 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086cc:	4313      	orrs	r3, r2
 80086ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086e2:	4313      	orrs	r3, r2
 80086e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80086e6:	f7ff fd6e 	bl	80081c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ea:	f7fc ffdd 	bl	80056a8 <HAL_GetTick>
 80086ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80086f0:	e009      	b.n	8008706 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086f2:	f7fc ffd9 	bl	80056a8 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d902      	bls.n	8008706 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	73fb      	strb	r3, [r7, #15]
        break;
 8008704:	e004      	b.n	8008710 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008706:	f7ff fd7c 	bl	8008202 <LL_RCC_PLLSAI1_IsReady>
 800870a:	4603      	mov	r3, r0
 800870c:	2b01      	cmp	r3, #1
 800870e:	d1f0      	bne.n	80086f2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d108      	bne.n	8008728 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e090      	b.n	8008866 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7f9 fa27 	bl	8001bac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	22ca      	movs	r2, #202	; 0xca
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2253      	movs	r2, #83	; 0x53
 8008774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f89f 	bl	80088ba <RTC_EnterInitMode>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	22ff      	movs	r2, #255	; 0xff
 8008788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2204      	movs	r2, #4
 800878e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e067      	b.n	8008866 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6899      	ldr	r1, [r3, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68d2      	ldr	r2, [r2, #12]
 80087d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6919      	ldr	r1, [r3, #16]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	041a      	lsls	r2, r3, #16
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087f4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0203 	bic.w	r2, r2, #3
 8008804:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 0320 	and.w	r3, r3, #32
 8008828:	2b00      	cmp	r3, #0
 800882a:	d113      	bne.n	8008854 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f81e 	bl	800886e <HAL_RTC_WaitForSynchro>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00d      	beq.n	8008854 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2204      	movs	r2, #4
 8008844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e008      	b.n	8008866 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008864:	2300      	movs	r3, #0
  }
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68da      	ldr	r2, [r3, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008884:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008886:	f7fc ff0f 	bl	80056a8 <HAL_GetTick>
 800888a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800888c:	e009      	b.n	80088a2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800888e:	f7fc ff0b 	bl	80056a8 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800889c:	d901      	bls.n	80088a2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e007      	b.n	80088b2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0ee      	beq.n	800888e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d119      	bne.n	8008904 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80088da:	f7fc fee5 	bl	80056a8 <HAL_GetTick>
 80088de:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088e0:	e009      	b.n	80088f6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80088e2:	f7fc fee1 	bl	80056a8 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088f0:	d901      	bls.n	80088f6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e007      	b.n	8008906 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d0ee      	beq.n	80088e2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008926:	2302      	movs	r3, #2
 8008928:	e0a8      	b.n	8008a7c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	22ca      	movs	r2, #202	; 0xca
 8008940:	625a      	str	r2, [r3, #36]	; 0x24
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2253      	movs	r2, #83	; 0x53
 8008948:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008954:	2b00      	cmp	r3, #0
 8008956:	d020      	beq.n	800899a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 8008958:	f7fc fea6 	bl	80056a8 <HAL_GetTick>
 800895c:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800895e:	e015      	b.n	800898c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008960:	f7fc fea2 	bl	80056a8 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d90d      	bls.n	800898c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	22ff      	movs	r2, #255	; 0xff
 8008976:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2203      	movs	r2, #3
 800897c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e077      	b.n	8008a7c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e2      	bne.n	8008960 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80089ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80089bc:	f7fc fe74 	bl	80056a8 <HAL_GetTick>
 80089c0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80089c2:	e015      	b.n	80089f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089c4:	f7fc fe70 	bl	80056a8 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d2:	d90d      	bls.n	80089f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	22ff      	movs	r2, #255	; 0xff
 80089da:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2203      	movs	r2, #3
 80089e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e045      	b.n	8008a7c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0e2      	beq.n	80089c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0207 	bic.w	r2, r2, #7
 8008a14:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6899      	ldr	r1, [r3, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008a26:	4b17      	ldr	r3, [pc, #92]	; (8008a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a2c:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a12      	ldr	r2, [pc, #72]	; (8008a84 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a40:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a50:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a60:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	22ff      	movs	r2, #255	; 0xff
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	58000800 	.word	0x58000800

08008a88 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f818 	bl	8008ad4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008ab4:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008ab8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008abc:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	58000800 	.word	0x58000800

08008ad4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e01d      	b.n	8008b36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f9 f866 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f000 f97c 	bl	8008e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0201 	orr.w	r2, r2, #1
 8008b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <HAL_TIM_Base_Start_IT+0x50>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d00b      	beq.n	8008b82 <HAL_TIM_Base_Start_IT+0x42>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b70:	d007      	beq.n	8008b82 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	00010007 	.word	0x00010007

08008b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0202 	mvn.w	r2, #2
 8008bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f905 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8f7 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f908 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d122      	bne.n	8008c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d11b      	bne.n	8008c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0204 	mvn.w	r2, #4
 8008c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f8db 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008c30:	e005      	b.n	8008c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f8cd 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f8de 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d122      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d11b      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0208 	mvn.w	r2, #8
 8008c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f8b1 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008c84:	e005      	b.n	8008c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8a3 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f8b4 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0310 	and.w	r3, r3, #16
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d122      	bne.n	8008cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d11b      	bne.n	8008cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0210 	mvn.w	r2, #16
 8008cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f887 	bl	8008de6 <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f879 	bl	8008dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f88a 	bl	8008dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d10e      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d107      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0201 	mvn.w	r2, #1
 8008d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7f8 fe1c 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d10e      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d107      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f8de 	bl	8008f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d52:	d10e      	bne.n	8008d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5e:	2b80      	cmp	r3, #128	; 0x80
 8008d60:	d107      	bne.n	8008d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8d1 	bl	8008f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7c:	2b40      	cmp	r3, #64	; 0x40
 8008d7e:	d10e      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d107      	bne.n	8008d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f838 	bl	8008e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d10e      	bne.n	8008dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d107      	bne.n	8008dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f06f 0220 	mvn.w	r2, #32
 8008dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f891 	bl	8008eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a2a      	ldr	r2, [pc, #168]	; (8008ee0 <TIM_Base_SetConfig+0xbc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_Base_SetConfig+0x20>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e42:	d108      	bne.n	8008e56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a21      	ldr	r2, [pc, #132]	; (8008ee0 <TIM_Base_SetConfig+0xbc>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00b      	beq.n	8008e76 <TIM_Base_SetConfig+0x52>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e64:	d007      	beq.n	8008e76 <TIM_Base_SetConfig+0x52>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <TIM_Base_SetConfig+0xc0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d003      	beq.n	8008e76 <TIM_Base_SetConfig+0x52>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a1d      	ldr	r2, [pc, #116]	; (8008ee8 <TIM_Base_SetConfig+0xc4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d108      	bne.n	8008e88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a0c      	ldr	r2, [pc, #48]	; (8008ee0 <TIM_Base_SetConfig+0xbc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d007      	beq.n	8008ec4 <TIM_Base_SetConfig+0xa0>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a0b      	ldr	r2, [pc, #44]	; (8008ee4 <TIM_Base_SetConfig+0xc0>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d003      	beq.n	8008ec4 <TIM_Base_SetConfig+0xa0>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <TIM_Base_SetConfig+0xc4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d103      	bne.n	8008ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	615a      	str	r2, [r3, #20]
}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40014400 	.word	0x40014400
 8008ee8:	40014800 	.word	0x40014800

08008eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <LL_RCC_GetUSARTClockSource>:
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4013      	ands	r3, r2
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <LL_RCC_GetLPUARTClockSource>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4013      	ands	r3, r2
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e042      	b.n	8009000 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7f8 fe57 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2224      	movs	r2, #36	; 0x24
 8008f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0201 	bic.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa4c 	bl	8009448 <UART_SetConfig>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e022      	b.n	8009000 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 faa4 	bl	800a510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fb2b 	bl	800a654 <UART_CheckIdleState>
 8008ffe:	4603      	mov	r3, r0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af02      	add	r7, sp, #8
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901e:	2b20      	cmp	r3, #32
 8009020:	f040 8083 	bne.w	800912a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_UART_Transmit+0x28>
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e07b      	b.n	800912c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_UART_Transmit+0x3a>
 800903e:	2302      	movs	r3, #2
 8009040:	e074      	b.n	800912c <HAL_UART_Transmit+0x124>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2221      	movs	r2, #33	; 0x21
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800905a:	f7fc fb25 	bl	80056a8 <HAL_GetTick>
 800905e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	88fa      	ldrh	r2, [r7, #6]
 800906c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009078:	d108      	bne.n	800908c <HAL_UART_Transmit+0x84>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	e003      	b.n	8009094 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800909c:	e02c      	b.n	80090f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2200      	movs	r2, #0
 80090a6:	2180      	movs	r1, #128	; 0x80
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f001 fb1b 	bl	800a6e4 <UART_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e039      	b.n	800912c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10b      	bne.n	80090d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	3302      	adds	r3, #2
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	e007      	b.n	80090e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	3301      	adds	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1cc      	bne.n	800909e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2200      	movs	r2, #0
 800910c:	2140      	movs	r1, #64	; 0x40
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f001 fae8 	bl	800a6e4 <UART_WaitOnFlagUntilTimeout>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e006      	b.n	800912c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2220      	movs	r2, #32
 8009122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e000      	b.n	800912c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800912a:	2302      	movs	r3, #2
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	f640 030f 	movw	r3, #2063	; 0x80f
 800915a:	4013      	ands	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d118      	bne.n	8009196 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d013      	beq.n	8009196 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8145 	beq.w	8009416 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	4798      	blx	r3
      }
      return;
 8009194:	e13f      	b.n	8009416 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 80e8 	beq.w	800936e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4ba1      	ldr	r3, [pc, #644]	; (8009428 <HAL_UART_IRQHandler+0x2f4>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d105      	bne.n	80091b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4ba0      	ldr	r3, [pc, #640]	; (800942c <HAL_UART_IRQHandler+0x2f8>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 80dd 	beq.w	800936e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d010      	beq.n	80091e0 <HAL_UART_IRQHandler+0xac>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2201      	movs	r2, #1
 80091ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d6:	f043 0201 	orr.w	r2, r3, #1
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d010      	beq.n	800920c <HAL_UART_IRQHandler+0xd8>
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2202      	movs	r2, #2
 80091fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009202:	f043 0204 	orr.w	r2, r3, #4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <HAL_UART_IRQHandler+0x104>
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2204      	movs	r2, #4
 8009226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	f043 0202 	orr.w	r2, r3, #2
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d015      	beq.n	800926e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4b76      	ldr	r3, [pc, #472]	; (8009428 <HAL_UART_IRQHandler+0x2f4>)
 8009250:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00b      	beq.n	800926e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2208      	movs	r2, #8
 800925c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009264:	f043 0208 	orr.w	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009274:	2b00      	cmp	r3, #0
 8009276:	d011      	beq.n	800929c <HAL_UART_IRQHandler+0x168>
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800928a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009292:	f043 0220 	orr.w	r2, r3, #32
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80b9 	beq.w	800941a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d011      	beq.n	80092d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d004      	beq.n	80092f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d031      	beq.n	800935a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 fa74 	bl	800a7e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009306:	2b40      	cmp	r3, #64	; 0x40
 8009308:	d123      	bne.n	8009352 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009318:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800931e:	2b00      	cmp	r3, #0
 8009320:	d013      	beq.n	800934a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009326:	4a42      	ldr	r2, [pc, #264]	; (8009430 <HAL_UART_IRQHandler+0x2fc>)
 8009328:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800932e:	4618      	mov	r0, r3
 8009330:	f7fc fb69 	bl	8005a06 <HAL_DMA_Abort_IT>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d017      	beq.n	800936a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009348:	e00f      	b.n	800936a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f872 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	e00b      	b.n	800936a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f86e 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009358:	e007      	b.n	800936a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f86a 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009368:	e057      	b.n	800941a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936a:	bf00      	nop
    return;
 800936c:	e055      	b.n	800941a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00d      	beq.n	8009394 <HAL_UART_IRQHandler+0x260>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800938a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f001 fa7c 	bl	800a88a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009392:	e045      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939a:	2b00      	cmp	r3, #0
 800939c:	d012      	beq.n	80093c4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d104      	bne.n	80093b2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d008      	beq.n	80093c4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d031      	beq.n	800941e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
    }
    return;
 80093c2:	e02c      	b.n	800941e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d008      	beq.n	80093e0 <HAL_UART_IRQHandler+0x2ac>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fa3c 	bl	800a856 <UART_EndTransmit_IT>
    return;
 80093de:	e01f      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_UART_IRQHandler+0x2c8>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 fa5c 	bl	800a8b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093fa:	e011      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00c      	beq.n	8009420 <HAL_UART_IRQHandler+0x2ec>
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	da09      	bge.n	8009420 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fa46 	bl	800a89e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009412:	bf00      	nop
 8009414:	e004      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009416:	bf00      	nop
 8009418:	e002      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
    return;
 800941a:	bf00      	nop
 800941c:	e000      	b.n	8009420 <HAL_UART_IRQHandler+0x2ec>
    return;
 800941e:	bf00      	nop
  }
}
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	10000001 	.word	0x10000001
 800942c:	04000120 	.word	0x04000120
 8009430:	0800a82b 	.word	0x0800a82b

08009434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009448:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800944c:	b08a      	sub	sp, #40	; 0x28
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	4313      	orrs	r3, r2
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800947a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947c:	4313      	orrs	r3, r2
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4ba4      	ldr	r3, [pc, #656]	; (8009718 <UART_SetConfig+0x2d0>)
 8009488:	4013      	ands	r3, r2
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009490:	430b      	orrs	r3, r1
 8009492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a99      	ldr	r2, [pc, #612]	; (800971c <UART_SetConfig+0x2d4>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	4313      	orrs	r3, r2
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80094ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094d8:	430b      	orrs	r3, r1
 80094da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e2:	f023 010f 	bic.w	r1, r3, #15
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a8a      	ldr	r2, [pc, #552]	; (8009720 <UART_SetConfig+0x2d8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d126      	bne.n	800954a <UART_SetConfig+0x102>
 80094fc:	2003      	movs	r0, #3
 80094fe:	f7ff fd13 	bl	8008f28 <LL_RCC_GetUSARTClockSource>
 8009502:	4603      	mov	r3, r0
 8009504:	2b03      	cmp	r3, #3
 8009506:	d81b      	bhi.n	8009540 <UART_SetConfig+0xf8>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <UART_SetConfig+0xc8>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	08009521 	.word	0x08009521
 8009514:	08009531 	.word	0x08009531
 8009518:	08009529 	.word	0x08009529
 800951c:	08009539 	.word	0x08009539
 8009520:	2301      	movs	r3, #1
 8009522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009526:	e042      	b.n	80095ae <UART_SetConfig+0x166>
 8009528:	2302      	movs	r3, #2
 800952a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800952e:	e03e      	b.n	80095ae <UART_SetConfig+0x166>
 8009530:	2304      	movs	r3, #4
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009536:	e03a      	b.n	80095ae <UART_SetConfig+0x166>
 8009538:	2308      	movs	r3, #8
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953e:	e036      	b.n	80095ae <UART_SetConfig+0x166>
 8009540:	2310      	movs	r3, #16
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009546:	bf00      	nop
 8009548:	e031      	b.n	80095ae <UART_SetConfig+0x166>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a73      	ldr	r2, [pc, #460]	; (800971c <UART_SetConfig+0x2d4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d129      	bne.n	80095a8 <UART_SetConfig+0x160>
 8009554:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009558:	f7ff fcf6 	bl	8008f48 <LL_RCC_GetLPUARTClockSource>
 800955c:	4603      	mov	r3, r0
 800955e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009562:	d014      	beq.n	800958e <UART_SetConfig+0x146>
 8009564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009568:	d802      	bhi.n	8009570 <UART_SetConfig+0x128>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <UART_SetConfig+0x136>
 800956e:	e016      	b.n	800959e <UART_SetConfig+0x156>
 8009570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009574:	d007      	beq.n	8009586 <UART_SetConfig+0x13e>
 8009576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800957a:	d00c      	beq.n	8009596 <UART_SetConfig+0x14e>
 800957c:	e00f      	b.n	800959e <UART_SetConfig+0x156>
 800957e:	2300      	movs	r3, #0
 8009580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009584:	e013      	b.n	80095ae <UART_SetConfig+0x166>
 8009586:	2302      	movs	r3, #2
 8009588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958c:	e00f      	b.n	80095ae <UART_SetConfig+0x166>
 800958e:	2304      	movs	r3, #4
 8009590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009594:	e00b      	b.n	80095ae <UART_SetConfig+0x166>
 8009596:	2308      	movs	r3, #8
 8009598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800959c:	e007      	b.n	80095ae <UART_SetConfig+0x166>
 800959e:	2310      	movs	r3, #16
 80095a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095a4:	bf00      	nop
 80095a6:	e002      	b.n	80095ae <UART_SetConfig+0x166>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a5a      	ldr	r2, [pc, #360]	; (800971c <UART_SetConfig+0x2d4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	f040 8428 	bne.w	8009e0a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095be:	2b08      	cmp	r3, #8
 80095c0:	f200 8171 	bhi.w	80098a6 <UART_SetConfig+0x45e>
 80095c4:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <UART_SetConfig+0x184>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080098a7 	.word	0x080098a7
 80095d4:	08009693 	.word	0x08009693
 80095d8:	080098a7 	.word	0x080098a7
 80095dc:	08009757 	.word	0x08009757
 80095e0:	080098a7 	.word	0x080098a7
 80095e4:	080098a7 	.word	0x080098a7
 80095e8:	080098a7 	.word	0x080098a7
 80095ec:	080097f9 	.word	0x080097f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095f0:	f7fe fb98 	bl	8007d24 <HAL_RCC_GetPCLK1Freq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d044      	beq.n	8009688 <UART_SetConfig+0x240>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b01      	cmp	r3, #1
 8009604:	d03e      	beq.n	8009684 <UART_SetConfig+0x23c>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b02      	cmp	r3, #2
 800960c:	d038      	beq.n	8009680 <UART_SetConfig+0x238>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	2b03      	cmp	r3, #3
 8009614:	d032      	beq.n	800967c <UART_SetConfig+0x234>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	2b04      	cmp	r3, #4
 800961c:	d02c      	beq.n	8009678 <UART_SetConfig+0x230>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	2b05      	cmp	r3, #5
 8009624:	d026      	beq.n	8009674 <UART_SetConfig+0x22c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	2b06      	cmp	r3, #6
 800962c:	d020      	beq.n	8009670 <UART_SetConfig+0x228>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	2b07      	cmp	r3, #7
 8009634:	d01a      	beq.n	800966c <UART_SetConfig+0x224>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	2b08      	cmp	r3, #8
 800963c:	d014      	beq.n	8009668 <UART_SetConfig+0x220>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	2b09      	cmp	r3, #9
 8009644:	d00e      	beq.n	8009664 <UART_SetConfig+0x21c>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	2b0a      	cmp	r3, #10
 800964c:	d008      	beq.n	8009660 <UART_SetConfig+0x218>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	2b0b      	cmp	r3, #11
 8009654:	d102      	bne.n	800965c <UART_SetConfig+0x214>
 8009656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965a:	e016      	b.n	800968a <UART_SetConfig+0x242>
 800965c:	2301      	movs	r3, #1
 800965e:	e014      	b.n	800968a <UART_SetConfig+0x242>
 8009660:	2380      	movs	r3, #128	; 0x80
 8009662:	e012      	b.n	800968a <UART_SetConfig+0x242>
 8009664:	2340      	movs	r3, #64	; 0x40
 8009666:	e010      	b.n	800968a <UART_SetConfig+0x242>
 8009668:	2320      	movs	r3, #32
 800966a:	e00e      	b.n	800968a <UART_SetConfig+0x242>
 800966c:	2310      	movs	r3, #16
 800966e:	e00c      	b.n	800968a <UART_SetConfig+0x242>
 8009670:	230c      	movs	r3, #12
 8009672:	e00a      	b.n	800968a <UART_SetConfig+0x242>
 8009674:	230a      	movs	r3, #10
 8009676:	e008      	b.n	800968a <UART_SetConfig+0x242>
 8009678:	2308      	movs	r3, #8
 800967a:	e006      	b.n	800968a <UART_SetConfig+0x242>
 800967c:	2306      	movs	r3, #6
 800967e:	e004      	b.n	800968a <UART_SetConfig+0x242>
 8009680:	2304      	movs	r3, #4
 8009682:	e002      	b.n	800968a <UART_SetConfig+0x242>
 8009684:	2302      	movs	r3, #2
 8009686:	e000      	b.n	800968a <UART_SetConfig+0x242>
 8009688:	2301      	movs	r3, #1
 800968a:	fbb2 f3f3 	udiv	r3, r2, r3
 800968e:	617b      	str	r3, [r7, #20]
        break;
 8009690:	e10c      	b.n	80098ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	d05a      	beq.n	8009750 <UART_SetConfig+0x308>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d054      	beq.n	800974c <UART_SetConfig+0x304>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d04e      	beq.n	8009748 <UART_SetConfig+0x300>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d048      	beq.n	8009744 <UART_SetConfig+0x2fc>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d02c      	beq.n	8009714 <UART_SetConfig+0x2cc>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b05      	cmp	r3, #5
 80096c0:	d026      	beq.n	8009710 <UART_SetConfig+0x2c8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b06      	cmp	r3, #6
 80096c8:	d020      	beq.n	800970c <UART_SetConfig+0x2c4>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b07      	cmp	r3, #7
 80096d0:	d01a      	beq.n	8009708 <UART_SetConfig+0x2c0>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d014      	beq.n	8009704 <UART_SetConfig+0x2bc>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b09      	cmp	r3, #9
 80096e0:	d00e      	beq.n	8009700 <UART_SetConfig+0x2b8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	2b0a      	cmp	r3, #10
 80096e8:	d008      	beq.n	80096fc <UART_SetConfig+0x2b4>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	2b0b      	cmp	r3, #11
 80096f0:	d102      	bne.n	80096f8 <UART_SetConfig+0x2b0>
 80096f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80096f6:	e02c      	b.n	8009752 <UART_SetConfig+0x30a>
 80096f8:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <UART_SetConfig+0x2dc>)
 80096fa:	e02a      	b.n	8009752 <UART_SetConfig+0x30a>
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <UART_SetConfig+0x2e0>)
 80096fe:	e028      	b.n	8009752 <UART_SetConfig+0x30a>
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <UART_SetConfig+0x2e4>)
 8009702:	e026      	b.n	8009752 <UART_SetConfig+0x30a>
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <UART_SetConfig+0x2e8>)
 8009706:	e024      	b.n	8009752 <UART_SetConfig+0x30a>
 8009708:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <UART_SetConfig+0x2ec>)
 800970a:	e022      	b.n	8009752 <UART_SetConfig+0x30a>
 800970c:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <UART_SetConfig+0x2f0>)
 800970e:	e020      	b.n	8009752 <UART_SetConfig+0x30a>
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <UART_SetConfig+0x2f4>)
 8009712:	e01e      	b.n	8009752 <UART_SetConfig+0x30a>
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <UART_SetConfig+0x2f8>)
 8009716:	e01c      	b.n	8009752 <UART_SetConfig+0x30a>
 8009718:	cfff69f3 	.word	0xcfff69f3
 800971c:	40008000 	.word	0x40008000
 8009720:	40013800 	.word	0x40013800
 8009724:	00f42400 	.word	0x00f42400
 8009728:	0001e848 	.word	0x0001e848
 800972c:	0003d090 	.word	0x0003d090
 8009730:	0007a120 	.word	0x0007a120
 8009734:	000f4240 	.word	0x000f4240
 8009738:	00145855 	.word	0x00145855
 800973c:	00186a00 	.word	0x00186a00
 8009740:	001e8480 	.word	0x001e8480
 8009744:	4ba6      	ldr	r3, [pc, #664]	; (80099e0 <UART_SetConfig+0x598>)
 8009746:	e004      	b.n	8009752 <UART_SetConfig+0x30a>
 8009748:	4ba6      	ldr	r3, [pc, #664]	; (80099e4 <UART_SetConfig+0x59c>)
 800974a:	e002      	b.n	8009752 <UART_SetConfig+0x30a>
 800974c:	4ba6      	ldr	r3, [pc, #664]	; (80099e8 <UART_SetConfig+0x5a0>)
 800974e:	e000      	b.n	8009752 <UART_SetConfig+0x30a>
 8009750:	4ba6      	ldr	r3, [pc, #664]	; (80099ec <UART_SetConfig+0x5a4>)
 8009752:	617b      	str	r3, [r7, #20]
        break;
 8009754:	e0aa      	b.n	80098ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009756:	f7fe fa67 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 800975a:	4602      	mov	r2, r0
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	d044      	beq.n	80097ee <UART_SetConfig+0x3a6>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	2b01      	cmp	r3, #1
 800976a:	d03e      	beq.n	80097ea <UART_SetConfig+0x3a2>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	2b02      	cmp	r3, #2
 8009772:	d038      	beq.n	80097e6 <UART_SetConfig+0x39e>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	2b03      	cmp	r3, #3
 800977a:	d032      	beq.n	80097e2 <UART_SetConfig+0x39a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	2b04      	cmp	r3, #4
 8009782:	d02c      	beq.n	80097de <UART_SetConfig+0x396>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	2b05      	cmp	r3, #5
 800978a:	d026      	beq.n	80097da <UART_SetConfig+0x392>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	2b06      	cmp	r3, #6
 8009792:	d020      	beq.n	80097d6 <UART_SetConfig+0x38e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	2b07      	cmp	r3, #7
 800979a:	d01a      	beq.n	80097d2 <UART_SetConfig+0x38a>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d014      	beq.n	80097ce <UART_SetConfig+0x386>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b09      	cmp	r3, #9
 80097aa:	d00e      	beq.n	80097ca <UART_SetConfig+0x382>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	2b0a      	cmp	r3, #10
 80097b2:	d008      	beq.n	80097c6 <UART_SetConfig+0x37e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	2b0b      	cmp	r3, #11
 80097ba:	d102      	bne.n	80097c2 <UART_SetConfig+0x37a>
 80097bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c0:	e016      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e014      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097c6:	2380      	movs	r3, #128	; 0x80
 80097c8:	e012      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	e010      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097ce:	2320      	movs	r3, #32
 80097d0:	e00e      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097d2:	2310      	movs	r3, #16
 80097d4:	e00c      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097d6:	230c      	movs	r3, #12
 80097d8:	e00a      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097da:	230a      	movs	r3, #10
 80097dc:	e008      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097de:	2308      	movs	r3, #8
 80097e0:	e006      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097e2:	2306      	movs	r3, #6
 80097e4:	e004      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097e6:	2304      	movs	r3, #4
 80097e8:	e002      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e000      	b.n	80097f0 <UART_SetConfig+0x3a8>
 80097ee:	2301      	movs	r3, #1
 80097f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f4:	617b      	str	r3, [r7, #20]
        break;
 80097f6:	e059      	b.n	80098ac <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d04e      	beq.n	800989e <UART_SetConfig+0x456>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b01      	cmp	r3, #1
 8009806:	d047      	beq.n	8009898 <UART_SetConfig+0x450>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b02      	cmp	r3, #2
 800980e:	d040      	beq.n	8009892 <UART_SetConfig+0x44a>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b03      	cmp	r3, #3
 8009816:	d039      	beq.n	800988c <UART_SetConfig+0x444>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2b04      	cmp	r3, #4
 800981e:	d032      	beq.n	8009886 <UART_SetConfig+0x43e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b05      	cmp	r3, #5
 8009826:	d02b      	beq.n	8009880 <UART_SetConfig+0x438>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	2b06      	cmp	r3, #6
 800982e:	d024      	beq.n	800987a <UART_SetConfig+0x432>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b07      	cmp	r3, #7
 8009836:	d01d      	beq.n	8009874 <UART_SetConfig+0x42c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b08      	cmp	r3, #8
 800983e:	d016      	beq.n	800986e <UART_SetConfig+0x426>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b09      	cmp	r3, #9
 8009846:	d00f      	beq.n	8009868 <UART_SetConfig+0x420>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b0a      	cmp	r3, #10
 800984e:	d008      	beq.n	8009862 <UART_SetConfig+0x41a>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b0b      	cmp	r3, #11
 8009856:	d101      	bne.n	800985c <UART_SetConfig+0x414>
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	e022      	b.n	80098a2 <UART_SetConfig+0x45a>
 800985c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009860:	e01f      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009866:	e01c      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986c:	e019      	b.n	80098a2 <UART_SetConfig+0x45a>
 800986e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009872:	e016      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009878:	e013      	b.n	80098a2 <UART_SetConfig+0x45a>
 800987a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800987e:	e010      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009880:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009884:	e00d      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800988a:	e00a      	b.n	80098a2 <UART_SetConfig+0x45a>
 800988c:	f241 5355 	movw	r3, #5461	; 0x1555
 8009890:	e007      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009896:	e004      	b.n	80098a2 <UART_SetConfig+0x45a>
 8009898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800989c:	e001      	b.n	80098a2 <UART_SetConfig+0x45a>
 800989e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a2:	617b      	str	r3, [r7, #20]
        break;
 80098a4:	e002      	b.n	80098ac <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	76fb      	strb	r3, [r7, #27]
        break;
 80098aa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8604 	beq.w	800a4bc <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	4413      	add	r3, r2
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d305      	bcc.n	80098d0 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d903      	bls.n	80098d8 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	76fb      	strb	r3, [r7, #27]
 80098d4:	f000 bdf2 	b.w	800a4bc <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80098d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098dc:	2b08      	cmp	r3, #8
 80098de:	f200 8281 	bhi.w	8009de4 <UART_SetConfig+0x99c>
 80098e2:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <UART_SetConfig+0x4a0>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	08009de5 	.word	0x08009de5
 80098f0:	08009a5d 	.word	0x08009a5d
 80098f4:	08009de5 	.word	0x08009de5
 80098f8:	08009b53 	.word	0x08009b53
 80098fc:	08009de5 	.word	0x08009de5
 8009900:	08009de5 	.word	0x08009de5
 8009904:	08009de5 	.word	0x08009de5
 8009908:	08009c91 	.word	0x08009c91
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800990c:	f7fe fa0a 	bl	8007d24 <HAL_RCC_GetPCLK1Freq>
 8009910:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	4618      	mov	r0, r3
 8009916:	f04f 0100 	mov.w	r1, #0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	d070      	beq.n	8009a04 <UART_SetConfig+0x5bc>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2b01      	cmp	r3, #1
 8009928:	d067      	beq.n	80099fa <UART_SetConfig+0x5b2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	2b02      	cmp	r3, #2
 8009930:	d05e      	beq.n	80099f0 <UART_SetConfig+0x5a8>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b03      	cmp	r3, #3
 8009938:	d04c      	beq.n	80099d4 <UART_SetConfig+0x58c>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	2b04      	cmp	r3, #4
 8009940:	d043      	beq.n	80099ca <UART_SetConfig+0x582>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	2b05      	cmp	r3, #5
 8009948:	d03a      	beq.n	80099c0 <UART_SetConfig+0x578>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	2b06      	cmp	r3, #6
 8009950:	d031      	beq.n	80099b6 <UART_SetConfig+0x56e>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b07      	cmp	r3, #7
 8009958:	d028      	beq.n	80099ac <UART_SetConfig+0x564>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b08      	cmp	r3, #8
 8009960:	d01f      	beq.n	80099a2 <UART_SetConfig+0x55a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b09      	cmp	r3, #9
 8009968:	d016      	beq.n	8009998 <UART_SetConfig+0x550>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b0a      	cmp	r3, #10
 8009970:	d00d      	beq.n	800998e <UART_SetConfig+0x546>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b0b      	cmp	r3, #11
 8009978:	d104      	bne.n	8009984 <UART_SetConfig+0x53c>
 800997a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800997e:	f04f 0400 	mov.w	r4, #0
 8009982:	e043      	b.n	8009a0c <UART_SetConfig+0x5c4>
 8009984:	f04f 0301 	mov.w	r3, #1
 8009988:	f04f 0400 	mov.w	r4, #0
 800998c:	e03e      	b.n	8009a0c <UART_SetConfig+0x5c4>
 800998e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009992:	f04f 0400 	mov.w	r4, #0
 8009996:	e039      	b.n	8009a0c <UART_SetConfig+0x5c4>
 8009998:	f04f 0340 	mov.w	r3, #64	; 0x40
 800999c:	f04f 0400 	mov.w	r4, #0
 80099a0:	e034      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099a2:	f04f 0320 	mov.w	r3, #32
 80099a6:	f04f 0400 	mov.w	r4, #0
 80099aa:	e02f      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099ac:	f04f 0310 	mov.w	r3, #16
 80099b0:	f04f 0400 	mov.w	r4, #0
 80099b4:	e02a      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099b6:	f04f 030c 	mov.w	r3, #12
 80099ba:	f04f 0400 	mov.w	r4, #0
 80099be:	e025      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099c0:	f04f 030a 	mov.w	r3, #10
 80099c4:	f04f 0400 	mov.w	r4, #0
 80099c8:	e020      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099ca:	f04f 0308 	mov.w	r3, #8
 80099ce:	f04f 0400 	mov.w	r4, #0
 80099d2:	e01b      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099d4:	f04f 0306 	mov.w	r3, #6
 80099d8:	f04f 0400 	mov.w	r4, #0
 80099dc:	e016      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099de:	bf00      	nop
 80099e0:	0028b0aa 	.word	0x0028b0aa
 80099e4:	003d0900 	.word	0x003d0900
 80099e8:	007a1200 	.word	0x007a1200
 80099ec:	00f42400 	.word	0x00f42400
 80099f0:	f04f 0304 	mov.w	r3, #4
 80099f4:	f04f 0400 	mov.w	r4, #0
 80099f8:	e008      	b.n	8009a0c <UART_SetConfig+0x5c4>
 80099fa:	f04f 0302 	mov.w	r3, #2
 80099fe:	f04f 0400 	mov.w	r4, #0
 8009a02:	e003      	b.n	8009a0c <UART_SetConfig+0x5c4>
 8009a04:	f04f 0301 	mov.w	r3, #1
 8009a08:	f04f 0400 	mov.w	r4, #0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4623      	mov	r3, r4
 8009a10:	f7f6 fbbe 	bl	8000190 <__aeabi_uldivmod>
 8009a14:	4603      	mov	r3, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	f04f 0300 	mov.w	r3, #0
 8009a20:	f04f 0400 	mov.w	r4, #0
 8009a24:	0214      	lsls	r4, r2, #8
 8009a26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a2a:	020b      	lsls	r3, r1, #8
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6852      	ldr	r2, [r2, #4]
 8009a30:	0852      	lsrs	r2, r2, #1
 8009a32:	4611      	mov	r1, r2
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	eb13 0b01 	adds.w	fp, r3, r1
 8009a3c:	eb44 0c02 	adc.w	ip, r4, r2
 8009a40:	4658      	mov	r0, fp
 8009a42:	4661      	mov	r1, ip
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f04f 0400 	mov.w	r4, #0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4623      	mov	r3, r4
 8009a50:	f7f6 fb9e 	bl	8000190 <__aeabi_uldivmod>
 8009a54:	4603      	mov	r3, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	61fb      	str	r3, [r7, #28]
            break;
 8009a5a:	e1c6      	b.n	8009dea <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d05b      	beq.n	8009b1c <UART_SetConfig+0x6d4>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d053      	beq.n	8009b14 <UART_SetConfig+0x6cc>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d04b      	beq.n	8009b0c <UART_SetConfig+0x6c4>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d043      	beq.n	8009b04 <UART_SetConfig+0x6bc>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d03b      	beq.n	8009afc <UART_SetConfig+0x6b4>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d033      	beq.n	8009af4 <UART_SetConfig+0x6ac>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	d02b      	beq.n	8009aec <UART_SetConfig+0x6a4>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b07      	cmp	r3, #7
 8009a9a:	d023      	beq.n	8009ae4 <UART_SetConfig+0x69c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d01b      	beq.n	8009adc <UART_SetConfig+0x694>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b09      	cmp	r3, #9
 8009aaa:	d013      	beq.n	8009ad4 <UART_SetConfig+0x68c>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b0a      	cmp	r3, #10
 8009ab2:	d00b      	beq.n	8009acc <UART_SetConfig+0x684>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b0b      	cmp	r3, #11
 8009aba:	d103      	bne.n	8009ac4 <UART_SetConfig+0x67c>
 8009abc:	4bae      	ldr	r3, [pc, #696]	; (8009d78 <UART_SetConfig+0x930>)
 8009abe:	f04f 0400 	mov.w	r4, #0
 8009ac2:	e02e      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009ac4:	4bad      	ldr	r3, [pc, #692]	; (8009d7c <UART_SetConfig+0x934>)
 8009ac6:	f04f 0400 	mov.w	r4, #0
 8009aca:	e02a      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009acc:	4bac      	ldr	r3, [pc, #688]	; (8009d80 <UART_SetConfig+0x938>)
 8009ace:	f04f 0400 	mov.w	r4, #0
 8009ad2:	e026      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009ad4:	4bab      	ldr	r3, [pc, #684]	; (8009d84 <UART_SetConfig+0x93c>)
 8009ad6:	f04f 0400 	mov.w	r4, #0
 8009ada:	e022      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009adc:	4baa      	ldr	r3, [pc, #680]	; (8009d88 <UART_SetConfig+0x940>)
 8009ade:	f04f 0400 	mov.w	r4, #0
 8009ae2:	e01e      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009ae4:	4ba9      	ldr	r3, [pc, #676]	; (8009d8c <UART_SetConfig+0x944>)
 8009ae6:	f04f 0400 	mov.w	r4, #0
 8009aea:	e01a      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009aec:	a49e      	add	r4, pc, #632	; (adr r4, 8009d68 <UART_SetConfig+0x920>)
 8009aee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009af2:	e016      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009af4:	4ba6      	ldr	r3, [pc, #664]	; (8009d90 <UART_SetConfig+0x948>)
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	e012      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009afc:	4ba5      	ldr	r3, [pc, #660]	; (8009d94 <UART_SetConfig+0x94c>)
 8009afe:	f04f 0400 	mov.w	r4, #0
 8009b02:	e00e      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009b04:	a49a      	add	r4, pc, #616	; (adr r4, 8009d70 <UART_SetConfig+0x928>)
 8009b06:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b0a:	e00a      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009b0c:	4ba2      	ldr	r3, [pc, #648]	; (8009d98 <UART_SetConfig+0x950>)
 8009b0e:	f04f 0400 	mov.w	r4, #0
 8009b12:	e006      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009b14:	4ba1      	ldr	r3, [pc, #644]	; (8009d9c <UART_SetConfig+0x954>)
 8009b16:	f04f 0400 	mov.w	r4, #0
 8009b1a:	e002      	b.n	8009b22 <UART_SetConfig+0x6da>
 8009b1c:	4b97      	ldr	r3, [pc, #604]	; (8009d7c <UART_SetConfig+0x934>)
 8009b1e:	f04f 0400 	mov.w	r4, #0
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6852      	ldr	r2, [r2, #4]
 8009b26:	0852      	lsrs	r2, r2, #1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	eb13 0b01 	adds.w	fp, r3, r1
 8009b32:	eb44 0c02 	adc.w	ip, r4, r2
 8009b36:	4658      	mov	r0, fp
 8009b38:	4661      	mov	r1, ip
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f04f 0400 	mov.w	r4, #0
 8009b42:	461a      	mov	r2, r3
 8009b44:	4623      	mov	r3, r4
 8009b46:	f7f6 fb23 	bl	8000190 <__aeabi_uldivmod>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	61fb      	str	r3, [r7, #28]
            break;
 8009b50:	e14b      	b.n	8009dea <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009b52:	f7fe f869 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8009b56:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f04f 0100 	mov.w	r1, #0
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d067      	beq.n	8009c38 <UART_SetConfig+0x7f0>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d05e      	beq.n	8009c2e <UART_SetConfig+0x7e6>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d055      	beq.n	8009c24 <UART_SetConfig+0x7dc>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d04c      	beq.n	8009c1a <UART_SetConfig+0x7d2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d043      	beq.n	8009c10 <UART_SetConfig+0x7c8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	d03a      	beq.n	8009c06 <UART_SetConfig+0x7be>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b06      	cmp	r3, #6
 8009b96:	d031      	beq.n	8009bfc <UART_SetConfig+0x7b4>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b07      	cmp	r3, #7
 8009b9e:	d028      	beq.n	8009bf2 <UART_SetConfig+0x7aa>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d01f      	beq.n	8009be8 <UART_SetConfig+0x7a0>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d016      	beq.n	8009bde <UART_SetConfig+0x796>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	2b0a      	cmp	r3, #10
 8009bb6:	d00d      	beq.n	8009bd4 <UART_SetConfig+0x78c>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2b0b      	cmp	r3, #11
 8009bbe:	d104      	bne.n	8009bca <UART_SetConfig+0x782>
 8009bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc4:	f04f 0400 	mov.w	r4, #0
 8009bc8:	e03a      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009bca:	f04f 0301 	mov.w	r3, #1
 8009bce:	f04f 0400 	mov.w	r4, #0
 8009bd2:	e035      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009bd8:	f04f 0400 	mov.w	r4, #0
 8009bdc:	e030      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009bde:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009be2:	f04f 0400 	mov.w	r4, #0
 8009be6:	e02b      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009be8:	f04f 0320 	mov.w	r3, #32
 8009bec:	f04f 0400 	mov.w	r4, #0
 8009bf0:	e026      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009bf2:	f04f 0310 	mov.w	r3, #16
 8009bf6:	f04f 0400 	mov.w	r4, #0
 8009bfa:	e021      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009bfc:	f04f 030c 	mov.w	r3, #12
 8009c00:	f04f 0400 	mov.w	r4, #0
 8009c04:	e01c      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c06:	f04f 030a 	mov.w	r3, #10
 8009c0a:	f04f 0400 	mov.w	r4, #0
 8009c0e:	e017      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c10:	f04f 0308 	mov.w	r3, #8
 8009c14:	f04f 0400 	mov.w	r4, #0
 8009c18:	e012      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c1a:	f04f 0306 	mov.w	r3, #6
 8009c1e:	f04f 0400 	mov.w	r4, #0
 8009c22:	e00d      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c24:	f04f 0304 	mov.w	r3, #4
 8009c28:	f04f 0400 	mov.w	r4, #0
 8009c2c:	e008      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c2e:	f04f 0302 	mov.w	r3, #2
 8009c32:	f04f 0400 	mov.w	r4, #0
 8009c36:	e003      	b.n	8009c40 <UART_SetConfig+0x7f8>
 8009c38:	f04f 0301 	mov.w	r3, #1
 8009c3c:	f04f 0400 	mov.w	r4, #0
 8009c40:	461a      	mov	r2, r3
 8009c42:	4623      	mov	r3, r4
 8009c44:	f7f6 faa4 	bl	8000190 <__aeabi_uldivmod>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4622      	mov	r2, r4
 8009c50:	f04f 0300 	mov.w	r3, #0
 8009c54:	f04f 0400 	mov.w	r4, #0
 8009c58:	0214      	lsls	r4, r2, #8
 8009c5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009c5e:	020b      	lsls	r3, r1, #8
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	6852      	ldr	r2, [r2, #4]
 8009c64:	0852      	lsrs	r2, r2, #1
 8009c66:	4611      	mov	r1, r2
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	eb13 0b01 	adds.w	fp, r3, r1
 8009c70:	eb44 0c02 	adc.w	ip, r4, r2
 8009c74:	4658      	mov	r0, fp
 8009c76:	4661      	mov	r1, ip
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f04f 0400 	mov.w	r4, #0
 8009c80:	461a      	mov	r2, r3
 8009c82:	4623      	mov	r3, r4
 8009c84:	f7f6 fa84 	bl	8000190 <__aeabi_uldivmod>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	61fb      	str	r3, [r7, #28]
            break;
 8009c8e:	e0ac      	b.n	8009dea <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8089 	beq.w	8009dac <UART_SetConfig+0x964>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d05b      	beq.n	8009d5a <UART_SetConfig+0x912>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d052      	beq.n	8009d50 <UART_SetConfig+0x908>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d04a      	beq.n	8009d48 <UART_SetConfig+0x900>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d041      	beq.n	8009d3e <UART_SetConfig+0x8f6>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	d039      	beq.n	8009d36 <UART_SetConfig+0x8ee>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	2b06      	cmp	r3, #6
 8009cc8:	d031      	beq.n	8009d2e <UART_SetConfig+0x8e6>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d028      	beq.n	8009d24 <UART_SetConfig+0x8dc>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d01f      	beq.n	8009d1a <UART_SetConfig+0x8d2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b09      	cmp	r3, #9
 8009ce0:	d016      	beq.n	8009d10 <UART_SetConfig+0x8c8>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	2b0a      	cmp	r3, #10
 8009ce8:	d00d      	beq.n	8009d06 <UART_SetConfig+0x8be>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	2b0b      	cmp	r3, #11
 8009cf0:	d104      	bne.n	8009cfc <UART_SetConfig+0x8b4>
 8009cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cf6:	f04f 0400 	mov.w	r4, #0
 8009cfa:	e05b      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009cfc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009d00:	f04f 0400 	mov.w	r4, #0
 8009d04:	e056      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d0a:	f04f 0400 	mov.w	r4, #0
 8009d0e:	e051      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d14:	f04f 0400 	mov.w	r4, #0
 8009d18:	e04c      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d1e:	f04f 0400 	mov.w	r4, #0
 8009d22:	e047      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d28:	f04f 0400 	mov.w	r4, #0
 8009d2c:	e042      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <UART_SetConfig+0x958>)
 8009d30:	f04f 0400 	mov.w	r4, #0
 8009d34:	e03e      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d36:	4b1b      	ldr	r3, [pc, #108]	; (8009da4 <UART_SetConfig+0x95c>)
 8009d38:	f04f 0400 	mov.w	r4, #0
 8009d3c:	e03a      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d42:	f04f 0400 	mov.w	r4, #0
 8009d46:	e035      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d48:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <UART_SetConfig+0x960>)
 8009d4a:	f04f 0400 	mov.w	r4, #0
 8009d4e:	e031      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d54:	f04f 0400 	mov.w	r4, #0
 8009d58:	e02c      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d5e:	f04f 0400 	mov.w	r4, #0
 8009d62:	e027      	b.n	8009db4 <UART_SetConfig+0x96c>
 8009d64:	f3af 8000 	nop.w
 8009d68:	14585500 	.word	0x14585500
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	28b0aa00 	.word	0x28b0aa00
 8009d74:	00000000 	.word	0x00000000
 8009d78:	00f42400 	.word	0x00f42400
 8009d7c:	f4240000 	.word	0xf4240000
 8009d80:	01e84800 	.word	0x01e84800
 8009d84:	03d09000 	.word	0x03d09000
 8009d88:	07a12000 	.word	0x07a12000
 8009d8c:	0f424000 	.word	0x0f424000
 8009d90:	186a0000 	.word	0x186a0000
 8009d94:	1e848000 	.word	0x1e848000
 8009d98:	3d090000 	.word	0x3d090000
 8009d9c:	7a120000 	.word	0x7a120000
 8009da0:	000aaa00 	.word	0x000aaa00
 8009da4:	000ccc00 	.word	0x000ccc00
 8009da8:	00155500 	.word	0x00155500
 8009dac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009db0:	f04f 0400 	mov.w	r4, #0
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	6852      	ldr	r2, [r2, #4]
 8009db8:	0852      	lsrs	r2, r2, #1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	eb13 0b01 	adds.w	fp, r3, r1
 8009dc4:	eb44 0c02 	adc.w	ip, r4, r2
 8009dc8:	4658      	mov	r0, fp
 8009dca:	4661      	mov	r1, ip
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f04f 0400 	mov.w	r4, #0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4623      	mov	r3, r4
 8009dd8:	f7f6 f9da 	bl	8000190 <__aeabi_uldivmod>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	61fb      	str	r3, [r7, #28]
            break;
 8009de2:	e002      	b.n	8009dea <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	76fb      	strb	r3, [r7, #27]
            break;
 8009de8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009df0:	d308      	bcc.n	8009e04 <UART_SetConfig+0x9bc>
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df8:	d204      	bcs.n	8009e04 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	60da      	str	r2, [r3, #12]
 8009e02:	e35b      	b.n	800a4bc <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	76fb      	strb	r3, [r7, #27]
 8009e08:	e358      	b.n	800a4bc <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e12:	f040 81a6 	bne.w	800a162 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	2b07      	cmp	r3, #7
 8009e1e:	f200 8180 	bhi.w	800a122 <UART_SetConfig+0xcda>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x9e0>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e49 	.word	0x08009e49
 8009e2c:	08009f01 	.word	0x08009f01
 8009e30:	0800a123 	.word	0x0800a123
 8009e34:	08009fa9 	.word	0x08009fa9
 8009e38:	0800a123 	.word	0x0800a123
 8009e3c:	0800a123 	.word	0x0800a123
 8009e40:	0800a123 	.word	0x0800a123
 8009e44:	0800a061 	.word	0x0800a061
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e48:	f7fd ff82 	bl	8007d50 <HAL_RCC_GetPCLK2Freq>
 8009e4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d044      	beq.n	8009ee0 <UART_SetConfig+0xa98>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d03e      	beq.n	8009edc <UART_SetConfig+0xa94>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d038      	beq.n	8009ed8 <UART_SetConfig+0xa90>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d032      	beq.n	8009ed4 <UART_SetConfig+0xa8c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d02c      	beq.n	8009ed0 <UART_SetConfig+0xa88>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b05      	cmp	r3, #5
 8009e7c:	d026      	beq.n	8009ecc <UART_SetConfig+0xa84>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b06      	cmp	r3, #6
 8009e84:	d020      	beq.n	8009ec8 <UART_SetConfig+0xa80>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d01a      	beq.n	8009ec4 <UART_SetConfig+0xa7c>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b08      	cmp	r3, #8
 8009e94:	d014      	beq.n	8009ec0 <UART_SetConfig+0xa78>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	d00e      	beq.n	8009ebc <UART_SetConfig+0xa74>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b0a      	cmp	r3, #10
 8009ea4:	d008      	beq.n	8009eb8 <UART_SetConfig+0xa70>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b0b      	cmp	r3, #11
 8009eac:	d102      	bne.n	8009eb4 <UART_SetConfig+0xa6c>
 8009eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eb2:	e016      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e014      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	e012      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	e010      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	e00e      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	e00c      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ec8:	230c      	movs	r3, #12
 8009eca:	e00a      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ecc:	230a      	movs	r3, #10
 8009ece:	e008      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	e006      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ed4:	2306      	movs	r3, #6
 8009ed6:	e004      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	e002      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009edc:	2302      	movs	r3, #2
 8009ede:	e000      	b.n	8009ee2 <UART_SetConfig+0xa9a>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee8:	005a      	lsls	r2, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	441a      	add	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	61fb      	str	r3, [r7, #28]
        break;
 8009efe:	e113      	b.n	800a128 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d043      	beq.n	8009f90 <UART_SetConfig+0xb48>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d03d      	beq.n	8009f8c <UART_SetConfig+0xb44>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d037      	beq.n	8009f88 <UART_SetConfig+0xb40>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d031      	beq.n	8009f84 <UART_SetConfig+0xb3c>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d02b      	beq.n	8009f80 <UART_SetConfig+0xb38>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b05      	cmp	r3, #5
 8009f2e:	d025      	beq.n	8009f7c <UART_SetConfig+0xb34>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b06      	cmp	r3, #6
 8009f36:	d01f      	beq.n	8009f78 <UART_SetConfig+0xb30>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	d019      	beq.n	8009f74 <UART_SetConfig+0xb2c>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d013      	beq.n	8009f70 <UART_SetConfig+0xb28>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	d00d      	beq.n	8009f6c <UART_SetConfig+0xb24>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b0a      	cmp	r3, #10
 8009f56:	d007      	beq.n	8009f68 <UART_SetConfig+0xb20>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b0b      	cmp	r3, #11
 8009f5e:	d101      	bne.n	8009f64 <UART_SetConfig+0xb1c>
 8009f60:	4b8c      	ldr	r3, [pc, #560]	; (800a194 <UART_SetConfig+0xd4c>)
 8009f62:	e016      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f64:	4b8c      	ldr	r3, [pc, #560]	; (800a198 <UART_SetConfig+0xd50>)
 8009f66:	e014      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f68:	4b8c      	ldr	r3, [pc, #560]	; (800a19c <UART_SetConfig+0xd54>)
 8009f6a:	e012      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f6c:	4b8c      	ldr	r3, [pc, #560]	; (800a1a0 <UART_SetConfig+0xd58>)
 8009f6e:	e010      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f70:	4b8c      	ldr	r3, [pc, #560]	; (800a1a4 <UART_SetConfig+0xd5c>)
 8009f72:	e00e      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f74:	4b8c      	ldr	r3, [pc, #560]	; (800a1a8 <UART_SetConfig+0xd60>)
 8009f76:	e00c      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f78:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <UART_SetConfig+0xd64>)
 8009f7a:	e00a      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f7c:	4b8c      	ldr	r3, [pc, #560]	; (800a1b0 <UART_SetConfig+0xd68>)
 8009f7e:	e008      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f80:	4b8c      	ldr	r3, [pc, #560]	; (800a1b4 <UART_SetConfig+0xd6c>)
 8009f82:	e006      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f84:	4b8c      	ldr	r3, [pc, #560]	; (800a1b8 <UART_SetConfig+0xd70>)
 8009f86:	e004      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f88:	4b8c      	ldr	r3, [pc, #560]	; (800a1bc <UART_SetConfig+0xd74>)
 8009f8a:	e002      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f8c:	4b8c      	ldr	r3, [pc, #560]	; (800a1c0 <UART_SetConfig+0xd78>)
 8009f8e:	e000      	b.n	8009f92 <UART_SetConfig+0xb4a>
 8009f90:	4b81      	ldr	r3, [pc, #516]	; (800a198 <UART_SetConfig+0xd50>)
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6852      	ldr	r2, [r2, #4]
 8009f96:	0852      	lsrs	r2, r2, #1
 8009f98:	441a      	add	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	61fb      	str	r3, [r7, #28]
        break;
 8009fa6:	e0bf      	b.n	800a128 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fa8:	f7fd fe3e 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8009fac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d044      	beq.n	800a040 <UART_SetConfig+0xbf8>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d03e      	beq.n	800a03c <UART_SetConfig+0xbf4>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d038      	beq.n	800a038 <UART_SetConfig+0xbf0>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d032      	beq.n	800a034 <UART_SetConfig+0xbec>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d02c      	beq.n	800a030 <UART_SetConfig+0xbe8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	d026      	beq.n	800a02c <UART_SetConfig+0xbe4>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b06      	cmp	r3, #6
 8009fe4:	d020      	beq.n	800a028 <UART_SetConfig+0xbe0>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	2b07      	cmp	r3, #7
 8009fec:	d01a      	beq.n	800a024 <UART_SetConfig+0xbdc>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d014      	beq.n	800a020 <UART_SetConfig+0xbd8>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	d00e      	beq.n	800a01c <UART_SetConfig+0xbd4>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b0a      	cmp	r3, #10
 800a004:	d008      	beq.n	800a018 <UART_SetConfig+0xbd0>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	2b0b      	cmp	r3, #11
 800a00c:	d102      	bne.n	800a014 <UART_SetConfig+0xbcc>
 800a00e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a012:	e016      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a014:	2301      	movs	r3, #1
 800a016:	e014      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a018:	2380      	movs	r3, #128	; 0x80
 800a01a:	e012      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	e010      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a020:	2320      	movs	r3, #32
 800a022:	e00e      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a024:	2310      	movs	r3, #16
 800a026:	e00c      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a028:	230c      	movs	r3, #12
 800a02a:	e00a      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a02c:	230a      	movs	r3, #10
 800a02e:	e008      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a030:	2308      	movs	r3, #8
 800a032:	e006      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a034:	2306      	movs	r3, #6
 800a036:	e004      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a038:	2304      	movs	r3, #4
 800a03a:	e002      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e000      	b.n	800a042 <UART_SetConfig+0xbfa>
 800a040:	2301      	movs	r3, #1
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	fbb2 f3f3 	udiv	r3, r2, r3
 800a048:	005a      	lsls	r2, r3, #1
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	61fb      	str	r3, [r7, #28]
        break;
 800a05e:	e063      	b.n	800a128 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d04f      	beq.n	800a108 <UART_SetConfig+0xcc0>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d048      	beq.n	800a102 <UART_SetConfig+0xcba>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b02      	cmp	r3, #2
 800a076:	d041      	beq.n	800a0fc <UART_SetConfig+0xcb4>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d03a      	beq.n	800a0f6 <UART_SetConfig+0xcae>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b04      	cmp	r3, #4
 800a086:	d033      	beq.n	800a0f0 <UART_SetConfig+0xca8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d02c      	beq.n	800a0ea <UART_SetConfig+0xca2>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b06      	cmp	r3, #6
 800a096:	d025      	beq.n	800a0e4 <UART_SetConfig+0xc9c>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b07      	cmp	r3, #7
 800a09e:	d01e      	beq.n	800a0de <UART_SetConfig+0xc96>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d017      	beq.n	800a0d8 <UART_SetConfig+0xc90>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d010      	beq.n	800a0d2 <UART_SetConfig+0xc8a>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b0a      	cmp	r3, #10
 800a0b6:	d009      	beq.n	800a0cc <UART_SetConfig+0xc84>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b0b      	cmp	r3, #11
 800a0be:	d102      	bne.n	800a0c6 <UART_SetConfig+0xc7e>
 800a0c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c4:	e022      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0ca:	e01f      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d0:	e01c      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d6:	e019      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0dc:	e016      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0e2:	e013      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0e4:	f241 5354 	movw	r3, #5460	; 0x1554
 800a0e8:	e010      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0ea:	f641 1398 	movw	r3, #6552	; 0x1998
 800a0ee:	e00d      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0f4:	e00a      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0f6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a0fa:	e007      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a0fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a100:	e004      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a106:	e001      	b.n	800a10c <UART_SetConfig+0xcc4>
 800a108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6852      	ldr	r2, [r2, #4]
 800a110:	0852      	lsrs	r2, r2, #1
 800a112:	441a      	add	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	61fb      	str	r3, [r7, #28]
        break;
 800a120:	e002      	b.n	800a128 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	76fb      	strb	r3, [r7, #27]
        break;
 800a126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	2b0f      	cmp	r3, #15
 800a12c:	d916      	bls.n	800a15c <UART_SetConfig+0xd14>
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a134:	d212      	bcs.n	800a15c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f023 030f 	bic.w	r3, r3, #15
 800a13e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	b29b      	uxth	r3, r3
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	89fb      	ldrh	r3, [r7, #14]
 800a14e:	4313      	orrs	r3, r2
 800a150:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	89fa      	ldrh	r2, [r7, #14]
 800a158:	60da      	str	r2, [r3, #12]
 800a15a:	e1af      	b.n	800a4bc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	76fb      	strb	r3, [r7, #27]
 800a160:	e1ac      	b.n	800a4bc <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800a162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a166:	3b01      	subs	r3, #1
 800a168:	2b07      	cmp	r3, #7
 800a16a:	f200 8196 	bhi.w	800a49a <UART_SetConfig+0x1052>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0xd2c>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a1c5 	.word	0x0800a1c5
 800a178:	0800a27b 	.word	0x0800a27b
 800a17c:	0800a49b 	.word	0x0800a49b
 800a180:	0800a325 	.word	0x0800a325
 800a184:	0800a49b 	.word	0x0800a49b
 800a188:	0800a49b 	.word	0x0800a49b
 800a18c:	0800a49b 	.word	0x0800a49b
 800a190:	0800a3db 	.word	0x0800a3db
 800a194:	0001e848 	.word	0x0001e848
 800a198:	01e84800 	.word	0x01e84800
 800a19c:	0003d090 	.word	0x0003d090
 800a1a0:	0007a120 	.word	0x0007a120
 800a1a4:	000f4240 	.word	0x000f4240
 800a1a8:	001e8480 	.word	0x001e8480
 800a1ac:	0028b0aa 	.word	0x0028b0aa
 800a1b0:	0030d400 	.word	0x0030d400
 800a1b4:	003d0900 	.word	0x003d0900
 800a1b8:	00516154 	.word	0x00516154
 800a1bc:	007a1200 	.word	0x007a1200
 800a1c0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1c4:	f7fd fdc4 	bl	8007d50 <HAL_RCC_GetPCLK2Freq>
 800a1c8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d044      	beq.n	800a25c <UART_SetConfig+0xe14>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d03e      	beq.n	800a258 <UART_SetConfig+0xe10>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d038      	beq.n	800a254 <UART_SetConfig+0xe0c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d032      	beq.n	800a250 <UART_SetConfig+0xe08>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d02c      	beq.n	800a24c <UART_SetConfig+0xe04>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	d026      	beq.n	800a248 <UART_SetConfig+0xe00>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b06      	cmp	r3, #6
 800a200:	d020      	beq.n	800a244 <UART_SetConfig+0xdfc>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b07      	cmp	r3, #7
 800a208:	d01a      	beq.n	800a240 <UART_SetConfig+0xdf8>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d014      	beq.n	800a23c <UART_SetConfig+0xdf4>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b09      	cmp	r3, #9
 800a218:	d00e      	beq.n	800a238 <UART_SetConfig+0xdf0>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	2b0a      	cmp	r3, #10
 800a220:	d008      	beq.n	800a234 <UART_SetConfig+0xdec>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b0b      	cmp	r3, #11
 800a228:	d102      	bne.n	800a230 <UART_SetConfig+0xde8>
 800a22a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a22e:	e016      	b.n	800a25e <UART_SetConfig+0xe16>
 800a230:	2301      	movs	r3, #1
 800a232:	e014      	b.n	800a25e <UART_SetConfig+0xe16>
 800a234:	2380      	movs	r3, #128	; 0x80
 800a236:	e012      	b.n	800a25e <UART_SetConfig+0xe16>
 800a238:	2340      	movs	r3, #64	; 0x40
 800a23a:	e010      	b.n	800a25e <UART_SetConfig+0xe16>
 800a23c:	2320      	movs	r3, #32
 800a23e:	e00e      	b.n	800a25e <UART_SetConfig+0xe16>
 800a240:	2310      	movs	r3, #16
 800a242:	e00c      	b.n	800a25e <UART_SetConfig+0xe16>
 800a244:	230c      	movs	r3, #12
 800a246:	e00a      	b.n	800a25e <UART_SetConfig+0xe16>
 800a248:	230a      	movs	r3, #10
 800a24a:	e008      	b.n	800a25e <UART_SetConfig+0xe16>
 800a24c:	2308      	movs	r3, #8
 800a24e:	e006      	b.n	800a25e <UART_SetConfig+0xe16>
 800a250:	2306      	movs	r3, #6
 800a252:	e004      	b.n	800a25e <UART_SetConfig+0xe16>
 800a254:	2304      	movs	r3, #4
 800a256:	e002      	b.n	800a25e <UART_SetConfig+0xe16>
 800a258:	2302      	movs	r3, #2
 800a25a:	e000      	b.n	800a25e <UART_SetConfig+0xe16>
 800a25c:	2301      	movs	r3, #1
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	fbb2 f2f3 	udiv	r2, r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	085b      	lsrs	r3, r3, #1
 800a26a:	441a      	add	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	fbb2 f3f3 	udiv	r3, r2, r3
 800a274:	b29b      	uxth	r3, r3
 800a276:	61fb      	str	r3, [r7, #28]
        break;
 800a278:	e112      	b.n	800a4a0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d044      	beq.n	800a30c <UART_SetConfig+0xec4>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b01      	cmp	r3, #1
 800a288:	d03e      	beq.n	800a308 <UART_SetConfig+0xec0>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d038      	beq.n	800a304 <UART_SetConfig+0xebc>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b03      	cmp	r3, #3
 800a298:	d032      	beq.n	800a300 <UART_SetConfig+0xeb8>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d02c      	beq.n	800a2fc <UART_SetConfig+0xeb4>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d026      	beq.n	800a2f8 <UART_SetConfig+0xeb0>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	d020      	beq.n	800a2f4 <UART_SetConfig+0xeac>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b07      	cmp	r3, #7
 800a2b8:	d01a      	beq.n	800a2f0 <UART_SetConfig+0xea8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	d014      	beq.n	800a2ec <UART_SetConfig+0xea4>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b09      	cmp	r3, #9
 800a2c8:	d00e      	beq.n	800a2e8 <UART_SetConfig+0xea0>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b0a      	cmp	r3, #10
 800a2d0:	d008      	beq.n	800a2e4 <UART_SetConfig+0xe9c>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b0b      	cmp	r3, #11
 800a2d8:	d102      	bne.n	800a2e0 <UART_SetConfig+0xe98>
 800a2da:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a2de:	e016      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2e0:	4b80      	ldr	r3, [pc, #512]	; (800a4e4 <UART_SetConfig+0x109c>)
 800a2e2:	e014      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2e4:	4b80      	ldr	r3, [pc, #512]	; (800a4e8 <UART_SetConfig+0x10a0>)
 800a2e6:	e012      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2e8:	4b80      	ldr	r3, [pc, #512]	; (800a4ec <UART_SetConfig+0x10a4>)
 800a2ea:	e010      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2ec:	4b80      	ldr	r3, [pc, #512]	; (800a4f0 <UART_SetConfig+0x10a8>)
 800a2ee:	e00e      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2f0:	4b80      	ldr	r3, [pc, #512]	; (800a4f4 <UART_SetConfig+0x10ac>)
 800a2f2:	e00c      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2f4:	4b80      	ldr	r3, [pc, #512]	; (800a4f8 <UART_SetConfig+0x10b0>)
 800a2f6:	e00a      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2f8:	4b80      	ldr	r3, [pc, #512]	; (800a4fc <UART_SetConfig+0x10b4>)
 800a2fa:	e008      	b.n	800a30e <UART_SetConfig+0xec6>
 800a2fc:	4b80      	ldr	r3, [pc, #512]	; (800a500 <UART_SetConfig+0x10b8>)
 800a2fe:	e006      	b.n	800a30e <UART_SetConfig+0xec6>
 800a300:	4b80      	ldr	r3, [pc, #512]	; (800a504 <UART_SetConfig+0x10bc>)
 800a302:	e004      	b.n	800a30e <UART_SetConfig+0xec6>
 800a304:	4b80      	ldr	r3, [pc, #512]	; (800a508 <UART_SetConfig+0x10c0>)
 800a306:	e002      	b.n	800a30e <UART_SetConfig+0xec6>
 800a308:	4b80      	ldr	r3, [pc, #512]	; (800a50c <UART_SetConfig+0x10c4>)
 800a30a:	e000      	b.n	800a30e <UART_SetConfig+0xec6>
 800a30c:	4b75      	ldr	r3, [pc, #468]	; (800a4e4 <UART_SetConfig+0x109c>)
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6852      	ldr	r2, [r2, #4]
 800a312:	0852      	lsrs	r2, r2, #1
 800a314:	441a      	add	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31e:	b29b      	uxth	r3, r3
 800a320:	61fb      	str	r3, [r7, #28]
        break;
 800a322:	e0bd      	b.n	800a4a0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a324:	f7fd fc80 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 800a328:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d044      	beq.n	800a3bc <UART_SetConfig+0xf74>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b01      	cmp	r3, #1
 800a338:	d03e      	beq.n	800a3b8 <UART_SetConfig+0xf70>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d038      	beq.n	800a3b4 <UART_SetConfig+0xf6c>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b03      	cmp	r3, #3
 800a348:	d032      	beq.n	800a3b0 <UART_SetConfig+0xf68>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d02c      	beq.n	800a3ac <UART_SetConfig+0xf64>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b05      	cmp	r3, #5
 800a358:	d026      	beq.n	800a3a8 <UART_SetConfig+0xf60>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b06      	cmp	r3, #6
 800a360:	d020      	beq.n	800a3a4 <UART_SetConfig+0xf5c>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b07      	cmp	r3, #7
 800a368:	d01a      	beq.n	800a3a0 <UART_SetConfig+0xf58>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d014      	beq.n	800a39c <UART_SetConfig+0xf54>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b09      	cmp	r3, #9
 800a378:	d00e      	beq.n	800a398 <UART_SetConfig+0xf50>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2b0a      	cmp	r3, #10
 800a380:	d008      	beq.n	800a394 <UART_SetConfig+0xf4c>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b0b      	cmp	r3, #11
 800a388:	d102      	bne.n	800a390 <UART_SetConfig+0xf48>
 800a38a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a38e:	e016      	b.n	800a3be <UART_SetConfig+0xf76>
 800a390:	2301      	movs	r3, #1
 800a392:	e014      	b.n	800a3be <UART_SetConfig+0xf76>
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	e012      	b.n	800a3be <UART_SetConfig+0xf76>
 800a398:	2340      	movs	r3, #64	; 0x40
 800a39a:	e010      	b.n	800a3be <UART_SetConfig+0xf76>
 800a39c:	2320      	movs	r3, #32
 800a39e:	e00e      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	e00c      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	e00a      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3a8:	230a      	movs	r3, #10
 800a3aa:	e008      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	e006      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3b0:	2306      	movs	r3, #6
 800a3b2:	e004      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	e002      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e000      	b.n	800a3be <UART_SetConfig+0xf76>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	085b      	lsrs	r3, r3, #1
 800a3ca:	441a      	add	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	61fb      	str	r3, [r7, #28]
        break;
 800a3d8:	e062      	b.n	800a4a0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d04e      	beq.n	800a480 <UART_SetConfig+0x1038>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d047      	beq.n	800a47a <UART_SetConfig+0x1032>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d040      	beq.n	800a474 <UART_SetConfig+0x102c>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d039      	beq.n	800a46e <UART_SetConfig+0x1026>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d032      	beq.n	800a468 <UART_SetConfig+0x1020>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b05      	cmp	r3, #5
 800a408:	d02b      	beq.n	800a462 <UART_SetConfig+0x101a>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d024      	beq.n	800a45c <UART_SetConfig+0x1014>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b07      	cmp	r3, #7
 800a418:	d01d      	beq.n	800a456 <UART_SetConfig+0x100e>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d016      	beq.n	800a450 <UART_SetConfig+0x1008>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	2b09      	cmp	r3, #9
 800a428:	d00f      	beq.n	800a44a <UART_SetConfig+0x1002>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b0a      	cmp	r3, #10
 800a430:	d008      	beq.n	800a444 <UART_SetConfig+0xffc>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b0b      	cmp	r3, #11
 800a438:	d101      	bne.n	800a43e <UART_SetConfig+0xff6>
 800a43a:	2380      	movs	r3, #128	; 0x80
 800a43c:	e022      	b.n	800a484 <UART_SetConfig+0x103c>
 800a43e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a442:	e01f      	b.n	800a484 <UART_SetConfig+0x103c>
 800a444:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a448:	e01c      	b.n	800a484 <UART_SetConfig+0x103c>
 800a44a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a44e:	e019      	b.n	800a484 <UART_SetConfig+0x103c>
 800a450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a454:	e016      	b.n	800a484 <UART_SetConfig+0x103c>
 800a456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a45a:	e013      	b.n	800a484 <UART_SetConfig+0x103c>
 800a45c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a460:	e010      	b.n	800a484 <UART_SetConfig+0x103c>
 800a462:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a466:	e00d      	b.n	800a484 <UART_SetConfig+0x103c>
 800a468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a46c:	e00a      	b.n	800a484 <UART_SetConfig+0x103c>
 800a46e:	f241 5355 	movw	r3, #5461	; 0x1555
 800a472:	e007      	b.n	800a484 <UART_SetConfig+0x103c>
 800a474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a478:	e004      	b.n	800a484 <UART_SetConfig+0x103c>
 800a47a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a47e:	e001      	b.n	800a484 <UART_SetConfig+0x103c>
 800a480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6852      	ldr	r2, [r2, #4]
 800a488:	0852      	lsrs	r2, r2, #1
 800a48a:	441a      	add	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	fbb2 f3f3 	udiv	r3, r2, r3
 800a494:	b29b      	uxth	r3, r3
 800a496:	61fb      	str	r3, [r7, #28]
        break;
 800a498:	e002      	b.n	800a4a0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	76fb      	strb	r3, [r7, #27]
        break;
 800a49e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	2b0f      	cmp	r3, #15
 800a4a4:	d908      	bls.n	800a4b8 <UART_SetConfig+0x1070>
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ac:	d204      	bcs.n	800a4b8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69fa      	ldr	r2, [r7, #28]
 800a4b4:	60da      	str	r2, [r3, #12]
 800a4b6:	e001      	b.n	800a4bc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a4d8:	7efb      	ldrb	r3, [r7, #27]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3728      	adds	r7, #40	; 0x28
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a4e4:	00f42400 	.word	0x00f42400
 800a4e8:	0001e848 	.word	0x0001e848
 800a4ec:	0003d090 	.word	0x0003d090
 800a4f0:	0007a120 	.word	0x0007a120
 800a4f4:	000f4240 	.word	0x000f4240
 800a4f8:	00145855 	.word	0x00145855
 800a4fc:	00186a00 	.word	0x00186a00
 800a500:	001e8480 	.word	0x001e8480
 800a504:	0028b0aa 	.word	0x0028b0aa
 800a508:	003d0900 	.word	0x003d0900
 800a50c:	007a1200 	.word	0x007a1200

0800a510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00a      	beq.n	800a57e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01a      	beq.n	800a626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a60e:	d10a      	bne.n	800a626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	605a      	str	r2, [r3, #4]
  }
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af02      	add	r7, sp, #8
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a664:	f7fb f820 	bl	80056a8 <HAL_GetTick>
 800a668:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b08      	cmp	r3, #8
 800a676:	d10e      	bne.n	800a696 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f82c 	bl	800a6e4 <UART_WaitOnFlagUntilTimeout>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e022      	b.n	800a6dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d10e      	bne.n	800a6c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f816 	bl	800a6e4 <UART_WaitOnFlagUntilTimeout>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e00c      	b.n	800a6dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f4:	e062      	b.n	800a7bc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d05e      	beq.n	800a7bc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6fe:	f7fa ffd3 	bl	80056a8 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d302      	bcc.n	800a714 <UART_WaitOnFlagUntilTimeout+0x30>
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d11d      	bne.n	800a750 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a722:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689a      	ldr	r2, [r3, #8]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e045      	b.n	800a7dc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0304 	and.w	r3, r3, #4
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d02e      	beq.n	800a7bc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a76c:	d126      	bne.n	800a7bc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a776:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a786:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0201 	bic.w	r2, r2, #1
 800a796:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e00f      	b.n	800a7dc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69da      	ldr	r2, [r3, #28]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d08d      	beq.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6812      	ldr	r2, [r2, #0]
 800a806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a80a:	f023 0301 	bic.w	r3, r3, #1
 800a80e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7fe fdf3 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a86c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7f6 fd55 	bl	800132c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d101      	bne.n	800a8dc <HAL_UARTEx_DisableFifoMode+0x16>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e027      	b.n	800a92c <HAL_UARTEx_DisableFifoMode+0x66>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2224      	movs	r2, #36	; 0x24
 800a8e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0201 	bic.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a90a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e02d      	b.n	800a9ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2224      	movs	r2, #36	; 0x24
 800a95c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0201 	bic.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	430a      	orrs	r2, r1
 800a98a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f84f 	bl	800aa30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d101      	bne.n	800a9cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e02d      	b.n	800aa28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2224      	movs	r2, #36	; 0x24
 800a9d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f022 0201 	bic.w	r2, r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f811 	bl	800aa30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b089      	sub	sp, #36	; 0x24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aa38:	4a2f      	ldr	r2, [pc, #188]	; (800aaf8 <UARTEx_SetNbDataToProcess+0xc8>)
 800aa3a:	f107 0314 	add.w	r3, r7, #20
 800aa3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aa46:	4a2d      	ldr	r2, [pc, #180]	; (800aafc <UARTEx_SetNbDataToProcess+0xcc>)
 800aa48:	f107 030c 	add.w	r3, r7, #12
 800aa4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d108      	bne.n	800aa6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa6c:	e03d      	b.n	800aaea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa6e:	2308      	movs	r3, #8
 800aa70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa72:	2308      	movs	r3, #8
 800aa74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	0e5b      	lsrs	r3, r3, #25
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	f003 0307 	and.w	r3, r3, #7
 800aa84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	0f5b      	lsrs	r3, r3, #29
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0307 	and.w	r3, r3, #7
 800aa94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa96:	7fbb      	ldrb	r3, [r7, #30]
 800aa98:	7f3a      	ldrb	r2, [r7, #28]
 800aa9a:	f107 0120 	add.w	r1, r7, #32
 800aa9e:	440a      	add	r2, r1
 800aaa0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aaa4:	fb02 f303 	mul.w	r3, r2, r3
 800aaa8:	7f3a      	ldrb	r2, [r7, #28]
 800aaaa:	f107 0120 	add.w	r1, r7, #32
 800aaae:	440a      	add	r2, r1
 800aab0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aab4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aac0:	7ffb      	ldrb	r3, [r7, #31]
 800aac2:	7f7a      	ldrb	r2, [r7, #29]
 800aac4:	f107 0120 	add.w	r1, r7, #32
 800aac8:	440a      	add	r2, r1
 800aaca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aace:	fb02 f303 	mul.w	r3, r2, r3
 800aad2:	7f7a      	ldrb	r2, [r7, #29]
 800aad4:	f107 0120 	add.w	r1, r7, #32
 800aad8:	440a      	add	r2, r1
 800aada:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aade:	fb93 f3f2 	sdiv	r3, r3, r2
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaea:	bf00      	nop
 800aaec:	3724      	adds	r7, #36	; 0x24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	0800de2c 	.word	0x0800de2c
 800aafc:	0800de34 	.word	0x0800de34

0800ab00 <MX_MEMS_Init>:
#include "iks01a2_motion_sensors.h"

extern IKS01A2_MOTION_SENSOR_Axes_t accelero_val;

void MX_MEMS_Init(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SV */ 
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800ab04:	2102      	movs	r1, #2
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7fa f9e2 	bl	8004ed0 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800ab0c:	2102      	movs	r1, #2
 800ab0e:	2000      	movs	r0, #0
 800ab10:	f7fa fad4 	bl	80050bc <IKS01A2_MOTION_SENSOR_Enable>
  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN MEMS_Init_PostTreatment */
  
  /* USER CODE END MEMS_Init_PostTreatment */
}
 800ab14:	bf00      	nop
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <MX_MEMS_Process>:
/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */
  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &accelero_val);
 800ab1c:	4a03      	ldr	r2, [pc, #12]	; (800ab2c <MX_MEMS_Process+0x14>)
 800ab1e:	2102      	movs	r1, #2
 800ab20:	2000      	movs	r0, #0
 800ab22:	f7fa fb0d 	bl	8005140 <IKS01A2_MOTION_SENSOR_GetAxes>
  /* USER CODE END MEMS_Process_PreTreatment */

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  
  /* USER CODE END MEMS_Process_PostTreatment */
}
 800ab26:	bf00      	nop
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000340 	.word	0x20000340

0800ab30 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	2218      	movs	r2, #24
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 ff98 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab48:	233f      	movs	r3, #63	; 0x3f
 800ab4a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ab4c:	2381      	movs	r3, #129	; 0x81
 800ab4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ab50:	1dfb      	adds	r3, r7, #7
 800ab52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ab54:	2301      	movs	r3, #1
 800ab56:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 fb7a 	bl	800c258 <hci_send_req>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da01      	bge.n	800ab6e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ab6a:	23ff      	movs	r3, #255	; 0xff
 800ab6c:	e005      	b.n	800ab7a <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	e000      	b.n	800ab7a <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800ab82:	b5b0      	push	{r4, r5, r7, lr}
 800ab84:	b0ce      	sub	sp, #312	; 0x138
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	4605      	mov	r5, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	1dfb      	adds	r3, r7, #7
 800ab92:	462a      	mov	r2, r5
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	1d3b      	adds	r3, r7, #4
 800ab98:	4622      	mov	r2, r4
 800ab9a:	801a      	strh	r2, [r3, #0]
 800ab9c:	1cbb      	adds	r3, r7, #2
 800ab9e:	4602      	mov	r2, r0
 800aba0:	801a      	strh	r2, [r3, #0]
 800aba2:	1dbb      	adds	r3, r7, #6
 800aba4:	460a      	mov	r2, r1
 800aba6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800aba8:	f107 0310 	add.w	r3, r7, #16
 800abac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800abb0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800abb4:	3308      	adds	r3, #8
 800abb6:	f107 0210 	add.w	r2, r7, #16
 800abba:	4413      	add	r3, r2
 800abbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800abc0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800abc4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800abc8:	4413      	add	r3, r2
 800abca:	3309      	adds	r3, #9
 800abcc:	f107 0210 	add.w	r2, r7, #16
 800abd0:	4413      	add	r3, r2
 800abd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abd6:	f107 030f 	add.w	r3, r7, #15
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800abe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abe8:	1dfa      	adds	r2, r7, #7
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abf2:	3301      	adds	r3, #1
 800abf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800abf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abfc:	1d3a      	adds	r2, r7, #4
 800abfe:	8812      	ldrh	r2, [r2, #0]
 800ac00:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ac04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac08:	3302      	adds	r3, #2
 800ac0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800ac0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac12:	1cba      	adds	r2, r7, #2
 800ac14:	8812      	ldrh	r2, [r2, #0]
 800ac16:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ac1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac1e:	3302      	adds	r3, #2
 800ac20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800ac24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac28:	1dba      	adds	r2, r7, #6
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ac2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac32:	3301      	adds	r3, #1
 800ac34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800ac38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac3c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ac40:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ac42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac46:	3301      	adds	r3, #1
 800ac48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800ac4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac50:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ac54:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ac56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800ac60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac64:	3308      	adds	r3, #8
 800ac66:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ac6a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fef2 	bl	800ba58 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ac74:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ac78:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800ac82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac86:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ac8a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ac8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac90:	3301      	adds	r3, #1
 800ac92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800ac96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aca0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fed7 	bl	800ba58 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800acaa:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800acae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800acb2:	4413      	add	r3, r2
 800acb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800acb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acbc:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800acc0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800acc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acc6:	3302      	adds	r3, #2
 800acc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800accc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800acd4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800acd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acda:	3302      	adds	r3, #2
 800acdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ace0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ace4:	2218      	movs	r2, #24
 800ace6:	2100      	movs	r1, #0
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fec5 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acee:	233f      	movs	r3, #63	; 0x3f
 800acf0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800acf4:	2383      	movs	r3, #131	; 0x83
 800acf6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acfa:	f107 0310 	add.w	r3, r7, #16
 800acfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad0a:	f107 030f 	add.w	r3, r7, #15
 800ad0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad12:	2301      	movs	r3, #1
 800ad14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ad18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f001 fa9a 	bl	800c258 <hci_send_req>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da01      	bge.n	800ad2e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800ad2a:	23ff      	movs	r3, #255	; 0xff
 800ad2c:	e009      	b.n	800ad42 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800ad2e:	f107 030f 	add.w	r3, r7, #15
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800ad38:	f107 030f 	add.w	r3, r7, #15
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	e000      	b.n	800ad42 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ad4c <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b0cc      	sub	sp, #304	; 0x130
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4602      	mov	r2, r0
 800ad54:	1dfb      	adds	r3, r7, #7
 800ad56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ad58:	f107 0310 	add.w	r3, r7, #16
 800ad5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad60:	f107 030f 	add.w	r3, r7, #15
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800ad6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad72:	1dfa      	adds	r2, r7, #7
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad86:	2218      	movs	r2, #24
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fe74 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad90:	233f      	movs	r3, #63	; 0x3f
 800ad92:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ad96:	2385      	movs	r3, #133	; 0x85
 800ad98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad9c:	f107 0310 	add.w	r3, r7, #16
 800ada0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ada4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800adac:	f107 030f 	add.w	r3, r7, #15
 800adb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800adb4:	2301      	movs	r3, #1
 800adb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800adba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fa49 	bl	800c258 <hci_send_req>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da01      	bge.n	800add0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800adcc:	23ff      	movs	r3, #255	; 0xff
 800adce:	e009      	b.n	800ade4 <aci_gap_set_io_capability+0x98>
  if (status) 
 800add0:	f107 030f 	add.w	r3, r7, #15
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800adda:	f107 030f 	add.w	r3, r7, #15
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	e000      	b.n	800ade4 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800adee:	b5b0      	push	{r4, r5, r7, lr}
 800adf0:	b0cc      	sub	sp, #304	; 0x130
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	4605      	mov	r5, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	4610      	mov	r0, r2
 800adfa:	4619      	mov	r1, r3
 800adfc:	1dfb      	adds	r3, r7, #7
 800adfe:	462a      	mov	r2, r5
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	1dbb      	adds	r3, r7, #6
 800ae04:	4622      	mov	r2, r4
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	1d7b      	adds	r3, r7, #5
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	701a      	strb	r2, [r3, #0]
 800ae0e:	1d3b      	adds	r3, r7, #4
 800ae10:	460a      	mov	r2, r1
 800ae12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ae14:	f107 0310 	add.w	r3, r7, #16
 800ae18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae1c:	f107 030f 	add.w	r3, r7, #15
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800ae2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae2e:	1dfa      	adds	r2, r7, #7
 800ae30:	7812      	ldrb	r2, [r2, #0]
 800ae32:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae38:	3301      	adds	r3, #1
 800ae3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ae3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae42:	1dba      	adds	r2, r7, #6
 800ae44:	7812      	ldrb	r2, [r2, #0]
 800ae46:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ae48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ae52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae56:	1d7a      	adds	r2, r7, #5
 800ae58:	7812      	ldrb	r2, [r2, #0]
 800ae5a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ae5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae60:	3301      	adds	r3, #1
 800ae62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ae66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae6a:	1d3a      	adds	r2, r7, #4
 800ae6c:	7812      	ldrb	r2, [r2, #0]
 800ae6e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ae70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae74:	3301      	adds	r3, #1
 800ae76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ae7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ae82:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ae84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae88:	3301      	adds	r3, #1
 800ae8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ae8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae92:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ae96:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ae98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800aea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aea6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aeaa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aeac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800aeb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800aebe:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800aec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aec6:	3304      	adds	r3, #4
 800aec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800aecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aed4:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800aed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeda:	3301      	adds	r3, #1
 800aedc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aee0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aee4:	2218      	movs	r2, #24
 800aee6:	2100      	movs	r1, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fdc5 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aeee:	233f      	movs	r3, #63	; 0x3f
 800aef0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800aef4:	2386      	movs	r3, #134	; 0x86
 800aef6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aefa:	f107 0310 	add.w	r3, r7, #16
 800aefe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af0a:	f107 030f 	add.w	r3, r7, #15
 800af0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af1c:	2100      	movs	r1, #0
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 f99a 	bl	800c258 <hci_send_req>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	da01      	bge.n	800af2e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800af2a:	23ff      	movs	r3, #255	; 0xff
 800af2c:	e009      	b.n	800af42 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800af2e:	f107 030f 	add.w	r3, r7, #15
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800af38:	f107 030f 	add.w	r3, r7, #15
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	e000      	b.n	800af42 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af48:	46bd      	mov	sp, r7
 800af4a:	bdb0      	pop	{r4, r5, r7, pc}

0800af4c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800af4c:	b590      	push	{r4, r7, lr}
 800af4e:	b0cd      	sub	sp, #308	; 0x134
 800af50:	af00      	add	r7, sp, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	4611      	mov	r1, r2
 800af58:	463a      	mov	r2, r7
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	1dfb      	adds	r3, r7, #7
 800af5e:	4622      	mov	r2, r4
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	1dbb      	adds	r3, r7, #6
 800af64:	4602      	mov	r2, r0
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	1d7b      	adds	r3, r7, #5
 800af6a:	460a      	mov	r2, r1
 800af6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800af6e:	f107 0310 	add.w	r3, r7, #16
 800af72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800af76:	f107 0308 	add.w	r3, r7, #8
 800af7a:	2207      	movs	r2, #7
 800af7c:	2100      	movs	r1, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fd7a 	bl	800ba78 <Osal_MemSet>
  int index_input = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800af8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af8e:	1dfa      	adds	r2, r7, #7
 800af90:	7812      	ldrb	r2, [r2, #0]
 800af92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af98:	3301      	adds	r3, #1
 800af9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800af9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afa2:	1dba      	adds	r2, r7, #6
 800afa4:	7812      	ldrb	r2, [r2, #0]
 800afa6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800afa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afac:	3301      	adds	r3, #1
 800afae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800afb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afb6:	1d7a      	adds	r2, r7, #5
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800afbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afc0:	3301      	adds	r3, #1
 800afc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afca:	2218      	movs	r2, #24
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 fd52 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afd4:	233f      	movs	r3, #63	; 0x3f
 800afd6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800afda:	238a      	movs	r3, #138	; 0x8a
 800afdc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800afe0:	f107 0310 	add.w	r3, r7, #16
 800afe4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800afe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800aff0:	f107 0308 	add.w	r3, r7, #8
 800aff4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800aff8:	2307      	movs	r3, #7
 800affa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800affe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b002:	2100      	movs	r1, #0
 800b004:	4618      	mov	r0, r3
 800b006:	f001 f927 	bl	800c258 <hci_send_req>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da01      	bge.n	800b014 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800b010:	23ff      	movs	r3, #255	; 0xff
 800b012:	e021      	b.n	800b058 <aci_gap_init+0x10c>
  if (resp.Status) 
 800b014:	f107 0308 	add.w	r3, r7, #8
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <aci_gap_init+0xda>
  {
    return resp.Status;
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	e018      	b.n	800b058 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b026:	f107 0308 	add.w	r3, r7, #8
 800b02a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b02e:	b29a      	uxth	r2, r3
 800b030:	463b      	mov	r3, r7
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b044:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b054:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}

0800b062 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b0cc      	sub	sp, #304	; 0x130
 800b066:	af00      	add	r7, sp, #0
 800b068:	4602      	mov	r2, r0
 800b06a:	463b      	mov	r3, r7
 800b06c:	6019      	str	r1, [r3, #0]
 800b06e:	1dfb      	adds	r3, r7, #7
 800b070:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b072:	f107 0310 	add.w	r3, r7, #16
 800b076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b07a:	f107 030f 	add.w	r3, r7, #15
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800b088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b08c:	1dfa      	adds	r2, r7, #7
 800b08e:	7812      	ldrb	r2, [r2, #0]
 800b090:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b096:	3301      	adds	r3, #1
 800b098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800b09c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0a0:	1c58      	adds	r0, r3, #1
 800b0a2:	1dfb      	adds	r3, r7, #7
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	6819      	ldr	r1, [r3, #0]
 800b0aa:	f000 fcd5 	bl	800ba58 <Osal_MemCpy>
  index_input += AdvDataLen;
 800b0ae:	1dfb      	adds	r3, r7, #7
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0c0:	2218      	movs	r2, #24
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fcd7 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0ca:	233f      	movs	r3, #63	; 0x3f
 800b0cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b0d0:	238e      	movs	r3, #142	; 0x8e
 800b0d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0d6:	f107 0310 	add.w	r3, r7, #16
 800b0da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b0de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b0e6:	f107 030f 	add.w	r3, r7, #15
 800b0ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b0f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f001 f8ac 	bl	800c258 <hci_send_req>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	da01      	bge.n	800b10a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800b106:	23ff      	movs	r3, #255	; 0xff
 800b108:	e009      	b.n	800b11e <aci_gap_update_adv_data+0xbc>
  if (status) 
 800b10a:	f107 030f 	add.w	r3, r7, #15
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <aci_gap_update_adv_data+0xba>
  {
    return status;
 800b114:	f107 030f 	add.w	r3, r7, #15
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	e000      	b.n	800b11e <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	2218      	movs	r2, #24
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fc9c 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b140:	233f      	movs	r3, #63	; 0x3f
 800b142:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b144:	2392      	movs	r3, #146	; 0x92
 800b146:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b148:	1dfb      	adds	r3, r7, #7
 800b14a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b14c:	2301      	movs	r3, #1
 800b14e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b150:	f107 0308 	add.w	r3, r7, #8
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f001 f87e 	bl	800c258 <hci_send_req>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da01      	bge.n	800b166 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b162:	23ff      	movs	r3, #255	; 0xff
 800b164:	e005      	b.n	800b172 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	e000      	b.n	800b172 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b088      	sub	sp, #32
 800b17e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	2218      	movs	r2, #24
 800b18a:	2100      	movs	r1, #0
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fc73 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b192:	233f      	movs	r3, #63	; 0x3f
 800b194:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b196:	f240 1301 	movw	r3, #257	; 0x101
 800b19a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b19c:	1dfb      	adds	r3, r7, #7
 800b19e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b1a4:	f107 0308 	add.w	r3, r7, #8
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f854 	bl	800c258 <hci_send_req>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	da01      	bge.n	800b1ba <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b1b6:	23ff      	movs	r3, #255	; 0xff
 800b1b8:	e005      	b.n	800b1c6 <aci_gatt_init+0x4c>
  if (status) 
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <aci_gatt_init+0x4a>
  {
    return status;
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	e000      	b.n	800b1c6 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800b1ce:	b590      	push	{r4, r7, lr}
 800b1d0:	b0cf      	sub	sp, #316	; 0x13c
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	6001      	str	r1, [r0, #0]
 800b1da:	4610      	mov	r0, r2
 800b1dc:	4619      	mov	r1, r3
 800b1de:	1dfb      	adds	r3, r7, #7
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	1dbb      	adds	r3, r7, #6
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	1d7b      	adds	r3, r7, #5
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b1f0:	f107 0310 	add.w	r3, r7, #16
 800b1f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b1f8:	1dfb      	adds	r3, r7, #7
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d007      	beq.n	800b210 <aci_gatt_add_service+0x42>
 800b200:	1dfb      	adds	r3, r7, #7
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d101      	bne.n	800b20c <aci_gatt_add_service+0x3e>
 800b208:	2311      	movs	r3, #17
 800b20a:	e002      	b.n	800b212 <aci_gatt_add_service+0x44>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e000      	b.n	800b212 <aci_gatt_add_service+0x44>
 800b210:	2303      	movs	r3, #3
 800b212:	f107 0210 	add.w	r2, r7, #16
 800b216:	4413      	add	r3, r2
 800b218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	2203      	movs	r2, #3
 800b222:	2100      	movs	r1, #0
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fc27 	bl	800ba78 <Osal_MemSet>
  int index_input = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800b230:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b234:	1dfa      	adds	r2, r7, #7
 800b236:	7812      	ldrb	r2, [r2, #0]
 800b238:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b23e:	3301      	adds	r3, #1
 800b240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800b244:	1dfb      	adds	r3, r7, #7
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d002      	beq.n	800b252 <aci_gatt_add_service+0x84>
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d004      	beq.n	800b25a <aci_gatt_add_service+0x8c>
 800b250:	e007      	b.n	800b262 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800b252:	2302      	movs	r3, #2
 800b254:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b258:	e005      	b.n	800b266 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b25a:	2310      	movs	r3, #16
 800b25c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b260:	e001      	b.n	800b266 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b262:	2347      	movs	r3, #71	; 0x47
 800b264:	e05d      	b.n	800b322 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800b266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b26a:	1c58      	adds	r0, r3, #1
 800b26c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b270:	463b      	mov	r3, r7
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	f000 fbf0 	bl	800ba58 <Osal_MemCpy>
    index_input += size;
 800b278:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b27c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b280:	4413      	add	r3, r2
 800b282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800b286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b28a:	1dba      	adds	r2, r7, #6
 800b28c:	7812      	ldrb	r2, [r2, #0]
 800b28e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b294:	3301      	adds	r3, #1
 800b296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800b29a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b29e:	1d7a      	adds	r2, r7, #5
 800b2a0:	7812      	ldrb	r2, [r2, #0]
 800b2a2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b2a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b2ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2b2:	2218      	movs	r2, #24
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fbde 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2bc:	233f      	movs	r3, #63	; 0x3f
 800b2be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b2c2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b2c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b2ca:	f107 0310 	add.w	r3, r7, #16
 800b2ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b2da:	f107 030c 	add.w	r3, r7, #12
 800b2de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b2e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 ffb2 	bl	800c258 <hci_send_req>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	da01      	bge.n	800b2fe <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b2fa:	23ff      	movs	r3, #255	; 0xff
 800b2fc:	e011      	b.n	800b322 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800b2fe:	f107 030c 	add.w	r3, r7, #12
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800b308:	f107 030c 	add.w	r3, r7, #12
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	e008      	b.n	800b322 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b318:	b29a      	uxth	r2, r3
 800b31a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b31e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd90      	pop	{r4, r7, pc}

0800b32c <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800b32c:	b590      	push	{r4, r7, lr}
 800b32e:	b0d1      	sub	sp, #324	; 0x144
 800b330:	af00      	add	r7, sp, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	f107 0108 	add.w	r1, r7, #8
 800b33a:	600a      	str	r2, [r1, #0]
 800b33c:	4619      	mov	r1, r3
 800b33e:	f107 030e 	add.w	r3, r7, #14
 800b342:	4622      	mov	r2, r4
 800b344:	801a      	strh	r2, [r3, #0]
 800b346:	f107 030d 	add.w	r3, r7, #13
 800b34a:	4602      	mov	r2, r0
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	1dbb      	adds	r3, r7, #6
 800b350:	460a      	mov	r2, r1
 800b352:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b354:	f107 0318 	add.w	r3, r7, #24
 800b358:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b35c:	f107 030d 	add.w	r3, r7, #13
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d008      	beq.n	800b378 <aci_gatt_add_char+0x4c>
 800b366:	f107 030d 	add.w	r3, r7, #13
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d101      	bne.n	800b374 <aci_gatt_add_char+0x48>
 800b370:	2313      	movs	r3, #19
 800b372:	e002      	b.n	800b37a <aci_gatt_add_char+0x4e>
 800b374:	2303      	movs	r3, #3
 800b376:	e000      	b.n	800b37a <aci_gatt_add_char+0x4e>
 800b378:	2305      	movs	r3, #5
 800b37a:	f107 0218 	add.w	r2, r7, #24
 800b37e:	4413      	add	r3, r2
 800b380:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b384:	f107 0314 	add.w	r3, r7, #20
 800b388:	2203      	movs	r2, #3
 800b38a:	2100      	movs	r1, #0
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fb73 	bl	800ba78 <Osal_MemSet>
  int index_input = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b398:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b39c:	f107 020e 	add.w	r2, r7, #14
 800b3a0:	8812      	ldrh	r2, [r2, #0]
 800b3a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b3a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800b3ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b3b2:	f107 020d 	add.w	r2, r7, #13
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b3ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3be:	3301      	adds	r3, #1
 800b3c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800b3c4:	f107 030d 	add.w	r3, r7, #13
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d002      	beq.n	800b3d4 <aci_gatt_add_char+0xa8>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d004      	beq.n	800b3dc <aci_gatt_add_char+0xb0>
 800b3d2:	e007      	b.n	800b3e4 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b3da:	e005      	b.n	800b3e8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b3e2:	e001      	b.n	800b3e8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b3e4:	2347      	movs	r3, #71	; 0x47
 800b3e6:	e086      	b.n	800b4f6 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800b3e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b3ec:	1cd8      	adds	r0, r3, #3
 800b3ee:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	f000 fb2e 	bl	800ba58 <Osal_MemCpy>
    index_input += size;
 800b3fc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b400:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b404:	4413      	add	r3, r2
 800b406:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800b40a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b40e:	1dba      	adds	r2, r7, #6
 800b410:	8812      	ldrh	r2, [r2, #0]
 800b412:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b414:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b418:	3302      	adds	r3, #2
 800b41a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800b41e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b422:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b426:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b428:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b42c:	3301      	adds	r3, #1
 800b42e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800b432:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b436:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b43a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b43c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b440:	3301      	adds	r3, #1
 800b442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800b446:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b44a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b44e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b454:	3301      	adds	r3, #1
 800b456:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800b45a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b45e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b462:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b464:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b468:	3301      	adds	r3, #1
 800b46a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800b46e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b472:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b476:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b478:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b47c:	3301      	adds	r3, #1
 800b47e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b482:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b486:	2218      	movs	r2, #24
 800b488:	2100      	movs	r1, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 faf4 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b490:	233f      	movs	r3, #63	; 0x3f
 800b492:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b496:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b49a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b49e:	f107 0318 	add.w	r3, r7, #24
 800b4a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b4a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b4aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b4ae:	f107 0314 	add.w	r3, r7, #20
 800b4b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b4bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fec8 	bl	800c258 <hci_send_req>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	da01      	bge.n	800b4d2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800b4ce:	23ff      	movs	r3, #255	; 0xff
 800b4d0:	e011      	b.n	800b4f6 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b4d2:	f107 0314 	add.w	r3, r7, #20
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b4dc:	f107 0314 	add.w	r3, r7, #20
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	e008      	b.n	800b4f6 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b4e4:	f107 0314 	add.w	r3, r7, #20
 800b4e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b4f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd90      	pop	{r4, r7, pc}

0800b500 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b500:	b5b0      	push	{r4, r5, r7, lr}
 800b502:	b0cc      	sub	sp, #304	; 0x130
 800b504:	af00      	add	r7, sp, #0
 800b506:	4605      	mov	r5, r0
 800b508:	460c      	mov	r4, r1
 800b50a:	4610      	mov	r0, r2
 800b50c:	4619      	mov	r1, r3
 800b50e:	1dbb      	adds	r3, r7, #6
 800b510:	462a      	mov	r2, r5
 800b512:	801a      	strh	r2, [r3, #0]
 800b514:	1d3b      	adds	r3, r7, #4
 800b516:	4622      	mov	r2, r4
 800b518:	801a      	strh	r2, [r3, #0]
 800b51a:	1cfb      	adds	r3, r7, #3
 800b51c:	4602      	mov	r2, r0
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	1cbb      	adds	r3, r7, #2
 800b522:	460a      	mov	r2, r1
 800b524:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b52e:	f107 030f 	add.w	r3, r7, #15
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b540:	1dba      	adds	r2, r7, #6
 800b542:	8812      	ldrh	r2, [r2, #0]
 800b544:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b54a:	3302      	adds	r3, #2
 800b54c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b554:	1d3a      	adds	r2, r7, #4
 800b556:	8812      	ldrh	r2, [r2, #0]
 800b558:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b55a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b55e:	3302      	adds	r3, #2
 800b560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b568:	1cfa      	adds	r2, r7, #3
 800b56a:	7812      	ldrb	r2, [r2, #0]
 800b56c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b572:	3301      	adds	r3, #1
 800b574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57c:	1cba      	adds	r2, r7, #2
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b586:	3301      	adds	r3, #1
 800b588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b590:	1d98      	adds	r0, r3, #6
 800b592:	1cbb      	adds	r3, r7, #2
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b59c:	f000 fa5c 	bl	800ba58 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b5a0:	1cbb      	adds	r3, r7, #2
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b5ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5b2:	2218      	movs	r2, #24
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 fa5e 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5bc:	233f      	movs	r3, #63	; 0x3f
 800b5be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b5c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b5c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b5ca:	f107 0310 	add.w	r3, r7, #16
 800b5ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5da:	f107 030f 	add.w	r3, r7, #15
 800b5de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fe32 	bl	800c258 <hci_send_req>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da01      	bge.n	800b5fe <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b5fa:	23ff      	movs	r3, #255	; 0xff
 800b5fc:	e009      	b.n	800b612 <aci_gatt_update_char_value+0x112>
  if (status) 
 800b5fe:	f107 030f 	add.w	r3, r7, #15
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b608:	f107 030f 	add.w	r3, r7, #15
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	e000      	b.n	800b612 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b618:	46bd      	mov	sp, r7
 800b61a:	bdb0      	pop	{r4, r5, r7, pc}

0800b61c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b0cc      	sub	sp, #304	; 0x130
 800b620:	af00      	add	r7, sp, #0
 800b622:	463b      	mov	r3, r7
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	1dfb      	adds	r3, r7, #7
 800b628:	4602      	mov	r2, r0
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	1dbb      	adds	r3, r7, #6
 800b62e:	460a      	mov	r2, r1
 800b630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b632:	f107 0310 	add.w	r3, r7, #16
 800b636:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b63a:	f107 030f 	add.w	r3, r7, #15
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b64c:	1dfa      	adds	r2, r7, #7
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b656:	3301      	adds	r3, #1
 800b658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b65c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b660:	1dba      	adds	r2, r7, #6
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b66a:	3301      	adds	r3, #1
 800b66c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b674:	1c98      	adds	r0, r3, #2
 800b676:	1dbb      	adds	r3, r7, #6
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	463b      	mov	r3, r7
 800b67c:	6819      	ldr	r1, [r3, #0]
 800b67e:	f000 f9eb 	bl	800ba58 <Osal_MemCpy>
  index_input += Length;
 800b682:	1dbb      	adds	r3, r7, #6
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b68a:	4413      	add	r3, r2
 800b68c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b694:	2218      	movs	r2, #24
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f9ed 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b69e:	233f      	movs	r3, #63	; 0x3f
 800b6a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6aa:	f107 0310 	add.w	r3, r7, #16
 800b6ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b6b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b6ba:	f107 030f 	add.w	r3, r7, #15
 800b6be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b6c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fdc2 	bl	800c258 <hci_send_req>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da01      	bge.n	800b6de <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b6da:	23ff      	movs	r3, #255	; 0xff
 800b6dc:	e009      	b.n	800b6f2 <aci_hal_write_config_data+0xd6>
  if (status) 
 800b6de:	f107 030f 	add.w	r3, r7, #15
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b6e8:	f107 030f 	add.w	r3, r7, #15
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	e000      	b.n	800b6f2 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b0cc      	sub	sp, #304	; 0x130
 800b700:	af00      	add	r7, sp, #0
 800b702:	4602      	mov	r2, r0
 800b704:	1dfb      	adds	r3, r7, #7
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	1dbb      	adds	r3, r7, #6
 800b70a:	460a      	mov	r2, r1
 800b70c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b70e:	f107 0310 	add.w	r3, r7, #16
 800b712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b716:	f107 030f 	add.w	r3, r7, #15
 800b71a:	2200      	movs	r2, #0
 800b71c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b728:	1dfa      	adds	r2, r7, #7
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b72e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b732:	3301      	adds	r3, #1
 800b734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b73c:	1dba      	adds	r2, r7, #6
 800b73e:	7812      	ldrb	r2, [r2, #0]
 800b740:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b746:	3301      	adds	r3, #1
 800b748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b74c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b750:	2218      	movs	r2, #24
 800b752:	2100      	movs	r1, #0
 800b754:	4618      	mov	r0, r3
 800b756:	f000 f98f 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b75a:	233f      	movs	r3, #63	; 0x3f
 800b75c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b760:	230f      	movs	r3, #15
 800b762:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b766:	f107 0310 	add.w	r3, r7, #16
 800b76a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b76e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b772:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b776:	f107 030f 	add.w	r3, r7, #15
 800b77a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b77e:	2301      	movs	r3, #1
 800b780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b788:	2100      	movs	r1, #0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fd64 	bl	800c258 <hci_send_req>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	da01      	bge.n	800b79a <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b796:	23ff      	movs	r3, #255	; 0xff
 800b798:	e009      	b.n	800b7ae <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b79a:	f107 030f 	add.w	r3, r7, #15
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d003      	beq.n	800b7ac <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b7a4:	f107 030f 	add.w	r3, r7, #15
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	e000      	b.n	800b7ae <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b0cc      	sub	sp, #304	; 0x130
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4602      	mov	r2, r0
 800b7c0:	1dbb      	adds	r3, r7, #6
 800b7c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b7c4:	f107 0310 	add.w	r3, r7, #16
 800b7c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b7cc:	f107 030f 	add.w	r3, r7, #15
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b7da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7de:	1dba      	adds	r2, r7, #6
 800b7e0:	8812      	ldrh	r2, [r2, #0]
 800b7e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7e8:	3302      	adds	r3, #2
 800b7ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b7ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7f2:	2218      	movs	r2, #24
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f93e 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b7fc:	233f      	movs	r3, #63	; 0x3f
 800b7fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b802:	2318      	movs	r3, #24
 800b804:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b808:	f107 0310 	add.w	r3, r7, #16
 800b80c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b818:	f107 030f 	add.w	r3, r7, #15
 800b81c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b820:	2301      	movs	r3, #1
 800b822:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b82a:	2100      	movs	r1, #0
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fd13 	bl	800c258 <hci_send_req>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	da01      	bge.n	800b83c <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b838:	23ff      	movs	r3, #255	; 0xff
 800b83a:	e009      	b.n	800b850 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b83c:	f107 030f 	add.w	r3, r7, #15
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b846:	f107 030f 	add.w	r3, r7, #15
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	e000      	b.n	800b850 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b088      	sub	sp, #32
 800b85e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b864:	f107 0308 	add.w	r3, r7, #8
 800b868:	2218      	movs	r2, #24
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 f903 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x03;
 800b872:	2303      	movs	r3, #3
 800b874:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b876:	2303      	movs	r3, #3
 800b878:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b87a:	1dfb      	adds	r3, r7, #7
 800b87c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b882:	f107 0308 	add.w	r3, r7, #8
 800b886:	2100      	movs	r1, #0
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fce5 	bl	800c258 <hci_send_req>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	da01      	bge.n	800b898 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b894:	23ff      	movs	r3, #255	; 0xff
 800b896:	e005      	b.n	800b8a4 <hci_reset+0x4a>
  if (status) 
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <hci_reset+0x48>
  {
    return status;
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	e000      	b.n	800b8a4 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3720      	adds	r7, #32
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b0ce      	sub	sp, #312	; 0x138
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	6019      	str	r1, [r3, #0]
 800b8b8:	1d3b      	adds	r3, r7, #4
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f107 030e 	add.w	r3, r7, #14
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b8c4:	f107 0318 	add.w	r3, r7, #24
 800b8c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b8cc:	f107 0310 	add.w	r3, r7, #16
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f8cf 	bl	800ba78 <Osal_MemSet>
  int index_input = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b8e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8e4:	f107 020e 	add.w	r2, r7, #14
 800b8e8:	8812      	ldrh	r2, [r2, #0]
 800b8ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b8ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b8f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b8fa:	2218      	movs	r2, #24
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f8ba 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x08;
 800b904:	2308      	movs	r3, #8
 800b906:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b90a:	2330      	movs	r3, #48	; 0x30
 800b90c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b910:	f107 0318 	add.w	r3, r7, #24
 800b914:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b918:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b91c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b920:	f107 0310 	add.w	r3, r7, #16
 800b924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b928:	2305      	movs	r3, #5
 800b92a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b92e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b932:	2100      	movs	r1, #0
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fc8f 	bl	800c258 <hci_send_req>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da01      	bge.n	800b944 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800b940:	23ff      	movs	r3, #255	; 0xff
 800b942:	e016      	b.n	800b972 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800b944:	f107 0310 	add.w	r3, r7, #16
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800b94e:	f107 0310 	add.w	r3, r7, #16
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	e00d      	b.n	800b972 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800b956:	f107 0310 	add.w	r3, r7, #16
 800b95a:	78da      	ldrb	r2, [r3, #3]
 800b95c:	f107 0308 	add.w	r3, r7, #8
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	791a      	ldrb	r2, [r3, #4]
 800b96a:	1d3b      	adds	r3, r7, #4
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b0cd      	sub	sp, #308	; 0x134
 800b980:	af00      	add	r7, sp, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	1dfb      	adds	r3, r7, #7
 800b98a:	4622      	mov	r2, r4
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	1dbb      	adds	r3, r7, #6
 800b990:	4602      	mov	r2, r0
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	1d7b      	adds	r3, r7, #5
 800b996:	460a      	mov	r2, r1
 800b998:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b99a:	f107 0310 	add.w	r3, r7, #16
 800b99e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b9a2:	f107 030f 	add.w	r3, r7, #15
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800b9b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9b4:	1dfa      	adds	r2, r7, #7
 800b9b6:	7812      	ldrb	r2, [r2, #0]
 800b9b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b9ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9be:	3301      	adds	r3, #1
 800b9c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800b9c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9c8:	1dba      	adds	r2, r7, #6
 800b9ca:	7812      	ldrb	r2, [r2, #0]
 800b9cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b9ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800b9d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9dc:	1d7a      	adds	r2, r7, #5
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b9e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b9ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9f0:	2218      	movs	r2, #24
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 f83f 	bl	800ba78 <Osal_MemSet>
  rq.ogf = 0x08;
 800b9fa:	2308      	movs	r3, #8
 800b9fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ba00:	2331      	movs	r3, #49	; 0x31
 800ba02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ba06:	f107 0310 	add.w	r3, r7, #16
 800ba0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ba0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ba16:	f107 030f 	add.w	r3, r7, #15
 800ba1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ba24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fc14 	bl	800c258 <hci_send_req>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da01      	bge.n	800ba3a <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800ba36:	23ff      	movs	r3, #255	; 0xff
 800ba38:	e009      	b.n	800ba4e <hci_le_set_default_phy+0xd2>
  if (status) 
 800ba3a:	f107 030f 	add.w	r3, r7, #15
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <hci_le_set_default_phy+0xd0>
  {
    return status;
 800ba44:	f107 030f 	add.w	r3, r7, #15
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	e000      	b.n	800ba4e <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd90      	pop	{r4, r7, pc}

0800ba58 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f002 f9a9 	bl	800ddc0 <memcpy>
 800ba6e:	4603      	mov	r3, r0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f002 f9a4 	bl	800ddd6 <memset>
 800ba8e:	4603      	mov	r3, r0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08a      	sub	sp, #40	; 0x28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800baa0:	2300      	movs	r3, #0
 800baa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3301      	adds	r3, #1
 800baaa:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2bff      	cmp	r3, #255	; 0xff
 800bab2:	d000      	beq.n	800bab6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bab4:	e04a      	b.n	800bb4c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	3302      	adds	r3, #2
 800baba:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	461a      	mov	r2, r3
 800bac4:	f640 4301 	movw	r3, #3073	; 0xc01
 800bac8:	429a      	cmp	r2, r3
 800baca:	d000      	beq.n	800bace <PeerToPeer_Event_Handler+0x36>
          break;
 800bacc:	e03d      	b.n	800bb4a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	3302      	adds	r3, #2
 800bad2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	461a      	mov	r2, r3
 800badc:	4b1e      	ldr	r3, [pc, #120]	; (800bb58 <PeerToPeer_Event_Handler+0xc0>)
 800bade:	889b      	ldrh	r3, [r3, #4]
 800bae0:	3302      	adds	r3, #2
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d118      	bne.n	800bb18 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	7a1b      	ldrb	r3, [r3, #8]
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800baf8:	2300      	movs	r3, #0
 800bafa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fc09 	bl	800d318 <P2PS_STM_App_Notification>
        break;
 800bb06:	e01f      	b.n	800bb48 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 fc01 	bl	800d318 <P2PS_STM_App_Notification>
        break;
 800bb16:	e017      	b.n	800bb48 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	885b      	ldrh	r3, [r3, #2]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <PeerToPeer_Event_Handler+0xc0>)
 800bb22:	885b      	ldrh	r3, [r3, #2]
 800bb24:	3301      	adds	r3, #1
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d10e      	bne.n	800bb48 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	88db      	ldrh	r3, [r3, #6]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800bb3e:	f107 0308 	add.w	r3, r7, #8
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 fbe8 	bl	800d318 <P2PS_STM_App_Notification>
        break;
 800bb48:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bb4a:	bf00      	nop
  }

  return(return_value);
 800bb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800bb50:	4618      	mov	r0, r3
 800bb52:	3728      	adds	r7, #40	; 0x28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000210 	.word	0x20000210

0800bb5c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800bb62:	484a      	ldr	r0, [pc, #296]	; (800bc8c <P2PS_STM_Init+0x130>)
 800bb64:	f000 f952 	bl	800be0c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800bb68:	238f      	movs	r3, #143	; 0x8f
 800bb6a:	703b      	strb	r3, [r7, #0]
 800bb6c:	23e5      	movs	r3, #229	; 0xe5
 800bb6e:	707b      	strb	r3, [r7, #1]
 800bb70:	23b3      	movs	r3, #179	; 0xb3
 800bb72:	70bb      	strb	r3, [r7, #2]
 800bb74:	23d5      	movs	r3, #213	; 0xd5
 800bb76:	70fb      	strb	r3, [r7, #3]
 800bb78:	232e      	movs	r3, #46	; 0x2e
 800bb7a:	713b      	strb	r3, [r7, #4]
 800bb7c:	237f      	movs	r3, #127	; 0x7f
 800bb7e:	717b      	strb	r3, [r7, #5]
 800bb80:	234a      	movs	r3, #74	; 0x4a
 800bb82:	71bb      	strb	r3, [r7, #6]
 800bb84:	2398      	movs	r3, #152	; 0x98
 800bb86:	71fb      	strb	r3, [r7, #7]
 800bb88:	232a      	movs	r3, #42	; 0x2a
 800bb8a:	723b      	strb	r3, [r7, #8]
 800bb8c:	2348      	movs	r3, #72	; 0x48
 800bb8e:	727b      	strb	r3, [r7, #9]
 800bb90:	237a      	movs	r3, #122	; 0x7a
 800bb92:	72bb      	strb	r3, [r7, #10]
 800bb94:	23cc      	movs	r3, #204	; 0xcc
 800bb96:	72fb      	strb	r3, [r7, #11]
 800bb98:	2340      	movs	r3, #64	; 0x40
 800bb9a:	733b      	strb	r3, [r7, #12]
 800bb9c:	23fe      	movs	r3, #254	; 0xfe
 800bb9e:	737b      	strb	r3, [r7, #13]
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800bba8:	4639      	mov	r1, r7
 800bbaa:	4b39      	ldr	r3, [pc, #228]	; (800bc90 <P2PS_STM_Init+0x134>)
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	2308      	movs	r3, #8
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	2002      	movs	r0, #2
 800bbb4:	f7ff fb0b 	bl	800b1ce <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800bbb8:	2319      	movs	r3, #25
 800bbba:	703b      	strb	r3, [r7, #0]
 800bbbc:	23ed      	movs	r3, #237	; 0xed
 800bbbe:	707b      	strb	r3, [r7, #1]
 800bbc0:	2382      	movs	r3, #130	; 0x82
 800bbc2:	70bb      	strb	r3, [r7, #2]
 800bbc4:	23ae      	movs	r3, #174	; 0xae
 800bbc6:	70fb      	strb	r3, [r7, #3]
 800bbc8:	23ed      	movs	r3, #237	; 0xed
 800bbca:	713b      	strb	r3, [r7, #4]
 800bbcc:	2321      	movs	r3, #33	; 0x21
 800bbce:	717b      	strb	r3, [r7, #5]
 800bbd0:	234c      	movs	r3, #76	; 0x4c
 800bbd2:	71bb      	strb	r3, [r7, #6]
 800bbd4:	239d      	movs	r3, #157	; 0x9d
 800bbd6:	71fb      	strb	r3, [r7, #7]
 800bbd8:	2341      	movs	r3, #65	; 0x41
 800bbda:	723b      	strb	r3, [r7, #8]
 800bbdc:	2345      	movs	r3, #69	; 0x45
 800bbde:	727b      	strb	r3, [r7, #9]
 800bbe0:	2322      	movs	r3, #34	; 0x22
 800bbe2:	72bb      	strb	r3, [r7, #10]
 800bbe4:	238e      	movs	r3, #142	; 0x8e
 800bbe6:	72fb      	strb	r3, [r7, #11]
 800bbe8:	2341      	movs	r3, #65	; 0x41
 800bbea:	733b      	strb	r3, [r7, #12]
 800bbec:	23fe      	movs	r3, #254	; 0xfe
 800bbee:	737b      	strb	r3, [r7, #13]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73bb      	strb	r3, [r7, #14]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bbf8:	4b25      	ldr	r3, [pc, #148]	; (800bc90 <P2PS_STM_Init+0x134>)
 800bbfa:	8818      	ldrh	r0, [r3, #0]
 800bbfc:	463a      	mov	r2, r7
 800bbfe:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <P2PS_STM_Init+0x138>)
 800bc00:	9305      	str	r3, [sp, #20]
 800bc02:	2301      	movs	r3, #1
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	230a      	movs	r3, #10
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	9302      	str	r3, [sp, #8]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9301      	str	r3, [sp, #4]
 800bc12:	2306      	movs	r3, #6
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	2302      	movs	r3, #2
 800bc18:	2102      	movs	r1, #2
 800bc1a:	f7ff fb87 	bl	800b32c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800bc1e:	2319      	movs	r3, #25
 800bc20:	703b      	strb	r3, [r7, #0]
 800bc22:	23ed      	movs	r3, #237	; 0xed
 800bc24:	707b      	strb	r3, [r7, #1]
 800bc26:	2382      	movs	r3, #130	; 0x82
 800bc28:	70bb      	strb	r3, [r7, #2]
 800bc2a:	23ae      	movs	r3, #174	; 0xae
 800bc2c:	70fb      	strb	r3, [r7, #3]
 800bc2e:	23ed      	movs	r3, #237	; 0xed
 800bc30:	713b      	strb	r3, [r7, #4]
 800bc32:	2321      	movs	r3, #33	; 0x21
 800bc34:	717b      	strb	r3, [r7, #5]
 800bc36:	234c      	movs	r3, #76	; 0x4c
 800bc38:	71bb      	strb	r3, [r7, #6]
 800bc3a:	239d      	movs	r3, #157	; 0x9d
 800bc3c:	71fb      	strb	r3, [r7, #7]
 800bc3e:	2341      	movs	r3, #65	; 0x41
 800bc40:	723b      	strb	r3, [r7, #8]
 800bc42:	2345      	movs	r3, #69	; 0x45
 800bc44:	727b      	strb	r3, [r7, #9]
 800bc46:	2322      	movs	r3, #34	; 0x22
 800bc48:	72bb      	strb	r3, [r7, #10]
 800bc4a:	238e      	movs	r3, #142	; 0x8e
 800bc4c:	72fb      	strb	r3, [r7, #11]
 800bc4e:	2342      	movs	r3, #66	; 0x42
 800bc50:	733b      	strb	r3, [r7, #12]
 800bc52:	23fe      	movs	r3, #254	; 0xfe
 800bc54:	737b      	strb	r3, [r7, #13]
 800bc56:	2300      	movs	r3, #0
 800bc58:	73bb      	strb	r3, [r7, #14]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <P2PS_STM_Init+0x134>)
 800bc60:	8818      	ldrh	r0, [r3, #0]
 800bc62:	463a      	mov	r2, r7
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <P2PS_STM_Init+0x13c>)
 800bc66:	9305      	str	r3, [sp, #20]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	230a      	movs	r3, #10
 800bc6e:	9303      	str	r3, [sp, #12]
 800bc70:	2301      	movs	r3, #1
 800bc72:	9302      	str	r3, [sp, #8]
 800bc74:	2300      	movs	r3, #0
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	2310      	movs	r3, #16
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	2102      	movs	r1, #2
 800bc80:	f7ff fb54 	bl	800b32c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800bc84:	bf00      	nop
}
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	0800ba99 	.word	0x0800ba99
 800bc90:	20000210 	.word	0x20000210
 800bc94:	20000212 	.word	0x20000212
 800bc98:	20000214 	.word	0x20000214

0800bc9c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800bca8:	2342      	movs	r3, #66	; 0x42
 800bcaa:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800bcac:	88fb      	ldrh	r3, [r7, #6]
 800bcae:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d000      	beq.n	800bcb8 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800bcb6:	e00c      	b.n	800bcd2 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800bcb8:	4b08      	ldr	r3, [pc, #32]	; (800bcdc <P2PS_STM_App_Update_Char+0x40>)
 800bcba:	8818      	ldrh	r0, [r3, #0]
 800bcbc:	4b07      	ldr	r3, [pc, #28]	; (800bcdc <P2PS_STM_App_Update_Char+0x40>)
 800bcbe:	8899      	ldrh	r1, [r3, #4]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f7ff fc1a 	bl	800b500 <aci_gatt_update_char_value>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd0:	bf00      	nop
  }

  return result;
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20000210 	.word	0x20000210

0800bce0 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bce0:	b480      	push	{r7}
 800bce2:	af00      	add	r7, sp, #0
  return;
 800bce4:	bf00      	nop
}
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bcee:	b480      	push	{r7}
 800bcf0:	af00      	add	r7, sp, #0
  return;
 800bcf2:	bf00      	nop
}
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <DIS_Init>:
__weak void DIS_Init( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
  return;
 800bd00:	bf00      	nop
}
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	af00      	add	r7, sp, #0
  return;
 800bd0e:	bf00      	nop
}
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
  return;
 800bd1c:	bf00      	nop
}
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <HRS_Init>:
__weak void HRS_Init( void )
{
 800bd26:	b480      	push	{r7}
 800bd28:	af00      	add	r7, sp, #0
  return;
 800bd2a:	bf00      	nop
}
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <HTS_Init>:
__weak void HTS_Init( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
  return;
 800bd38:	bf00      	nop
}
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bd42:	b480      	push	{r7}
 800bd44:	af00      	add	r7, sp, #0
  return;
 800bd46:	bf00      	nop
}
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	af00      	add	r7, sp, #0
  return;
 800bd54:	bf00      	nop
}
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <TPS_Init>:
__weak void TPS_Init( void )
{
 800bd5e:	b480      	push	{r7}
 800bd60:	af00      	add	r7, sp, #0
  return;
 800bd62:	bf00      	nop
}
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
  return;
 800bd70:	bf00      	nop
}
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	af00      	add	r7, sp, #0
  return;
 800bd7e:	bf00      	nop
}
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <MESH_Init>:
__weak void MESH_Init( void )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  return;
 800bd8c:	bf00      	nop
}
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bd96:	b480      	push	{r7}
 800bd98:	af00      	add	r7, sp, #0
  return;
 800bd9a:	bf00      	nop
}
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bda8:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <SVCCTL_Init+0x18>)
 800bdaa:	2200      	movs	r2, #0
 800bdac:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bdae:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <SVCCTL_Init+0x1c>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bdb4:	f000 f806 	bl	800bdc4 <SVCCTL_SvcInit>

  return;
 800bdb8:	bf00      	nop
}
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	20000218 	.word	0x20000218
 800bdc0:	20000238 	.word	0x20000238

0800bdc4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
  BLS_Init();
 800bdc8:	f7ff ff8a 	bl	800bce0 <BLS_Init>

  CRS_STM_Init();
 800bdcc:	f7ff ff8f 	bl	800bcee <CRS_STM_Init>

  DIS_Init();
 800bdd0:	f7ff ff94 	bl	800bcfc <DIS_Init>

  EDS_STM_Init();
 800bdd4:	f7ff ff99 	bl	800bd0a <EDS_STM_Init>

  HIDS_Init();
 800bdd8:	f7ff ff9e 	bl	800bd18 <HIDS_Init>

  HRS_Init();
 800bddc:	f7ff ffa3 	bl	800bd26 <HRS_Init>

  HTS_Init();
 800bde0:	f7ff ffa8 	bl	800bd34 <HTS_Init>

  IAS_Init();
 800bde4:	f7ff ffad 	bl	800bd42 <IAS_Init>

  LLS_Init();
 800bde8:	f7ff ffb2 	bl	800bd50 <LLS_Init>

  TPS_Init();
 800bdec:	f7ff ffb7 	bl	800bd5e <TPS_Init>

  MOTENV_STM_Init();
 800bdf0:	f7ff ffbc 	bl	800bd6c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bdf4:	f7ff feb2 	bl	800bb5c <P2PS_STM_Init>

  OTAS_STM_Init();
 800bdf8:	f7ff ffbf 	bl	800bd7a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bdfc:	f7ff ffcb 	bl	800bd96 <BVOPUS_STM_Init>

  MESH_Init();
 800be00:	f7ff ffc2 	bl	800bd88 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800be04:	f000 f8ea 	bl	800bfdc <SVCCTL_InitCustomSvc>
  
  return;
 800be08:	bf00      	nop
}
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800be14:	4b09      	ldr	r3, [pc, #36]	; (800be3c <SVCCTL_RegisterSvcHandler+0x30>)
 800be16:	7f1b      	ldrb	r3, [r3, #28]
 800be18:	4619      	mov	r1, r3
 800be1a:	4a08      	ldr	r2, [pc, #32]	; (800be3c <SVCCTL_RegisterSvcHandler+0x30>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800be22:	4b06      	ldr	r3, [pc, #24]	; (800be3c <SVCCTL_RegisterSvcHandler+0x30>)
 800be24:	7f1b      	ldrb	r3, [r3, #28]
 800be26:	3301      	adds	r3, #1
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <SVCCTL_RegisterSvcHandler+0x30>)
 800be2c:	771a      	strb	r2, [r3, #28]

  return;
 800be2e:	bf00      	nop
}
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	20000218 	.word	0x20000218

0800be40 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3301      	adds	r3, #1
 800be4c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800be4e:	2300      	movs	r3, #0
 800be50:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2bff      	cmp	r3, #255	; 0xff
 800be58:	d000      	beq.n	800be5c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800be5a:	e025      	b.n	800bea8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	3302      	adds	r3, #2
 800be60:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	b29b      	uxth	r3, r3
 800be68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be70:	d000      	beq.n	800be74 <SVCCTL_UserEvtRx+0x34>
          break;
 800be72:	e018      	b.n	800bea6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800be74:	2300      	movs	r3, #0
 800be76:	757b      	strb	r3, [r7, #21]
 800be78:	e00d      	b.n	800be96 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800be7a:	7d7b      	ldrb	r3, [r7, #21]
 800be7c:	4a18      	ldr	r2, [pc, #96]	; (800bee0 <SVCCTL_UserEvtRx+0xa0>)
 800be7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	4798      	blx	r3
 800be86:	4603      	mov	r3, r0
 800be88:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d108      	bne.n	800bea2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800be90:	7d7b      	ldrb	r3, [r7, #21]
 800be92:	3301      	adds	r3, #1
 800be94:	757b      	strb	r3, [r7, #21]
 800be96:	4b12      	ldr	r3, [pc, #72]	; (800bee0 <SVCCTL_UserEvtRx+0xa0>)
 800be98:	7f1b      	ldrb	r3, [r3, #28]
 800be9a:	7d7a      	ldrb	r2, [r7, #21]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d3ec      	bcc.n	800be7a <SVCCTL_UserEvtRx+0x3a>
          break;
 800bea0:	e000      	b.n	800bea4 <SVCCTL_UserEvtRx+0x64>
              break;
 800bea2:	bf00      	nop
          break;
 800bea4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bea6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d009      	beq.n	800bec2 <SVCCTL_UserEvtRx+0x82>
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d00a      	beq.n	800bec8 <SVCCTL_UserEvtRx+0x88>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 ff4e 	bl	800cd58 <SVCCTL_App_Notification>
 800bebc:	4603      	mov	r3, r0
 800bebe:	75bb      	strb	r3, [r7, #22]
      break;
 800bec0:	e008      	b.n	800bed4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bec2:	2301      	movs	r3, #1
 800bec4:	75bb      	strb	r3, [r7, #22]
      break;
 800bec6:	e005      	b.n	800bed4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bec8:	2300      	movs	r3, #0
 800beca:	75bb      	strb	r3, [r7, #22]
      break;
 800becc:	e002      	b.n	800bed4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bece:	2301      	movs	r3, #1
 800bed0:	75bb      	strb	r3, [r7, #22]
      break;
 800bed2:	bf00      	nop
  }

  return (return_status);
 800bed4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20000218 	.word	0x20000218

0800bee4 <Template_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Template_Event_Handler(void *Event)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	; 0x28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  TEMPLATE_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800beec:	2300      	movs	r3, #0
 800beee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3301      	adds	r3, #1
 800bef6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2bff      	cmp	r3, #255	; 0xff
 800befe:	d000      	beq.n	800bf02 <Template_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bf00:	e063      	b.n	800bfca <Template_Event_Handler+0xe6>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	3302      	adds	r3, #2
 800bf06:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f640 4301 	movw	r3, #3073	; 0xc01
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d000      	beq.n	800bf1a <Template_Event_Handler+0x36>
          break;
 800bf18:	e056      	b.n	800bfc8 <Template_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	3302      	adds	r3, #2
 800bf1e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateNotifyServerToClientCharHdle + 2))
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	885b      	ldrh	r3, [r3, #2]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	461a      	mov	r2, r3
 800bf28:	4b2b      	ldr	r3, [pc, #172]	; (800bfd8 <Template_Event_Handler+0xf4>)
 800bf2a:	889b      	ldrh	r3, [r3, #4]
 800bf2c:	3302      	adds	r3, #2
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d118      	bne.n	800bf64 <Template_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800bf32:	2301      	movs	r3, #1
 800bf34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	7a1b      	ldrb	r3, [r3, #8]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d007      	beq.n	800bf54 <Template_Event_Handler+0x70>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_ENABLED_EVT;
 800bf44:	2300      	movs	r3, #0
 800bf46:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bf48:	f107 0308 	add.w	r3, r7, #8
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f001 fa41 	bl	800d3d4 <TEMPLATE_STM_App_Notification>
        break;
 800bf52:	e038      	b.n	800bfc6 <Template_Event_Handler+0xe2>
                Notification.Template_Evt_Opcode = TEMPLATE_STM_NOTIFY_DISABLED_EVT;
 800bf54:	2301      	movs	r3, #1
 800bf56:	723b      	strb	r3, [r7, #8]
                TEMPLATE_STM_App_Notification(&Notification);
 800bf58:	f107 0308 	add.w	r3, r7, #8
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 fa39 	bl	800d3d4 <TEMPLATE_STM_App_Notification>
        break;
 800bf62:	e030      	b.n	800bfc6 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.TemplateWriteClientToServerCharHdle + 1))
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	885b      	ldrh	r3, [r3, #2]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <Template_Event_Handler+0xf4>)
 800bf6e:	885b      	ldrh	r3, [r3, #2]
 800bf70:	3301      	adds	r3, #1
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d10f      	bne.n	800bf96 <Template_Event_Handler+0xb2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_WRITE_EVT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	88db      	ldrh	r3, [r3, #6]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	3308      	adds	r3, #8
 800bf88:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);  
 800bf8a:	f107 0308 	add.w	r3, r7, #8
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 fa20 	bl	800d3d4 <TEMPLATE_STM_App_Notification>
        break;
 800bf94:	e017      	b.n	800bfc6 <Template_Event_Handler+0xe2>
            else if(attribute_modified->Attr_Handle == (aTemplateContext.RebootReqCharHdle + 1))
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	885b      	ldrh	r3, [r3, #2]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <Template_Event_Handler+0xf4>)
 800bfa0:	88db      	ldrh	r3, [r3, #6]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d10e      	bne.n	800bfc6 <Template_Event_Handler+0xe2>
              Notification.Template_Evt_Opcode = TEMPLATE_STM_BOOT_REQUEST_EVT;
 800bfa8:	2304      	movs	r3, #4
 800bfaa:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	88db      	ldrh	r3, [r3, #6]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	3308      	adds	r3, #8
 800bfba:	60fb      	str	r3, [r7, #12]
              TEMPLATE_STM_App_Notification(&Notification);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 fa07 	bl	800d3d4 <TEMPLATE_STM_App_Notification>
        break;
 800bfc6:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bfc8:	bf00      	nop
  }

  return(return_value);
 800bfca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3728      	adds	r7, #40	; 0x28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000023c 	.word	0x2000023c

0800bfdc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b08a      	sub	sp, #40	; 0x28
 800bfe0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Template_Event_Handler);
 800bfe2:	484a      	ldr	r0, [pc, #296]	; (800c10c <SVCCTL_InitCustomSvc+0x130>)
 800bfe4:	f7ff ff12 	bl	800be0c <SVCCTL_RegisterSvcHandler>
     *                                2 for Template Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */

    COPY_TEMPLATE_SERVICE_UUID(uuid16.Char_UUID_128);
 800bfe8:	231b      	movs	r3, #27
 800bfea:	703b      	strb	r3, [r7, #0]
 800bfec:	23c5      	movs	r3, #197	; 0xc5
 800bfee:	707b      	strb	r3, [r7, #1]
 800bff0:	23d5      	movs	r3, #213	; 0xd5
 800bff2:	70bb      	strb	r3, [r7, #2]
 800bff4:	23a5      	movs	r3, #165	; 0xa5
 800bff6:	70fb      	strb	r3, [r7, #3]
 800bff8:	2302      	movs	r3, #2
 800bffa:	713b      	strb	r3, [r7, #4]
 800bffc:	2300      	movs	r3, #0
 800bffe:	717b      	strb	r3, [r7, #5]
 800c000:	23b4      	movs	r3, #180	; 0xb4
 800c002:	71bb      	strb	r3, [r7, #6]
 800c004:	239a      	movs	r3, #154	; 0x9a
 800c006:	71fb      	strb	r3, [r7, #7]
 800c008:	23e1      	movs	r3, #225	; 0xe1
 800c00a:	723b      	strb	r3, [r7, #8]
 800c00c:	2311      	movs	r3, #17
 800c00e:	727b      	strb	r3, [r7, #9]
 800c010:	2301      	movs	r3, #1
 800c012:	72bb      	strb	r3, [r7, #10]
 800c014:	2300      	movs	r3, #0
 800c016:	72fb      	strb	r3, [r7, #11]
 800c018:	2300      	movs	r3, #0
 800c01a:	733b      	strb	r3, [r7, #12]
 800c01c:	2300      	movs	r3, #0
 800c01e:	737b      	strb	r3, [r7, #13]
 800c020:	2300      	movs	r3, #0
 800c022:	73bb      	strb	r3, [r7, #14]
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800c028:	4639      	mov	r1, r7
 800c02a:	4b39      	ldr	r3, [pc, #228]	; (800c110 <SVCCTL_InitCustomSvc+0x134>)
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	2308      	movs	r3, #8
 800c030:	2201      	movs	r2, #1
 800c032:	2002      	movs	r0, #2
 800c034:	f7ff f8cb 	bl	800b1ce <aci_gatt_add_service>
                      &(aTemplateContext.TemplateSvcHdle));

    /**
     *  Add Write Characteristic
     */
    COPY_TEMPLATE_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800c038:	2319      	movs	r3, #25
 800c03a:	703b      	strb	r3, [r7, #0]
 800c03c:	23ed      	movs	r3, #237	; 0xed
 800c03e:	707b      	strb	r3, [r7, #1]
 800c040:	2382      	movs	r3, #130	; 0x82
 800c042:	70bb      	strb	r3, [r7, #2]
 800c044:	23ae      	movs	r3, #174	; 0xae
 800c046:	70fb      	strb	r3, [r7, #3]
 800c048:	23ed      	movs	r3, #237	; 0xed
 800c04a:	713b      	strb	r3, [r7, #4]
 800c04c:	2321      	movs	r3, #33	; 0x21
 800c04e:	717b      	strb	r3, [r7, #5]
 800c050:	234c      	movs	r3, #76	; 0x4c
 800c052:	71bb      	strb	r3, [r7, #6]
 800c054:	239d      	movs	r3, #157	; 0x9d
 800c056:	71fb      	strb	r3, [r7, #7]
 800c058:	2341      	movs	r3, #65	; 0x41
 800c05a:	723b      	strb	r3, [r7, #8]
 800c05c:	2345      	movs	r3, #69	; 0x45
 800c05e:	727b      	strb	r3, [r7, #9]
 800c060:	2322      	movs	r3, #34	; 0x22
 800c062:	72bb      	strb	r3, [r7, #10]
 800c064:	238e      	movs	r3, #142	; 0x8e
 800c066:	72fb      	strb	r3, [r7, #11]
 800c068:	23cc      	movs	r3, #204	; 0xcc
 800c06a:	733b      	strb	r3, [r7, #12]
 800c06c:	23aa      	movs	r3, #170	; 0xaa
 800c06e:	737b      	strb	r3, [r7, #13]
 800c070:	2300      	movs	r3, #0
 800c072:	73bb      	strb	r3, [r7, #14]
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800c078:	4b25      	ldr	r3, [pc, #148]	; (800c110 <SVCCTL_InitCustomSvc+0x134>)
 800c07a:	8818      	ldrh	r0, [r3, #0]
 800c07c:	463a      	mov	r2, r7
 800c07e:	4b25      	ldr	r3, [pc, #148]	; (800c114 <SVCCTL_InitCustomSvc+0x138>)
 800c080:	9305      	str	r3, [sp, #20]
 800c082:	2301      	movs	r3, #1
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	230a      	movs	r3, #10
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	2301      	movs	r3, #1
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	2300      	movs	r3, #0
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	2306      	movs	r3, #6
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	2302      	movs	r3, #2
 800c098:	2102      	movs	r1, #2
 800c09a:	f7ff f947 	bl	800b32c <aci_gatt_add_char>
                      &(aTemplateContext.TemplateWriteClientToServerCharHdle));

    /**
     *   Add Notify Characteristic
     */
    COPY_TEMPLATE_NOTIFY_UUID(uuid16.Char_UUID_128);
 800c09e:	231b      	movs	r3, #27
 800c0a0:	703b      	strb	r3, [r7, #0]
 800c0a2:	23c5      	movs	r3, #197	; 0xc5
 800c0a4:	707b      	strb	r3, [r7, #1]
 800c0a6:	23d5      	movs	r3, #213	; 0xd5
 800c0a8:	70bb      	strb	r3, [r7, #2]
 800c0aa:	23a5      	movs	r3, #165	; 0xa5
 800c0ac:	70fb      	strb	r3, [r7, #3]
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	713b      	strb	r3, [r7, #4]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	717b      	strb	r3, [r7, #5]
 800c0b6:	2336      	movs	r3, #54	; 0x36
 800c0b8:	71bb      	strb	r3, [r7, #6]
 800c0ba:	23ac      	movs	r3, #172	; 0xac
 800c0bc:	71fb      	strb	r3, [r7, #7]
 800c0be:	23e1      	movs	r3, #225	; 0xe1
 800c0c0:	723b      	strb	r3, [r7, #8]
 800c0c2:	2311      	movs	r3, #17
 800c0c4:	727b      	strb	r3, [r7, #9]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	72bb      	strb	r3, [r7, #10]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	72fb      	strb	r3, [r7, #11]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	733b      	strb	r3, [r7, #12]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	737b      	strb	r3, [r7, #13]
 800c0d6:	2304      	movs	r3, #4
 800c0d8:	73bb      	strb	r3, [r7, #14]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aTemplateContext.TemplateSvcHdle,
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <SVCCTL_InitCustomSvc+0x134>)
 800c0e0:	8818      	ldrh	r0, [r3, #0]
 800c0e2:	463a      	mov	r2, r7
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <SVCCTL_InitCustomSvc+0x13c>)
 800c0e6:	9305      	str	r3, [sp, #20]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	230a      	movs	r3, #10
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9302      	str	r3, [sp, #8]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	2102      	movs	r1, #2
 800c100:	f7ff f914 	bl	800b32c <aci_gatt_add_char>
                      GATT_NOTIFY_ATTRIBUTE_WRITE,
                      10,
                      0,
                      &(aTemplateContext.RebootReqCharHdle));
#endif  
  return;
 800c104:	bf00      	nop
}
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	0800bee5 	.word	0x0800bee5
 800c110:	2000023c 	.word	0x2000023c
 800c114:	2000023e 	.word	0x2000023e
 800c118:	20000240 	.word	0x20000240

0800c11c <TEMPLATE_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus TEMPLATE_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af02      	add	r7, sp, #8
 800c122:	4603      	mov	r3, r0
 800c124:	6039      	str	r1, [r7, #0]
 800c126:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800c128:	2342      	movs	r3, #66	; 0x42
 800c12a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d000      	beq.n	800c134 <TEMPLATE_STM_App_Update_Char+0x18>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800c132:	e00c      	b.n	800c14e <TEMPLATE_STM_App_Update_Char+0x32>
     result = aci_gatt_update_char_value(aTemplateContext.TemplateSvcHdle,
 800c134:	4b08      	ldr	r3, [pc, #32]	; (800c158 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800c136:	8818      	ldrh	r0, [r3, #0]
 800c138:	4b07      	ldr	r3, [pc, #28]	; (800c158 <TEMPLATE_STM_App_Update_Char+0x3c>)
 800c13a:	8899      	ldrh	r1, [r3, #4]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	2304      	movs	r3, #4
 800c142:	2200      	movs	r2, #0
 800c144:	f7ff f9dc 	bl	800b500 <aci_gatt_update_char_value>
 800c148:	4603      	mov	r3, r0
 800c14a:	73fb      	strb	r3, [r7, #15]
      break;
 800c14c:	bf00      	nop
  }

  return result;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	2000023c 	.word	0x2000023c

0800c15c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	2121      	movs	r1, #33	; 0x21
 800c174:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800c178:	f000 fa00 	bl	800c57c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	330b      	adds	r3, #11
 800c180:	78db      	ldrb	r3, [r3, #3]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	4a08      	ldr	r2, [pc, #32]	; (800c1bc <hci_init+0x30>)
 800c19c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c19e:	4a08      	ldr	r2, [pc, #32]	; (800c1c0 <hci_init+0x34>)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c1a4:	4806      	ldr	r0, [pc, #24]	; (800c1c0 <hci_init+0x34>)
 800c1a6:	f000 f96f 	bl	800c488 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f8d0 	bl	800c354 <TlInit>

  return;
 800c1b4:	bf00      	nop
}
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	2000045c 	.word	0x2000045c
 800c1c0:	20000434 	.word	0x20000434

0800c1c4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c1ca:	4820      	ldr	r0, [pc, #128]	; (800c24c <hci_user_evt_proc+0x88>)
 800c1cc:	f000 fc92 	bl	800caf4 <LST_is_empty>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d128      	bne.n	800c228 <hci_user_evt_proc+0x64>
 800c1d6:	4b1e      	ldr	r3, [pc, #120]	; (800c250 <hci_user_evt_proc+0x8c>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d024      	beq.n	800c228 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c1de:	f107 030c 	add.w	r3, r7, #12
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4819      	ldr	r0, [pc, #100]	; (800c24c <hci_user_evt_proc+0x88>)
 800c1e6:	f000 fd0c 	bl	800cc02 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c1ea:	4b19      	ldr	r3, [pc, #100]	; (800c250 <hci_user_evt_proc+0x8c>)
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800c1f0:	4b18      	ldr	r3, [pc, #96]	; (800c254 <hci_user_evt_proc+0x90>)
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c1fc:	4b15      	ldr	r3, [pc, #84]	; (800c254 <hci_user_evt_proc+0x90>)
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	1d3a      	adds	r2, r7, #4
 800c202:	4610      	mov	r0, r2
 800c204:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c206:	793a      	ldrb	r2, [r7, #4]
 800c208:	4b11      	ldr	r3, [pc, #68]	; (800c250 <hci_user_evt_proc+0x8c>)
 800c20a:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c20c:	4b10      	ldr	r3, [pc, #64]	; (800c250 <hci_user_evt_proc+0x8c>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fbca 	bl	800c9b0 <TL_MM_EvtDone>
 800c21c:	e004      	b.n	800c228 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	4619      	mov	r1, r3
 800c222:	480a      	ldr	r0, [pc, #40]	; (800c24c <hci_user_evt_proc+0x88>)
 800c224:	f000 fc86 	bl	800cb34 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c228:	4808      	ldr	r0, [pc, #32]	; (800c24c <hci_user_evt_proc+0x88>)
 800c22a:	f000 fc63 	bl	800caf4 <LST_is_empty>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <hci_user_evt_proc+0x80>
 800c234:	4b06      	ldr	r3, [pc, #24]	; (800c250 <hci_user_evt_proc+0x8c>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c23c:	4803      	ldr	r0, [pc, #12]	; (800c24c <hci_user_evt_proc+0x88>)
 800c23e:	f001 f812 	bl	800d266 <hci_notify_asynch_evt>
  }


  return;
 800c242:	bf00      	nop
 800c244:	bf00      	nop
}
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20000248 	.word	0x20000248
 800c250:	20000254 	.word	0x20000254
 800c254:	20000434 	.word	0x20000434

0800c258 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c264:	2000      	movs	r0, #0
 800c266:	f000 f8cb 	bl	800c400 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c26a:	2300      	movs	r3, #0
 800c26c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	885b      	ldrh	r3, [r3, #2]
 800c272:	b21b      	sxth	r3, r3
 800c274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c278:	b21a      	sxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	029b      	lsls	r3, r3, #10
 800c280:	b21b      	sxth	r3, r3
 800c282:	4313      	orrs	r3, r2
 800c284:	b21b      	sxth	r3, r3
 800c286:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	b2d9      	uxtb	r1, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	8bbb      	ldrh	r3, [r7, #28]
 800c294:	4618      	mov	r0, r3
 800c296:	f000 f88d 	bl	800c3b4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c29a:	e04e      	b.n	800c33a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c29c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c2a0:	f000 fff8 	bl	800d294 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c2a4:	e043      	b.n	800c32e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c2a6:	f107 030c 	add.w	r3, r7, #12
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	4828      	ldr	r0, [pc, #160]	; (800c350 <hci_send_req+0xf8>)
 800c2ae:	f000 fca8 	bl	800cc02 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	7a5b      	ldrb	r3, [r3, #9]
 800c2b6:	2b0f      	cmp	r3, #15
 800c2b8:	d114      	bne.n	800c2e4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	330b      	adds	r3, #11
 800c2be:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	885b      	ldrh	r3, [r3, #2]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	8bba      	ldrh	r2, [r7, #28]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d104      	bne.n	800c2d6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	7812      	ldrb	r2, [r2, #0]
 800c2d4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	785b      	ldrb	r3, [r3, #1]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d027      	beq.n	800c32e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	77fb      	strb	r3, [r7, #31]
 800c2e2:	e024      	b.n	800c32e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	330b      	adds	r3, #11
 800c2e8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	8bba      	ldrh	r2, [r7, #28]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d114      	bne.n	800c322 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	7a9b      	ldrb	r3, [r3, #10]
 800c2fc:	3b03      	subs	r3, #3
 800c2fe:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	695a      	ldr	r2, [r3, #20]
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	429a      	cmp	r2, r3
 800c308:	bfa8      	it	ge
 800c30a:	461a      	movge	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6918      	ldr	r0, [r3, #16]
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	1cd9      	adds	r1, r3, #3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	461a      	mov	r2, r3
 800c31e:	f001 fd4f 	bl	800ddc0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c32a:	2301      	movs	r3, #1
 800c32c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c32e:	4808      	ldr	r0, [pc, #32]	; (800c350 <hci_send_req+0xf8>)
 800c330:	f000 fbe0 	bl	800caf4 <LST_is_empty>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0b5      	beq.n	800c2a6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c33a:	7ffb      	ldrb	r3, [r7, #31]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d0ad      	beq.n	800c29c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c340:	2001      	movs	r0, #1
 800c342:	f000 f85d 	bl	800c400 <NotifyCmdStatus>

  return 0;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3720      	adds	r7, #32
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20000454 	.word	0x20000454

0800c354 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c35c:	480f      	ldr	r0, [pc, #60]	; (800c39c <TlInit+0x48>)
 800c35e:	f000 fbb9 	bl	800cad4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c362:	4a0f      	ldr	r2, [pc, #60]	; (800c3a0 <TlInit+0x4c>)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c368:	480e      	ldr	r0, [pc, #56]	; (800c3a4 <TlInit+0x50>)
 800c36a:	f000 fbb3 	bl	800cad4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c36e:	4b0e      	ldr	r3, [pc, #56]	; (800c3a8 <TlInit+0x54>)
 800c370:	2201      	movs	r2, #1
 800c372:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c374:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <TlInit+0x58>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c380:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <TlInit+0x5c>)
 800c382:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <TlInit+0x58>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f107 0208 	add.w	r2, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
  }

  return;
 800c390:	bf00      	nop
 800c392:	bf00      	nop
}
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20000454 	.word	0x20000454
 800c3a0:	20000250 	.word	0x20000250
 800c3a4:	20000248 	.word	0x20000248
 800c3a8:	20000254 	.word	0x20000254
 800c3ac:	20000434 	.word	0x20000434
 800c3b0:	0800c441 	.word	0x0800c441

0800c3b4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	603a      	str	r2, [r7, #0]
 800c3be:	80fb      	strh	r3, [r7, #6]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <SendCmd+0x44>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	88fa      	ldrh	r2, [r7, #6]
 800c3ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c3ce:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <SendCmd+0x44>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	797a      	ldrb	r2, [r7, #5]
 800c3d4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c3d6:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <SendCmd+0x44>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	330c      	adds	r3, #12
 800c3dc:	797a      	ldrb	r2, [r7, #5]
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 fced 	bl	800ddc0 <memcpy>

  hciContext.io.Send(0,0);
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <SendCmd+0x48>)
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	4798      	blx	r3

  return;
 800c3f0:	bf00      	nop
}
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000250 	.word	0x20000250
 800c3fc:	20000434 	.word	0x20000434

0800c400 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d108      	bne.n	800c422 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <NotifyCmdStatus+0x3c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00d      	beq.n	800c434 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c418:	4b08      	ldr	r3, [pc, #32]	; (800c43c <NotifyCmdStatus+0x3c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2000      	movs	r0, #0
 800c41e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c420:	e008      	b.n	800c434 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <NotifyCmdStatus+0x3c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d004      	beq.n	800c434 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c42a:	4b04      	ldr	r3, [pc, #16]	; (800c43c <NotifyCmdStatus+0x3c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2001      	movs	r0, #1
 800c430:	4798      	blx	r3
  return;
 800c432:	bf00      	nop
 800c434:	bf00      	nop
}
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	2000045c 	.word	0x2000045c

0800c440 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	7a5b      	ldrb	r3, [r3, #9]
 800c44c:	2b0f      	cmp	r3, #15
 800c44e:	d003      	beq.n	800c458 <TlEvtReceived+0x18>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7a5b      	ldrb	r3, [r3, #9]
 800c454:	2b0e      	cmp	r3, #14
 800c456:	d107      	bne.n	800c468 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	4809      	ldr	r0, [pc, #36]	; (800c480 <TlEvtReceived+0x40>)
 800c45c:	f000 fb8e 	bl	800cb7c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c460:	2000      	movs	r0, #0
 800c462:	f000 ff0c 	bl	800d27e <hci_cmd_resp_release>
 800c466:	e006      	b.n	800c476 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	4806      	ldr	r0, [pc, #24]	; (800c484 <TlEvtReceived+0x44>)
 800c46c:	f000 fb86 	bl	800cb7c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c470:	4804      	ldr	r0, [pc, #16]	; (800c484 <TlEvtReceived+0x44>)
 800c472:	f000 fef8 	bl	800d266 <hci_notify_asynch_evt>
  }

  return;
 800c476:	bf00      	nop
}
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000454 	.word	0x20000454
 800c484:	20000248 	.word	0x20000248

0800c488 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a05      	ldr	r2, [pc, #20]	; (800c4a8 <hci_register_io_bus+0x20>)
 800c494:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <hci_register_io_bus+0x24>)
 800c49a:	611a      	str	r2, [r3, #16]

  return;
 800c49c:	bf00      	nop
}
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr
 800c4a8:	0800c789 	.word	0x0800c789
 800c4ac:	0800c7f1 	.word	0x0800c7f1

0800c4b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	4a08      	ldr	r2, [pc, #32]	; (800c4e0 <shci_init+0x30>)
 800c4c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c4c2:	4a08      	ldr	r2, [pc, #32]	; (800c4e4 <shci_init+0x34>)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c4c8:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <shci_init+0x34>)
 800c4ca:	f000 f90d 	bl	800c6e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 f890 	bl	800c5f8 <TlInit>

  return;
 800c4d8:	bf00      	nop
}
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	20000480 	.word	0x20000480
 800c4e4:	20000460 	.word	0x20000460

0800c4e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c4ee:	4820      	ldr	r0, [pc, #128]	; (800c570 <shci_user_evt_proc+0x88>)
 800c4f0:	f000 fb00 	bl	800caf4 <LST_is_empty>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d128      	bne.n	800c54c <shci_user_evt_proc+0x64>
 800c4fa:	4b1e      	ldr	r3, [pc, #120]	; (800c574 <shci_user_evt_proc+0x8c>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d024      	beq.n	800c54c <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c502:	f107 030c 	add.w	r3, r7, #12
 800c506:	4619      	mov	r1, r3
 800c508:	4819      	ldr	r0, [pc, #100]	; (800c570 <shci_user_evt_proc+0x88>)
 800c50a:	f000 fb7a 	bl	800cc02 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c50e:	4b19      	ldr	r3, [pc, #100]	; (800c574 <shci_user_evt_proc+0x8c>)
 800c510:	2201      	movs	r2, #1
 800c512:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c514:	4b18      	ldr	r3, [pc, #96]	; (800c578 <shci_user_evt_proc+0x90>)
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d009      	beq.n	800c530 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c520:	4b15      	ldr	r3, [pc, #84]	; (800c578 <shci_user_evt_proc+0x90>)
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	1d3a      	adds	r2, r7, #4
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c52a:	793a      	ldrb	r2, [r7, #4]
 800c52c:	4b11      	ldr	r3, [pc, #68]	; (800c574 <shci_user_evt_proc+0x8c>)
 800c52e:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c530:	4b10      	ldr	r3, [pc, #64]	; (800c574 <shci_user_evt_proc+0x8c>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f000 fa38 	bl	800c9b0 <TL_MM_EvtDone>
 800c540:	e004      	b.n	800c54c <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4619      	mov	r1, r3
 800c546:	480a      	ldr	r0, [pc, #40]	; (800c570 <shci_user_evt_proc+0x88>)
 800c548:	f000 faf4 	bl	800cb34 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c54c:	4808      	ldr	r0, [pc, #32]	; (800c570 <shci_user_evt_proc+0x88>)
 800c54e:	f000 fad1 	bl	800caf4 <LST_is_empty>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d107      	bne.n	800c568 <shci_user_evt_proc+0x80>
 800c558:	4b06      	ldr	r3, [pc, #24]	; (800c574 <shci_user_evt_proc+0x8c>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c560:	4803      	ldr	r0, [pc, #12]	; (800c570 <shci_user_evt_proc+0x88>)
 800c562:	f7f4 f826 	bl	80005b2 <shci_notify_asynch_evt>
  }


  return;
 800c566:	bf00      	nop
 800c568:	bf00      	nop
}
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20000258 	.word	0x20000258
 800c574:	20000268 	.word	0x20000268
 800c578:	20000460 	.word	0x20000460

0800c57c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	60ba      	str	r2, [r7, #8]
 800c584:	607b      	str	r3, [r7, #4]
 800c586:	4603      	mov	r3, r0
 800c588:	81fb      	strh	r3, [r7, #14]
 800c58a:	460b      	mov	r3, r1
 800c58c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c58e:	2000      	movs	r0, #0
 800c590:	f000 f864 	bl	800c65c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c594:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <shci_send+0x74>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	89fa      	ldrh	r2, [r7, #14]
 800c59a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c59e:	4b14      	ldr	r3, [pc, #80]	; (800c5f0 <shci_send+0x74>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	7b7a      	ldrb	r2, [r7, #13]
 800c5a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c5a6:	4b12      	ldr	r3, [pc, #72]	; (800c5f0 <shci_send+0x74>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	330c      	adds	r3, #12
 800c5ac:	7b7a      	ldrb	r2, [r7, #13]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f001 fc05 	bl	800ddc0 <memcpy>

  shciContext.io.Send(0,0);
 800c5b6:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <shci_send+0x78>)
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	2000      	movs	r0, #0
 800c5be:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c5c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c5c4:	f7f4 f80c 	bl	80005e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f103 0008 	add.w	r0, r3, #8
 800c5ce:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <shci_send+0x74>)
 800c5d0:	6819      	ldr	r1, [r3, #0]
 800c5d2:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <shci_send+0x74>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	789b      	ldrb	r3, [r3, #2]
 800c5d8:	3303      	adds	r3, #3
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f001 fbf0 	bl	800ddc0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	f000 f83b 	bl	800c65c <Cmd_SetStatus>

  return;
 800c5e6:	bf00      	nop
}
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20000264 	.word	0x20000264
 800c5f4:	20000460 	.word	0x20000460

0800c5f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c600:	4a10      	ldr	r2, [pc, #64]	; (800c644 <TlInit+0x4c>)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c606:	4810      	ldr	r0, [pc, #64]	; (800c648 <TlInit+0x50>)
 800c608:	f000 fa64 	bl	800cad4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c60c:	2001      	movs	r0, #1
 800c60e:	f000 f825 	bl	800c65c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c612:	4b0e      	ldr	r3, [pc, #56]	; (800c64c <TlInit+0x54>)
 800c614:	2201      	movs	r2, #1
 800c616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <TlInit+0x58>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00c      	beq.n	800c63a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c624:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <TlInit+0x5c>)
 800c626:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c628:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <TlInit+0x60>)
 800c62a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c62c:	4b08      	ldr	r3, [pc, #32]	; (800c650 <TlInit+0x58>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f107 020c 	add.w	r2, r7, #12
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
  }

  return;
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
}
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000264 	.word	0x20000264
 800c648:	20000258 	.word	0x20000258
 800c64c:	20000268 	.word	0x20000268
 800c650:	20000460 	.word	0x20000460
 800c654:	0800c6ad 	.word	0x0800c6ad
 800c658:	0800c6c5 	.word	0x0800c6c5

0800c65c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10b      	bne.n	800c684 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c66c:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <Cmd_SetStatus+0x48>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <Cmd_SetStatus+0x48>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2000      	movs	r0, #0
 800c67a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c67c:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <Cmd_SetStatus+0x4c>)
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c682:	e00b      	b.n	800c69c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c684:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <Cmd_SetStatus+0x4c>)
 800c686:	2201      	movs	r2, #1
 800c688:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c68a:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <Cmd_SetStatus+0x48>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d004      	beq.n	800c69c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c692:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <Cmd_SetStatus+0x48>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2001      	movs	r0, #1
 800c698:	4798      	blx	r3
  return;
 800c69a:	bf00      	nop
 800c69c:	bf00      	nop
}
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20000480 	.word	0x20000480
 800c6a8:	20000260 	.word	0x20000260

0800c6ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	f7f3 ff88 	bl	80005ca <shci_cmd_resp_release>

  return;
 800c6ba:	bf00      	nop
}
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c6cc:	6879      	ldr	r1, [r7, #4]
 800c6ce:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <TlUserEvtReceived+0x20>)
 800c6d0:	f000 fa54 	bl	800cb7c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c6d4:	4803      	ldr	r0, [pc, #12]	; (800c6e4 <TlUserEvtReceived+0x20>)
 800c6d6:	f7f3 ff6c 	bl	80005b2 <shci_notify_asynch_evt>

  return;
 800c6da:	bf00      	nop
}
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20000258 	.word	0x20000258

0800c6e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a05      	ldr	r2, [pc, #20]	; (800c708 <shci_register_io_bus+0x20>)
 800c6f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a04      	ldr	r2, [pc, #16]	; (800c70c <shci_register_io_bus+0x24>)
 800c6fa:	611a      	str	r2, [r3, #16]

  return;
 800c6fc:	bf00      	nop
}
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	0800c865 	.word	0x0800c865
 800c70c:	0800c8b9 	.word	0x0800c8b9

0800c710 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c714:	f001 f82e 	bl	800d774 <HW_IPCC_Enable>

  return;
 800c718:	bf00      	nop
}
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <TL_Init>:


void TL_Init( void )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <TL_Init+0x44>)
 800c722:	4a10      	ldr	r2, [pc, #64]	; (800c764 <TL_Init+0x48>)
 800c724:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c726:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <TL_Init+0x44>)
 800c728:	4a0f      	ldr	r2, [pc, #60]	; (800c768 <TL_Init+0x4c>)
 800c72a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c72c:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <TL_Init+0x44>)
 800c72e:	4a0f      	ldr	r2, [pc, #60]	; (800c76c <TL_Init+0x50>)
 800c730:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c732:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <TL_Init+0x44>)
 800c734:	4a0e      	ldr	r2, [pc, #56]	; (800c770 <TL_Init+0x54>)
 800c736:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c738:	4b09      	ldr	r3, [pc, #36]	; (800c760 <TL_Init+0x44>)
 800c73a:	4a0e      	ldr	r2, [pc, #56]	; (800c774 <TL_Init+0x58>)
 800c73c:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c73e:	4b08      	ldr	r3, [pc, #32]	; (800c760 <TL_Init+0x44>)
 800c740:	4a0d      	ldr	r2, [pc, #52]	; (800c778 <TL_Init+0x5c>)
 800c742:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c744:	4b06      	ldr	r3, [pc, #24]	; (800c760 <TL_Init+0x44>)
 800c746:	4a0d      	ldr	r2, [pc, #52]	; (800c77c <TL_Init+0x60>)
 800c748:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c74a:	4b05      	ldr	r3, [pc, #20]	; (800c760 <TL_Init+0x44>)
 800c74c:	4a0c      	ldr	r2, [pc, #48]	; (800c780 <TL_Init+0x64>)
 800c74e:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c750:	4b03      	ldr	r3, [pc, #12]	; (800c760 <TL_Init+0x44>)
 800c752:	4a0c      	ldr	r2, [pc, #48]	; (800c784 <TL_Init+0x68>)
 800c754:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c756:	f001 f815 	bl	800d784 <HW_IPCC_Init>

  return;
 800c75a:	bf00      	nop
}
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20030000 	.word	0x20030000
 800c764:	20030024 	.word	0x20030024
 800c768:	20030044 	.word	0x20030044
 800c76c:	20030054 	.word	0x20030054
 800c770:	20030060 	.word	0x20030060
 800c774:	20030068 	.word	0x20030068
 800c778:	20030070 	.word	0x20030070
 800c77c:	2003008c 	.word	0x2003008c
 800c780:	20030090 	.word	0x20030090
 800c784:	2003009c 	.word	0x2003009c

0800c788 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c794:	4811      	ldr	r0, [pc, #68]	; (800c7dc <TL_BLE_Init+0x54>)
 800c796:	f000 f99d 	bl	800cad4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c79a:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <TL_BLE_Init+0x58>)
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	689a      	ldr	r2, [r3, #8]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4a0c      	ldr	r2, [pc, #48]	; (800c7e4 <TL_BLE_Init+0x5c>)
 800c7b4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	4a08      	ldr	r2, [pc, #32]	; (800c7dc <TL_BLE_Init+0x54>)
 800c7ba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c7bc:	f000 fff8 	bl	800d7b0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a08      	ldr	r2, [pc, #32]	; (800c7e8 <TL_BLE_Init+0x60>)
 800c7c6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4a07      	ldr	r2, [pc, #28]	; (800c7ec <TL_BLE_Init+0x64>)
 800c7ce:	6013      	str	r3, [r2, #0]

  return 0;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20030a34 	.word	0x20030a34
 800c7e0:	20030000 	.word	0x20030000
 800c7e4:	20030a24 	.word	0x20030a24
 800c7e8:	2000048c 	.word	0x2000048c
 800c7ec:	20000490 	.word	0x20000490

0800c7f0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <TL_BLE_SendCmd+0x24>)
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2201      	movs	r2, #1
 800c804:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c806:	f000 ffdd 	bl	800d7c4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20030000 	.word	0x20030000

0800c818 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c81e:	e009      	b.n	800c834 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c820:	1d3b      	adds	r3, r7, #4
 800c822:	4619      	mov	r1, r3
 800c824:	4808      	ldr	r0, [pc, #32]	; (800c848 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c826:	f000 f9ec 	bl	800cc02 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c82a:	4b08      	ldr	r3, [pc, #32]	; (800c84c <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c834:	4804      	ldr	r0, [pc, #16]	; (800c848 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c836:	f000 f95d 	bl	800caf4 <LST_is_empty>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0ef      	beq.n	800c820 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c840:	bf00      	nop
}
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20030a34 	.word	0x20030a34
 800c84c:	2000048c 	.word	0x2000048c

0800c850 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c854:	4b02      	ldr	r3, [pc, #8]	; (800c860 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4798      	blx	r3

  return;
 800c85a:	bf00      	nop
}
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	20000490 	.word	0x20000490

0800c864 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c870:	480d      	ldr	r0, [pc, #52]	; (800c8a8 <TL_SYS_Init+0x44>)
 800c872:	f000 f92f 	bl	800cad4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c876:	4b0d      	ldr	r3, [pc, #52]	; (800c8ac <TL_SYS_Init+0x48>)
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	689a      	ldr	r2, [r3, #8]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4a08      	ldr	r2, [pc, #32]	; (800c8a8 <TL_SYS_Init+0x44>)
 800c888:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c88a:	f000 ffbd 	bl	800d808 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a07      	ldr	r2, [pc, #28]	; (800c8b0 <TL_SYS_Init+0x4c>)
 800c894:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	4a06      	ldr	r2, [pc, #24]	; (800c8b4 <TL_SYS_Init+0x50>)
 800c89c:	6013      	str	r3, [r2, #0]

  return 0;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20030a3c 	.word	0x20030a3c
 800c8ac:	20030000 	.word	0x20030000
 800c8b0:	20000494 	.word	0x20000494
 800c8b4:	20000498 	.word	0x20000498

0800c8b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <TL_SYS_SendCmd+0x24>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c8ce:	f000 ffa5 	bl	800d81c <HW_IPCC_SYS_SendCmd>

  return 0;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20030000 	.word	0x20030000

0800c8e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a04      	ldr	r2, [pc, #16]	; (800c8fc <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c8ea:	68d2      	ldr	r2, [r2, #12]
 800c8ec:	6812      	ldr	r2, [r2, #0]
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4798      	blx	r3

  return;
 800c8f2:	bf00      	nop
}
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20000494 	.word	0x20000494
 800c8fc:	20030000 	.word	0x20030000

0800c900 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c906:	e009      	b.n	800c91c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c908:	1d3b      	adds	r3, r7, #4
 800c90a:	4619      	mov	r1, r3
 800c90c:	4808      	ldr	r0, [pc, #32]	; (800c930 <HW_IPCC_SYS_EvtNot+0x30>)
 800c90e:	f000 f978 	bl	800cc02 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c912:	4b08      	ldr	r3, [pc, #32]	; (800c934 <HW_IPCC_SYS_EvtNot+0x34>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c91c:	4804      	ldr	r0, [pc, #16]	; (800c930 <HW_IPCC_SYS_EvtNot+0x30>)
 800c91e:	f000 f8e9 	bl	800caf4 <LST_is_empty>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0ef      	beq.n	800c908 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c928:	bf00      	nop
}
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20030a3c 	.word	0x20030a3c
 800c934:	20000498 	.word	0x20000498

0800c938 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c940:	4817      	ldr	r0, [pc, #92]	; (800c9a0 <TL_MM_Init+0x68>)
 800c942:	f000 f8c7 	bl	800cad4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c946:	4817      	ldr	r0, [pc, #92]	; (800c9a4 <TL_MM_Init+0x6c>)
 800c948:	f000 f8c4 	bl	800cad4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c94c:	4b16      	ldr	r3, [pc, #88]	; (800c9a8 <TL_MM_Init+0x70>)
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	4a16      	ldr	r2, [pc, #88]	; (800c9ac <TL_MM_Init+0x74>)
 800c952:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c954:	4b15      	ldr	r3, [pc, #84]	; (800c9ac <TL_MM_Init+0x74>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	6892      	ldr	r2, [r2, #8]
 800c95c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <TL_MM_Init+0x74>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	68d2      	ldr	r2, [r2, #12]
 800c966:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c968:	4b10      	ldr	r3, [pc, #64]	; (800c9ac <TL_MM_Init+0x74>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a0c      	ldr	r2, [pc, #48]	; (800c9a0 <TL_MM_Init+0x68>)
 800c96e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c970:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <TL_MM_Init+0x74>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c97a:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <TL_MM_Init+0x74>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	6852      	ldr	r2, [r2, #4]
 800c982:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c984:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <TL_MM_Init+0x74>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	6912      	ldr	r2, [r2, #16]
 800c98c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <TL_MM_Init+0x74>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	6952      	ldr	r2, [r2, #20]
 800c996:	619a      	str	r2, [r3, #24]

  return;
 800c998:	bf00      	nop
}
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	200300a8 	.word	0x200300a8
 800c9a4:	20000484 	.word	0x20000484
 800c9a8:	20030000 	.word	0x20030000
 800c9ac:	2000049c 	.word	0x2000049c

0800c9b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4805      	ldr	r0, [pc, #20]	; (800c9d0 <TL_MM_EvtDone+0x20>)
 800c9bc:	f000 f8de 	bl	800cb7c <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c9c0:	4804      	ldr	r0, [pc, #16]	; (800c9d4 <TL_MM_EvtDone+0x24>)
 800c9c2:	f000 ff51 	bl	800d868 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c9c6:	bf00      	nop
}
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000484 	.word	0x20000484
 800c9d4:	0800c9d9 	.word	0x0800c9d9

0800c9d8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c9de:	e00c      	b.n	800c9fa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c9e0:	1d3b      	adds	r3, r7, #4
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	480a      	ldr	r0, [pc, #40]	; (800ca10 <SendFreeBuf+0x38>)
 800c9e6:	f000 f90c 	bl	800cc02 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <SendFreeBuf+0x3c>)
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 f8c1 	bl	800cb7c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c9fa:	4805      	ldr	r0, [pc, #20]	; (800ca10 <SendFreeBuf+0x38>)
 800c9fc:	f000 f87a 	bl	800caf4 <LST_is_empty>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0ec      	beq.n	800c9e0 <SendFreeBuf+0x8>
  }

  return;
 800ca06:	bf00      	nop
}
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000484 	.word	0x20000484
 800ca14:	20030000 	.word	0x20030000

0800ca18 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ca1c:	4805      	ldr	r0, [pc, #20]	; (800ca34 <TL_TRACES_Init+0x1c>)
 800ca1e:	f000 f859 	bl	800cad4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <TL_TRACES_Init+0x20>)
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	4a03      	ldr	r2, [pc, #12]	; (800ca34 <TL_TRACES_Init+0x1c>)
 800ca28:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ca2a:	f000 ff53 	bl	800d8d4 <HW_IPCC_TRACES_Init>

  return;
 800ca2e:	bf00      	nop
}
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	200300b0 	.word	0x200300b0
 800ca38:	20030000 	.word	0x20030000

0800ca3c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ca42:	e008      	b.n	800ca56 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ca44:	1d3b      	adds	r3, r7, #4
 800ca46:	4619      	mov	r1, r3
 800ca48:	4808      	ldr	r0, [pc, #32]	; (800ca6c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ca4a:	f000 f8da 	bl	800cc02 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 f80d 	bl	800ca70 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ca56:	4805      	ldr	r0, [pc, #20]	; (800ca6c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ca58:	f000 f84c 	bl	800caf4 <LST_is_empty>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d0f0      	beq.n	800ca44 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ca62:	bf00      	nop
}
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	200300b0 	.word	0x200300b0

0800ca70 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <OTP_Read+0x48>)
 800ca90:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ca92:	e002      	b.n	800ca9a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3b08      	subs	r3, #8
 800ca98:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3307      	adds	r3, #7
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	79fa      	ldrb	r2, [r7, #7]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d003      	beq.n	800caae <OTP_Read+0x2a>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <OTP_Read+0x4c>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d1f2      	bne.n	800ca94 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	79fa      	ldrb	r2, [r7, #7]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d001      	beq.n	800cabe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cabe:	68fb      	ldr	r3, [r7, #12]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	1fff73f8 	.word	0x1fff73f8
 800cad0:	1fff7000 	.word	0x1fff7000

0800cad4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	605a      	str	r2, [r3, #4]
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cafc:	f3ef 8310 	mrs	r3, PRIMASK
 800cb00:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb06:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d102      	bne.n	800cb18 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800cb12:	2301      	movs	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]
 800cb16:	e001      	b.n	800cb1c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb42:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb44:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb48:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	605a      	str	r2, [r3, #4]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb70:	bf00      	nop
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b087      	sub	sp, #28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb86:	f3ef 8310 	mrs	r3, PRIMASK
 800cb8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb90:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cbb8:	bf00      	nop
 800cbba:	371c      	adds	r7, #28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbcc:	f3ef 8310 	mrs	r3, PRIMASK
 800cbd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cbd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbd6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	6852      	ldr	r2, [r2, #4]
 800cbea:	605a      	str	r2, [r3, #4]
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cbf6:	bf00      	nop
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b086      	sub	sp, #24
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800cc10:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cc14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc16:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff ffcd 	bl	800cbc4 <LST_remove_node>
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cc34:	bf00      	nop
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800cc40:	4b03      	ldr	r3, [pc, #12]	; (800cc50 <LL_FLASH_GetUDN+0x14>)
 800cc42:	681b      	ldr	r3, [r3, #0]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	1fff7580 	.word	0x1fff7580

0800cc54 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800cc58:	4b03      	ldr	r3, [pc, #12]	; (800cc68 <LL_FLASH_GetDeviceID+0x14>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	1fff7584 	.word	0x1fff7584

0800cc6c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800cc70:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <LL_FLASH_GetSTCompanyID+0x14>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	0a1b      	lsrs	r3, r3, #8
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	1fff7584 	.word	0x1fff7584

0800cc84 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800cc84:	b5b0      	push	{r4, r5, r7, lr}
 800cc86:	b08c      	sub	sp, #48	; 0x30
 800cc88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cc8a:	4b29      	ldr	r3, [pc, #164]	; (800cd30 <APP_BLE_Init+0xac>)
 800cc8c:	463c      	mov	r4, r7
 800cc8e:	461d      	mov	r5, r3
 800cc90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cc9c:	c407      	stmia	r4!, {r0, r1, r2}
 800cc9e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800cca0:	f000 f912 	bl	800cec8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800cca4:	2101      	movs	r1, #1
 800cca6:	2002      	movs	r0, #2
 800cca8:	f000 fe3c 	bl	800d924 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ccac:	4a21      	ldr	r2, [pc, #132]	; (800cd34 <APP_BLE_Init+0xb0>)
 800ccae:	2100      	movs	r1, #0
 800ccb0:	2004      	movs	r0, #4
 800ccb2:	f000 ff41 	bl	800db38 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7ff fa4f 	bl	800c15c <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ccbe:	f000 f919 	bl	800cef4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ccc2:	f7ff f86f 	bl	800bda4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ccc6:	4b1c      	ldr	r3, [pc, #112]	; (800cd38 <APP_BLE_Init+0xb4>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800ccce:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <APP_BLE_Init+0xb4>)
 800ccd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccd4:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ccd6:	4a19      	ldr	r2, [pc, #100]	; (800cd3c <APP_BLE_Init+0xb8>)
 800ccd8:	2100      	movs	r1, #0
 800ccda:	2001      	movs	r0, #1
 800ccdc:	f000 ff2c 	bl	800db38 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800cce0:	2006      	movs	r0, #6
 800cce2:	f7fe fd69 	bl	800b7b8 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800cce6:	f000 fb43 	bl	800d370 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800ccea:	f000 fb91 	bl	800d410 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800ccee:	4b14      	ldr	r3, [pc, #80]	; (800cd40 <APP_BLE_Init+0xbc>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	4914      	ldr	r1, [pc, #80]	; (800cd44 <APP_BLE_Init+0xc0>)
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f7f4 f985 	bl	8001004 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ccfa:	4b13      	ldr	r3, [pc, #76]	; (800cd48 <APP_BLE_Init+0xc4>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4913      	ldr	r1, [pc, #76]	; (800cd4c <APP_BLE_Init+0xc8>)
 800cd00:	2000      	movs	r0, #0
 800cd02:	f7f4 f97f 	bl	8001004 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <APP_BLE_Init+0xb4>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <APP_BLE_Init+0xb4>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cd16:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <APP_BLE_Init+0xcc>)
 800cd18:	2280      	movs	r2, #128	; 0x80
 800cd1a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cd1c:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <APP_BLE_Init+0xd0>)
 800cd1e:	22a0      	movs	r2, #160	; 0xa0
 800cd20:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800cd22:	2001      	movs	r0, #1
 800cd24:	f000 f9c0 	bl	800d0a8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800cd28:	bf00      	nop
}
 800cd2a:	3730      	adds	r7, #48	; 0x30
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd30:	0800de3c 	.word	0x0800de3c
 800cd34:	0800c1c5 	.word	0x0800c1c5
 800cd38:	2000026c 	.word	0x2000026c
 800cd3c:	0800d215 	.word	0x0800d215
 800cd40:	0800d249 	.word	0x0800d249
 800cd44:	200002fd 	.word	0x200002fd
 800cd48:	0800d259 	.word	0x0800d259
 800cd4c:	200002fe 	.word	0x200002fe
 800cd50:	20000300 	.word	0x20000300
 800cd54:	20000302 	.word	0x20000302

0800cd58 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08a      	sub	sp, #40	; 0x28
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cd60:	2342      	movs	r3, #66	; 0x42
 800cd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	2b3e      	cmp	r3, #62	; 0x3e
 800cd72:	d024      	beq.n	800cdbe <SVCCTL_App_Notification+0x66>
 800cd74:	2bff      	cmp	r3, #255	; 0xff
 800cd76:	d070      	beq.n	800ce5a <SVCCTL_App_Notification+0x102>
 800cd78:	2b05      	cmp	r3, #5
 800cd7a:	d000      	beq.n	800cd7e <SVCCTL_App_Notification+0x26>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800cd7c:	e086      	b.n	800ce8c <SVCCTL_App_Notification+0x134>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	3302      	adds	r3, #2
 800cd82:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	4b42      	ldr	r3, [pc, #264]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800cd8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d106      	bne.n	800cda2 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cd94:	4b40      	ldr	r3, [pc, #256]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cd9a:	4b3f      	ldr	r3, [pc, #252]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800cda2:	2001      	movs	r0, #1
 800cda4:	f000 f980 	bl	800d0a8 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cda8:	4b3c      	ldr	r3, [pc, #240]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cdae:	4b3a      	ldr	r3, [pc, #232]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800cdb0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cdb2:	4b3a      	ldr	r3, [pc, #232]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800cdb4:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800cdb6:	4839      	ldr	r0, [pc, #228]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800cdb8:	f000 fac6 	bl	800d348 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800cdbc:	e066      	b.n	800ce8c <SVCCTL_App_Notification+0x134>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	3302      	adds	r3, #2
 800cdc2:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d042      	beq.n	800ce52 <SVCCTL_App_Notification+0xfa>
 800cdcc:	2b0c      	cmp	r3, #12
 800cdce:	d002      	beq.n	800cdd6 <SVCCTL_App_Notification+0x7e>
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d016      	beq.n	800ce02 <SVCCTL_App_Notification+0xaa>
          break;
 800cdd4:	e040      	b.n	800ce58 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cddc:	4b2e      	ldr	r3, [pc, #184]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800cdde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cde0:	f107 020a 	add.w	r2, r7, #10
 800cde4:	f107 010b 	add.w	r1, r7, #11
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe fd5f 	bl	800b8ac <hci_le_read_phy>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d12c      	bne.n	800ce56 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800cdfc:	7afb      	ldrb	r3, [r7, #11]
 800cdfe:	2b02      	cmp	r3, #2
          break;
 800ce00:	e029      	b.n	800ce56 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	3301      	adds	r3, #1
 800ce06:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ce08:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce0a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f4 f96e 	bl	80010f0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ce14:	4b20      	ldr	r3, [pc, #128]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce16:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ce1a:	2b04      	cmp	r3, #4
 800ce1c:	d104      	bne.n	800ce28 <SVCCTL_App_Notification+0xd0>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ce1e:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce20:	2206      	movs	r2, #6
 800ce22:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ce26:	e003      	b.n	800ce30 <SVCCTL_App_Notification+0xd8>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ce28:	4b1b      	ldr	r3, [pc, #108]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce2a:	2205      	movs	r2, #5
 800ce2c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ce36:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800ce38:	4b17      	ldr	r3, [pc, #92]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce3a:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ce3c:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <SVCCTL_App_Notification+0x140>)
 800ce44:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ce46:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800ce48:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800ce4a:	4814      	ldr	r0, [pc, #80]	; (800ce9c <SVCCTL_App_Notification+0x144>)
 800ce4c:	f000 fa7c 	bl	800d348 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800ce50:	e002      	b.n	800ce58 <SVCCTL_App_Notification+0x100>
          break;
 800ce52:	bf00      	nop
 800ce54:	e01a      	b.n	800ce8c <SVCCTL_App_Notification+0x134>
          break;
 800ce56:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800ce58:	e018      	b.n	800ce8c <SVCCTL_App_Notification+0x134>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	3302      	adds	r3, #2
 800ce5e:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f240 4207 	movw	r2, #1031	; 0x407
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d00a      	beq.n	800ce84 <SVCCTL_App_Notification+0x12c>
 800ce6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce72:	d009      	beq.n	800ce88 <SVCCTL_App_Notification+0x130>
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	d000      	beq.n	800ce7a <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800ce78:	e007      	b.n	800ce8a <SVCCTL_App_Notification+0x132>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	4808      	ldr	r0, [pc, #32]	; (800cea0 <SVCCTL_App_Notification+0x148>)
 800ce7e:	f7f9 f887 	bl	8005f90 <HAL_GPIO_TogglePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800ce82:	e002      	b.n	800ce8a <SVCCTL_App_Notification+0x132>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800ce84:	bf00      	nop
 800ce86:	e000      	b.n	800ce8a <SVCCTL_App_Notification+0x132>
      break;
 800ce88:	bf00      	nop
      break; /* EVT_VENDOR */
 800ce8a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ce8c:	2301      	movs	r3, #1
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3728      	adds	r7, #40	; 0x28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	2000026c 	.word	0x2000026c
 800ce9c:	200006e8 	.word	0x200006e8
 800cea0:	48000400 	.word	0x48000400

0800cea4 <HAL_GPIO_EXTI_Callback>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800ceae:	88fb      	ldrh	r3, [r7, #6]
 800ceb0:	2b10      	cmp	r3, #16
 800ceb2:	d000      	beq.n	800ceb6 <HAL_GPIO_EXTI_Callback+0x12>
  {
    case GPIO_PIN_4:
      UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
      break;
    default:
      break;
 800ceb4:	e004      	b.n	800cec0 <HAL_GPIO_EXTI_Callback+0x1c>
      UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	2002      	movs	r0, #2
 800ceba:	f000 fe5d 	bl	800db78 <UTIL_SEQ_SetTask>
      break;
 800cebe:	bf00      	nop
  }
  return;
 800cec0:	bf00      	nop
}
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cece:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <Ble_Tl_Init+0x20>)
 800ced0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <Ble_Tl_Init+0x24>)
 800ced4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ced6:	463b      	mov	r3, r7
 800ced8:	4619      	mov	r1, r3
 800ceda:	4805      	ldr	r0, [pc, #20]	; (800cef0 <Ble_Tl_Init+0x28>)
 800cedc:	f7ff f956 	bl	800c18c <hci_init>

  return;
 800cee0:	bf00      	nop
}
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	200300b8 	.word	0x200300b8
 800ceec:	0800d2e3 	.word	0x0800d2e3
 800cef0:	0800d2ab 	.word	0x0800d2ab

0800cef4 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800cef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef6:	b091      	sub	sp, #68	; 0x44
 800cef8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800cefa:	2300      	movs	r3, #0
 800cefc:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800cefe:	f7fe fcac 	bl	800b85a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800cf02:	f000 f943 	bl	800d18c <BleGetBdAddress>
 800cf06:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cf08:	6a3a      	ldr	r2, [r7, #32]
 800cf0a:	2106      	movs	r1, #6
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f7fe fb85 	bl	800b61c <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	795a      	ldrb	r2, [r3, #5]
 800cf16:	4b5e      	ldr	r3, [pc, #376]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf18:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	791a      	ldrb	r2, [r3, #4]
 800cf1e:	4b5c      	ldr	r3, [pc, #368]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf20:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	78da      	ldrb	r2, [r3, #3]
 800cf26:	4b5a      	ldr	r3, [pc, #360]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf28:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	789a      	ldrb	r2, [r3, #2]
 800cf2e:	4b58      	ldr	r3, [pc, #352]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf30:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	785a      	ldrb	r2, [r3, #1]
 800cf36:	4b56      	ldr	r3, [pc, #344]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf38:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	781a      	ldrb	r2, [r3, #0]
 800cf3e:	4b54      	ldr	r3, [pc, #336]	; (800d090 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800cf40:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800cf42:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800cf46:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800cf48:	f7ff fe78 	bl	800cc3c <LL_FLASH_GetUDN>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cf50:	f107 0308 	add.w	r3, r7, #8
 800cf54:	461a      	mov	r2, r3
 800cf56:	2106      	movs	r1, #6
 800cf58:	202e      	movs	r0, #46	; 0x2e
 800cf5a:	f7fe fb5f 	bl	800b61c <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cf5e:	4a4d      	ldr	r2, [pc, #308]	; (800d094 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800cf60:	2110      	movs	r1, #16
 800cf62:	2018      	movs	r0, #24
 800cf64:	f7fe fb5a 	bl	800b61c <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cf68:	4a4b      	ldr	r2, [pc, #300]	; (800d098 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800cf6a:	2110      	movs	r1, #16
 800cf6c:	2008      	movs	r0, #8
 800cf6e:	f7fe fb55 	bl	800b61c <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cf72:	2118      	movs	r1, #24
 800cf74:	2001      	movs	r0, #1
 800cf76:	f7fe fbc1 	bl	800b6fc <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800cf7a:	f7fe f8fe 	bl	800b17a <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cf82:	7ffb      	ldrb	r3, [r7, #31]
 800cf84:	f043 0301 	orr.w	r3, r3, #1
 800cf88:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800cf8a:	7ffb      	ldrb	r3, [r7, #31]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d01e      	beq.n	800cfce <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800cf90:	4b42      	ldr	r3, [pc, #264]	; (800d09c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800cf92:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800cf94:	f107 0216 	add.w	r2, r7, #22
 800cf98:	7ff8      	ldrb	r0, [r7, #31]
 800cf9a:	f107 0312 	add.w	r3, r7, #18
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	f107 0314 	add.w	r3, r7, #20
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	2207      	movs	r2, #7
 800cfaa:	2100      	movs	r1, #0
 800cfac:	f7fd ffce 	bl	800af4c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cfb0:	8afc      	ldrh	r4, [r7, #22]
 800cfb2:	8abd      	ldrh	r5, [r7, #20]
 800cfb4:	69b8      	ldr	r0, [r7, #24]
 800cfb6:	f7f3 f8e3 	bl	8000180 <strlen>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f7fe fa99 	bl	800b500 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800cfce:	8af8      	ldrh	r0, [r7, #22]
 800cfd0:	8a79      	ldrh	r1, [r7, #18]
 800cfd2:	1d3b      	adds	r3, r7, #4
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	2302      	movs	r3, #2
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f7fe fa91 	bl	800b500 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800cfde:	2202      	movs	r2, #2
 800cfe0:	2102      	movs	r1, #2
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f7fe fcca 	bl	800b97c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cfe8:	4b2d      	ldr	r3, [pc, #180]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cfee:	4b2c      	ldr	r3, [pc, #176]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd feaa 	bl	800ad4c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cff8:	4b29      	ldr	r3, [pc, #164]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cffa:	2201      	movs	r2, #1
 800cffc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cffe:	4b28      	ldr	r3, [pc, #160]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d000:	2200      	movs	r2, #0
 800d002:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800d004:	4b26      	ldr	r3, [pc, #152]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d006:	2208      	movs	r2, #8
 800d008:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800d00a:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d00c:	2210      	movs	r2, #16
 800d00e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800d010:	4b23      	ldr	r3, [pc, #140]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d012:	2201      	movs	r2, #1
 800d014:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800d016:	4b22      	ldr	r3, [pc, #136]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d018:	4a22      	ldr	r2, [pc, #136]	; (800d0a4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800d01a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800d01c:	4b20      	ldr	r3, [pc, #128]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d01e:	2201      	movs	r2, #1
 800d020:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800d022:	2300      	movs	r3, #0
 800d024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d028:	e00b      	b.n	800d042 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800d02a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d02e:	4a1c      	ldr	r2, [pc, #112]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d030:	4413      	add	r3, r2
 800d032:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d036:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800d038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d03c:	3301      	adds	r3, #1
 800d03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d046:	2b0f      	cmp	r3, #15
 800d048:	d9ef      	bls.n	800d02a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d04c:	789d      	ldrb	r5, [r3, #2]
 800d04e:	4b14      	ldr	r3, [pc, #80]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d050:	785e      	ldrb	r6, [r3, #1]
 800d052:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d054:	7d5b      	ldrb	r3, [r3, #21]
 800d056:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d058:	7d92      	ldrb	r2, [r2, #22]
 800d05a:	4911      	ldr	r1, [pc, #68]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d05c:	7d09      	ldrb	r1, [r1, #20]
 800d05e:	4810      	ldr	r0, [pc, #64]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d060:	6980      	ldr	r0, [r0, #24]
 800d062:	2400      	movs	r4, #0
 800d064:	9404      	str	r4, [sp, #16]
 800d066:	9003      	str	r0, [sp, #12]
 800d068:	9102      	str	r1, [sp, #8]
 800d06a:	9201      	str	r2, [sp, #4]
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	2300      	movs	r3, #0
 800d070:	2201      	movs	r2, #1
 800d072:	4631      	mov	r1, r6
 800d074:	4628      	mov	r0, r5
 800d076:	f7fd feba 	bl	800adee <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800d07c:	789b      	ldrb	r3, [r3, #2]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800d082:	f7fe f851 	bl	800b128 <aci_gap_configure_whitelist>
   }
}
 800d086:	bf00      	nop
 800d088:	372c      	adds	r7, #44	; 0x2c
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000015c 	.word	0x2000015c
 800d094:	0800df1c 	.word	0x0800df1c
 800d098:	0800df2c 	.word	0x0800df2c
 800d09c:	0800de6c 	.word	0x0800de6c
 800d0a0:	2000026c 	.word	0x2000026c
 800d0a4:	0001b207 	.word	0x0001b207

0800d0a8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08c      	sub	sp, #48	; 0x30
 800d0ac:	af08      	add	r7, sp, #32
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d0b2:	2342      	movs	r3, #66	; 0x42
 800d0b4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d106      	bne.n	800d0ca <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d0bc:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <Adv_Request+0xc8>)
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d0c2:	4b2c      	ldr	r3, [pc, #176]	; (800d174 <Adv_Request+0xcc>)
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	81bb      	strh	r3, [r7, #12]
 800d0c8:	e005      	b.n	800d0d6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d0ca:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800d0ce:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d0d0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d0d4:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d0d6:	4b28      	ldr	r3, [pc, #160]	; (800d178 <Adv_Request+0xd0>)
 800d0d8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f4 f807 	bl	80010f0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d10d      	bne.n	800d104 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d0e8:	4b23      	ldr	r3, [pc, #140]	; (800d178 <Adv_Request+0xd0>)
 800d0ea:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d004      	beq.n	800d0fc <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d0f2:	4b21      	ldr	r3, [pc, #132]	; (800d178 <Adv_Request+0xd0>)
 800d0f4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d103      	bne.n	800d104 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800d0fc:	f7fd fd18 	bl	800ab30 <aci_gap_set_non_discoverable>
 800d100:	4603      	mov	r3, r0
 800d102:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800d104:	4a1c      	ldr	r2, [pc, #112]	; (800d178 <Adv_Request+0xd0>)
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800d10c:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <Adv_Request+0xd0>)
 800d10e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d112:	89b8      	ldrh	r0, [r7, #12]
 800d114:	89f9      	ldrh	r1, [r7, #14]
 800d116:	2200      	movs	r2, #0
 800d118:	9206      	str	r2, [sp, #24]
 800d11a:	2200      	movs	r2, #0
 800d11c:	9205      	str	r2, [sp, #20]
 800d11e:	4a17      	ldr	r2, [pc, #92]	; (800d17c <Adv_Request+0xd4>)
 800d120:	9204      	str	r2, [sp, #16]
 800d122:	9303      	str	r3, [sp, #12]
 800d124:	4b16      	ldr	r3, [pc, #88]	; (800d180 <Adv_Request+0xd8>)
 800d126:	9302      	str	r3, [sp, #8]
 800d128:	2306      	movs	r3, #6
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	2300      	movs	r3, #0
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	2300      	movs	r3, #0
 800d132:	4602      	mov	r2, r0
 800d134:	2000      	movs	r0, #0
 800d136:	f7fd fd24 	bl	800ab82 <aci_gap_set_discoverable>
 800d13a:	4603      	mov	r3, r0
 800d13c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800d13e:	4911      	ldr	r1, [pc, #68]	; (800d184 <Adv_Request+0xdc>)
 800d140:	200e      	movs	r0, #14
 800d142:	f7fd ff8e 	bl	800b062 <aci_gap_update_adv_data>
 800d146:	4603      	mov	r3, r0
 800d148:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800d14a:	7afb      	ldrb	r3, [r7, #11]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d107      	bne.n	800d166 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d156:	4b08      	ldr	r3, [pc, #32]	; (800d178 <Adv_Request+0xd0>)
 800d158:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d15c:	490a      	ldr	r1, [pc, #40]	; (800d188 <Adv_Request+0xe0>)
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f4 f850 	bl	8001204 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800d164:	bf00      	nop
 800d166:	bf00      	nop
}
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20000300 	.word	0x20000300
 800d174:	20000302 	.word	0x20000302
 800d178:	2000026c 	.word	0x2000026c
 800d17c:	20000295 	.word	0x20000295
 800d180:	0800df3c 	.word	0x0800df3c
 800d184:	2000015c 	.word	0x2000015c
 800d188:	0001e046 	.word	0x0001e046

0800d18c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d192:	f7ff fd53 	bl	800cc3c <LL_FLASH_GetUDN>
 800d196:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19e:	d023      	beq.n	800d1e8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d1a0:	f7ff fd64 	bl	800cc6c <LL_FLASH_GetSTCompanyID>
 800d1a4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d1a6:	f7ff fd55 	bl	800cc54 <LL_FLASH_GetDeviceID>
 800d1aa:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	4b16      	ldr	r3, [pc, #88]	; (800d20c <BleGetBdAddress+0x80>)
 800d1b2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	4b14      	ldr	r3, [pc, #80]	; (800d20c <BleGetBdAddress+0x80>)
 800d1bc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	0c1b      	lsrs	r3, r3, #16
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	4b11      	ldr	r3, [pc, #68]	; (800d20c <BleGetBdAddress+0x80>)
 800d1c6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <BleGetBdAddress+0x80>)
 800d1ce:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <BleGetBdAddress+0x80>)
 800d1d6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	0a1b      	lsrs	r3, r3, #8
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <BleGetBdAddress+0x80>)
 800d1e0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <BleGetBdAddress+0x80>)
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	e00b      	b.n	800d200 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	f7ff fc4b 	bl	800ca84 <OTP_Read>
 800d1ee:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d002      	beq.n	800d1fc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	e001      	b.n	800d200 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800d1fc:	4b04      	ldr	r3, [pc, #16]	; (800d210 <BleGetBdAddress+0x84>)
 800d1fe:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800d200:	697b      	ldr	r3, [r7, #20]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	200004a0 	.word	0x200004a0
 800d210:	0800df14 	.word	0x0800df14

0800d214 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d21a:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <Adv_Cancel+0x30>)
 800d21c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d220:	2b05      	cmp	r3, #5
 800d222:	d00a      	beq.n	800d23a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800d224:	2300      	movs	r3, #0
 800d226:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800d228:	f7fd fc82 	bl	800ab30 <aci_gap_set_non_discoverable>
 800d22c:	4603      	mov	r3, r0
 800d22e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d230:	4b04      	ldr	r3, [pc, #16]	; (800d244 <Adv_Cancel+0x30>)
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
}
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2000026c 	.word	0x2000026c

0800d248 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d24c:	2100      	movs	r1, #0
 800d24e:	2001      	movs	r0, #1
 800d250:	f000 fc92 	bl	800db78 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800d254:	bf00      	nop
}
 800d256:	bd80      	pop	{r7, pc}

0800d258 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800d258:	b480      	push	{r7}
 800d25a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800d25c:	bf00      	nop
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d26e:	2100      	movs	r1, #0
 800d270:	2004      	movs	r0, #4
 800d272:	f000 fc81 	bl	800db78 <UTIL_SEQ_SetTask>
  return;
 800d276:	bf00      	nop
}
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d286:	2001      	movs	r0, #1
 800d288:	f000 fcdc 	bl	800dc44 <UTIL_SEQ_SetEvt>
  return;
 800d28c:	bf00      	nop
}
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d29c:	2001      	movs	r0, #1
 800d29e:	f000 fcef 	bl	800dc80 <UTIL_SEQ_WaitEvt>
  return;
 800d2a2:	bf00      	nop
}
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fe fdbf 	bl	800be40 <SVCCTL_UserEvtRx>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d2c6:	7afb      	ldrb	r3, [r7, #11]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d003      	beq.n	800d2d4 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d2d2:	e002      	b.n	800d2da <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d002      	beq.n	800d2f8 <BLE_StatusNot+0x16>
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d006      	beq.n	800d304 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d2f6:	e00b      	b.n	800d310 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d2f8:	231f      	movs	r3, #31
 800d2fa:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 fc65 	bl	800dbcc <UTIL_SEQ_PauseTask>
      break;
 800d302:	e005      	b.n	800d310 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d304:	231f      	movs	r3, #31
 800d306:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 fc7d 	bl	800dc08 <UTIL_SEQ_ResumeTask>
      break;
 800d30e:	bf00      	nop
  }
  return;
 800d310:	bf00      	nop
}
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d004      	beq.n	800d332 <P2PS_STM_App_Notification+0x1a>
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d004      	beq.n	800d336 <P2PS_STM_App_Notification+0x1e>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d004      	beq.n	800d33a <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d330:	e004      	b.n	800d33c <P2PS_STM_App_Notification+0x24>
      break;
 800d332:	bf00      	nop
 800d334:	e002      	b.n	800d33c <P2PS_STM_App_Notification+0x24>
      break;
 800d336:	bf00      	nop
 800d338:	e000      	b.n	800d33c <P2PS_STM_App_Notification+0x24>
      break;
 800d33a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d33c:	bf00      	nop
}
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <P2PS_APP_Notification+0x16>
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d002      	beq.n	800d362 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d35c:	e002      	b.n	800d364 <P2PS_APP_Notification+0x1c>
    break;
 800d35e:	bf00      	nop
 800d360:	e000      	b.n	800d364 <P2PS_APP_Notification+0x1c>
    break;
 800d362:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d364:	bf00      	nop
}
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800d374:	4a03      	ldr	r2, [pc, #12]	; (800d384 <P2PS_APP_Init+0x14>)
 800d376:	2100      	movs	r1, #0
 800d378:	2002      	movs	r0, #2
 800d37a:	f000 fbdd 	bl	800db38 <UTIL_SEQ_RegTask>
/* USER CODE END P2PS_APP_Init */
  return;
 800d37e:	bf00      	nop
}
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	0800d389 	.word	0x0800d389

0800d388 <P2PS_Send_Notification>:

/* USER CODE BEGIN FD */
static void P2PS_Send_Notification(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800d38c:	4b0b      	ldr	r3, [pc, #44]	; (800d3bc <P2PS_Send_Notification+0x34>)
 800d38e:	791b      	ldrb	r3, [r3, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d103      	bne.n	800d39c <P2PS_Send_Notification+0x14>
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800d394:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <P2PS_Send_Notification+0x34>)
 800d396:	2201      	movs	r2, #1
 800d398:	711a      	strb	r2, [r3, #4]
 800d39a:	e002      	b.n	800d3a2 <P2PS_Send_Notification+0x1a>
} else {
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800d39c:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <P2PS_Send_Notification+0x34>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	711a      	strb	r2, [r3, #4]
}
if(P2P_Server_App_Context.Notification_Status){
 800d3a2:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <P2PS_Send_Notification+0x34>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <P2PS_Send_Notification+0x2e>
  APP_DBG_MSG("-- P2P APPLICATION SERVER : INFORM CLIENT BUTTON 1 PUSHED \n ");
  APP_DBG_MSG(" \n\r");
  P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 800d3aa:	4905      	ldr	r1, [pc, #20]	; (800d3c0 <P2PS_Send_Notification+0x38>)
 800d3ac:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800d3b0:	f7fe fc74 	bl	800bc9c <P2PS_STM_App_Update_Char>
} else {
  APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
}
return;
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop
}
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000304 	.word	0x20000304
 800d3c0:	20000307 	.word	0x20000307

0800d3c4 <TEMPLATE_UpdateParameter_Timer_Callback>:
/* Private functions ---------------------------------------------------------*/
static void TEMPLATE_APP_context_Init(void);
static void TEMPLATE_Send_Notification_Task(void);

static void TEMPLATE_UpdateParameter_Timer_Callback(void)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
// UTIL_SEQ_SetTask( 1<<CFG_IdleTask_Update_Temperature, CFG_SCH_PRIO_0);
}
 800d3c8:	bf00      	nop
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <TEMPLATE_STM_App_Notification>:

/* Public functions ----------------------------------------------------------*/
void TEMPLATE_STM_App_Notification(TEMPLATE_STM_App_Notification_evt_t *pNotification)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  switch(pNotification->Template_Evt_Opcode)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d008      	beq.n	800d3f6 <TEMPLATE_STM_App_Notification+0x22>
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d00a      	beq.n	800d3fe <TEMPLATE_STM_App_Notification+0x2a>
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d000      	beq.n	800d3ee <TEMPLATE_STM_App_Notification+0x1a>

      break; /* TEMPLATE_STM_BOOT_REQUEST_EVT */
#endif
      
    default:
      break; /* DEFAULT */
 800d3ec:	e008      	b.n	800d400 <TEMPLATE_STM_App_Notification+0x2c>
      TEMPLATE_Server_App_Context.NotificationStatus = 1;
 800d3ee:	4b07      	ldr	r3, [pc, #28]	; (800d40c <TEMPLATE_STM_App_Notification+0x38>)
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	701a      	strb	r2, [r3, #0]
      break; /* TEMPLATE_STM_NOTIFY_ENABLED_EVT */
 800d3f4:	e004      	b.n	800d400 <TEMPLATE_STM_App_Notification+0x2c>
      TEMPLATE_Server_App_Context.NotificationStatus = 0;
 800d3f6:	4b05      	ldr	r3, [pc, #20]	; (800d40c <TEMPLATE_STM_App_Notification+0x38>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
      break; /* TEMPLATE_STM_NOTIFY_DISABLED_EVT */
 800d3fc:	e000      	b.n	800d400 <TEMPLATE_STM_App_Notification+0x2c>
      break; /* TEMPLATE_STM_WRITE_EVT */
 800d3fe:	bf00      	nop
  }

  return;
 800d400:	bf00      	nop
}
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	2000030c 	.word	0x2000030c

0800d410 <TEMPLATE_APP_Init>:

void TEMPLATE_APP_Init(void)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	af00      	add	r7, sp, #0
	/* Register task used to update the characteristic (send the notification) */
	  UTIL_SEQ_RegTask(1<<CFG_IdleTask_Update_Temperature, UTIL_SEQ_RFU, TEMPLATE_Send_Notification_Task);
 800d414:	4a08      	ldr	r2, [pc, #32]	; (800d438 <TEMPLATE_APP_Init+0x28>)
 800d416:	2100      	movs	r1, #0
 800d418:	2010      	movs	r0, #16
 800d41a:	f000 fb8d 	bl	800db38 <UTIL_SEQ_RegTask>
  /* Create timer to handle the periodic proprietary temperature sensor data update. */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800d41e:	4b07      	ldr	r3, [pc, #28]	; (800d43c <TEMPLATE_APP_Init+0x2c>)
 800d420:	2201      	movs	r2, #1
 800d422:	4907      	ldr	r1, [pc, #28]	; (800d440 <TEMPLATE_APP_Init+0x30>)
 800d424:	2000      	movs	r0, #0
 800d426:	f7f3 fded 	bl	8001004 <HW_TS_Create>
    TEMPLATE_UpdateParameter_Timer_Callback);

  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800d42a:	4b06      	ldr	r3, [pc, #24]	; (800d444 <TEMPLATE_APP_Init+0x34>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800d430:	f000 f80a 	bl	800d448 <TEMPLATE_APP_context_Init>
  return;
 800d434:	bf00      	nop
}
 800d436:	bd80      	pop	{r7, pc}
 800d438:	0800d46d 	.word	0x0800d46d
 800d43c:	0800d3c5 	.word	0x0800d3c5
 800d440:	20000314 	.word	0x20000314
 800d444:	2000030c 	.word	0x2000030c

0800d448 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter.TimeStamp = 0;
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <TEMPLATE_APP_context_Init+0x20>)
 800d44e:	2200      	movs	r2, #0
 800d450:	805a      	strh	r2, [r3, #2]
	TEMPLATE_Server_App_Context.Parameter.Temperature = 0;
 800d452:	4b05      	ldr	r3, [pc, #20]	; (800d468 <TEMPLATE_APP_context_Init+0x20>)
 800d454:	2200      	movs	r2, #0
 800d456:	809a      	strh	r2, [r3, #4]
	TEMPLATE_Server_App_Context.UpdateParameterStep = PARAMETER_CHANGE_STEP;
 800d458:	4b03      	ldr	r3, [pc, #12]	; (800d468 <TEMPLATE_APP_context_Init+0x20>)
 800d45a:	220a      	movs	r2, #10
 800d45c:	80da      	strh	r2, [r3, #6]
}
 800d45e:	bf00      	nop
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	2000030c 	.word	0x2000030c

0800d46c <TEMPLATE_Send_Notification_Task>:

static void TEMPLATE_Send_Notification_Task(void)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
  uint8_t value[4] = {0};
 800d472:	2300      	movs	r3, #0
 800d474:	607b      	str	r3, [r7, #4]

  value[0] = (uint8_t) (0x00);
 800d476:	2300      	movs	r3, #0
 800d478:	713b      	strb	r3, [r7, #4]
  value[1] = (uint8_t) (0x00);
 800d47a:	2300      	movs	r3, #0
 800d47c:	717b      	strb	r3, [r7, #5]
  // value[0] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp & 0x00FF);
  // value[1] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.TimeStamp >> 8);
  // value[2] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature & 0x00FF);
  // value[3] = (uint8_t)(TEMPLATE_Server_App_Context.Parameter.Temperature >> 8);

  switch (state)
 800d47e:	4b15      	ldr	r3, [pc, #84]	; (800d4d4 <TEMPLATE_Send_Notification_Task+0x68>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d009      	beq.n	800d49a <TEMPLATE_Send_Notification_Task+0x2e>
 800d486:	2b02      	cmp	r3, #2
 800d488:	d00c      	beq.n	800d4a4 <TEMPLATE_Send_Notification_Task+0x38>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d000      	beq.n	800d490 <TEMPLATE_Send_Notification_Task+0x24>
    value[3] = (uint8_t) (0x80);
    //HAL_UART_Transmit(&huart1, (uint8_t*) "Send FALL\r\n", 11, 100);
    break;

  default:
    break;
 800d48e:	e00e      	b.n	800d4ae <TEMPLATE_Send_Notification_Task+0x42>
    value[2] = (uint8_t) (0x00);
 800d490:	2300      	movs	r3, #0
 800d492:	71bb      	strb	r3, [r7, #6]
    value[3] = (uint8_t) (0x11);
 800d494:	2311      	movs	r3, #17
 800d496:	71fb      	strb	r3, [r7, #7]
    break;
 800d498:	e009      	b.n	800d4ae <TEMPLATE_Send_Notification_Task+0x42>
    value[2] = (uint8_t) (0x00);
 800d49a:	2300      	movs	r3, #0
 800d49c:	71bb      	strb	r3, [r7, #6]
    value[3] = (uint8_t) (0x08);
 800d49e:	2308      	movs	r3, #8
 800d4a0:	71fb      	strb	r3, [r7, #7]
    break;
 800d4a2:	e004      	b.n	800d4ae <TEMPLATE_Send_Notification_Task+0x42>
    value[2] = (uint8_t) (0x00);
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	71bb      	strb	r3, [r7, #6]
    value[3] = (uint8_t) (0x80);
 800d4a8:	2380      	movs	r3, #128	; 0x80
 800d4aa:	71fb      	strb	r3, [r7, #7]
    break;
 800d4ac:	bf00      	nop
  }

  old_state = state;
 800d4ae:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <TEMPLATE_Send_Notification_Task+0x68>)
 800d4b0:	781a      	ldrb	r2, [r3, #0]
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <TEMPLATE_Send_Notification_Task+0x6c>)
 800d4b4:	701a      	strb	r2, [r3, #0]
  // else if (TEMPLATE_Server_App_Context.Parameter.Temperature < PARAMETER_VALUE_MIN_THRESHOLD)
  // {
  //   TEMPLATE_Server_App_Context.UpdateParameterStep = +PARAMETER_CHANGE_STEP;
  // }

  if(TEMPLATE_Server_App_Context.NotificationStatus)
 800d4b6:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <TEMPLATE_Send_Notification_Task+0x70>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <TEMPLATE_Send_Notification_Task+0x5e>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    TEMPLATE_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 800d4be:	1d3b      	adds	r3, r7, #4
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f7fe fe2a 	bl	800c11c <TEMPLATE_STM_App_Update_Char>
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
 800d4c8:	bf00      	nop
 800d4ca:	bf00      	nop
}
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	2000034d 	.word	0x2000034d
 800d4d8:	20000004 	.word	0x20000004
 800d4dc:	2000030c 	.word	0x2000030c

0800d4e0 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <LL_PWR_EnableBootC2+0x1c>)
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	4a04      	ldr	r2, [pc, #16]	; (800d4fc <LL_PWR_EnableBootC2+0x1c>)
 800d4ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4ee:	60d3      	str	r3, [r2, #12]
}
 800d4f0:	bf00      	nop
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	58000400 	.word	0x58000400

0800d500 <LL_AHB3_GRP1_EnableClock>:
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d50c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d50e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4313      	orrs	r3, r2
 800d516:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d51c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4013      	ands	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d524:	68fb      	ldr	r3, [r7, #12]
}
 800d526:	bf00      	nop
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f043 0201 	orr.w	r2, r3, #1
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	601a      	str	r2, [r3, #0]
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d572:	b480      	push	{r7}
 800d574:	b083      	sub	sp, #12
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	041b      	lsls	r3, r3, #16
 800d584:	43db      	mvns	r3, r3
 800d586:	401a      	ands	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	605a      	str	r2, [r3, #4]
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	041b      	lsls	r3, r3, #16
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	605a      	str	r2, [r3, #4]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	685a      	ldr	r2, [r3, #4]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	43db      	mvns	r3, r3
 800d5ce:	401a      	ands	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	605a      	str	r2, [r3, #4]
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	609a      	str	r2, [r3, #8]
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	041a      	lsls	r2, r3, #16
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	609a      	str	r2, [r3, #8]
}
 800d60e:	bf00      	nop
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68da      	ldr	r2, [r3, #12]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	4013      	ands	r3, r2
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d101      	bne.n	800d636 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d632:	2301      	movs	r3, #1
 800d634:	e000      	b.n	800d638 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	69da      	ldr	r2, [r3, #28]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	4013      	ands	r3, r2
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d101      	bne.n	800d660 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e000      	b.n	800d662 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
	...

0800d670 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d674:	2102      	movs	r1, #2
 800d676:	4819      	ldr	r0, [pc, #100]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d678:	f7ff ffe4 	bl	800d644 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d009      	beq.n	800d696 <HW_IPCC_Rx_Handler+0x26>
 800d682:	4b16      	ldr	r3, [pc, #88]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	43db      	mvns	r3, r3
 800d688:	f003 0302 	and.w	r3, r3, #2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d690:	f000 f8de 	bl	800d850 <HW_IPCC_SYS_EvtHandler>
 800d694:	e01f      	b.n	800d6d6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d696:	2101      	movs	r1, #1
 800d698:	4810      	ldr	r0, [pc, #64]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d69a:	f7ff ffd3 	bl	800d644 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d008      	beq.n	800d6b6 <HW_IPCC_Rx_Handler+0x46>
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d102      	bne.n	800d6b6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d6b0:	f000 f892 	bl	800d7d8 <HW_IPCC_BLE_EvtHandler>
 800d6b4:	e00f      	b.n	800d6d6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d6b6:	2108      	movs	r1, #8
 800d6b8:	4808      	ldr	r0, [pc, #32]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d6ba:	f7ff ffc3 	bl	800d644 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d009      	beq.n	800d6d8 <HW_IPCC_Rx_Handler+0x68>
 800d6c4:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <HW_IPCC_Rx_Handler+0x6c>)
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	43db      	mvns	r3, r3
 800d6ca:	f003 0308 	and.w	r3, r3, #8
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d6d2:	f000 f909 	bl	800d8e8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
}
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	58000c00 	.word	0x58000c00

0800d6e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d6e4:	2102      	movs	r1, #2
 800d6e6:	4822      	ldr	r0, [pc, #136]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d6e8:	f7ff ff97 	bl	800d61a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d109      	bne.n	800d706 <HW_IPCC_Tx_Handler+0x26>
 800d6f2:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	43db      	mvns	r3, r3
 800d6f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d700:	f000 f89a 	bl	800d838 <HW_IPCC_SYS_CmdEvtHandler>
 800d704:	e031      	b.n	800d76a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d706:	2102      	movs	r1, #2
 800d708:	4819      	ldr	r0, [pc, #100]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d70a:	f7ff ff86 	bl	800d61a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d109      	bne.n	800d728 <HW_IPCC_Tx_Handler+0x48>
 800d714:	4b16      	ldr	r3, [pc, #88]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	43db      	mvns	r3, r3
 800d71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d722:	f000 f889 	bl	800d838 <HW_IPCC_SYS_CmdEvtHandler>
 800d726:	e020      	b.n	800d76a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d728:	2108      	movs	r1, #8
 800d72a:	4811      	ldr	r0, [pc, #68]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d72c:	f7ff ff75 	bl	800d61a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d109      	bne.n	800d74a <HW_IPCC_Tx_Handler+0x6a>
 800d736:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	43db      	mvns	r3, r3
 800d73c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d002      	beq.n	800d74a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d744:	f000 f8b2 	bl	800d8ac <HW_IPCC_MM_FreeBufHandler>
 800d748:	e00f      	b.n	800d76a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d74a:	2120      	movs	r1, #32
 800d74c:	4808      	ldr	r0, [pc, #32]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d74e:	f7ff ff64 	bl	800d61a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d109      	bne.n	800d76c <HW_IPCC_Tx_Handler+0x8c>
 800d758:	4b05      	ldr	r3, [pc, #20]	; (800d770 <HW_IPCC_Tx_Handler+0x90>)
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	43db      	mvns	r3, r3
 800d75e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d766:	f000 f843 	bl	800d7f0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d76a:	bf00      	nop
 800d76c:	bf00      	nop
}
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	58000c00 	.word	0x58000c00

0800d774 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d778:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d77a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d77c:	f7ff feb0 	bl	800d4e0 <LL_PWR_EnableBootC2>

  return;
 800d780:	bf00      	nop
}
 800d782:	bd80      	pop	{r7, pc}

0800d784 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d788:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d78c:	f7ff feb8 	bl	800d500 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d790:	4806      	ldr	r0, [pc, #24]	; (800d7ac <HW_IPCC_Init+0x28>)
 800d792:	f7ff fede 	bl	800d552 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d796:	4805      	ldr	r0, [pc, #20]	; (800d7ac <HW_IPCC_Init+0x28>)
 800d798:	f7ff fecb 	bl	800d532 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d79c:	202c      	movs	r0, #44	; 0x2c
 800d79e:	f7f8 f8ee 	bl	800597e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d7a2:	202d      	movs	r0, #45	; 0x2d
 800d7a4:	f7f8 f8eb 	bl	800597e <HAL_NVIC_EnableIRQ>

  return;
 800d7a8:	bf00      	nop
}
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	58000c00 	.word	0x58000c00

0800d7b0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	4802      	ldr	r0, [pc, #8]	; (800d7c0 <HW_IPCC_BLE_Init+0x10>)
 800d7b8:	f7ff ff00 	bl	800d5bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d7bc:	bf00      	nop
}
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	58000c00 	.word	0x58000c00

0800d7c4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	4802      	ldr	r0, [pc, #8]	; (800d7d4 <HW_IPCC_BLE_SendCmd+0x10>)
 800d7cc:	f7ff ff16 	bl	800d5fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d7d0:	bf00      	nop
}
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	58000c00 	.word	0x58000c00

0800d7d8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d7dc:	f7ff f81c 	bl	800c818 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d7e0:	2101      	movs	r1, #1
 800d7e2:	4802      	ldr	r0, [pc, #8]	; (800d7ec <HW_IPCC_BLE_EvtHandler+0x14>)
 800d7e4:	f7ff fefc 	bl	800d5e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d7e8:	bf00      	nop
}
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	58000c00 	.word	0x58000c00

0800d7f0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d7f4:	2120      	movs	r1, #32
 800d7f6:	4803      	ldr	r0, [pc, #12]	; (800d804 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d7f8:	f7ff fece 	bl	800d598 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d7fc:	f7ff f828 	bl	800c850 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d800:	bf00      	nop
}
 800d802:	bd80      	pop	{r7, pc}
 800d804:	58000c00 	.word	0x58000c00

0800d808 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d80c:	2102      	movs	r1, #2
 800d80e:	4802      	ldr	r0, [pc, #8]	; (800d818 <HW_IPCC_SYS_Init+0x10>)
 800d810:	f7ff fed4 	bl	800d5bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d814:	bf00      	nop
}
 800d816:	bd80      	pop	{r7, pc}
 800d818:	58000c00 	.word	0x58000c00

0800d81c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d820:	2102      	movs	r1, #2
 800d822:	4804      	ldr	r0, [pc, #16]	; (800d834 <HW_IPCC_SYS_SendCmd+0x18>)
 800d824:	f7ff feea 	bl	800d5fc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d828:	2102      	movs	r1, #2
 800d82a:	4802      	ldr	r0, [pc, #8]	; (800d834 <HW_IPCC_SYS_SendCmd+0x18>)
 800d82c:	f7ff fea1 	bl	800d572 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d830:	bf00      	nop
}
 800d832:	bd80      	pop	{r7, pc}
 800d834:	58000c00 	.word	0x58000c00

0800d838 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d83c:	2102      	movs	r1, #2
 800d83e:	4803      	ldr	r0, [pc, #12]	; (800d84c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d840:	f7ff feaa 	bl	800d598 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d844:	f7ff f84c 	bl	800c8e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d848:	bf00      	nop
}
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	58000c00 	.word	0x58000c00

0800d850 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d854:	f7ff f854 	bl	800c900 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d858:	2102      	movs	r1, #2
 800d85a:	4802      	ldr	r0, [pc, #8]	; (800d864 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d85c:	f7ff fec0 	bl	800d5e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d860:	bf00      	nop
}
 800d862:	bd80      	pop	{r7, pc}
 800d864:	58000c00 	.word	0x58000c00

0800d868 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d870:	2108      	movs	r1, #8
 800d872:	480c      	ldr	r0, [pc, #48]	; (800d8a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d874:	f7ff fed1 	bl	800d61a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d007      	beq.n	800d88e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d87e:	4a0a      	ldr	r2, [pc, #40]	; (800d8a8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d884:	2108      	movs	r1, #8
 800d886:	4807      	ldr	r0, [pc, #28]	; (800d8a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d888:	f7ff fe73 	bl	800d572 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d88c:	e006      	b.n	800d89c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d892:	2108      	movs	r1, #8
 800d894:	4803      	ldr	r0, [pc, #12]	; (800d8a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d896:	f7ff feb1 	bl	800d5fc <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d89a:	bf00      	nop
}
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	58000c00 	.word	0x58000c00
 800d8a8:	200004a8 	.word	0x200004a8

0800d8ac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d8b0:	2108      	movs	r1, #8
 800d8b2:	4806      	ldr	r0, [pc, #24]	; (800d8cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d8b4:	f7ff fe70 	bl	800d598 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d8be:	2108      	movs	r1, #8
 800d8c0:	4802      	ldr	r0, [pc, #8]	; (800d8cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d8c2:	f7ff fe9b 	bl	800d5fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d8c6:	bf00      	nop
}
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	58000c00 	.word	0x58000c00
 800d8d0:	200004a8 	.word	0x200004a8

0800d8d4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d8d8:	2108      	movs	r1, #8
 800d8da:	4802      	ldr	r0, [pc, #8]	; (800d8e4 <HW_IPCC_TRACES_Init+0x10>)
 800d8dc:	f7ff fe6e 	bl	800d5bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d8e0:	bf00      	nop
}
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	58000c00 	.word	0x58000c00

0800d8e8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d8ec:	f7ff f8a6 	bl	800ca3c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d8f0:	2108      	movs	r1, #8
 800d8f2:	4802      	ldr	r0, [pc, #8]	; (800d8fc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d8f4:	f7ff fe74 	bl	800d5e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d8f8:	bf00      	nop
}
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	58000c00 	.word	0x58000c00

0800d900 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800d900:	b480      	push	{r7}
 800d902:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d904:	4b05      	ldr	r3, [pc, #20]	; (800d91c <UTIL_LPM_Init+0x1c>)
 800d906:	2200      	movs	r2, #0
 800d908:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d90a:	4b05      	ldr	r3, [pc, #20]	; (800d920 <UTIL_LPM_Init+0x20>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d910:	bf00      	nop
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	200004ac 	.word	0x200004ac
 800d920:	200004b0 	.word	0x200004b0

0800d924 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d924:	b480      	push	{r7}
 800d926:	b087      	sub	sp, #28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d930:	f3ef 8310 	mrs	r3, PRIMASK
 800d934:	613b      	str	r3, [r7, #16]
  return(result);
 800d936:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d93a:	b672      	cpsid	i
  
  switch(state)
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d009      	beq.n	800d956 <UTIL_LPM_SetOffMode+0x32>
 800d942:	2b01      	cmp	r3, #1
 800d944:	d000      	beq.n	800d948 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800d946:	e00e      	b.n	800d966 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d948:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <UTIL_LPM_SetOffMode+0x58>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4313      	orrs	r3, r2
 800d950:	4a0a      	ldr	r2, [pc, #40]	; (800d97c <UTIL_LPM_SetOffMode+0x58>)
 800d952:	6013      	str	r3, [r2, #0]
      break;
 800d954:	e007      	b.n	800d966 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	43da      	mvns	r2, r3
 800d95a:	4b08      	ldr	r3, [pc, #32]	; (800d97c <UTIL_LPM_SetOffMode+0x58>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4013      	ands	r3, r2
 800d960:	4a06      	ldr	r2, [pc, #24]	; (800d97c <UTIL_LPM_SetOffMode+0x58>)
 800d962:	6013      	str	r3, [r2, #0]
      break;
 800d964:	bf00      	nop
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	200004b0 	.word	0x200004b0

0800d980 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08c      	sub	sp, #48	; 0x30
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d988:	4b63      	ldr	r3, [pc, #396]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800d98e:	4b62      	ldr	r3, [pc, #392]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4013      	ands	r3, r2
 800d996:	4a60      	ldr	r2, [pc, #384]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800d998:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800d99a:	e082      	b.n	800daa2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d9a0:	e002      	b.n	800d9a8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800d9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800d9a8:	4a5c      	ldr	r2, [pc, #368]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9b0:	4b5b      	ldr	r3, [pc, #364]	; (800db20 <UTIL_SEQ_Run+0x1a0>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	401a      	ands	r2, r3
 800d9b6:	4b58      	ldr	r3, [pc, #352]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d0f0      	beq.n	800d9a2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800d9c0:	4a56      	ldr	r2, [pc, #344]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9c8:	4b55      	ldr	r3, [pc, #340]	; (800db20 <UTIL_SEQ_Run+0x1a0>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	401a      	ands	r2, r3
 800d9ce:	4b52      	ldr	r3, [pc, #328]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4013      	ands	r3, r2
 800d9d4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800d9d6:	4a51      	ldr	r2, [pc, #324]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	4413      	add	r3, r2
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d106      	bne.n	800d9f6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d9e8:	4a4c      	ldr	r2, [pc, #304]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f4:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800d9f6:	4a49      	ldr	r2, [pc, #292]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	4413      	add	r3, r2
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	4013      	ands	r3, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f000 f97d 	bl	800dd04 <bit_position>
 800da0a:	4602      	mov	r2, r0
 800da0c:	4b45      	ldr	r3, [pc, #276]	; (800db24 <UTIL_SEQ_Run+0x1a4>)
 800da0e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800da10:	4a42      	ldr	r2, [pc, #264]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	4413      	add	r3, r2
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	4a42      	ldr	r2, [pc, #264]	; (800db24 <UTIL_SEQ_Run+0x1a4>)
 800da1c:	6812      	ldr	r2, [r2, #0]
 800da1e:	2101      	movs	r1, #1
 800da20:	fa01 f202 	lsl.w	r2, r1, r2
 800da24:	43d2      	mvns	r2, r2
 800da26:	401a      	ands	r2, r3
 800da28:	493c      	ldr	r1, [pc, #240]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	00db      	lsls	r3, r3, #3
 800da2e:	440b      	add	r3, r1
 800da30:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da32:	f3ef 8310 	mrs	r3, PRIMASK
 800da36:	61bb      	str	r3, [r7, #24]
  return(result);
 800da38:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800da3c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800da3e:	4b39      	ldr	r3, [pc, #228]	; (800db24 <UTIL_SEQ_Run+0x1a4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2201      	movs	r2, #1
 800da44:	fa02 f303 	lsl.w	r3, r2, r3
 800da48:	43db      	mvns	r3, r3
 800da4a:	461a      	mov	r2, r3
 800da4c:	4b36      	ldr	r3, [pc, #216]	; (800db28 <UTIL_SEQ_Run+0x1a8>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4013      	ands	r3, r2
 800da52:	4a35      	ldr	r2, [pc, #212]	; (800db28 <UTIL_SEQ_Run+0x1a8>)
 800da54:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800da56:	2302      	movs	r3, #2
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da5a:	e014      	b.n	800da86 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	3b01      	subs	r3, #1
 800da60:	4a2e      	ldr	r2, [pc, #184]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800da62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800da66:	4b2f      	ldr	r3, [pc, #188]	; (800db24 <UTIL_SEQ_Run+0x1a4>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2101      	movs	r1, #1
 800da6c:	fa01 f303 	lsl.w	r3, r1, r3
 800da70:	43db      	mvns	r3, r3
 800da72:	4619      	mov	r1, r3
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	3b01      	subs	r3, #1
 800da78:	400a      	ands	r2, r1
 800da7a:	4928      	ldr	r1, [pc, #160]	; (800db1c <UTIL_SEQ_Run+0x19c>)
 800da7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800da80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da82:	3b01      	subs	r3, #1
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e7      	bne.n	800da5c <UTIL_SEQ_Run+0xdc>
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800da96:	4b23      	ldr	r3, [pc, #140]	; (800db24 <UTIL_SEQ_Run+0x1a4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a24      	ldr	r2, [pc, #144]	; (800db2c <UTIL_SEQ_Run+0x1ac>)
 800da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800daa2:	4b21      	ldr	r3, [pc, #132]	; (800db28 <UTIL_SEQ_Run+0x1a8>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <UTIL_SEQ_Run+0x1a0>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	401a      	ands	r2, r3
 800daac:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4013      	ands	r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d007      	beq.n	800dac6 <UTIL_SEQ_Run+0x146>
 800dab6:	4b1e      	ldr	r3, [pc, #120]	; (800db30 <UTIL_SEQ_Run+0x1b0>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b1e      	ldr	r3, [pc, #120]	; (800db34 <UTIL_SEQ_Run+0x1b4>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4013      	ands	r3, r2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f43f af6b 	beq.w	800d99c <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800dac6:	f000 f90f 	bl	800dce8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daca:	f3ef 8310 	mrs	r3, PRIMASK
 800dace:	613b      	str	r3, [r7, #16]
  return(result);
 800dad0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dad4:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800dad6:	4b14      	ldr	r3, [pc, #80]	; (800db28 <UTIL_SEQ_Run+0x1a8>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4b11      	ldr	r3, [pc, #68]	; (800db20 <UTIL_SEQ_Run+0x1a0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	401a      	ands	r2, r3
 800dae0:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4013      	ands	r3, r2
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d108      	bne.n	800dafc <UTIL_SEQ_Run+0x17c>
 800daea:	4b11      	ldr	r3, [pc, #68]	; (800db30 <UTIL_SEQ_Run+0x1b0>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	4b11      	ldr	r3, [pc, #68]	; (800db34 <UTIL_SEQ_Run+0x1b4>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4013      	ands	r3, r2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d101      	bne.n	800dafc <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800daf8:	f7f2 fd47 	bl	800058a <UTIL_SEQ_Idle>
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800db06:	f000 f8f6 	bl	800dcf6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800db0a:	4a03      	ldr	r2, [pc, #12]	; (800db18 <UTIL_SEQ_Run+0x198>)
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	6013      	str	r3, [r2, #0]

  return;
 800db10:	bf00      	nop
}
 800db12:	3730      	adds	r7, #48	; 0x30
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20000170 	.word	0x20000170
 800db1c:	20000544 	.word	0x20000544
 800db20:	2000016c 	.word	0x2000016c
 800db24:	200004c0 	.word	0x200004c0
 800db28:	200004b4 	.word	0x200004b4
 800db2c:	200004c4 	.word	0x200004c4
 800db30:	200004b8 	.word	0x200004b8
 800db34:	200004bc 	.word	0x200004bc

0800db38 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db44:	f3ef 8310 	mrs	r3, PRIMASK
 800db48:	617b      	str	r3, [r7, #20]
  return(result);
 800db4a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800db4e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f8d7 	bl	800dd04 <bit_position>
 800db56:	4601      	mov	r1, r0
 800db58:	4a06      	ldr	r2, [pc, #24]	; (800db74 <UTIL_SEQ_RegTask+0x3c>)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800db6a:	bf00      	nop
}
 800db6c:	3720      	adds	r7, #32
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200004c4 	.word	0x200004c4

0800db78 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db82:	f3ef 8310 	mrs	r3, PRIMASK
 800db86:	60fb      	str	r3, [r7, #12]
  return(result);
 800db88:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db8c:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800db8e:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <UTIL_SEQ_SetTask+0x4c>)
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4313      	orrs	r3, r2
 800db96:	4a0b      	ldr	r2, [pc, #44]	; (800dbc4 <UTIL_SEQ_SetTask+0x4c>)
 800db98:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800db9a:	4a0b      	ldr	r2, [pc, #44]	; (800dbc8 <UTIL_SEQ_SetTask+0x50>)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	431a      	orrs	r2, r3
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <UTIL_SEQ_SetTask+0x50>)
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dbb8:	bf00      	nop
}
 800dbba:	371c      	adds	r7, #28
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	200004b4 	.word	0x200004b4
 800dbc8:	20000544 	.word	0x20000544

0800dbcc <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800dbd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbda:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dbdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbde:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	43da      	mvns	r2, r3
 800dbe4:	4b07      	ldr	r3, [pc, #28]	; (800dc04 <UTIL_SEQ_PauseTask+0x38>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4013      	ands	r3, r2
 800dbea:	4a06      	ldr	r2, [pc, #24]	; (800dc04 <UTIL_SEQ_PauseTask+0x38>)
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dbf8:	bf00      	nop
}
 800dbfa:	371c      	adds	r7, #28
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	2000016c 	.word	0x2000016c

0800dc08 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc10:	f3ef 8310 	mrs	r3, PRIMASK
 800dc14:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc1a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800dc1c:	4b08      	ldr	r3, [pc, #32]	; (800dc40 <UTIL_SEQ_ResumeTask+0x38>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	4a06      	ldr	r2, [pc, #24]	; (800dc40 <UTIL_SEQ_ResumeTask+0x38>)
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc32:	bf00      	nop
}
 800dc34:	371c      	adds	r7, #28
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	2000016c 	.word	0x2000016c

0800dc44 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc50:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc56:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800dc58:	4b08      	ldr	r3, [pc, #32]	; (800dc7c <UTIL_SEQ_SetEvt+0x38>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	4a06      	ldr	r2, [pc, #24]	; (800dc7c <UTIL_SEQ_SetEvt+0x38>)
 800dc62:	6013      	str	r3, [r2, #0]
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc6e:	bf00      	nop
}
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	200004b8 	.word	0x200004b8

0800dc80 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dc88:	4b14      	ldr	r3, [pc, #80]	; (800dcdc <UTIL_SEQ_WaitEvt+0x5c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc92:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800dc94:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800dc9a:	4a11      	ldr	r2, [pc, #68]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800dca0:	e005      	b.n	800dcae <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800dca2:	4b0f      	ldr	r3, [pc, #60]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4619      	mov	r1, r3
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7f2 fc75 	bl	8000598 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800dcae:	4b0d      	ldr	r3, [pc, #52]	; (800dce4 <UTIL_SEQ_WaitEvt+0x64>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0f2      	beq.n	800dca2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800dcbc:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	43da      	mvns	r2, r3
 800dcc2:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <UTIL_SEQ_WaitEvt+0x64>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	4a06      	ldr	r2, [pc, #24]	; (800dce4 <UTIL_SEQ_WaitEvt+0x64>)
 800dcca:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800dccc:	4a04      	ldr	r2, [pc, #16]	; (800dce0 <UTIL_SEQ_WaitEvt+0x60>)
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	6013      	str	r3, [r2, #0]

  return;
 800dcd2:	bf00      	nop
}
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	200004c0 	.word	0x200004c0
 800dce0:	200004bc 	.word	0x200004bc
 800dce4:	200004b8 	.word	0x200004b8

0800dce8 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dcec:	bf00      	nop
}
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dcf6:	b480      	push	{r7}
 800dcf8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dcfa:	bf00      	nop
}
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	0c1b      	lsrs	r3, r3, #16
 800dd14:	041b      	lsls	r3, r3, #16
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d104      	bne.n	800dd24 <bit_position+0x20>
 800dd1a:	2310      	movs	r3, #16
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	041b      	lsls	r3, r3, #16
 800dd22:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d105      	bne.n	800dd3a <bit_position+0x36>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3308      	adds	r3, #8
 800dd32:	60fb      	str	r3, [r7, #12]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	021b      	lsls	r3, r3, #8
 800dd38:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d105      	bne.n	800dd50 <bit_position+0x4c>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3304      	adds	r3, #4
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	0f1b      	lsrs	r3, r3, #28
 800dd54:	4a07      	ldr	r2, [pc, #28]	; (800dd74 <bit_position+0x70>)
 800dd56:	5cd3      	ldrb	r3, [r2, r3]
 800dd58:	461a      	mov	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f1c3 031f 	rsb	r3, r3, #31
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	0800df44 	.word	0x0800df44

0800dd78 <__libc_init_array>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4e0d      	ldr	r6, [pc, #52]	; (800ddb0 <__libc_init_array+0x38>)
 800dd7c:	4c0d      	ldr	r4, [pc, #52]	; (800ddb4 <__libc_init_array+0x3c>)
 800dd7e:	1ba4      	subs	r4, r4, r6
 800dd80:	10a4      	asrs	r4, r4, #2
 800dd82:	2500      	movs	r5, #0
 800dd84:	42a5      	cmp	r5, r4
 800dd86:	d109      	bne.n	800dd9c <__libc_init_array+0x24>
 800dd88:	4e0b      	ldr	r6, [pc, #44]	; (800ddb8 <__libc_init_array+0x40>)
 800dd8a:	4c0c      	ldr	r4, [pc, #48]	; (800ddbc <__libc_init_array+0x44>)
 800dd8c:	f000 f82c 	bl	800dde8 <_init>
 800dd90:	1ba4      	subs	r4, r4, r6
 800dd92:	10a4      	asrs	r4, r4, #2
 800dd94:	2500      	movs	r5, #0
 800dd96:	42a5      	cmp	r5, r4
 800dd98:	d105      	bne.n	800dda6 <__libc_init_array+0x2e>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dda0:	4798      	blx	r3
 800dda2:	3501      	adds	r5, #1
 800dda4:	e7ee      	b.n	800dd84 <__libc_init_array+0xc>
 800dda6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ddaa:	4798      	blx	r3
 800ddac:	3501      	adds	r5, #1
 800ddae:	e7f2      	b.n	800dd96 <__libc_init_array+0x1e>
 800ddb0:	0800df5c 	.word	0x0800df5c
 800ddb4:	0800df5c 	.word	0x0800df5c
 800ddb8:	0800df5c 	.word	0x0800df5c
 800ddbc:	0800df60 	.word	0x0800df60

0800ddc0 <memcpy>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	1e43      	subs	r3, r0, #1
 800ddc4:	440a      	add	r2, r1
 800ddc6:	4291      	cmp	r1, r2
 800ddc8:	d100      	bne.n	800ddcc <memcpy+0xc>
 800ddca:	bd10      	pop	{r4, pc}
 800ddcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd4:	e7f7      	b.n	800ddc6 <memcpy+0x6>

0800ddd6 <memset>:
 800ddd6:	4402      	add	r2, r0
 800ddd8:	4603      	mov	r3, r0
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d100      	bne.n	800dde0 <memset+0xa>
 800ddde:	4770      	bx	lr
 800dde0:	f803 1b01 	strb.w	r1, [r3], #1
 800dde4:	e7f9      	b.n	800ddda <memset+0x4>
	...

0800dde8 <_init>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	bf00      	nop
 800ddec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	469e      	mov	lr, r3
 800ddf2:	4770      	bx	lr

0800ddf4 <_fini>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr
